(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw a.code = "MODULE_NOT_FOUND", a
                }
                var p = n[i] = {exports: {}};
                e[i][0].call(p.exports, function (r) {
                    var n = e[i][1][r];
                    return o(n || r)
                }, p, p.exports, r, e, n, t)
            }
            return n[i].exports
        }

        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o
    }

    return r
})()({
    1: [function (require, module, exports) {
        var asn1 = exports;

        asn1.bignum = require('bn.js');

        asn1.define = require('./asn1/api').define;
        asn1.base = require('./asn1/base');
        asn1.constants = require('./asn1/constants');
        asn1.decoders = require('./asn1/decoders');
        asn1.encoders = require('./asn1/encoders');

    }, {
        "./asn1/api": 2,
        "./asn1/base": 4,
        "./asn1/constants": 8,
        "./asn1/decoders": 10,
        "./asn1/encoders": 13,
        "bn.js": 20
    }],
    2: [function (require, module, exports) {
        var asn1 = require('../asn1');
        var inherits = require('inherits');

        var api = exports;

        api.define = function define(name, body) {
            return new Entity(name, body);
        };

        function Entity(name, body) {
            this.name = name;
            this.body = body;

            this.decoders = {};
            this.encoders = {};
        };

        Entity.prototype._createNamed = function createNamed(base) {
            var named;
            try {
                named = require('vm').runInThisContext(
                    '(function ' + this.name + '(entity) {\n' +
                    '  this._initNamed(entity);\n' +
                    '})'
                );
            } catch (e) {
                named = function (entity) {
                    this._initNamed(entity);
                };
            }
            inherits(named, base);
            named.prototype._initNamed = function initnamed(entity) {
                base.call(this, entity);
            };

            return new named(this);
        };

        Entity.prototype._getDecoder = function _getDecoder(enc) {
            enc = enc || 'der';
            // Lazily create decoder
            if (!this.decoders.hasOwnProperty(enc))
                this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
            return this.decoders[enc];
        };

        Entity.prototype.decode = function decode(data, enc, options) {
            return this._getDecoder(enc).decode(data, options);
        };

        Entity.prototype._getEncoder = function _getEncoder(enc) {
            enc = enc || 'der';
            // Lazily create encoder
            if (!this.encoders.hasOwnProperty(enc))
                this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
            return this.encoders[enc];
        };

        Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
            return this._getEncoder(enc).encode(data, reporter);
        };

    }, {"../asn1": 1, "inherits": 103, "vm": 160}],
    3: [function (require, module, exports) {
        var inherits = require('inherits');
        var Reporter = require('../base').Reporter;
        var Buffer = require('buffer').Buffer;

        function DecoderBuffer(base, options) {
            Reporter.call(this, options);
            if (!Buffer.isBuffer(base)) {
                this.error('Input not Buffer');
                return;
            }

            this.base = base;
            this.offset = 0;
            this.length = base.length;
        }

        inherits(DecoderBuffer, Reporter);
        exports.DecoderBuffer = DecoderBuffer;

        DecoderBuffer.prototype.save = function save() {
            return {offset: this.offset, reporter: Reporter.prototype.save.call(this)};
        };

        DecoderBuffer.prototype.restore = function restore(save) {
            // Return skipped data
            var res = new DecoderBuffer(this.base);
            res.offset = save.offset;
            res.length = this.offset;

            this.offset = save.offset;
            Reporter.prototype.restore.call(this, save.reporter);

            return res;
        };

        DecoderBuffer.prototype.isEmpty = function isEmpty() {
            return this.offset === this.length;
        };

        DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
            if (this.offset + 1 <= this.length)
                return this.base.readUInt8(this.offset++, true);
            else
                return this.error(fail || 'DecoderBuffer overrun');
        }

        DecoderBuffer.prototype.skip = function skip(bytes, fail) {
            if (!(this.offset + bytes <= this.length))
                return this.error(fail || 'DecoderBuffer overrun');

            var res = new DecoderBuffer(this.base);

            // Share reporter state
            res._reporterState = this._reporterState;

            res.offset = this.offset;
            res.length = this.offset + bytes;
            this.offset += bytes;
            return res;
        }

        DecoderBuffer.prototype.raw = function raw(save) {
            return this.base.slice(save ? save.offset : this.offset, this.length);
        }

        function EncoderBuffer(value, reporter) {
            if (Array.isArray(value)) {
                this.length = 0;
                this.value = value.map(function (item) {
                    if (!(item instanceof EncoderBuffer))
                        item = new EncoderBuffer(item, reporter);
                    this.length += item.length;
                    return item;
                }, this);
            } else if (typeof value === 'number') {
                if (!(0 <= value && value <= 0xff))
                    return reporter.error('non-byte EncoderBuffer value');
                this.value = value;
                this.length = 1;
            } else if (typeof value === 'string') {
                this.value = value;
                this.length = Buffer.byteLength(value);
            } else if (Buffer.isBuffer(value)) {
                this.value = value;
                this.length = value.length;
            } else {
                return reporter.error('Unsupported type: ' + typeof value);
            }
        }

        exports.EncoderBuffer = EncoderBuffer;

        EncoderBuffer.prototype.join = function join(out, offset) {
            if (!out)
                out = new Buffer(this.length);
            if (!offset)
                offset = 0;

            if (this.length === 0)
                return out;

            if (Array.isArray(this.value)) {
                this.value.forEach(function (item) {
                    item.join(out, offset);
                    offset += item.length;
                });
            } else {
                if (typeof this.value === 'number')
                    out[offset] = this.value;
                else if (typeof this.value === 'string')
                    out.write(this.value, offset);
                else if (Buffer.isBuffer(this.value))
                    this.value.copy(out, offset);
                offset += this.length;
            }

            return out;
        };

    }, {"../base": 4, "buffer": 51, "inherits": 103}],
    4: [function (require, module, exports) {
        var base = exports;

        base.Reporter = require('./reporter').Reporter;
        base.DecoderBuffer = require('./buffer').DecoderBuffer;
        base.EncoderBuffer = require('./buffer').EncoderBuffer;
        base.Node = require('./node');

    }, {"./buffer": 3, "./node": 5, "./reporter": 6}],
    5: [function (require, module, exports) {
        var Reporter = require('../base').Reporter;
        var EncoderBuffer = require('../base').EncoderBuffer;
        var DecoderBuffer = require('../base').DecoderBuffer;
        var assert = require('minimalistic-assert');

// Supported tags
        var tags = [
            'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
            'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
            'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
            'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
        ];

// Public methods list
        var methods = [
            'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
            'any', 'contains'
        ].concat(tags);

// Overrided methods list
        var overrided = [
            '_peekTag', '_decodeTag', '_use',
            '_decodeStr', '_decodeObjid', '_decodeTime',
            '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

            '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
            '_encodeNull', '_encodeInt', '_encodeBool'
        ];

        function Node(enc, parent) {
            var state = {};
            this._baseState = state;

            state.enc = enc;

            state.parent = parent || null;
            state.children = null;

            // State
            state.tag = null;
            state.args = null;
            state.reverseArgs = null;
            state.choice = null;
            state.optional = false;
            state.any = false;
            state.obj = false;
            state.use = null;
            state.useDecoder = null;
            state.key = null;
            state['default'] = null;
            state.explicit = null;
            state.implicit = null;
            state.contains = null;

            // Should create new instance on each method
            if (!state.parent) {
                state.children = [];
                this._wrap();
            }
        }

        module.exports = Node;

        var stateProps = [
            'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
            'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
            'implicit', 'contains'
        ];

        Node.prototype.clone = function clone() {
            var state = this._baseState;
            var cstate = {};
            stateProps.forEach(function (prop) {
                cstate[prop] = state[prop];
            });
            var res = new this.constructor(cstate.parent);
            res._baseState = cstate;
            return res;
        };

        Node.prototype._wrap = function wrap() {
            var state = this._baseState;
            methods.forEach(function (method) {
                this[method] = function _wrappedMethod() {
                    var clone = new this.constructor(this);
                    state.children.push(clone);
                    return clone[method].apply(clone, arguments);
                };
            }, this);
        };

        Node.prototype._init = function init(body) {
            var state = this._baseState;

            assert(state.parent === null);
            body.call(this);

            // Filter children
            state.children = state.children.filter(function (child) {
                return child._baseState.parent === this;
            }, this);
            assert.equal(state.children.length, 1, 'Root node can have only one child');
        };

        Node.prototype._useArgs = function useArgs(args) {
            var state = this._baseState;

            // Filter children and args
            var children = args.filter(function (arg) {
                return arg instanceof this.constructor;
            }, this);
            args = args.filter(function (arg) {
                return !(arg instanceof this.constructor);
            }, this);

            if (children.length !== 0) {
                assert(state.children === null);
                state.children = children;

                // Replace parent to maintain backward link
                children.forEach(function (child) {
                    child._baseState.parent = this;
                }, this);
            }
            if (args.length !== 0) {
                assert(state.args === null);
                state.args = args;
                state.reverseArgs = args.map(function (arg) {
                    if (typeof arg !== 'object' || arg.constructor !== Object)
                        return arg;

                    var res = {};
                    Object.keys(arg).forEach(function (key) {
                        if (key == (key | 0))
                            key |= 0;
                        var value = arg[key];
                        res[value] = key;
                    });
                    return res;
                });
            }
        };

//
// Overrided methods
//

        overrided.forEach(function (method) {
            Node.prototype[method] = function _overrided() {
                var state = this._baseState;
                throw new Error(method + ' not implemented for encoding: ' + state.enc);
            };
        });

//
// Public methods
//

        tags.forEach(function (tag) {
            Node.prototype[tag] = function _tagMethod() {
                var state = this._baseState;
                var args = Array.prototype.slice.call(arguments);

                assert(state.tag === null);
                state.tag = tag;

                this._useArgs(args);

                return this;
            };
        });

        Node.prototype.use = function use(item) {
            assert(item);
            var state = this._baseState;

            assert(state.use === null);
            state.use = item;

            return this;
        };

        Node.prototype.optional = function optional() {
            var state = this._baseState;

            state.optional = true;

            return this;
        };

        Node.prototype.def = function def(val) {
            var state = this._baseState;

            assert(state['default'] === null);
            state['default'] = val;
            state.optional = true;

            return this;
        };

        Node.prototype.explicit = function explicit(num) {
            var state = this._baseState;

            assert(state.explicit === null && state.implicit === null);
            state.explicit = num;

            return this;
        };

        Node.prototype.implicit = function implicit(num) {
            var state = this._baseState;

            assert(state.explicit === null && state.implicit === null);
            state.implicit = num;

            return this;
        };

        Node.prototype.obj = function obj() {
            var state = this._baseState;
            var args = Array.prototype.slice.call(arguments);

            state.obj = true;

            if (args.length !== 0)
                this._useArgs(args);

            return this;
        };

        Node.prototype.key = function key(newKey) {
            var state = this._baseState;

            assert(state.key === null);
            state.key = newKey;

            return this;
        };

        Node.prototype.any = function any() {
            var state = this._baseState;

            state.any = true;

            return this;
        };

        Node.prototype.choice = function choice(obj) {
            var state = this._baseState;

            assert(state.choice === null);
            state.choice = obj;
            this._useArgs(Object.keys(obj).map(function (key) {
                return obj[key];
            }));

            return this;
        };

        Node.prototype.contains = function contains(item) {
            var state = this._baseState;

            assert(state.use === null);
            state.contains = item;

            return this;
        };

//
// Decoding
//

        Node.prototype._decode = function decode(input, options) {
            var state = this._baseState;

            // Decode root node
            if (state.parent === null)
                return input.wrapResult(state.children[0]._decode(input, options));

            var result = state['default'];
            var present = true;

            var prevKey = null;
            if (state.key !== null)
                prevKey = input.enterKey(state.key);

            // Check if tag is there
            if (state.optional) {
                var tag = null;
                if (state.explicit !== null)
                    tag = state.explicit;
                else if (state.implicit !== null)
                    tag = state.implicit;
                else if (state.tag !== null)
                    tag = state.tag;

                if (tag === null && !state.any) {
                    // Trial and Error
                    var save = input.save();
                    try {
                        if (state.choice === null)
                            this._decodeGeneric(state.tag, input, options);
                        else
                            this._decodeChoice(input, options);
                        present = true;
                    } catch (e) {
                        present = false;
                    }
                    input.restore(save);
                } else {
                    present = this._peekTag(input, tag, state.any);

                    if (input.isError(present))
                        return present;
                }
            }

            // Push object on stack
            var prevObj;
            if (state.obj && present)
                prevObj = input.enterObject();

            if (present) {
                // Unwrap explicit values
                if (state.explicit !== null) {
                    var explicit = this._decodeTag(input, state.explicit);
                    if (input.isError(explicit))
                        return explicit;
                    input = explicit;
                }

                var start = input.offset;

                // Unwrap implicit and normal values
                if (state.use === null && state.choice === null) {
                    if (state.any)
                        var save = input.save();
                    var body = this._decodeTag(
                        input,
                        state.implicit !== null ? state.implicit : state.tag,
                        state.any
                    );
                    if (input.isError(body))
                        return body;

                    if (state.any)
                        result = input.raw(save);
                    else
                        input = body;
                }

                if (options && options.track && state.tag !== null)
                    options.track(input.path(), start, input.length, 'tagged');

                if (options && options.track && state.tag !== null)
                    options.track(input.path(), input.offset, input.length, 'content');

                // Select proper method for tag
                if (state.any)
                    result = result;
                else if (state.choice === null)
                    result = this._decodeGeneric(state.tag, input, options);
                else
                    result = this._decodeChoice(input, options);

                if (input.isError(result))
                    return result;

                // Decode children
                if (!state.any && state.choice === null && state.children !== null) {
                    state.children.forEach(function decodeChildren(child) {
                        // NOTE: We are ignoring errors here, to let parser continue with other
                        // parts of encoded data
                        child._decode(input, options);
                    });
                }

                // Decode contained/encoded by schema, only in bit or octet strings
                if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
                    var data = new DecoderBuffer(result);
                    result = this._getUse(state.contains, input._reporterState.obj)
                        ._decode(data, options);
                }
            }

            // Pop object
            if (state.obj && present)
                result = input.leaveObject(prevObj);

            // Set key
            if (state.key !== null && (result !== null || present === true))
                input.leaveKey(prevKey, state.key, result);
            else if (prevKey !== null)
                input.exitKey(prevKey);

            return result;
        };

        Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
            var state = this._baseState;

            if (tag === 'seq' || tag === 'set')
                return null;
            if (tag === 'seqof' || tag === 'setof')
                return this._decodeList(input, tag, state.args[0], options);
            else if (/str$/.test(tag))
                return this._decodeStr(input, tag, options);
            else if (tag === 'objid' && state.args)
                return this._decodeObjid(input, state.args[0], state.args[1], options);
            else if (tag === 'objid')
                return this._decodeObjid(input, null, null, options);
            else if (tag === 'gentime' || tag === 'utctime')
                return this._decodeTime(input, tag, options);
            else if (tag === 'null_')
                return this._decodeNull(input, options);
            else if (tag === 'bool')
                return this._decodeBool(input, options);
            else if (tag === 'objDesc')
                return this._decodeStr(input, tag, options);
            else if (tag === 'int' || tag === 'enum')
                return this._decodeInt(input, state.args && state.args[0], options);

            if (state.use !== null) {
                return this._getUse(state.use, input._reporterState.obj)
                    ._decode(input, options);
            } else {
                return input.error('unknown tag: ' + tag);
            }
        };

        Node.prototype._getUse = function _getUse(entity, obj) {

            var state = this._baseState;
            // Create altered use decoder if implicit is set
            state.useDecoder = this._use(entity, obj);
            assert(state.useDecoder._baseState.parent === null);
            state.useDecoder = state.useDecoder._baseState.children[0];
            if (state.implicit !== state.useDecoder._baseState.implicit) {
                state.useDecoder = state.useDecoder.clone();
                state.useDecoder._baseState.implicit = state.implicit;
            }
            return state.useDecoder;
        };

        Node.prototype._decodeChoice = function decodeChoice(input, options) {
            var state = this._baseState;
            var result = null;
            var match = false;

            Object.keys(state.choice).some(function (key) {
                var save = input.save();
                var node = state.choice[key];
                try {
                    var value = node._decode(input, options);
                    if (input.isError(value))
                        return false;

                    result = {type: key, value: value};
                    match = true;
                } catch (e) {
                    input.restore(save);
                    return false;
                }
                return true;
            }, this);

            if (!match)
                return input.error('Choice not matched');

            return result;
        };

//
// Encoding
//

        Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
            return new EncoderBuffer(data, this.reporter);
        };

        Node.prototype._encode = function encode(data, reporter, parent) {
            var state = this._baseState;
            if (state['default'] !== null && state['default'] === data)
                return;

            var result = this._encodeValue(data, reporter, parent);
            if (result === undefined)
                return;

            if (this._skipDefault(result, reporter, parent))
                return;

            return result;
        };

        Node.prototype._encodeValue = function encode(data, reporter, parent) {
            var state = this._baseState;

            // Decode root node
            if (state.parent === null)
                return state.children[0]._encode(data, reporter || new Reporter());

            var result = null;

            // Set reporter to share it with a child class
            this.reporter = reporter;

            // Check if data is there
            if (state.optional && data === undefined) {
                if (state['default'] !== null)
                    data = state['default']
                else
                    return;
            }

            // Encode children first
            var content = null;
            var primitive = false;
            if (state.any) {
                // Anything that was given is translated to buffer
                result = this._createEncoderBuffer(data);
            } else if (state.choice) {
                result = this._encodeChoice(data, reporter);
            } else if (state.contains) {
                content = this._getUse(state.contains, parent)._encode(data, reporter);
                primitive = true;
            } else if (state.children) {
                content = state.children.map(function (child) {
                    if (child._baseState.tag === 'null_')
                        return child._encode(null, reporter, data);

                    if (child._baseState.key === null)
                        return reporter.error('Child should have a key');
                    var prevKey = reporter.enterKey(child._baseState.key);

                    if (typeof data !== 'object')
                        return reporter.error('Child expected, but input is not object');

                    var res = child._encode(data[child._baseState.key], reporter, data);
                    reporter.leaveKey(prevKey);

                    return res;
                }, this).filter(function (child) {
                    return child;
                });
                content = this._createEncoderBuffer(content);
            } else {
                if (state.tag === 'seqof' || state.tag === 'setof') {
                    // TODO(indutny): this should be thrown on DSL level
                    if (!(state.args && state.args.length === 1))
                        return reporter.error('Too many args for : ' + state.tag);

                    if (!Array.isArray(data))
                        return reporter.error('seqof/setof, but data is not Array');

                    var child = this.clone();
                    child._baseState.implicit = null;
                    content = this._createEncoderBuffer(data.map(function (item) {
                        var state = this._baseState;

                        return this._getUse(state.args[0], data)._encode(item, reporter);
                    }, child));
                } else if (state.use !== null) {
                    result = this._getUse(state.use, parent)._encode(data, reporter);
                } else {
                    content = this._encodePrimitive(state.tag, data);
                    primitive = true;
                }
            }

            // Encode data itself
            var result;
            if (!state.any && state.choice === null) {
                var tag = state.implicit !== null ? state.implicit : state.tag;
                var cls = state.implicit === null ? 'universal' : 'context';

                if (tag === null) {
                    if (state.use === null)
                        reporter.error('Tag could be omitted only for .use()');
                } else {
                    if (state.use === null)
                        result = this._encodeComposite(tag, primitive, cls, content);
                }
            }

            // Wrap in explicit
            if (state.explicit !== null)
                result = this._encodeComposite(state.explicit, false, 'context', result);

            return result;
        };

        Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
            var state = this._baseState;

            var node = state.choice[data.type];
            if (!node) {
                assert(
                    false,
                    data.type + ' not found in ' +
                    JSON.stringify(Object.keys(state.choice)));
            }
            return node._encode(data.value, reporter);
        };

        Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
            var state = this._baseState;

            if (/str$/.test(tag))
                return this._encodeStr(data, tag);
            else if (tag === 'objid' && state.args)
                return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
            else if (tag === 'objid')
                return this._encodeObjid(data, null, null);
            else if (tag === 'gentime' || tag === 'utctime')
                return this._encodeTime(data, tag);
            else if (tag === 'null_')
                return this._encodeNull();
            else if (tag === 'int' || tag === 'enum')
                return this._encodeInt(data, state.args && state.reverseArgs[0]);
            else if (tag === 'bool')
                return this._encodeBool(data);
            else if (tag === 'objDesc')
                return this._encodeStr(data, tag);
            else
                throw new Error('Unsupported tag: ' + tag);
        };

        Node.prototype._isNumstr = function isNumstr(str) {
            return /^[0-9 ]*$/.test(str);
        };

        Node.prototype._isPrintstr = function isPrintstr(str) {
            return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
        };

    }, {"../base": 4, "minimalistic-assert": 108}],
    6: [function (require, module, exports) {
        var inherits = require('inherits');

        function Reporter(options) {
            this._reporterState = {
                obj: null,
                path: [],
                options: options || {},
                errors: []
            };
        }

        exports.Reporter = Reporter;

        Reporter.prototype.isError = function isError(obj) {
            return obj instanceof ReporterError;
        };

        Reporter.prototype.save = function save() {
            var state = this._reporterState;

            return {obj: state.obj, pathLen: state.path.length};
        };

        Reporter.prototype.restore = function restore(data) {
            var state = this._reporterState;

            state.obj = data.obj;
            state.path = state.path.slice(0, data.pathLen);
        };

        Reporter.prototype.enterKey = function enterKey(key) {
            return this._reporterState.path.push(key);
        };

        Reporter.prototype.exitKey = function exitKey(index) {
            var state = this._reporterState;

            state.path = state.path.slice(0, index - 1);
        };

        Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
            var state = this._reporterState;

            this.exitKey(index);
            if (state.obj !== null)
                state.obj[key] = value;
        };

        Reporter.prototype.path = function path() {
            return this._reporterState.path.join('/');
        };

        Reporter.prototype.enterObject = function enterObject() {
            var state = this._reporterState;

            var prev = state.obj;
            state.obj = {};
            return prev;
        };

        Reporter.prototype.leaveObject = function leaveObject(prev) {
            var state = this._reporterState;

            var now = state.obj;
            state.obj = prev;
            return now;
        };

        Reporter.prototype.error = function error(msg) {
            var err;
            var state = this._reporterState;

            var inherited = msg instanceof ReporterError;
            if (inherited) {
                err = msg;
            } else {
                err = new ReporterError(state.path.map(function (elem) {
                    return '[' + JSON.stringify(elem) + ']';
                }).join(''), msg.message || msg, msg.stack);
            }

            if (!state.options.partial)
                throw err;

            if (!inherited)
                state.errors.push(err);

            return err;
        };

        Reporter.prototype.wrapResult = function wrapResult(result) {
            var state = this._reporterState;
            if (!state.options.partial)
                return result;

            return {
                result: this.isError(result) ? null : result,
                errors: state.errors
            };
        };

        function ReporterError(path, msg) {
            this.path = path;
            this.rethrow(msg);
        };
        inherits(ReporterError, Error);

        ReporterError.prototype.rethrow = function rethrow(msg) {
            this.message = msg + ' at: ' + (this.path || '(shallow)');
            if (Error.captureStackTrace)
                Error.captureStackTrace(this, ReporterError);

            if (!this.stack) {
                try {
                    // IE only adds stack when thrown
                    throw new Error(this.message);
                } catch (e) {
                    this.stack = e.stack;
                }
            }
            return this;
        };

    }, {"inherits": 103}],
    7: [function (require, module, exports) {
        var constants = require('../constants');

        exports.tagClass = {
            0: 'universal',
            1: 'application',
            2: 'context',
            3: 'private'
        };
        exports.tagClassByName = constants._reverse(exports.tagClass);

        exports.tag = {
            0x00: 'end',
            0x01: 'bool',
            0x02: 'int',
            0x03: 'bitstr',
            0x04: 'octstr',
            0x05: 'null_',
            0x06: 'objid',
            0x07: 'objDesc',
            0x08: 'external',
            0x09: 'real',
            0x0a: 'enum',
            0x0b: 'embed',
            0x0c: 'utf8str',
            0x0d: 'relativeOid',
            0x10: 'seq',
            0x11: 'set',
            0x12: 'numstr',
            0x13: 'printstr',
            0x14: 't61str',
            0x15: 'videostr',
            0x16: 'ia5str',
            0x17: 'utctime',
            0x18: 'gentime',
            0x19: 'graphstr',
            0x1a: 'iso646str',
            0x1b: 'genstr',
            0x1c: 'unistr',
            0x1d: 'charstr',
            0x1e: 'bmpstr'
        };
        exports.tagByName = constants._reverse(exports.tag);

    }, {"../constants": 8}],
    8: [function (require, module, exports) {
        var constants = exports;

// Helper
        constants._reverse = function reverse(map) {
            var res = {};

            Object.keys(map).forEach(function (key) {
                // Convert key to integer if it is stringified
                if ((key | 0) == key)
                    key = key | 0;

                var value = map[key];
                res[value] = key;
            });

            return res;
        };

        constants.der = require('./der');

    }, {"./der": 7}],
    9: [function (require, module, exports) {
        var inherits = require('inherits');

        var asn1 = require('../../asn1');
        var base = asn1.base;
        var bignum = asn1.bignum;

// Import DER constants
        var der = asn1.constants.der;

        function DERDecoder(entity) {
            this.enc = 'der';
            this.name = entity.name;
            this.entity = entity;

            // Construct base tree
            this.tree = new DERNode();
            this.tree._init(entity.body);
        };
        module.exports = DERDecoder;

        DERDecoder.prototype.decode = function decode(data, options) {
            if (!(data instanceof base.DecoderBuffer))
                data = new base.DecoderBuffer(data, options);

            return this.tree._decode(data, options);
        };

// Tree methods

        function DERNode(parent) {
            base.Node.call(this, 'der', parent);
        }

        inherits(DERNode, base.Node);

        DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
            if (buffer.isEmpty())
                return false;

            var state = buffer.save();
            var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
            if (buffer.isError(decodedTag))
                return decodedTag;

            buffer.restore(state);

            return decodedTag.tag === tag || decodedTag.tagStr === tag ||
                (decodedTag.tagStr + 'of') === tag || any;
        };

        DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
            var decodedTag = derDecodeTag(buffer,
                'Failed to decode tag of "' + tag + '"');
            if (buffer.isError(decodedTag))
                return decodedTag;

            var len = derDecodeLen(buffer,
                decodedTag.primitive,
                'Failed to get length of "' + tag + '"');

            // Failure
            if (buffer.isError(len))
                return len;

            if (!any &&
                decodedTag.tag !== tag &&
                decodedTag.tagStr !== tag &&
                decodedTag.tagStr + 'of' !== tag) {
                return buffer.error('Failed to match tag: "' + tag + '"');
            }

            if (decodedTag.primitive || len !== null)
                return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

            // Indefinite length... find END tag
            var state = buffer.save();
            var res = this._skipUntilEnd(
                buffer,
                'Failed to skip indefinite length body: "' + this.tag + '"');
            if (buffer.isError(res))
                return res;

            len = buffer.offset - state.offset;
            buffer.restore(state);
            return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
        };

        DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
            while (true) {
                var tag = derDecodeTag(buffer, fail);
                if (buffer.isError(tag))
                    return tag;
                var len = derDecodeLen(buffer, tag.primitive, fail);
                if (buffer.isError(len))
                    return len;

                var res;
                if (tag.primitive || len !== null)
                    res = buffer.skip(len)
                else
                    res = this._skipUntilEnd(buffer, fail);

                // Failure
                if (buffer.isError(res))
                    return res;

                if (tag.tagStr === 'end')
                    break;
            }
        };

        DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                            options) {
            var result = [];
            while (!buffer.isEmpty()) {
                var possibleEnd = this._peekTag(buffer, 'end');
                if (buffer.isError(possibleEnd))
                    return possibleEnd;

                var res = decoder.decode(buffer, 'der', options);
                if (buffer.isError(res) && possibleEnd)
                    break;
                result.push(res);
            }
            return result;
        };

        DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
            if (tag === 'bitstr') {
                var unused = buffer.readUInt8();
                if (buffer.isError(unused))
                    return unused;
                return {unused: unused, data: buffer.raw()};
            } else if (tag === 'bmpstr') {
                var raw = buffer.raw();
                if (raw.length % 2 === 1)
                    return buffer.error('Decoding of string type: bmpstr length mismatch');

                var str = '';
                for (var i = 0; i < raw.length / 2; i++) {
                    str += String.fromCharCode(raw.readUInt16BE(i * 2));
                }
                return str;
            } else if (tag === 'numstr') {
                var numstr = buffer.raw().toString('ascii');
                if (!this._isNumstr(numstr)) {
                    return buffer.error('Decoding of string type: ' +
                        'numstr unsupported characters');
                }
                return numstr;
            } else if (tag === 'octstr') {
                return buffer.raw();
            } else if (tag === 'objDesc') {
                return buffer.raw();
            } else if (tag === 'printstr') {
                var printstr = buffer.raw().toString('ascii');
                if (!this._isPrintstr(printstr)) {
                    return buffer.error('Decoding of string type: ' +
                        'printstr unsupported characters');
                }
                return printstr;
            } else if (/str$/.test(tag)) {
                return buffer.raw().toString();
            } else {
                return buffer.error('Decoding of string type: ' + tag + ' unsupported');
            }
        };

        DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
            var result;
            var identifiers = [];
            var ident = 0;
            while (!buffer.isEmpty()) {
                var subident = buffer.readUInt8();
                ident <<= 7;
                ident |= subident & 0x7f;
                if ((subident & 0x80) === 0) {
                    identifiers.push(ident);
                    ident = 0;
                }
            }
            if (subident & 0x80)
                identifiers.push(ident);

            var first = (identifiers[0] / 40) | 0;
            var second = identifiers[0] % 40;

            if (relative)
                result = identifiers;
            else
                result = [first, second].concat(identifiers.slice(1));

            if (values) {
                var tmp = values[result.join(' ')];
                if (tmp === undefined)
                    tmp = values[result.join('.')];
                if (tmp !== undefined)
                    result = tmp;
            }

            return result;
        };

        DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
            var str = buffer.raw().toString();
            if (tag === 'gentime') {
                var year = str.slice(0, 4) | 0;
                var mon = str.slice(4, 6) | 0;
                var day = str.slice(6, 8) | 0;
                var hour = str.slice(8, 10) | 0;
                var min = str.slice(10, 12) | 0;
                var sec = str.slice(12, 14) | 0;
            } else if (tag === 'utctime') {
                var year = str.slice(0, 2) | 0;
                var mon = str.slice(2, 4) | 0;
                var day = str.slice(4, 6) | 0;
                var hour = str.slice(6, 8) | 0;
                var min = str.slice(8, 10) | 0;
                var sec = str.slice(10, 12) | 0;
                if (year < 70)
                    year = 2000 + year;
                else
                    year = 1900 + year;
            } else {
                return buffer.error('Decoding ' + tag + ' time is not supported yet');
            }

            return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
        };

        DERNode.prototype._decodeNull = function decodeNull(buffer) {
            return null;
        };

        DERNode.prototype._decodeBool = function decodeBool(buffer) {
            var res = buffer.readUInt8();
            if (buffer.isError(res))
                return res;
            else
                return res !== 0;
        };

        DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
            // Bigint, return as it is (assume big endian)
            var raw = buffer.raw();
            var res = new bignum(raw);

            if (values)
                res = values[res.toString(10)] || res;

            return res;
        };

        DERNode.prototype._use = function use(entity, obj) {
            if (typeof entity === 'function')
                entity = entity(obj);
            return entity._getDecoder('der').tree;
        };

// Utility methods

        function derDecodeTag(buf, fail) {
            var tag = buf.readUInt8(fail);
            if (buf.isError(tag))
                return tag;

            var cls = der.tagClass[tag >> 6];
            var primitive = (tag & 0x20) === 0;

            // Multi-octet tag - load
            if ((tag & 0x1f) === 0x1f) {
                var oct = tag;
                tag = 0;
                while ((oct & 0x80) === 0x80) {
                    oct = buf.readUInt8(fail);
                    if (buf.isError(oct))
                        return oct;

                    tag <<= 7;
                    tag |= oct & 0x7f;
                }
            } else {
                tag &= 0x1f;
            }
            var tagStr = der.tag[tag];

            return {
                cls: cls,
                primitive: primitive,
                tag: tag,
                tagStr: tagStr
            };
        }

        function derDecodeLen(buf, primitive, fail) {
            var len = buf.readUInt8(fail);
            if (buf.isError(len))
                return len;

            // Indefinite form
            if (!primitive && len === 0x80)
                return null;

            // Definite form
            if ((len & 0x80) === 0) {
                // Short form
                return len;
            }

            // Long form
            var num = len & 0x7f;
            if (num > 4)
                return buf.error('length octect is too long');

            len = 0;
            for (var i = 0; i < num; i++) {
                len <<= 8;
                var j = buf.readUInt8(fail);
                if (buf.isError(j))
                    return j;
                len |= j;
            }

            return len;
        }

    }, {"../../asn1": 1, "inherits": 103}],
    10: [function (require, module, exports) {
        var decoders = exports;

        decoders.der = require('./der');
        decoders.pem = require('./pem');

    }, {"./der": 9, "./pem": 11}],
    11: [function (require, module, exports) {
        var inherits = require('inherits');
        var Buffer = require('buffer').Buffer;

        var DERDecoder = require('./der');

        function PEMDecoder(entity) {
            DERDecoder.call(this, entity);
            this.enc = 'pem';
        };
        inherits(PEMDecoder, DERDecoder);
        module.exports = PEMDecoder;

        PEMDecoder.prototype.decode = function decode(data, options) {
            var lines = data.toString().split(/[\r\n]+/g);

            var label = options.label.toUpperCase();

            var re = /^-----(BEGIN|END) ([^-]+)-----$/;
            var start = -1;
            var end = -1;
            for (var i = 0; i < lines.length; i++) {
                var match = lines[i].match(re);
                if (match === null)
                    continue;

                if (match[2] !== label)
                    continue;

                if (start === -1) {
                    if (match[1] !== 'BEGIN')
                        break;
                    start = i;
                } else {
                    if (match[1] !== 'END')
                        break;
                    end = i;
                    break;
                }
            }
            if (start === -1 || end === -1)
                throw new Error('PEM section not found for: ' + label);

            var base64 = lines.slice(start + 1, end).join('');
            // Remove excessive symbols
            base64.replace(/[^a-z0-9\+\/=]+/gi, '');

            var input = new Buffer(base64, 'base64');
            return DERDecoder.prototype.decode.call(this, input, options);
        };

    }, {"./der": 9, "buffer": 51, "inherits": 103}],
    12: [function (require, module, exports) {
        var inherits = require('inherits');
        var Buffer = require('buffer').Buffer;

        var asn1 = require('../../asn1');
        var base = asn1.base;

// Import DER constants
        var der = asn1.constants.der;

        function DEREncoder(entity) {
            this.enc = 'der';
            this.name = entity.name;
            this.entity = entity;

            // Construct base tree
            this.tree = new DERNode();
            this.tree._init(entity.body);
        };
        module.exports = DEREncoder;

        DEREncoder.prototype.encode = function encode(data, reporter) {
            return this.tree._encode(data, reporter).join();
        };

// Tree methods

        function DERNode(parent) {
            base.Node.call(this, 'der', parent);
        }

        inherits(DERNode, base.Node);

        DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                      primitive,
                                                                      cls,
                                                                      content) {
            var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

            // Short form
            if (content.length < 0x80) {
                var header = new Buffer(2);
                header[0] = encodedTag;
                header[1] = content.length;
                return this._createEncoderBuffer([header, content]);
            }

            // Long form
            // Count octets required to store length
            var lenOctets = 1;
            for (var i = content.length; i >= 0x100; i >>= 8)
                lenOctets++;

            var header = new Buffer(1 + 1 + lenOctets);
            header[0] = encodedTag;
            header[1] = 0x80 | lenOctets;

            for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
                header[i] = j & 0xff;

            return this._createEncoderBuffer([header, content]);
        };

        DERNode.prototype._encodeStr = function encodeStr(str, tag) {
            if (tag === 'bitstr') {
                return this._createEncoderBuffer([str.unused | 0, str.data]);
            } else if (tag === 'bmpstr') {
                var buf = new Buffer(str.length * 2);
                for (var i = 0; i < str.length; i++) {
                    buf.writeUInt16BE(str.charCodeAt(i), i * 2);
                }
                return this._createEncoderBuffer(buf);
            } else if (tag === 'numstr') {
                if (!this._isNumstr(str)) {
                    return this.reporter.error('Encoding of string type: numstr supports ' +
                        'only digits and space');
                }
                return this._createEncoderBuffer(str);
            } else if (tag === 'printstr') {
                if (!this._isPrintstr(str)) {
                    return this.reporter.error('Encoding of string type: printstr supports ' +
                        'only latin upper and lower case letters, ' +
                        'digits, space, apostrophe, left and rigth ' +
                        'parenthesis, plus sign, comma, hyphen, ' +
                        'dot, slash, colon, equal sign, ' +
                        'question mark');
                }
                return this._createEncoderBuffer(str);
            } else if (/str$/.test(tag)) {
                return this._createEncoderBuffer(str);
            } else if (tag === 'objDesc') {
                return this._createEncoderBuffer(str);
            } else {
                return this.reporter.error('Encoding of string type: ' + tag +
                    ' unsupported');
            }
        };

        DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
            if (typeof id === 'string') {
                if (!values)
                    return this.reporter.error('string objid given, but no values map found');
                if (!values.hasOwnProperty(id))
                    return this.reporter.error('objid not found in values map');
                id = values[id].split(/[\s\.]+/g);
                for (var i = 0; i < id.length; i++)
                    id[i] |= 0;
            } else if (Array.isArray(id)) {
                id = id.slice();
                for (var i = 0; i < id.length; i++)
                    id[i] |= 0;
            }

            if (!Array.isArray(id)) {
                return this.reporter.error('objid() should be either array or string, ' +
                    'got: ' + JSON.stringify(id));
            }

            if (!relative) {
                if (id[1] >= 40)
                    return this.reporter.error('Second objid identifier OOB');
                id.splice(0, 2, id[0] * 40 + id[1]);
            }

            // Count number of octets
            var size = 0;
            for (var i = 0; i < id.length; i++) {
                var ident = id[i];
                for (size++; ident >= 0x80; ident >>= 7)
                    size++;
            }

            var objid = new Buffer(size);
            var offset = objid.length - 1;
            for (var i = id.length - 1; i >= 0; i--) {
                var ident = id[i];
                objid[offset--] = ident & 0x7f;
                while ((ident >>= 7) > 0)
                    objid[offset--] = 0x80 | (ident & 0x7f);
            }

            return this._createEncoderBuffer(objid);
        };

        function two(num) {
            if (num < 10)
                return '0' + num;
            else
                return num;
        }

        DERNode.prototype._encodeTime = function encodeTime(time, tag) {
            var str;
            var date = new Date(time);

            if (tag === 'gentime') {
                str = [
                    two(date.getFullYear()),
                    two(date.getUTCMonth() + 1),
                    two(date.getUTCDate()),
                    two(date.getUTCHours()),
                    two(date.getUTCMinutes()),
                    two(date.getUTCSeconds()),
                    'Z'
                ].join('');
            } else if (tag === 'utctime') {
                str = [
                    two(date.getFullYear() % 100),
                    two(date.getUTCMonth() + 1),
                    two(date.getUTCDate()),
                    two(date.getUTCHours()),
                    two(date.getUTCMinutes()),
                    two(date.getUTCSeconds()),
                    'Z'
                ].join('');
            } else {
                this.reporter.error('Encoding ' + tag + ' time is not supported yet');
            }

            return this._encodeStr(str, 'octstr');
        };

        DERNode.prototype._encodeNull = function encodeNull() {
            return this._createEncoderBuffer('');
        };

        DERNode.prototype._encodeInt = function encodeInt(num, values) {
            if (typeof num === 'string') {
                if (!values)
                    return this.reporter.error('String int or enum given, but no values map');
                if (!values.hasOwnProperty(num)) {
                    return this.reporter.error('Values map doesn\'t contain: ' +
                        JSON.stringify(num));
                }
                num = values[num];
            }

            // Bignum, assume big endian
            if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
                var numArray = num.toArray();
                if (!num.sign && numArray[0] & 0x80) {
                    numArray.unshift(0);
                }
                num = new Buffer(numArray);
            }

            if (Buffer.isBuffer(num)) {
                var size = num.length;
                if (num.length === 0)
                    size++;

                var out = new Buffer(size);
                num.copy(out);
                if (num.length === 0)
                    out[0] = 0
                return this._createEncoderBuffer(out);
            }

            if (num < 0x80)
                return this._createEncoderBuffer(num);

            if (num < 0x100)
                return this._createEncoderBuffer([0, num]);

            var size = 1;
            for (var i = num; i >= 0x100; i >>= 8)
                size++;

            var out = new Array(size);
            for (var i = out.length - 1; i >= 0; i--) {
                out[i] = num & 0xff;
                num >>= 8;
            }
            if (out[0] & 0x80) {
                out.unshift(0);
            }

            return this._createEncoderBuffer(new Buffer(out));
        };

        DERNode.prototype._encodeBool = function encodeBool(value) {
            return this._createEncoderBuffer(value ? 0xff : 0);
        };

        DERNode.prototype._use = function use(entity, obj) {
            if (typeof entity === 'function')
                entity = entity(obj);
            return entity._getEncoder('der').tree;
        };

        DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
            var state = this._baseState;
            var i;
            if (state['default'] === null)
                return false;

            var data = dataBuffer.join();
            if (state.defaultBuffer === undefined)
                state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

            if (data.length !== state.defaultBuffer.length)
                return false;

            for (i = 0; i < data.length; i++)
                if (data[i] !== state.defaultBuffer[i])
                    return false;

            return true;
        };

// Utility methods

        function encodeTag(tag, primitive, cls, reporter) {
            var res;

            if (tag === 'seqof')
                tag = 'seq';
            else if (tag === 'setof')
                tag = 'set';

            if (der.tagByName.hasOwnProperty(tag))
                res = der.tagByName[tag];
            else if (typeof tag === 'number' && (tag | 0) === tag)
                res = tag;
            else
                return reporter.error('Unknown tag: ' + tag);

            if (res >= 0x1f)
                return reporter.error('Multi-octet tag encoding unsupported');

            if (!primitive)
                res |= 0x20;

            res |= (der.tagClassByName[cls || 'universal'] << 6);

            return res;
        }

    }, {"../../asn1": 1, "buffer": 51, "inherits": 103}],
    13: [function (require, module, exports) {
        var encoders = exports;

        encoders.der = require('./der');
        encoders.pem = require('./pem');

    }, {"./der": 12, "./pem": 14}],
    14: [function (require, module, exports) {
        var inherits = require('inherits');

        var DEREncoder = require('./der');

        function PEMEncoder(entity) {
            DEREncoder.call(this, entity);
            this.enc = 'pem';
        };
        inherits(PEMEncoder, DEREncoder);
        module.exports = PEMEncoder;

        PEMEncoder.prototype.encode = function encode(data, options) {
            var buf = DEREncoder.prototype.encode.call(this, data);

            var p = buf.toString('base64');
            var out = ['-----BEGIN ' + options.label + '-----'];
            for (var i = 0; i < p.length; i += 64)
                out.push(p.slice(i, i + 64));
            out.push('-----END ' + options.label + '-----');
            return out.join('\n');
        };

    }, {"./der": 12, "inherits": 103}],
    15: [function (require, module, exports) {
        (function (global) {
            'use strict';

            var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
            function compare(a, b) {
                if (a === b) {
                    return 0;
                }

                var x = a.length;
                var y = b.length;

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i];
                        y = b[i];
                        break;
                    }
                }

                if (x < y) {
                    return -1;
                }
                if (y < x) {
                    return 1;
                }
                return 0;
            }

            function isBuffer(b) {
                if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                    return global.Buffer.isBuffer(b);
                }
                return !!(b != null && b._isBuffer);
            }

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

            var util = require('util/');
            var hasOwn = Object.prototype.hasOwnProperty;
            var pSlice = Array.prototype.slice;
            var functionsHaveNames = (function () {
                return function foo() {
                }.name === 'foo';
            }());

            function pToString(obj) {
                return Object.prototype.toString.call(obj);
            }

            function isView(arrbuf) {
                if (isBuffer(arrbuf)) {
                    return false;
                }
                if (typeof global.ArrayBuffer !== 'function') {
                    return false;
                }
                if (typeof ArrayBuffer.isView === 'function') {
                    return ArrayBuffer.isView(arrbuf);
                }
                if (!arrbuf) {
                    return false;
                }
                if (arrbuf instanceof DataView) {
                    return true;
                }
                if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                    return true;
                }
                return false;
            }

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

            var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/;

// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
            function getName(func) {
                if (!util.isFunction(func)) {
                    return;
                }
                if (functionsHaveNames) {
                    return func.name;
                }
                var str = func.toString();
                var match = str.match(regex);
                return match && match[1];
            }

            assert.AssertionError = function AssertionError(options) {
                this.name = 'AssertionError';
                this.actual = options.actual;
                this.expected = options.expected;
                this.operator = options.operator;
                if (options.message) {
                    this.message = options.message;
                    this.generatedMessage = false;
                } else {
                    this.message = getMessage(this);
                    this.generatedMessage = true;
                }
                var stackStartFunction = options.stackStartFunction || fail;
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, stackStartFunction);
                } else {
                    // non v8 browsers so we can have a stacktrace
                    var err = new Error();
                    if (err.stack) {
                        var out = err.stack;

                        // try to strip useless frames
                        var fn_name = getName(stackStartFunction);
                        var idx = out.indexOf('\n' + fn_name);
                        if (idx >= 0) {
                            // once we have located the function frame
                            // we need to strip out everything before it (and its line)
                            var next_line = out.indexOf('\n', idx + 1);
                            out = out.substring(next_line + 1);
                        }

                        this.stack = out;
                    }
                }
            };

// assert.AssertionError instanceof Error
            util.inherits(assert.AssertionError, Error);

            function truncate(s, n) {
                if (typeof s === 'string') {
                    return s.length < n ? s : s.slice(0, n);
                } else {
                    return s;
                }
            }

            function inspect(something) {
                if (functionsHaveNames || !util.isFunction(something)) {
                    return util.inspect(something);
                }
                var rawname = getName(something);
                var name = rawname ? ': ' + rawname : '';
                return '[Function' + name + ']';
            }

            function getMessage(self) {
                return truncate(inspect(self.actual), 128) + ' ' +
                    self.operator + ' ' +
                    truncate(inspect(self.expected), 128);
            }

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

            function fail(actual, expected, message, operator, stackStartFunction) {
                throw new assert.AssertionError({
                    message: message,
                    actual: actual,
                    expected: expected,
                    operator: operator,
                    stackStartFunction: stackStartFunction
                });
            }

// EXTENSION! allows for well behaved errors defined elsewhere.
            assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
                if (!value) fail(value, true, message, '==', assert.ok);
            }

            assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

            assert.equal = function equal(actual, expected, message) {
                if (actual != expected) fail(actual, expected, message, '==', assert.equal);
            };

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

            assert.notEqual = function notEqual(actual, expected, message) {
                if (actual == expected) {
                    fail(actual, expected, message, '!=', assert.notEqual);
                }
            };

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

            assert.deepEqual = function deepEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                }
            };

            assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                }
            };

            function _deepEqual(actual, expected, strict, memos) {
                // 7.1. All identical values are equivalent, as determined by ===.
                if (actual === expected) {
                    return true;
                } else if (isBuffer(actual) && isBuffer(expected)) {
                    return compare(actual, expected) === 0;

                    // 7.2. If the expected value is a Date object, the actual value is
                    // equivalent if it is also a Date object that refers to the same time.
                } else if (util.isDate(actual) && util.isDate(expected)) {
                    return actual.getTime() === expected.getTime();

                    // 7.3 If the expected value is a RegExp object, the actual value is
                    // equivalent if it is also a RegExp object with the same source and
                    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                    return actual.source === expected.source &&
                        actual.global === expected.global &&
                        actual.multiline === expected.multiline &&
                        actual.lastIndex === expected.lastIndex &&
                        actual.ignoreCase === expected.ignoreCase;

                    // 7.4. Other pairs that do not both pass typeof value == 'object',
                    // equivalence is determined by ==.
                } else if ((actual === null || typeof actual !== 'object') &&
                    (expected === null || typeof expected !== 'object')) {
                    return strict ? actual === expected : actual == expected;

                    // If both values are instances of typed arrays, wrap their underlying
                    // ArrayBuffers in a Buffer each to increase performance
                    // This optimization requires the arrays to have the same type as checked by
                    // Object.prototype.toString (aka pToString). Never perform binary
                    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                    // bit patterns are not identical.
                } else if (isView(actual) && isView(expected) &&
                    pToString(actual) === pToString(expected) &&
                    !(actual instanceof Float32Array ||
                        actual instanceof Float64Array)) {
                    return compare(new Uint8Array(actual.buffer),
                        new Uint8Array(expected.buffer)) === 0;

                    // 7.5 For all other Object pairs, including Array objects, equivalence is
                    // determined by having the same number of owned properties (as verified
                    // with Object.prototype.hasOwnProperty.call), the same set of keys
                    // (although not necessarily the same order), equivalent values for every
                    // corresponding key, and an identical 'prototype' property. Note: this
                    // accounts for both named and indexed properties on Arrays.
                } else if (isBuffer(actual) !== isBuffer(expected)) {
                    return false;
                } else {
                    memos = memos || {actual: [], expected: []};

                    var actualIndex = memos.actual.indexOf(actual);
                    if (actualIndex !== -1) {
                        if (actualIndex === memos.expected.indexOf(expected)) {
                            return true;
                        }
                    }

                    memos.actual.push(actual);
                    memos.expected.push(expected);

                    return objEquiv(actual, expected, strict, memos);
                }
            }

            function isArguments(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
                if (a === null || a === undefined || b === null || b === undefined)
                    return false;
                // if one is a primitive, the other must be same
                if (util.isPrimitive(a) || util.isPrimitive(b))
                    return a === b;
                if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                    return false;
                var aIsArgs = isArguments(a);
                var bIsArgs = isArguments(b);
                if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                    return false;
                if (aIsArgs) {
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return _deepEqual(a, b, strict);
                }
                var ka = objectKeys(a);
                var kb = objectKeys(b);
                var key, i;
                // having the same number of owned properties (keys incorporates
                // hasOwnProperty)
                if (ka.length !== kb.length)
                    return false;
                //the same set of keys (although not necessarily the same order),
                ka.sort();
                kb.sort();
                //~~~cheap key test
                for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] !== kb[i])
                        return false;
                }
                //equivalent values for every corresponding key, and
                //~~~possibly expensive deep test
                for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                        return false;
                }
                return true;
            }

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

            assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                if (_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                }
            };

            assert.notDeepStrictEqual = notDeepStrictEqual;

            function notDeepStrictEqual(actual, expected, message) {
                if (_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                }
            }


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

            assert.strictEqual = function strictEqual(actual, expected, message) {
                if (actual !== expected) {
                    fail(actual, expected, message, '===', assert.strictEqual);
                }
            };

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                if (actual === expected) {
                    fail(actual, expected, message, '!==', assert.notStrictEqual);
                }
            };

            function expectedException(actual, expected) {
                if (!actual || !expected) {
                    return false;
                }

                if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                    return expected.test(actual);
                }

                try {
                    if (actual instanceof expected) {
                        return true;
                    }
                } catch (e) {
                    // Ignore.  The instanceof check doesn't work for arrow functions.
                }

                if (Error.isPrototypeOf(expected)) {
                    return false;
                }

                return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
                var error;
                try {
                    block();
                } catch (e) {
                    error = e;
                }
                return error;
            }

            function _throws(shouldThrow, block, expected, message) {
                var actual;

                if (typeof block !== 'function') {
                    throw new TypeError('"block" argument must be a function');
                }

                if (typeof expected === 'string') {
                    message = expected;
                    expected = null;
                }

                actual = _tryBlock(block);

                message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                    (message ? ' ' + message : '.');

                if (shouldThrow && !actual) {
                    fail(actual, expected, 'Missing expected exception' + message);
                }

                var userProvidedMessage = typeof message === 'string';
                var isUnwantedException = !shouldThrow && util.isError(actual);
                var isUnexpectedException = !shouldThrow && actual && !expected;

                if ((isUnwantedException &&
                    userProvidedMessage &&
                    expectedException(actual, expected)) ||
                    isUnexpectedException) {
                    fail(actual, expected, 'Got unwanted exception' + message);
                }

                if ((shouldThrow && actual && expected &&
                    !expectedException(actual, expected)) || (!shouldThrow && actual)) {
                    throw actual;
                }
            }

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

            assert.throws = function (block, /*optional*/error, /*optional*/message) {
                _throws(true, block, error, message);
            };

// EXTENSION! This is annoying to write outside this module.
            assert.doesNotThrow = function (block, /*optional*/error, /*optional*/message) {
                _throws(false, block, error, message);
            };

            assert.ifError = function (err) {
                if (err) throw err;
            };

// Expose a strict only variant of assert
            function strict(value, message) {
                if (!value) fail(value, true, message, '==', strict);
            }

            assert.strict = objectAssign(strict, assert, {
                equal: assert.strictEqual,
                deepEqual: assert.deepStrictEqual,
                notEqual: assert.notStrictEqual,
                notDeepEqual: assert.notDeepStrictEqual
            });
            assert.strict.strict = assert.strict;

            var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj) {
                    if (hasOwn.call(obj, key)) keys.push(key);
                }
                return keys;
            };

        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"object-assign": 110, "util/": 18}],
    16: [function (require, module, exports) {
        if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            };
        } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                var TempCtor = function () {
                }
                TempCtor.prototype = superCtor.prototype
                ctor.prototype = new TempCtor()
                ctor.prototype.constructor = ctor
            }
        }

    }, {}],
    17: [function (require, module, exports) {
        module.exports = function isBuffer(arg) {
            return arg && typeof arg === 'object'
                && typeof arg.copy === 'function'
                && typeof arg.fill === 'function'
                && typeof arg.readUInt8 === 'function';
        }
    }, {}],
    18: [function (require, module, exports) {
        (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            var formatRegExp = /%[sdj%]/g;
            exports.format = function (f) {
                if (!isString(f)) {
                    var objects = [];
                    for (var i = 0; i < arguments.length; i++) {
                        objects.push(inspect(arguments[i]));
                    }
                    return objects.join(' ');
                }

                var i = 1;
                var args = arguments;
                var len = args.length;
                var str = String(f).replace(formatRegExp, function (x) {
                    if (x === '%%') return '%';
                    if (i >= len) return x;
                    switch (x) {
                        case '%s':
                            return String(args[i++]);
                        case '%d':
                            return Number(args[i++]);
                        case '%j':
                            try {
                                return JSON.stringify(args[i++]);
                            } catch (_) {
                                return '[Circular]';
                            }
                        default:
                            return x;
                    }
                });
                for (var x = args[i]; i < len; x = args[++i]) {
                    if (isNull(x) || !isObject(x)) {
                        str += ' ' + x;
                    } else {
                        str += ' ' + inspect(x);
                    }
                }
                return str;
            };


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
            exports.deprecate = function (fn, msg) {
                // Allow for deprecating things in the process of starting up.
                if (isUndefined(global.process)) {
                    return function () {
                        return exports.deprecate(fn, msg).apply(this, arguments);
                    };
                }

                if (process.noDeprecation === true) {
                    return fn;
                }

                var warned = false;

                function deprecated() {
                    if (!warned) {
                        if (process.throwDeprecation) {
                            throw new Error(msg);
                        } else if (process.traceDeprecation) {
                            console.trace(msg);
                        } else {
                            console.error(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }

                return deprecated;
            };


            var debugs = {};
            var debugEnviron;
            exports.debuglog = function (set) {
                if (isUndefined(debugEnviron))
                    debugEnviron = process.env.NODE_DEBUG || '';
                set = set.toUpperCase();
                if (!debugs[set]) {
                    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                        var pid = process.pid;
                        debugs[set] = function () {
                            var msg = exports.format.apply(exports, arguments);
                            console.error('%s %d: %s', set, pid, msg);
                        };
                    } else {
                        debugs[set] = function () {
                        };
                    }
                }
                return debugs[set];
            };


            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */

            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
                // default options
                var ctx = {
                    seen: [],
                    stylize: stylizeNoColor
                };
                // legacy...
                if (arguments.length >= 3) ctx.depth = arguments[2];
                if (arguments.length >= 4) ctx.colors = arguments[3];
                if (isBoolean(opts)) {
                    // legacy...
                    ctx.showHidden = opts;
                } else if (opts) {
                    // got an "options" object
                    exports._extend(ctx, opts);
                }
                // set default options
                if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                if (isUndefined(ctx.depth)) ctx.depth = 2;
                if (isUndefined(ctx.colors)) ctx.colors = false;
                if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                if (ctx.colors) ctx.stylize = stylizeWithColor;
                return formatValue(ctx, obj, ctx.depth);
            }

            exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
                'bold': [1, 22],
                'italic': [3, 23],
                'underline': [4, 24],
                'inverse': [7, 27],
                'white': [37, 39],
                'grey': [90, 39],
                'black': [30, 39],
                'blue': [34, 39],
                'cyan': [36, 39],
                'green': [32, 39],
                'magenta': [35, 39],
                'red': [31, 39],
                'yellow': [33, 39]
            };

// Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
                'special': 'cyan',
                'number': 'yellow',
                'boolean': 'yellow',
                'undefined': 'grey',
                'null': 'bold',
                'string': 'green',
                'date': 'magenta',
                // "name": intentionally not styling
                'regexp': 'red'
            };


            function stylizeWithColor(str, styleType) {
                var style = inspect.styles[styleType];

                if (style) {
                    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                        '\u001b[' + inspect.colors[style][1] + 'm';
                } else {
                    return str;
                }
            }


            function stylizeNoColor(str, styleType) {
                return str;
            }


            function arrayToHash(array) {
                var hash = {};

                array.forEach(function (val, idx) {
                    hash[val] = true;
                });

                return hash;
            }


            function formatValue(ctx, value, recurseTimes) {
                // Provide a hook for user-specified inspect functions.
                // Check that value is an object with an inspect function on it
                if (ctx.customInspect &&
                    value &&
                    isFunction(value.inspect) &&
                    // Filter out the util module, it's inspect function is special
                    value.inspect !== exports.inspect &&
                    // Also filter out any prototype objects using the circular check.
                    !(value.constructor && value.constructor.prototype === value)) {
                    var ret = value.inspect(recurseTimes, ctx);
                    if (!isString(ret)) {
                        ret = formatValue(ctx, ret, recurseTimes);
                    }
                    return ret;
                }

                // Primitive types cannot have properties
                var primitive = formatPrimitive(ctx, value);
                if (primitive) {
                    return primitive;
                }

                // Look up the keys of the object.
                var keys = Object.keys(value);
                var visibleKeys = arrayToHash(keys);

                if (ctx.showHidden) {
                    keys = Object.getOwnPropertyNames(value);
                }

                // IE doesn't make error fields non-enumerable
                // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                if (isError(value)
                    && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                    return formatError(value);
                }

                // Some type of object without properties can be shortcutted.
                if (keys.length === 0) {
                    if (isFunction(value)) {
                        var name = value.name ? ': ' + value.name : '';
                        return ctx.stylize('[Function' + name + ']', 'special');
                    }
                    if (isRegExp(value)) {
                        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    }
                    if (isDate(value)) {
                        return ctx.stylize(Date.prototype.toString.call(value), 'date');
                    }
                    if (isError(value)) {
                        return formatError(value);
                    }
                }

                var base = '', array = false, braces = ['{', '}'];

                // Make Array say that they are Array
                if (isArray(value)) {
                    array = true;
                    braces = ['[', ']'];
                }

                // Make functions say that they are functions
                if (isFunction(value)) {
                    var n = value.name ? ': ' + value.name : '';
                    base = ' [Function' + n + ']';
                }

                // Make RegExps say that they are RegExps
                if (isRegExp(value)) {
                    base = ' ' + RegExp.prototype.toString.call(value);
                }

                // Make dates with properties first say the date
                if (isDate(value)) {
                    base = ' ' + Date.prototype.toUTCString.call(value);
                }

                // Make error with message first say the error
                if (isError(value)) {
                    base = ' ' + formatError(value);
                }

                if (keys.length === 0 && (!array || value.length == 0)) {
                    return braces[0] + base + braces[1];
                }

                if (recurseTimes < 0) {
                    if (isRegExp(value)) {
                        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    } else {
                        return ctx.stylize('[Object]', 'special');
                    }
                }

                ctx.seen.push(value);

                var output;
                if (array) {
                    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                } else {
                    output = keys.map(function (key) {
                        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                    });
                }

                ctx.seen.pop();

                return reduceToSingleString(output, base, braces);
            }


            function formatPrimitive(ctx, value) {
                if (isUndefined(value))
                    return ctx.stylize('undefined', 'undefined');
                if (isString(value)) {
                    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                        .replace(/'/g, "\\'")
                        .replace(/\\"/g, '"') + '\'';
                    return ctx.stylize(simple, 'string');
                }
                if (isNumber(value))
                    return ctx.stylize('' + value, 'number');
                if (isBoolean(value))
                    return ctx.stylize('' + value, 'boolean');
                // For some reason typeof null is "object", so special case here.
                if (isNull(value))
                    return ctx.stylize('null', 'null');
            }


            function formatError(value) {
                return '[' + Error.prototype.toString.call(value) + ']';
            }


            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                var output = [];
                for (var i = 0, l = value.length; i < l; ++i) {
                    if (hasOwnProperty(value, String(i))) {
                        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                            String(i), true));
                    } else {
                        output.push('');
                    }
                }
                keys.forEach(function (key) {
                    if (!key.match(/^\d+$/)) {
                        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                            key, true));
                    }
                });
                return output;
            }


            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                var name, str, desc;
                desc = Object.getOwnPropertyDescriptor(value, key) || {value: value[key]};
                if (desc.get) {
                    if (desc.set) {
                        str = ctx.stylize('[Getter/Setter]', 'special');
                    } else {
                        str = ctx.stylize('[Getter]', 'special');
                    }
                } else {
                    if (desc.set) {
                        str = ctx.stylize('[Setter]', 'special');
                    }
                }
                if (!hasOwnProperty(visibleKeys, key)) {
                    name = '[' + key + ']';
                }
                if (!str) {
                    if (ctx.seen.indexOf(desc.value) < 0) {
                        if (isNull(recurseTimes)) {
                            str = formatValue(ctx, desc.value, null);
                        } else {
                            str = formatValue(ctx, desc.value, recurseTimes - 1);
                        }
                        if (str.indexOf('\n') > -1) {
                            if (array) {
                                str = str.split('\n').map(function (line) {
                                    return '  ' + line;
                                }).join('\n').substr(2);
                            } else {
                                str = '\n' + str.split('\n').map(function (line) {
                                    return '   ' + line;
                                }).join('\n');
                            }
                        }
                    } else {
                        str = ctx.stylize('[Circular]', 'special');
                    }
                }
                if (isUndefined(name)) {
                    if (array && key.match(/^\d+$/)) {
                        return str;
                    }
                    name = JSON.stringify('' + key);
                    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                        name = name.substr(1, name.length - 2);
                        name = ctx.stylize(name, 'name');
                    } else {
                        name = name.replace(/'/g, "\\'")
                            .replace(/\\"/g, '"')
                            .replace(/(^"|"$)/g, "'");
                        name = ctx.stylize(name, 'string');
                    }
                }

                return name + ': ' + str;
            }


            function reduceToSingleString(output, base, braces) {
                var numLinesEst = 0;
                var length = output.reduce(function (prev, cur) {
                    numLinesEst++;
                    if (cur.indexOf('\n') >= 0) numLinesEst++;
                    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                }, 0);

                if (length > 60) {
                    return braces[0] +
                        (base === '' ? '' : base + '\n ') +
                        ' ' +
                        output.join(',\n  ') +
                        ' ' +
                        braces[1];
                }

                return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            }


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
            function isArray(ar) {
                return Array.isArray(ar);
            }

            exports.isArray = isArray;

            function isBoolean(arg) {
                return typeof arg === 'boolean';
            }

            exports.isBoolean = isBoolean;

            function isNull(arg) {
                return arg === null;
            }

            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
                return arg == null;
            }

            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
                return typeof arg === 'number';
            }

            exports.isNumber = isNumber;

            function isString(arg) {
                return typeof arg === 'string';
            }

            exports.isString = isString;

            function isSymbol(arg) {
                return typeof arg === 'symbol';
            }

            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
                return arg === void 0;
            }

            exports.isUndefined = isUndefined;

            function isRegExp(re) {
                return isObject(re) && objectToString(re) === '[object RegExp]';
            }

            exports.isRegExp = isRegExp;

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }

            exports.isObject = isObject;

            function isDate(d) {
                return isObject(d) && objectToString(d) === '[object Date]';
            }

            exports.isDate = isDate;

            function isError(e) {
                return isObject(e) &&
                    (objectToString(e) === '[object Error]' || e instanceof Error);
            }

            exports.isError = isError;

            function isFunction(arg) {
                return typeof arg === 'function';
            }

            exports.isFunction = isFunction;

            function isPrimitive(arg) {
                return arg === null ||
                    typeof arg === 'boolean' ||
                    typeof arg === 'number' ||
                    typeof arg === 'string' ||
                    typeof arg === 'symbol' ||  // ES6 symbol
                    typeof arg === 'undefined';
            }

            exports.isPrimitive = isPrimitive;

            exports.isBuffer = require('./support/isBuffer');

            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }


            function pad(n) {
                return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }


            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
            function timestamp() {
                var d = new Date();
                var time = [pad(d.getHours()),
                    pad(d.getMinutes()),
                    pad(d.getSeconds())].join(':');
                return [d.getDate(), months[d.getMonth()], time].join(' ');
            }


// log is just a thin wrapper to console.log that prepends a timestamp
            exports.log = function () {
                console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
            };


            /**
             * Inherit the prototype methods from one constructor into another.
             *
             * The Function.prototype.inherits from lang.js rewritten as a standalone
             * function (not on Function.prototype). NOTE: If this file is to be loaded
             * during bootstrapping this function needs to be rewritten using some native
             * functions as prototype setup using normal JavaScript does not work as
             * expected during bootstrapping (see mirror.js in r114903).
             *
             * @param {function} ctor Constructor function which needs to inherit the
             *     prototype.
             * @param {function} superCtor Constructor function to inherit prototype from.
             */
            exports.inherits = require('inherits');

            exports._extend = function (origin, add) {
                // Don't do anything if add isn't an object
                if (!add || !isObject(add)) return origin;

                var keys = Object.keys(add);
                var i = keys.length;
                while (i--) {
                    origin[keys[i]] = add[keys[i]];
                }
                return origin;
            };

            function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            }

        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"./support/isBuffer": 17, "_process": 122, "inherits": 16}],
    19: [function (require, module, exports) {
        'use strict'

        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
        }

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function getLens(b64) {
            var len = b64.length

            if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=')
            if (validLen === -1) validLen = len

            var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4)

            return [validLen, placeHoldersLen]
        }

// base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function toByteArray(b64) {
            var tmp
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

            var curByte = 0

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen

            var i
            for (i = 0; i < len; i += 4) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 18) |
                    (revLookup[b64.charCodeAt(i + 1)] << 12) |
                    (revLookup[b64.charCodeAt(i + 2)] << 6) |
                    revLookup[b64.charCodeAt(i + 3)]
                arr[curByte++] = (tmp >> 16) & 0xFF
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 2) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 2) |
                    (revLookup[b64.charCodeAt(i + 1)] >> 4)
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 1) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 10) |
                    (revLookup[b64.charCodeAt(i + 1)] << 4) |
                    (revLookup[b64.charCodeAt(i + 2)] >> 2)
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            return arr
        }

        function tripletToBase64(num) {
            return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F]
        }

        function encodeChunk(uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
                tmp =
                    ((uint8[i] << 16) & 0xFF0000) +
                    ((uint8[i + 1] << 8) & 0xFF00) +
                    (uint8[i + 2] & 0xFF)
                output.push(tripletToBase64(tmp))
            }
            return output.join('')
        }

        function fromByteArray(uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(
                    uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                ))
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
                tmp = uint8[len - 1]
                parts.push(
                    lookup[tmp >> 2] +
                    lookup[(tmp << 4) & 0x3F] +
                    '=='
                )
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                parts.push(
                    lookup[tmp >> 10] +
                    lookup[(tmp >> 4) & 0x3F] +
                    lookup[(tmp << 2) & 0x3F] +
                    '='
                )
            }

            return parts.join('')
        }

    }, {}],
    20: [function (require, module, exports) {
        (function (module, exports) {
            'use strict';

            // Utils
            function assert(val, msg) {
                if (!val) throw new Error(msg || 'Assertion failed');
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {
                };
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            }

            // BN

            function BN(number, base, endian) {
                if (BN.isBN(number)) {
                    return number;
                }

                this.negative = 0;
                this.words = null;
                this.length = 0;

                // Reduction context
                this.red = null;

                if (number !== null) {
                    if (base === 'le' || base === 'be') {
                        endian = base;
                        base = 10;
                    }

                    this._init(number || 0, base || 10, endian || 'be');
                }
            }

            if (typeof module === 'object') {
                module.exports = BN;
            } else {
                exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
                Buffer = require('buffer').Buffer;
            } catch (e) {
            }

            BN.isBN = function isBN(num) {
                if (num instanceof BN) {
                    return true;
                }

                return num !== null && typeof num === 'object' &&
                    num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
            };

            BN.max = function max(left, right) {
                if (left.cmp(right) > 0) return left;
                return right;
            };

            BN.min = function min(left, right) {
                if (left.cmp(right) < 0) return left;
                return right;
            };

            BN.prototype._init = function init(number, base, endian) {
                if (typeof number === 'number') {
                    return this._initNumber(number, base, endian);
                }

                if (typeof number === 'object') {
                    return this._initArray(number, base, endian);
                }

                if (base === 'hex') {
                    base = 16;
                }
                assert(base === (base | 0) && base >= 2 && base <= 36);

                number = number.toString().replace(/\s+/g, '');
                var start = 0;
                if (number[0] === '-') {
                    start++;
                }

                if (base === 16) {
                    this._parseHex(number, start);
                } else {
                    this._parseBase(number, base, start);
                }

                if (number[0] === '-') {
                    this.negative = 1;
                }

                this.strip();

                if (endian !== 'le') return;

                this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber(number, base, endian) {
                if (number < 0) {
                    this.negative = 1;
                    number = -number;
                }
                if (number < 0x4000000) {
                    this.words = [number & 0x3ffffff];
                    this.length = 1;
                } else if (number < 0x10000000000000) {
                    this.words = [
                        number & 0x3ffffff,
                        (number / 0x4000000) & 0x3ffffff
                    ];
                    this.length = 2;
                } else {
                    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                    this.words = [
                        number & 0x3ffffff,
                        (number / 0x4000000) & 0x3ffffff,
                        1
                    ];
                    this.length = 3;
                }

                if (endian !== 'le') return;

                // Reverse the bytes
                this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(number, base, endian) {
                // Perhaps a Uint8Array
                assert(typeof number.length === 'number');
                if (number.length <= 0) {
                    this.words = [0];
                    this.length = 1;
                    return this;
                }

                this.length = Math.ceil(number.length / 3);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                }

                var j, w;
                var off = 0;
                if (endian === 'be') {
                    for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                } else if (endian === 'le') {
                    for (i = 0, j = 0; i < number.length; i += 3) {
                        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                }
                return this.strip();
            };

            function parseHex(str, start, end) {
                var r = 0;
                var len = Math.min(str.length, end);
                for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;

                    r <<= 4;

                    // 'a' - 'f'
                    if (c >= 49 && c <= 54) {
                        r |= c - 49 + 0xa;

                        // 'A' - 'F'
                    } else if (c >= 17 && c <= 22) {
                        r |= c - 17 + 0xa;

                        // '0' - '9'
                    } else {
                        r |= c & 0xf;
                    }
                }
                return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start) {
                // Create possibly bigger array to ensure that it fits the number
                this.length = Math.ceil((number.length - start) / 6);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                }

                var j, w;
                // Scan 24-bit chunks and add them to the number
                var off = 0;
                for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                    w = parseHex(number, i, i + 6);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
                if (i + 6 !== start) {
                    w = parseHex(number, start, i + 6);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                }
                this.strip();
            };

            function parseBase(str, start, end, mul) {
                var r = 0;
                var len = Math.min(str.length, end);
                for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;

                    r *= mul;

                    // 'a'
                    if (c >= 49) {
                        r += c - 49 + 0xa;

                        // 'A'
                    } else if (c >= 17) {
                        r += c - 17 + 0xa;

                        // '0' - '9'
                    } else {
                        r += c;
                    }
                }
                return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
                // Initialize as zero
                this.words = [0];
                this.length = 1;

                // Find length of limb in base
                for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                    limbLen++;
                }
                limbLen--;
                limbPow = (limbPow / base) | 0;

                var total = number.length - start;
                var mod = total % limbLen;
                var end = Math.min(total, total - mod) + start;

                var word = 0;
                for (var i = start; i < end; i += limbLen) {
                    word = parseBase(number, i, i + limbLen, base);

                    this.imuln(limbPow);
                    if (this.words[0] + word < 0x4000000) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }

                if (mod !== 0) {
                    var pow = 1;
                    word = parseBase(number, i, number.length, base);

                    for (i = 0; i < mod; i++) {
                        pow *= base;
                    }

                    this.imuln(pow);
                    if (this.words[0] + word < 0x4000000) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }
            };

            BN.prototype.copy = function copy(dest) {
                dest.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    dest.words[i] = this.words[i];
                }
                dest.length = this.length;
                dest.negative = this.negative;
                dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
                var r = new BN(null);
                this.copy(r);
                return r;
            };

            BN.prototype._expand = function _expand(size) {
                while (this.length < size) {
                    this.words[this.length++] = 0;
                }
                return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip() {
                while (this.length > 1 && this.words[this.length - 1] === 0) {
                    this.length--;
                }
                return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
                // -0 = 0
                if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                }
                return this;
            };

            BN.prototype.inspect = function inspect() {
                return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };

            /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

            var zeros = [
                '',
                '0',
                '00',
                '000',
                '0000',
                '00000',
                '000000',
                '0000000',
                '00000000',
                '000000000',
                '0000000000',
                '00000000000',
                '000000000000',
                '0000000000000',
                '00000000000000',
                '000000000000000',
                '0000000000000000',
                '00000000000000000',
                '000000000000000000',
                '0000000000000000000',
                '00000000000000000000',
                '000000000000000000000',
                '0000000000000000000000',
                '00000000000000000000000',
                '000000000000000000000000',
                '0000000000000000000000000'
            ];

            var groupSizes = [
                0, 0,
                25, 16, 12, 11, 10, 9, 8,
                8, 7, 7, 7, 7, 6, 6,
                6, 6, 6, 6, 6, 5, 5,
                5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5
            ];

            var groupBases = [
                0, 0,
                33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
                43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
                16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
                6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
                24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
            ];

            BN.prototype.toString = function toString(base, padding) {
                base = base || 10;
                padding = padding | 0 || 1;

                var out;
                if (base === 16 || base === 'hex') {
                    out = '';
                    var off = 0;
                    var carry = 0;
                    for (var i = 0; i < this.length; i++) {
                        var w = this.words[i];
                        var word = (((w << off) | carry) & 0xffffff).toString(16);
                        carry = (w >>> (24 - off)) & 0xffffff;
                        if (carry !== 0 || i !== this.length - 1) {
                            out = zeros[6 - word.length] + word + out;
                        } else {
                            out = word + out;
                        }
                        off += 2;
                        if (off >= 26) {
                            off -= 26;
                            i--;
                        }
                    }
                    if (carry !== 0) {
                        out = carry.toString(16) + out;
                    }
                    while (out.length % padding !== 0) {
                        out = '0' + out;
                    }
                    if (this.negative !== 0) {
                        out = '-' + out;
                    }
                    return out;
                }

                if (base === (base | 0) && base >= 2 && base <= 36) {
                    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                    var groupSize = groupSizes[base];
                    // var groupBase = Math.pow(base, groupSize);
                    var groupBase = groupBases[base];
                    out = '';
                    var c = this.clone();
                    c.negative = 0;
                    while (!c.isZero()) {
                        var r = c.modn(groupBase).toString(base);
                        c = c.idivn(groupBase);

                        if (!c.isZero()) {
                            out = zeros[groupSize - r.length] + r + out;
                        } else {
                            out = r + out;
                        }
                    }
                    if (this.isZero()) {
                        out = '0' + out;
                    }
                    while (out.length % padding !== 0) {
                        out = '0' + out;
                    }
                    if (this.negative !== 0) {
                        out = '-' + out;
                    }
                    return out;
                }

                assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber() {
                var ret = this.words[0];
                if (this.length === 2) {
                    ret += this.words[1] * 0x4000000;
                } else if (this.length === 3 && this.words[2] === 0x01) {
                    // NOTE: at this stage it is known that the top bit is set
                    ret += 0x10000000000000 + (this.words[1] * 0x4000000);
                } else if (this.length > 2) {
                    assert(false, 'Number can only safely store up to 53 bits');
                }
                return (this.negative !== 0) ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
                return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
                assert(typeof Buffer !== 'undefined');
                return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
                return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                var byteLength = this.byteLength();
                var reqLength = length || Math.max(1, byteLength);
                assert(byteLength <= reqLength, 'byte array longer than desired length');
                assert(reqLength > 0, 'Requested array length <= 0');

                this.strip();
                var littleEndian = endian === 'le';
                var res = new ArrayType(reqLength);

                var b, i;
                var q = this.clone();
                if (!littleEndian) {
                    // Assume big-endian
                    for (i = 0; i < reqLength - byteLength; i++) {
                        res[i] = 0;
                    }

                    for (i = 0; !q.isZero(); i++) {
                        b = q.andln(0xff);
                        q.iushrn(8);

                        res[reqLength - i - 1] = b;
                    }
                } else {
                    for (i = 0; !q.isZero(); i++) {
                        b = q.andln(0xff);
                        q.iushrn(8);

                        res[i] = b;
                    }

                    for (; i < reqLength; i++) {
                        res[i] = 0;
                    }
                }

                return res;
            };

            if (Math.clz32) {
                BN.prototype._countBits = function _countBits(w) {
                    return 32 - Math.clz32(w);
                };
            } else {
                BN.prototype._countBits = function _countBits(w) {
                    var t = w;
                    var r = 0;
                    if (t >= 0x1000) {
                        r += 13;
                        t >>>= 13;
                    }
                    if (t >= 0x40) {
                        r += 7;
                        t >>>= 7;
                    }
                    if (t >= 0x8) {
                        r += 4;
                        t >>>= 4;
                    }
                    if (t >= 0x02) {
                        r += 2;
                        t >>>= 2;
                    }
                    return r + t;
                };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
                // Short-cut
                if (w === 0) return 26;

                var t = w;
                var r = 0;
                if ((t & 0x1fff) === 0) {
                    r += 13;
                    t >>>= 13;
                }
                if ((t & 0x7f) === 0) {
                    r += 7;
                    t >>>= 7;
                }
                if ((t & 0xf) === 0) {
                    r += 4;
                    t >>>= 4;
                }
                if ((t & 0x3) === 0) {
                    r += 2;
                    t >>>= 2;
                }
                if ((t & 0x1) === 0) {
                    r++;
                }
                return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength() {
                var w = this.words[this.length - 1];
                var hi = this._countBits(w);
                return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
                var w = new Array(num.bitLength());

                for (var bit = 0; bit < w.length; bit++) {
                    var off = (bit / 26) | 0;
                    var wbit = bit % 26;

                    w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
                }

                return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits() {
                if (this.isZero()) return 0;

                var r = 0;
                for (var i = 0; i < this.length; i++) {
                    var b = this._zeroBits(this.words[i]);
                    r += b;
                    if (b !== 26) break;
                }
                return r;
            };

            BN.prototype.byteLength = function byteLength() {
                return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
                if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                }
                return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
                if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                }
                return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
                return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg() {
                return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
                if (!this.isZero()) {
                    this.negative ^= 1;
                }

                return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor(num) {
                while (this.length < num.length) {
                    this.words[this.length++] = 0;
                }

                for (var i = 0; i < num.length; i++) {
                    this.words[i] = this.words[i] | num.words[i];
                }

                return this.strip();
            };

            BN.prototype.ior = function ior(num) {
                assert((this.negative | num.negative) === 0);
                return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or(num) {
                if (this.length > num.length) return this.clone().ior(num);
                return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
                if (this.length > num.length) return this.clone().iuor(num);
                return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand(num) {
                // b = min-length(num, this)
                var b;
                if (this.length > num.length) {
                    b = num;
                } else {
                    b = this;
                }

                for (var i = 0; i < b.length; i++) {
                    this.words[i] = this.words[i] & num.words[i];
                }

                this.length = b.length;

                return this.strip();
            };

            BN.prototype.iand = function iand(num) {
                assert((this.negative | num.negative) === 0);
                return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and(num) {
                if (this.length > num.length) return this.clone().iand(num);
                return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
                if (this.length > num.length) return this.clone().iuand(num);
                return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor(num) {
                // a.length > b.length
                var a;
                var b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                for (var i = 0; i < b.length; i++) {
                    this.words[i] = a.words[i] ^ b.words[i];
                }

                if (this !== a) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                this.length = a.length;

                return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
                assert((this.negative | num.negative) === 0);
                return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor(num) {
                if (this.length > num.length) return this.clone().ixor(num);
                return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
                if (this.length > num.length) return this.clone().iuxor(num);
                return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn(width) {
                assert(typeof width === 'number' && width >= 0);

                var bytesNeeded = Math.ceil(width / 26) | 0;
                var bitsLeft = width % 26;

                // Extend the buffer with leading zeroes
                this._expand(bytesNeeded);

                if (bitsLeft > 0) {
                    bytesNeeded--;
                }

                // Handle complete words
                for (var i = 0; i < bytesNeeded; i++) {
                    this.words[i] = ~this.words[i] & 0x3ffffff;
                }

                // Handle the residue
                if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                }

                // And remove leading zeroes
                return this.strip();
            };

            BN.prototype.notn = function notn(width) {
                return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn(bit, val) {
                assert(typeof bit === 'number' && bit >= 0);

                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                this._expand(off + 1);

                if (val) {
                    this.words[off] = this.words[off] | (1 << wbit);
                } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                }

                return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd(num) {
                var r;

                // negative + positive
                if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign();

                    // positive + negative
                } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                }

                // a.length > b.length
                var a, b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                }
                for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                }

                this.length = a.length;
                if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++;
                    // Copy the rest of the words
                } else if (a !== this) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add(num) {
                var res;
                if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                }

                if (this.length > num.length) return this.clone().iadd(num);

                return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub(num) {
                // this - (-num) = this + num
                if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign();

                    // -this - num = -(this + num)
                } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                }

                // At this point both numbers are positive
                var cmp = this.cmp(num);

                // Optimization - zeroify
                if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                }

                // a > b
                var a, b;
                if (cmp > 0) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                }
                for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                }

                // Copy rest of the words
                if (carry === 0 && i < a.length && a !== this) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                this.length = Math.max(this.length, i);

                if (a !== this) {
                    this.negative = 1;
                }

                return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub(num) {
                return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
                out.negative = num.negative ^ self.negative;
                var len = (self.length + num.length) | 0;
                out.length = len;
                len = (len - 1) | 0;

                // Peel one iteration (compiler can't do it, because of code complexity)
                var a = self.words[0] | 0;
                var b = num.words[0] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                var carry = (r / 0x4000000) | 0;
                out.words[0] = lo;

                for (var k = 1; k < len; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = carry >>> 26;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                        var i = (k - j) | 0;
                        a = self.words[i] | 0;
                        b = num.words[j] | 0;
                        r = a * b + rword;
                        ncarry += (r / 0x4000000) | 0;
                        rword = r & 0x3ffffff;
                    }
                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                }
                if (carry !== 0) {
                    out.words[k] = carry | 0;
                } else {
                    out.length--;
                }

                return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo(self, num, out) {
                var a = self.words;
                var b = num.words;
                var o = out.words;
                var c = 0;
                var lo;
                var mid;
                var hi;
                var a0 = a[0] | 0;
                var al0 = a0 & 0x1fff;
                var ah0 = a0 >>> 13;
                var a1 = a[1] | 0;
                var al1 = a1 & 0x1fff;
                var ah1 = a1 >>> 13;
                var a2 = a[2] | 0;
                var al2 = a2 & 0x1fff;
                var ah2 = a2 >>> 13;
                var a3 = a[3] | 0;
                var al3 = a3 & 0x1fff;
                var ah3 = a3 >>> 13;
                var a4 = a[4] | 0;
                var al4 = a4 & 0x1fff;
                var ah4 = a4 >>> 13;
                var a5 = a[5] | 0;
                var al5 = a5 & 0x1fff;
                var ah5 = a5 >>> 13;
                var a6 = a[6] | 0;
                var al6 = a6 & 0x1fff;
                var ah6 = a6 >>> 13;
                var a7 = a[7] | 0;
                var al7 = a7 & 0x1fff;
                var ah7 = a7 >>> 13;
                var a8 = a[8] | 0;
                var al8 = a8 & 0x1fff;
                var ah8 = a8 >>> 13;
                var a9 = a[9] | 0;
                var al9 = a9 & 0x1fff;
                var ah9 = a9 >>> 13;
                var b0 = b[0] | 0;
                var bl0 = b0 & 0x1fff;
                var bh0 = b0 >>> 13;
                var b1 = b[1] | 0;
                var bl1 = b1 & 0x1fff;
                var bh1 = b1 >>> 13;
                var b2 = b[2] | 0;
                var bl2 = b2 & 0x1fff;
                var bh2 = b2 >>> 13;
                var b3 = b[3] | 0;
                var bl3 = b3 & 0x1fff;
                var bh3 = b3 >>> 13;
                var b4 = b[4] | 0;
                var bl4 = b4 & 0x1fff;
                var bh4 = b4 >>> 13;
                var b5 = b[5] | 0;
                var bl5 = b5 & 0x1fff;
                var bh5 = b5 >>> 13;
                var b6 = b[6] | 0;
                var bl6 = b6 & 0x1fff;
                var bh6 = b6 >>> 13;
                var b7 = b[7] | 0;
                var bl7 = b7 & 0x1fff;
                var bh7 = b7 >>> 13;
                var b8 = b[8] | 0;
                var bl8 = b8 & 0x1fff;
                var bh8 = b8 >>> 13;
                var b9 = b[9] | 0;
                var bl9 = b9 & 0x1fff;
                var bh9 = b9 >>> 13;

                out.negative = self.negative ^ num.negative;
                out.length = 19;
                /* k = 0 */
                lo = Math.imul(al0, bl0);
                mid = Math.imul(al0, bh0);
                mid = (mid + Math.imul(ah0, bl0)) | 0;
                hi = Math.imul(ah0, bh0);
                var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                w0 &= 0x3ffffff;
                /* k = 1 */
                lo = Math.imul(al1, bl0);
                mid = Math.imul(al1, bh0);
                mid = (mid + Math.imul(ah1, bl0)) | 0;
                hi = Math.imul(ah1, bh0);
                lo = (lo + Math.imul(al0, bl1)) | 0;
                mid = (mid + Math.imul(al0, bh1)) | 0;
                mid = (mid + Math.imul(ah0, bl1)) | 0;
                hi = (hi + Math.imul(ah0, bh1)) | 0;
                var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                w1 &= 0x3ffffff;
                /* k = 2 */
                lo = Math.imul(al2, bl0);
                mid = Math.imul(al2, bh0);
                mid = (mid + Math.imul(ah2, bl0)) | 0;
                hi = Math.imul(ah2, bh0);
                lo = (lo + Math.imul(al1, bl1)) | 0;
                mid = (mid + Math.imul(al1, bh1)) | 0;
                mid = (mid + Math.imul(ah1, bl1)) | 0;
                hi = (hi + Math.imul(ah1, bh1)) | 0;
                lo = (lo + Math.imul(al0, bl2)) | 0;
                mid = (mid + Math.imul(al0, bh2)) | 0;
                mid = (mid + Math.imul(ah0, bl2)) | 0;
                hi = (hi + Math.imul(ah0, bh2)) | 0;
                var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                w2 &= 0x3ffffff;
                /* k = 3 */
                lo = Math.imul(al3, bl0);
                mid = Math.imul(al3, bh0);
                mid = (mid + Math.imul(ah3, bl0)) | 0;
                hi = Math.imul(ah3, bh0);
                lo = (lo + Math.imul(al2, bl1)) | 0;
                mid = (mid + Math.imul(al2, bh1)) | 0;
                mid = (mid + Math.imul(ah2, bl1)) | 0;
                hi = (hi + Math.imul(ah2, bh1)) | 0;
                lo = (lo + Math.imul(al1, bl2)) | 0;
                mid = (mid + Math.imul(al1, bh2)) | 0;
                mid = (mid + Math.imul(ah1, bl2)) | 0;
                hi = (hi + Math.imul(ah1, bh2)) | 0;
                lo = (lo + Math.imul(al0, bl3)) | 0;
                mid = (mid + Math.imul(al0, bh3)) | 0;
                mid = (mid + Math.imul(ah0, bl3)) | 0;
                hi = (hi + Math.imul(ah0, bh3)) | 0;
                var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                w3 &= 0x3ffffff;
                /* k = 4 */
                lo = Math.imul(al4, bl0);
                mid = Math.imul(al4, bh0);
                mid = (mid + Math.imul(ah4, bl0)) | 0;
                hi = Math.imul(ah4, bh0);
                lo = (lo + Math.imul(al3, bl1)) | 0;
                mid = (mid + Math.imul(al3, bh1)) | 0;
                mid = (mid + Math.imul(ah3, bl1)) | 0;
                hi = (hi + Math.imul(ah3, bh1)) | 0;
                lo = (lo + Math.imul(al2, bl2)) | 0;
                mid = (mid + Math.imul(al2, bh2)) | 0;
                mid = (mid + Math.imul(ah2, bl2)) | 0;
                hi = (hi + Math.imul(ah2, bh2)) | 0;
                lo = (lo + Math.imul(al1, bl3)) | 0;
                mid = (mid + Math.imul(al1, bh3)) | 0;
                mid = (mid + Math.imul(ah1, bl3)) | 0;
                hi = (hi + Math.imul(ah1, bh3)) | 0;
                lo = (lo + Math.imul(al0, bl4)) | 0;
                mid = (mid + Math.imul(al0, bh4)) | 0;
                mid = (mid + Math.imul(ah0, bl4)) | 0;
                hi = (hi + Math.imul(ah0, bh4)) | 0;
                var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                w4 &= 0x3ffffff;
                /* k = 5 */
                lo = Math.imul(al5, bl0);
                mid = Math.imul(al5, bh0);
                mid = (mid + Math.imul(ah5, bl0)) | 0;
                hi = Math.imul(ah5, bh0);
                lo = (lo + Math.imul(al4, bl1)) | 0;
                mid = (mid + Math.imul(al4, bh1)) | 0;
                mid = (mid + Math.imul(ah4, bl1)) | 0;
                hi = (hi + Math.imul(ah4, bh1)) | 0;
                lo = (lo + Math.imul(al3, bl2)) | 0;
                mid = (mid + Math.imul(al3, bh2)) | 0;
                mid = (mid + Math.imul(ah3, bl2)) | 0;
                hi = (hi + Math.imul(ah3, bh2)) | 0;
                lo = (lo + Math.imul(al2, bl3)) | 0;
                mid = (mid + Math.imul(al2, bh3)) | 0;
                mid = (mid + Math.imul(ah2, bl3)) | 0;
                hi = (hi + Math.imul(ah2, bh3)) | 0;
                lo = (lo + Math.imul(al1, bl4)) | 0;
                mid = (mid + Math.imul(al1, bh4)) | 0;
                mid = (mid + Math.imul(ah1, bl4)) | 0;
                hi = (hi + Math.imul(ah1, bh4)) | 0;
                lo = (lo + Math.imul(al0, bl5)) | 0;
                mid = (mid + Math.imul(al0, bh5)) | 0;
                mid = (mid + Math.imul(ah0, bl5)) | 0;
                hi = (hi + Math.imul(ah0, bh5)) | 0;
                var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                w5 &= 0x3ffffff;
                /* k = 6 */
                lo = Math.imul(al6, bl0);
                mid = Math.imul(al6, bh0);
                mid = (mid + Math.imul(ah6, bl0)) | 0;
                hi = Math.imul(ah6, bh0);
                lo = (lo + Math.imul(al5, bl1)) | 0;
                mid = (mid + Math.imul(al5, bh1)) | 0;
                mid = (mid + Math.imul(ah5, bl1)) | 0;
                hi = (hi + Math.imul(ah5, bh1)) | 0;
                lo = (lo + Math.imul(al4, bl2)) | 0;
                mid = (mid + Math.imul(al4, bh2)) | 0;
                mid = (mid + Math.imul(ah4, bl2)) | 0;
                hi = (hi + Math.imul(ah4, bh2)) | 0;
                lo = (lo + Math.imul(al3, bl3)) | 0;
                mid = (mid + Math.imul(al3, bh3)) | 0;
                mid = (mid + Math.imul(ah3, bl3)) | 0;
                hi = (hi + Math.imul(ah3, bh3)) | 0;
                lo = (lo + Math.imul(al2, bl4)) | 0;
                mid = (mid + Math.imul(al2, bh4)) | 0;
                mid = (mid + Math.imul(ah2, bl4)) | 0;
                hi = (hi + Math.imul(ah2, bh4)) | 0;
                lo = (lo + Math.imul(al1, bl5)) | 0;
                mid = (mid + Math.imul(al1, bh5)) | 0;
                mid = (mid + Math.imul(ah1, bl5)) | 0;
                hi = (hi + Math.imul(ah1, bh5)) | 0;
                lo = (lo + Math.imul(al0, bl6)) | 0;
                mid = (mid + Math.imul(al0, bh6)) | 0;
                mid = (mid + Math.imul(ah0, bl6)) | 0;
                hi = (hi + Math.imul(ah0, bh6)) | 0;
                var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                w6 &= 0x3ffffff;
                /* k = 7 */
                lo = Math.imul(al7, bl0);
                mid = Math.imul(al7, bh0);
                mid = (mid + Math.imul(ah7, bl0)) | 0;
                hi = Math.imul(ah7, bh0);
                lo = (lo + Math.imul(al6, bl1)) | 0;
                mid = (mid + Math.imul(al6, bh1)) | 0;
                mid = (mid + Math.imul(ah6, bl1)) | 0;
                hi = (hi + Math.imul(ah6, bh1)) | 0;
                lo = (lo + Math.imul(al5, bl2)) | 0;
                mid = (mid + Math.imul(al5, bh2)) | 0;
                mid = (mid + Math.imul(ah5, bl2)) | 0;
                hi = (hi + Math.imul(ah5, bh2)) | 0;
                lo = (lo + Math.imul(al4, bl3)) | 0;
                mid = (mid + Math.imul(al4, bh3)) | 0;
                mid = (mid + Math.imul(ah4, bl3)) | 0;
                hi = (hi + Math.imul(ah4, bh3)) | 0;
                lo = (lo + Math.imul(al3, bl4)) | 0;
                mid = (mid + Math.imul(al3, bh4)) | 0;
                mid = (mid + Math.imul(ah3, bl4)) | 0;
                hi = (hi + Math.imul(ah3, bh4)) | 0;
                lo = (lo + Math.imul(al2, bl5)) | 0;
                mid = (mid + Math.imul(al2, bh5)) | 0;
                mid = (mid + Math.imul(ah2, bl5)) | 0;
                hi = (hi + Math.imul(ah2, bh5)) | 0;
                lo = (lo + Math.imul(al1, bl6)) | 0;
                mid = (mid + Math.imul(al1, bh6)) | 0;
                mid = (mid + Math.imul(ah1, bl6)) | 0;
                hi = (hi + Math.imul(ah1, bh6)) | 0;
                lo = (lo + Math.imul(al0, bl7)) | 0;
                mid = (mid + Math.imul(al0, bh7)) | 0;
                mid = (mid + Math.imul(ah0, bl7)) | 0;
                hi = (hi + Math.imul(ah0, bh7)) | 0;
                var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                w7 &= 0x3ffffff;
                /* k = 8 */
                lo = Math.imul(al8, bl0);
                mid = Math.imul(al8, bh0);
                mid = (mid + Math.imul(ah8, bl0)) | 0;
                hi = Math.imul(ah8, bh0);
                lo = (lo + Math.imul(al7, bl1)) | 0;
                mid = (mid + Math.imul(al7, bh1)) | 0;
                mid = (mid + Math.imul(ah7, bl1)) | 0;
                hi = (hi + Math.imul(ah7, bh1)) | 0;
                lo = (lo + Math.imul(al6, bl2)) | 0;
                mid = (mid + Math.imul(al6, bh2)) | 0;
                mid = (mid + Math.imul(ah6, bl2)) | 0;
                hi = (hi + Math.imul(ah6, bh2)) | 0;
                lo = (lo + Math.imul(al5, bl3)) | 0;
                mid = (mid + Math.imul(al5, bh3)) | 0;
                mid = (mid + Math.imul(ah5, bl3)) | 0;
                hi = (hi + Math.imul(ah5, bh3)) | 0;
                lo = (lo + Math.imul(al4, bl4)) | 0;
                mid = (mid + Math.imul(al4, bh4)) | 0;
                mid = (mid + Math.imul(ah4, bl4)) | 0;
                hi = (hi + Math.imul(ah4, bh4)) | 0;
                lo = (lo + Math.imul(al3, bl5)) | 0;
                mid = (mid + Math.imul(al3, bh5)) | 0;
                mid = (mid + Math.imul(ah3, bl5)) | 0;
                hi = (hi + Math.imul(ah3, bh5)) | 0;
                lo = (lo + Math.imul(al2, bl6)) | 0;
                mid = (mid + Math.imul(al2, bh6)) | 0;
                mid = (mid + Math.imul(ah2, bl6)) | 0;
                hi = (hi + Math.imul(ah2, bh6)) | 0;
                lo = (lo + Math.imul(al1, bl7)) | 0;
                mid = (mid + Math.imul(al1, bh7)) | 0;
                mid = (mid + Math.imul(ah1, bl7)) | 0;
                hi = (hi + Math.imul(ah1, bh7)) | 0;
                lo = (lo + Math.imul(al0, bl8)) | 0;
                mid = (mid + Math.imul(al0, bh8)) | 0;
                mid = (mid + Math.imul(ah0, bl8)) | 0;
                hi = (hi + Math.imul(ah0, bh8)) | 0;
                var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                w8 &= 0x3ffffff;
                /* k = 9 */
                lo = Math.imul(al9, bl0);
                mid = Math.imul(al9, bh0);
                mid = (mid + Math.imul(ah9, bl0)) | 0;
                hi = Math.imul(ah9, bh0);
                lo = (lo + Math.imul(al8, bl1)) | 0;
                mid = (mid + Math.imul(al8, bh1)) | 0;
                mid = (mid + Math.imul(ah8, bl1)) | 0;
                hi = (hi + Math.imul(ah8, bh1)) | 0;
                lo = (lo + Math.imul(al7, bl2)) | 0;
                mid = (mid + Math.imul(al7, bh2)) | 0;
                mid = (mid + Math.imul(ah7, bl2)) | 0;
                hi = (hi + Math.imul(ah7, bh2)) | 0;
                lo = (lo + Math.imul(al6, bl3)) | 0;
                mid = (mid + Math.imul(al6, bh3)) | 0;
                mid = (mid + Math.imul(ah6, bl3)) | 0;
                hi = (hi + Math.imul(ah6, bh3)) | 0;
                lo = (lo + Math.imul(al5, bl4)) | 0;
                mid = (mid + Math.imul(al5, bh4)) | 0;
                mid = (mid + Math.imul(ah5, bl4)) | 0;
                hi = (hi + Math.imul(ah5, bh4)) | 0;
                lo = (lo + Math.imul(al4, bl5)) | 0;
                mid = (mid + Math.imul(al4, bh5)) | 0;
                mid = (mid + Math.imul(ah4, bl5)) | 0;
                hi = (hi + Math.imul(ah4, bh5)) | 0;
                lo = (lo + Math.imul(al3, bl6)) | 0;
                mid = (mid + Math.imul(al3, bh6)) | 0;
                mid = (mid + Math.imul(ah3, bl6)) | 0;
                hi = (hi + Math.imul(ah3, bh6)) | 0;
                lo = (lo + Math.imul(al2, bl7)) | 0;
                mid = (mid + Math.imul(al2, bh7)) | 0;
                mid = (mid + Math.imul(ah2, bl7)) | 0;
                hi = (hi + Math.imul(ah2, bh7)) | 0;
                lo = (lo + Math.imul(al1, bl8)) | 0;
                mid = (mid + Math.imul(al1, bh8)) | 0;
                mid = (mid + Math.imul(ah1, bl8)) | 0;
                hi = (hi + Math.imul(ah1, bh8)) | 0;
                lo = (lo + Math.imul(al0, bl9)) | 0;
                mid = (mid + Math.imul(al0, bh9)) | 0;
                mid = (mid + Math.imul(ah0, bl9)) | 0;
                hi = (hi + Math.imul(ah0, bh9)) | 0;
                var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                w9 &= 0x3ffffff;
                /* k = 10 */
                lo = Math.imul(al9, bl1);
                mid = Math.imul(al9, bh1);
                mid = (mid + Math.imul(ah9, bl1)) | 0;
                hi = Math.imul(ah9, bh1);
                lo = (lo + Math.imul(al8, bl2)) | 0;
                mid = (mid + Math.imul(al8, bh2)) | 0;
                mid = (mid + Math.imul(ah8, bl2)) | 0;
                hi = (hi + Math.imul(ah8, bh2)) | 0;
                lo = (lo + Math.imul(al7, bl3)) | 0;
                mid = (mid + Math.imul(al7, bh3)) | 0;
                mid = (mid + Math.imul(ah7, bl3)) | 0;
                hi = (hi + Math.imul(ah7, bh3)) | 0;
                lo = (lo + Math.imul(al6, bl4)) | 0;
                mid = (mid + Math.imul(al6, bh4)) | 0;
                mid = (mid + Math.imul(ah6, bl4)) | 0;
                hi = (hi + Math.imul(ah6, bh4)) | 0;
                lo = (lo + Math.imul(al5, bl5)) | 0;
                mid = (mid + Math.imul(al5, bh5)) | 0;
                mid = (mid + Math.imul(ah5, bl5)) | 0;
                hi = (hi + Math.imul(ah5, bh5)) | 0;
                lo = (lo + Math.imul(al4, bl6)) | 0;
                mid = (mid + Math.imul(al4, bh6)) | 0;
                mid = (mid + Math.imul(ah4, bl6)) | 0;
                hi = (hi + Math.imul(ah4, bh6)) | 0;
                lo = (lo + Math.imul(al3, bl7)) | 0;
                mid = (mid + Math.imul(al3, bh7)) | 0;
                mid = (mid + Math.imul(ah3, bl7)) | 0;
                hi = (hi + Math.imul(ah3, bh7)) | 0;
                lo = (lo + Math.imul(al2, bl8)) | 0;
                mid = (mid + Math.imul(al2, bh8)) | 0;
                mid = (mid + Math.imul(ah2, bl8)) | 0;
                hi = (hi + Math.imul(ah2, bh8)) | 0;
                lo = (lo + Math.imul(al1, bl9)) | 0;
                mid = (mid + Math.imul(al1, bh9)) | 0;
                mid = (mid + Math.imul(ah1, bl9)) | 0;
                hi = (hi + Math.imul(ah1, bh9)) | 0;
                var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                w10 &= 0x3ffffff;
                /* k = 11 */
                lo = Math.imul(al9, bl2);
                mid = Math.imul(al9, bh2);
                mid = (mid + Math.imul(ah9, bl2)) | 0;
                hi = Math.imul(ah9, bh2);
                lo = (lo + Math.imul(al8, bl3)) | 0;
                mid = (mid + Math.imul(al8, bh3)) | 0;
                mid = (mid + Math.imul(ah8, bl3)) | 0;
                hi = (hi + Math.imul(ah8, bh3)) | 0;
                lo = (lo + Math.imul(al7, bl4)) | 0;
                mid = (mid + Math.imul(al7, bh4)) | 0;
                mid = (mid + Math.imul(ah7, bl4)) | 0;
                hi = (hi + Math.imul(ah7, bh4)) | 0;
                lo = (lo + Math.imul(al6, bl5)) | 0;
                mid = (mid + Math.imul(al6, bh5)) | 0;
                mid = (mid + Math.imul(ah6, bl5)) | 0;
                hi = (hi + Math.imul(ah6, bh5)) | 0;
                lo = (lo + Math.imul(al5, bl6)) | 0;
                mid = (mid + Math.imul(al5, bh6)) | 0;
                mid = (mid + Math.imul(ah5, bl6)) | 0;
                hi = (hi + Math.imul(ah5, bh6)) | 0;
                lo = (lo + Math.imul(al4, bl7)) | 0;
                mid = (mid + Math.imul(al4, bh7)) | 0;
                mid = (mid + Math.imul(ah4, bl7)) | 0;
                hi = (hi + Math.imul(ah4, bh7)) | 0;
                lo = (lo + Math.imul(al3, bl8)) | 0;
                mid = (mid + Math.imul(al3, bh8)) | 0;
                mid = (mid + Math.imul(ah3, bl8)) | 0;
                hi = (hi + Math.imul(ah3, bh8)) | 0;
                lo = (lo + Math.imul(al2, bl9)) | 0;
                mid = (mid + Math.imul(al2, bh9)) | 0;
                mid = (mid + Math.imul(ah2, bl9)) | 0;
                hi = (hi + Math.imul(ah2, bh9)) | 0;
                var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                w11 &= 0x3ffffff;
                /* k = 12 */
                lo = Math.imul(al9, bl3);
                mid = Math.imul(al9, bh3);
                mid = (mid + Math.imul(ah9, bl3)) | 0;
                hi = Math.imul(ah9, bh3);
                lo = (lo + Math.imul(al8, bl4)) | 0;
                mid = (mid + Math.imul(al8, bh4)) | 0;
                mid = (mid + Math.imul(ah8, bl4)) | 0;
                hi = (hi + Math.imul(ah8, bh4)) | 0;
                lo = (lo + Math.imul(al7, bl5)) | 0;
                mid = (mid + Math.imul(al7, bh5)) | 0;
                mid = (mid + Math.imul(ah7, bl5)) | 0;
                hi = (hi + Math.imul(ah7, bh5)) | 0;
                lo = (lo + Math.imul(al6, bl6)) | 0;
                mid = (mid + Math.imul(al6, bh6)) | 0;
                mid = (mid + Math.imul(ah6, bl6)) | 0;
                hi = (hi + Math.imul(ah6, bh6)) | 0;
                lo = (lo + Math.imul(al5, bl7)) | 0;
                mid = (mid + Math.imul(al5, bh7)) | 0;
                mid = (mid + Math.imul(ah5, bl7)) | 0;
                hi = (hi + Math.imul(ah5, bh7)) | 0;
                lo = (lo + Math.imul(al4, bl8)) | 0;
                mid = (mid + Math.imul(al4, bh8)) | 0;
                mid = (mid + Math.imul(ah4, bl8)) | 0;
                hi = (hi + Math.imul(ah4, bh8)) | 0;
                lo = (lo + Math.imul(al3, bl9)) | 0;
                mid = (mid + Math.imul(al3, bh9)) | 0;
                mid = (mid + Math.imul(ah3, bl9)) | 0;
                hi = (hi + Math.imul(ah3, bh9)) | 0;
                var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                w12 &= 0x3ffffff;
                /* k = 13 */
                lo = Math.imul(al9, bl4);
                mid = Math.imul(al9, bh4);
                mid = (mid + Math.imul(ah9, bl4)) | 0;
                hi = Math.imul(ah9, bh4);
                lo = (lo + Math.imul(al8, bl5)) | 0;
                mid = (mid + Math.imul(al8, bh5)) | 0;
                mid = (mid + Math.imul(ah8, bl5)) | 0;
                hi = (hi + Math.imul(ah8, bh5)) | 0;
                lo = (lo + Math.imul(al7, bl6)) | 0;
                mid = (mid + Math.imul(al7, bh6)) | 0;
                mid = (mid + Math.imul(ah7, bl6)) | 0;
                hi = (hi + Math.imul(ah7, bh6)) | 0;
                lo = (lo + Math.imul(al6, bl7)) | 0;
                mid = (mid + Math.imul(al6, bh7)) | 0;
                mid = (mid + Math.imul(ah6, bl7)) | 0;
                hi = (hi + Math.imul(ah6, bh7)) | 0;
                lo = (lo + Math.imul(al5, bl8)) | 0;
                mid = (mid + Math.imul(al5, bh8)) | 0;
                mid = (mid + Math.imul(ah5, bl8)) | 0;
                hi = (hi + Math.imul(ah5, bh8)) | 0;
                lo = (lo + Math.imul(al4, bl9)) | 0;
                mid = (mid + Math.imul(al4, bh9)) | 0;
                mid = (mid + Math.imul(ah4, bl9)) | 0;
                hi = (hi + Math.imul(ah4, bh9)) | 0;
                var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                w13 &= 0x3ffffff;
                /* k = 14 */
                lo = Math.imul(al9, bl5);
                mid = Math.imul(al9, bh5);
                mid = (mid + Math.imul(ah9, bl5)) | 0;
                hi = Math.imul(ah9, bh5);
                lo = (lo + Math.imul(al8, bl6)) | 0;
                mid = (mid + Math.imul(al8, bh6)) | 0;
                mid = (mid + Math.imul(ah8, bl6)) | 0;
                hi = (hi + Math.imul(ah8, bh6)) | 0;
                lo = (lo + Math.imul(al7, bl7)) | 0;
                mid = (mid + Math.imul(al7, bh7)) | 0;
                mid = (mid + Math.imul(ah7, bl7)) | 0;
                hi = (hi + Math.imul(ah7, bh7)) | 0;
                lo = (lo + Math.imul(al6, bl8)) | 0;
                mid = (mid + Math.imul(al6, bh8)) | 0;
                mid = (mid + Math.imul(ah6, bl8)) | 0;
                hi = (hi + Math.imul(ah6, bh8)) | 0;
                lo = (lo + Math.imul(al5, bl9)) | 0;
                mid = (mid + Math.imul(al5, bh9)) | 0;
                mid = (mid + Math.imul(ah5, bl9)) | 0;
                hi = (hi + Math.imul(ah5, bh9)) | 0;
                var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                w14 &= 0x3ffffff;
                /* k = 15 */
                lo = Math.imul(al9, bl6);
                mid = Math.imul(al9, bh6);
                mid = (mid + Math.imul(ah9, bl6)) | 0;
                hi = Math.imul(ah9, bh6);
                lo = (lo + Math.imul(al8, bl7)) | 0;
                mid = (mid + Math.imul(al8, bh7)) | 0;
                mid = (mid + Math.imul(ah8, bl7)) | 0;
                hi = (hi + Math.imul(ah8, bh7)) | 0;
                lo = (lo + Math.imul(al7, bl8)) | 0;
                mid = (mid + Math.imul(al7, bh8)) | 0;
                mid = (mid + Math.imul(ah7, bl8)) | 0;
                hi = (hi + Math.imul(ah7, bh8)) | 0;
                lo = (lo + Math.imul(al6, bl9)) | 0;
                mid = (mid + Math.imul(al6, bh9)) | 0;
                mid = (mid + Math.imul(ah6, bl9)) | 0;
                hi = (hi + Math.imul(ah6, bh9)) | 0;
                var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                w15 &= 0x3ffffff;
                /* k = 16 */
                lo = Math.imul(al9, bl7);
                mid = Math.imul(al9, bh7);
                mid = (mid + Math.imul(ah9, bl7)) | 0;
                hi = Math.imul(ah9, bh7);
                lo = (lo + Math.imul(al8, bl8)) | 0;
                mid = (mid + Math.imul(al8, bh8)) | 0;
                mid = (mid + Math.imul(ah8, bl8)) | 0;
                hi = (hi + Math.imul(ah8, bh8)) | 0;
                lo = (lo + Math.imul(al7, bl9)) | 0;
                mid = (mid + Math.imul(al7, bh9)) | 0;
                mid = (mid + Math.imul(ah7, bl9)) | 0;
                hi = (hi + Math.imul(ah7, bh9)) | 0;
                var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                w16 &= 0x3ffffff;
                /* k = 17 */
                lo = Math.imul(al9, bl8);
                mid = Math.imul(al9, bh8);
                mid = (mid + Math.imul(ah9, bl8)) | 0;
                hi = Math.imul(ah9, bh8);
                lo = (lo + Math.imul(al8, bl9)) | 0;
                mid = (mid + Math.imul(al8, bh9)) | 0;
                mid = (mid + Math.imul(ah8, bl9)) | 0;
                hi = (hi + Math.imul(ah8, bh9)) | 0;
                var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                w17 &= 0x3ffffff;
                /* k = 18 */
                lo = Math.imul(al9, bl9);
                mid = Math.imul(al9, bh9);
                mid = (mid + Math.imul(ah9, bl9)) | 0;
                hi = Math.imul(ah9, bh9);
                var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                w18 &= 0x3ffffff;
                o[0] = w0;
                o[1] = w1;
                o[2] = w2;
                o[3] = w3;
                o[4] = w4;
                o[5] = w5;
                o[6] = w6;
                o[7] = w7;
                o[8] = w8;
                o[9] = w9;
                o[10] = w10;
                o[11] = w11;
                o[12] = w12;
                o[13] = w13;
                o[14] = w14;
                o[15] = w15;
                o[16] = w16;
                o[17] = w17;
                o[18] = w18;
                if (c !== 0) {
                    o[19] = c;
                    out.length++;
                }
                return out;
            };

            // Polyfill comb
            if (!Math.imul) {
                comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
                out.negative = num.negative ^ self.negative;
                out.length = self.length + num.length;

                var carry = 0;
                var hncarry = 0;
                for (var k = 0; k < out.length - 1; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                        var i = k - j;
                        var a = self.words[i] | 0;
                        var b = num.words[j] | 0;
                        var r = a * b;

                        var lo = r & 0x3ffffff;
                        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                        lo = (lo + rword) | 0;
                        rword = lo & 0x3ffffff;
                        ncarry = (ncarry + (lo >>> 26)) | 0;

                        hncarry += ncarry >>> 26;
                        ncarry &= 0x3ffffff;
                    }
                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                }
                if (carry !== 0) {
                    out.words[k] = carry;
                } else {
                    out.length--;
                }

                return out.strip();
            }

            function jumboMulTo(self, num, out) {
                var fftm = new FFTM();
                return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
                var res;
                var len = this.length + num.length;
                if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                } else {
                    res = jumboMulTo(this, num, out);
                }

                return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM(x, y) {
                this.x = x;
                this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
                var t = new Array(N);
                var l = BN.prototype._countBits(N) - 1;
                for (var i = 0; i < N; i++) {
                    t[i] = this.revBin(i, l, N);
                }

                return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin(x, l, N) {
                if (x === 0 || x === N - 1) return x;

                var rb = 0;
                for (var i = 0; i < l; i++) {
                    rb |= (x & 1) << (l - i - 1);
                    x >>= 1;
                }

                return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                for (var i = 0; i < N; i++) {
                    rtws[i] = rws[rbt[i]];
                    itws[i] = iws[rbt[i]];
                }
            };

            FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                this.permute(rbt, rws, iws, rtws, itws, N);

                for (var s = 1; s < N; s <<= 1) {
                    var l = s << 1;

                    var rtwdf = Math.cos(2 * Math.PI / l);
                    var itwdf = Math.sin(2 * Math.PI / l);

                    for (var p = 0; p < N; p += l) {
                        var rtwdf_ = rtwdf;
                        var itwdf_ = itwdf;

                        for (var j = 0; j < s; j++) {
                            var re = rtws[p + j];
                            var ie = itws[p + j];

                            var ro = rtws[p + j + s];
                            var io = itws[p + j + s];

                            var rx = rtwdf_ * ro - itwdf_ * io;

                            io = rtwdf_ * io + itwdf_ * ro;
                            ro = rx;

                            rtws[p + j] = re + ro;
                            itws[p + j] = ie + io;

                            rtws[p + j + s] = re - ro;
                            itws[p + j + s] = ie - io;

                            /* jshint maxdepth : false */
                            if (j !== l) {
                                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                rtwdf_ = rx;
                            }
                        }
                    }
                }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                var N = Math.max(m, n) | 1;
                var odd = N & 1;
                var i = 0;
                for (N = N / 2 | 0; N; N = N >>> 1) {
                    i++;
                }

                return 1 << i + 1 + odd;
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                if (N <= 1) return;

                for (var i = 0; i < N / 2; i++) {
                    var t = rws[i];

                    rws[i] = rws[N - i - 1];
                    rws[N - i - 1] = t;

                    t = iws[i];

                    iws[i] = -iws[N - i - 1];
                    iws[N - i - 1] = -t;
                }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                var carry = 0;
                for (var i = 0; i < N / 2; i++) {
                    var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                        Math.round(ws[2 * i] / N) +
                        carry;

                    ws[i] = w & 0x3ffffff;

                    if (w < 0x4000000) {
                        carry = 0;
                    } else {
                        carry = w / 0x4000000 | 0;
                    }
                }

                return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                var carry = 0;
                for (var i = 0; i < len; i++) {
                    carry = carry + (ws[i] | 0);

                    rws[2 * i] = carry & 0x1fff;
                    carry = carry >>> 13;
                    rws[2 * i + 1] = carry & 0x1fff;
                    carry = carry >>> 13;
                }

                // Pad with zeroes
                for (i = 2 * len; i < N; ++i) {
                    rws[i] = 0;
                }

                assert(carry === 0);
                assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
                var ph = new Array(N);
                for (var i = 0; i < N; i++) {
                    ph[i] = 0;
                }

                return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
                var N = 2 * this.guessLen13b(x.length, y.length);

                var rbt = this.makeRBT(N);

                var _ = this.stub(N);

                var rws = new Array(N);
                var rwst = new Array(N);
                var iwst = new Array(N);

                var nrws = new Array(N);
                var nrwst = new Array(N);
                var niwst = new Array(N);

                var rmws = out.words;
                rmws.length = N;

                this.convert13b(x.words, x.length, rws, N);
                this.convert13b(y.words, y.length, nrws, N);

                this.transform(rws, _, rwst, iwst, N, rbt);
                this.transform(nrws, _, nrwst, niwst, N, rbt);

                for (var i = 0; i < N; i++) {
                    var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                    iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                    rwst[i] = rx;
                }

                this.conjugate(rwst, iwst, N);
                this.transform(rwst, iwst, rmws, _, N, rbt);
                this.conjugate(rmws, _, N);
                this.normalize13b(rmws, N);

                out.negative = x.negative ^ y.negative;
                out.length = x.length + y.length;
                return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul(num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf(num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul(num) {
                return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);

                // Carry
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                    carry >>= 26;
                    carry += (w / 0x4000000) | 0;
                    // NOTE: lo is 27bit maximum
                    carry += lo >>> 26;
                    this.words[i] = lo & 0x3ffffff;
                }

                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }

                return this;
            };

            BN.prototype.muln = function muln(num) {
                return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr() {
                return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr() {
                return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow(num) {
                var w = toBitArray(num);
                if (w.length === 0) return new BN(1);

                // Skip leading zeroes
                var res = this;
                for (var i = 0; i < w.length; i++, res = res.sqr()) {
                    if (w[i] !== 0) break;
                }

                if (++i < w.length) {
                    for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                        if (w[i] === 0) continue;

                        res = res.mul(q);
                    }
                }

                return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln(bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;
                var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                var i;

                if (r !== 0) {
                    var carry = 0;

                    for (i = 0; i < this.length; i++) {
                        var newCarry = this.words[i] & carryMask;
                        var c = ((this.words[i] | 0) - newCarry) << r;
                        this.words[i] = c | carry;
                        carry = newCarry >>> (26 - r);
                    }

                    if (carry) {
                        this.words[i] = carry;
                        this.length++;
                    }
                }

                if (s !== 0) {
                    for (i = this.length - 1; i >= 0; i--) {
                        this.words[i + s] = this.words[i];
                    }

                    for (i = 0; i < s; i++) {
                        this.words[i] = 0;
                    }

                    this.length += s;
                }

                return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                assert(typeof bits === 'number' && bits >= 0);
                var h;
                if (hint) {
                    h = (hint - (hint % 26)) / 26;
                } else {
                    h = 0;
                }

                var r = bits % 26;
                var s = Math.min((bits - r) / 26, this.length);
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                var maskedWords = extended;

                h -= s;
                h = Math.max(0, h);

                // Extended mode, copy masked part
                if (maskedWords) {
                    for (var i = 0; i < s; i++) {
                        maskedWords.words[i] = this.words[i];
                    }
                    maskedWords.length = s;
                }

                if (s === 0) {
                    // No-op, we should not move anything at all
                } else if (this.length > s) {
                    this.length -= s;
                    for (i = 0; i < this.length; i++) {
                        this.words[i] = this.words[i + s];
                    }
                } else {
                    this.words[0] = 0;
                    this.length = 1;
                }

                var carry = 0;
                for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                    var word = this.words[i] | 0;
                    this.words[i] = (carry << (26 - r)) | (word >>> r);
                    carry = word & mask;
                }

                // Push carried bits as a mask
                if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                }

                if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                }

                return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln(bits) {
                return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
                return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn(bits) {
                return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
                return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn(bit) {
                assert(typeof bit === 'number' && bit >= 0);
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) return false;

                // Check bit and return
                var w = this.words[s];

                return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn(bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;

                assert(this.negative === 0, 'imaskn works only with positive numbers');

                if (this.length <= s) {
                    return this;
                }

                if (r !== 0) {
                    s++;
                }
                this.length = Math.min(s, this.length);

                if (r !== 0) {
                    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                    this.words[this.length - 1] &= mask;
                }

                return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn(bits) {
                return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn(num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.isubn(-num);

                // Possible sign change
                if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) < num) {
                        this.words[0] = num - (this.words[0] | 0);
                        this.negative = 0;
                        return this;
                    }

                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                }

                // Add without checks
                return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
                this.words[0] += num;

                // Carry
                for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                    this.words[i] -= 0x4000000;
                    if (i === this.length - 1) {
                        this.words[i + 1] = 1;
                    } else {
                        this.words[i + 1]++;
                    }
                }
                this.length = Math.max(this.length, i + 1);

                return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn(num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.iaddn(-num);

                if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                }

                this.words[0] -= num;

                if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                } else {
                    // Carry
                    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                        this.words[i] += 0x4000000;
                        this.words[i + 1] -= 1;
                    }
                }

                return this.strip();
            };

            BN.prototype.addn = function addn(num) {
                return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
                return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
                this.negative = 0;

                return this;
            };

            BN.prototype.abs = function abs() {
                return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                var len = num.length + shift;
                var i;

                this._expand(len);

                var w;
                var carry = 0;
                for (i = 0; i < num.length; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 0x3ffffff;
                    carry = (w >> 26) - ((right / 0x4000000) | 0);
                    this.words[i + shift] = w & 0x3ffffff;
                }
                for (; i < this.length - shift; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 0x3ffffff;
                }

                if (carry === 0) return this.strip();

                // Subtraction overflow
                assert(carry === -1);
                carry = 0;
                for (i = 0; i < this.length; i++) {
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 0x3ffffff;
                }
                this.negative = 1;

                return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
                var shift = this.length - num.length;

                var a = this.clone();
                var b = num;

                // Normalize
                var bhi = b.words[b.length - 1] | 0;
                var bhiBits = this._countBits(bhi);
                shift = 26 - bhiBits;
                if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                }

                // Initialize quotient
                var m = a.length - b.length;
                var q;

                if (mode !== 'mod') {
                    q = new BN(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);
                    for (var i = 0; i < q.length; i++) {
                        q.words[i] = 0;
                    }
                }

                var diff = a.clone()._ishlnsubmul(b, 1, m);
                if (diff.negative === 0) {
                    a = diff;
                    if (q) {
                        q.words[m] = 1;
                    }
                }

                for (var j = m - 1; j >= 0; j--) {
                    var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                        (a.words[b.length + j - 1] | 0);

                    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                    // (0x7ffffff)
                    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                    a._ishlnsubmul(b, qj, j);
                    while (a.negative !== 0) {
                        qj--;
                        a.negative = 0;
                        a._ishlnsubmul(b, 1, j);
                        if (!a.isZero()) {
                            a.negative ^= 1;
                        }
                    }
                    if (q) {
                        q.words[j] = qj;
                    }
                }
                if (q) {
                    q.strip();
                }
                a.strip();

                // Denormalize
                if (mode !== 'div' && shift !== 0) {
                    a.iushrn(shift);
                }

                return {
                    div: q || null,
                    mod: a
                };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod(num, mode, positive) {
                assert(!num.isZero());

                if (this.isZero()) {
                    return {
                        div: new BN(0),
                        mod: new BN(0)
                    };
                }

                var div, mod, res;
                if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);

                    if (mode !== 'mod') {
                        div = res.div.neg();
                    }

                    if (mode !== 'div') {
                        mod = res.mod.neg();
                        if (positive && mod.negative !== 0) {
                            mod.iadd(num);
                        }
                    }

                    return {
                        div: div,
                        mod: mod
                    };
                }

                if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);

                    if (mode !== 'mod') {
                        div = res.div.neg();
                    }

                    return {
                        div: div,
                        mod: res.mod
                    };
                }

                if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);

                    if (mode !== 'div') {
                        mod = res.mod.neg();
                        if (positive && mod.negative !== 0) {
                            mod.isub(num);
                        }
                    }

                    return {
                        div: res.div,
                        mod: mod
                    };
                }

                // Both numbers are positive at this point

                // Strip both numbers to approximate shift value
                if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                        div: new BN(0),
                        mod: this
                    };
                }

                // Very short reduction
                if (num.length === 1) {
                    if (mode === 'div') {
                        return {
                            div: this.divn(num.words[0]),
                            mod: null
                        };
                    }

                    if (mode === 'mod') {
                        return {
                            div: null,
                            mod: new BN(this.modn(num.words[0]))
                        };
                    }

                    return {
                        div: this.divn(num.words[0]),
                        mod: new BN(this.modn(num.words[0]))
                    };
                }

                return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div(num) {
                return this.divmod(num, 'div', false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod(num) {
                return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod(num) {
                return this.divmod(num, 'mod', true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound(num) {
                var dm = this.divmod(num);

                // Fast case - exact division
                if (dm.mod.isZero()) return dm.div;

                var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                var half = num.ushrn(1);
                var r2 = num.andln(1);
                var cmp = mod.cmp(half);

                // Round down
                if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

                // Round up
                return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
                assert(num <= 0x3ffffff);
                var p = (1 << 26) % num;

                var acc = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    acc = (p * acc + (this.words[i] | 0)) % num;
                }

                return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn(num) {
                assert(num <= 0x3ffffff);

                var carry = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    var w = (this.words[i] | 0) + carry * 0x4000000;
                    this.words[i] = (w / num) | 0;
                    carry = w % num;
                }

                return this.strip();
            };

            BN.prototype.divn = function divn(num) {
                return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var x = this;
                var y = p.clone();

                if (x.negative !== 0) {
                    x = x.umod(p);
                } else {
                    x = x.clone();
                }

                // A * x + B * y = x
                var A = new BN(1);
                var B = new BN(0);

                // C * x + D * y = y
                var C = new BN(0);
                var D = new BN(1);

                var g = 0;

                while (x.isEven() && y.isEven()) {
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                }

                var yp = y.clone();
                var xp = x.clone();

                while (!x.isZero()) {
                    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                    if (i > 0) {
                        x.iushrn(i);
                        while (i-- > 0) {
                            if (A.isOdd() || B.isOdd()) {
                                A.iadd(yp);
                                B.isub(xp);
                            }

                            A.iushrn(1);
                            B.iushrn(1);
                        }
                    }

                    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                    if (j > 0) {
                        y.iushrn(j);
                        while (j-- > 0) {
                            if (C.isOdd() || D.isOdd()) {
                                C.iadd(yp);
                                D.isub(xp);
                            }

                            C.iushrn(1);
                            D.iushrn(1);
                        }
                    }

                    if (x.cmp(y) >= 0) {
                        x.isub(y);
                        A.isub(C);
                        B.isub(D);
                    } else {
                        y.isub(x);
                        C.isub(A);
                        D.isub(B);
                    }
                }

                return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp(p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var a = this;
                var b = p.clone();

                if (a.negative !== 0) {
                    a = a.umod(p);
                } else {
                    a = a.clone();
                }

                var x1 = new BN(1);
                var x2 = new BN(0);

                var delta = b.clone();

                while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                    if (i > 0) {
                        a.iushrn(i);
                        while (i-- > 0) {
                            if (x1.isOdd()) {
                                x1.iadd(delta);
                            }

                            x1.iushrn(1);
                        }
                    }

                    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                    if (j > 0) {
                        b.iushrn(j);
                        while (j-- > 0) {
                            if (x2.isOdd()) {
                                x2.iadd(delta);
                            }

                            x2.iushrn(1);
                        }
                    }

                    if (a.cmp(b) >= 0) {
                        a.isub(b);
                        x1.isub(x2);
                    } else {
                        b.isub(a);
                        x2.isub(x1);
                    }
                }

                var res;
                if (a.cmpn(1) === 0) {
                    res = x1;
                } else {
                    res = x2;
                }

                if (res.cmpn(0) < 0) {
                    res.iadd(p);
                }

                return res;
            };

            BN.prototype.gcd = function gcd(num) {
                if (this.isZero()) return num.abs();
                if (num.isZero()) return this.abs();

                var a = this.clone();
                var b = num.clone();
                a.negative = 0;
                b.negative = 0;

                // Remove common factor of two
                for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                    a.iushrn(1);
                    b.iushrn(1);
                }

                do {
                    while (a.isEven()) {
                        a.iushrn(1);
                    }
                    while (b.isEven()) {
                        b.iushrn(1);
                    }

                    var r = a.cmp(b);
                    if (r < 0) {
                        // Swap `a` and `b` to make `a` always bigger than `b`
                        var t = a;
                        a = b;
                        b = t;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                        break;
                    }

                    a.isub(b);
                } while (true);

                return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm(num) {
                return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
                return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
                return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln(num) {
                return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn(bit) {
                assert(typeof bit === 'number');
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) {
                    this._expand(s + 1);
                    this.words[s] |= q;
                    return this;
                }

                // Add bit and propagate, if needed
                var carry = q;
                for (var i = s; carry !== 0 && i < this.length; i++) {
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 0x3ffffff;
                    this.words[i] = w;
                }
                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }
                return this;
            };

            BN.prototype.isZero = function isZero() {
                return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
                var negative = num < 0;

                if (this.negative !== 0 && !negative) return -1;
                if (this.negative === 0 && negative) return 1;

                this.strip();

                var res;
                if (this.length > 1) {
                    res = 1;
                } else {
                    if (negative) {
                        num = -num;
                    }

                    assert(num <= 0x3ffffff, 'Number is too big');

                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                }
                if (this.negative !== 0) return -res | 0;
                return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp(num) {
                if (this.negative !== 0 && num.negative === 0) return -1;
                if (this.negative === 0 && num.negative !== 0) return 1;

                var res = this.ucmp(num);
                if (this.negative !== 0) return -res | 0;
                return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp(num) {
                // At this point both numbers have the same sign
                if (this.length > num.length) return 1;
                if (this.length < num.length) return -1;

                var res = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;

                    if (a === b) continue;
                    if (a < b) {
                        res = -1;
                    } else if (a > b) {
                        res = 1;
                    }
                    break;
                }
                return res;
            };

            BN.prototype.gtn = function gtn(num) {
                return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
                return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
                return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
                return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
                return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
                return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
                return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
                return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
                return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
                return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red(num) {
                return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
                assert(!this.red, 'Already a number in reduction context');
                assert(this.negative === 0, 'red works only with positives');
                return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
                assert(this.red, 'fromRed works only with numbers in reduction context');
                return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
                this.red = ctx;
                return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
                assert(!this.red, 'Already a number in reduction context');
                return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
                assert(this.red, 'redAdd works only with red numbers');
                return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
                assert(this.red, 'redIAdd works only with red numbers');
                return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
                assert(this.red, 'redSub works only with red numbers');
                return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
                assert(this.red, 'redISub works only with red numbers');
                return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
                assert(this.red, 'redShl works only with red numbers');
                return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
                assert(this.red, 'redSqr works only with red numbers');
                this.red._verify1(this);
                return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
                assert(this.red, 'redISqr works only with red numbers');
                this.red._verify1(this);
                return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt() {
                assert(this.red, 'redSqrt works only with red numbers');
                this.red._verify1(this);
                return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
                assert(this.red, 'redInvm works only with red numbers');
                this.red._verify1(this);
                return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg() {
                assert(this.red, 'redNeg works only with red numbers');
                this.red._verify1(this);
                return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
                assert(this.red && !num.red, 'redPow(normalNum)');
                this.red._verify1(this);
                return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };

            // Pseudo-Mersenne prime
            function MPrime(name, p) {
                // P = 2 ^ N - K
                this.name = name;
                this.p = new BN(p, 16);
                this.n = this.p.bitLength();
                this.k = new BN(1).iushln(this.n).isub(this.p);

                this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
                var tmp = new BN(null);
                tmp.words = new Array(Math.ceil(this.n / 13));
                return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
                // Assumes that `num` is less than `P^2`
                // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                var r = num;
                var rlen;

                do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                } while (rlen > this.n);

                var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                } else if (cmp > 0) {
                    r.isub(this.p);
                } else {
                    r.strip();
                }

                return r;
            };

            MPrime.prototype.split = function split(input, out) {
                input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
                return num.imul(this.k);
            };

            function K256() {
                MPrime.call(
                    this,
                    'k256',
                    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
            }

            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
                // 256 = 9 * 26 + 22
                var mask = 0x3fffff;

                var outLen = Math.min(input.length, 9);
                for (var i = 0; i < outLen; i++) {
                    output.words[i] = input.words[i];
                }
                output.length = outLen;

                if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                }

                // Shift by 9 limbs
                var prev = input.words[9];
                output.words[output.length++] = prev & mask;

                for (i = 10; i < input.length; i++) {
                    var next = input.words[i] | 0;
                    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                    prev = next;
                }
                prev >>>= 22;
                input.words[i - 10] = prev;
                if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                } else {
                    input.length -= 9;
                }
            };

            K256.prototype.imulK = function imulK(num) {
                // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                num.words[num.length] = 0;
                num.words[num.length + 1] = 0;
                num.length += 2;

                // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                var lo = 0;
                for (var i = 0; i < num.length; i++) {
                    var w = num.words[i] | 0;
                    lo += w * 0x3d1;
                    num.words[i] = lo & 0x3ffffff;
                    lo = w * 0x40 + ((lo / 0x4000000) | 0);
                }

                // Fast length reduction
                if (num.words[num.length - 1] === 0) {
                    num.length--;
                    if (num.words[num.length - 1] === 0) {
                        num.length--;
                    }
                }
                return num;
            };

            function P224() {
                MPrime.call(
                    this,
                    'p224',
                    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
            }

            inherits(P224, MPrime);

            function P192() {
                MPrime.call(
                    this,
                    'p192',
                    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
            }

            inherits(P192, MPrime);

            function P25519() {
                // 2 ^ 255 - 19
                MPrime.call(
                    this,
                    '25519',
                    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
            }

            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
                // K = 0x13
                var carry = 0;
                for (var i = 0; i < num.length; i++) {
                    var hi = (num.words[i] | 0) * 0x13 + carry;
                    var lo = hi & 0x3ffffff;
                    hi >>>= 26;

                    num.words[i] = lo;
                    carry = hi;
                }
                if (carry !== 0) {
                    num.words[num.length++] = carry;
                }
                return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime(name) {
                // Cached version of prime
                if (primes[name]) return primes[name];

                var prime;
                if (name === 'k256') {
                    prime = new K256();
                } else if (name === 'p224') {
                    prime = new P224();
                } else if (name === 'p192') {
                    prime = new P192();
                } else if (name === 'p25519') {
                    prime = new P25519();
                } else {
                    throw new Error('Unknown prime ' + name);
                }
                primes[name] = prime;

                return prime;
            };

            //
            // Base reduction engine
            //
            function Red(m) {
                if (typeof m === 'string') {
                    var prime = BN._prime(m);
                    this.m = prime.p;
                    this.prime = prime;
                } else {
                    assert(m.gtn(1), 'modulus must be greater than 1');
                    this.m = m;
                    this.prime = null;
                }
            }

            Red.prototype._verify1 = function _verify1(a) {
                assert(a.negative === 0, 'red works only with positives');
                assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2(a, b) {
                assert((a.negative | b.negative) === 0, 'red works only with positives');
                assert(a.red && a.red === b.red,
                    'red works only with red numbers');
            };

            Red.prototype.imod = function imod(a) {
                if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
                if (a.isZero()) {
                    return a.clone();
                }

                return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
                this._verify2(a, b);

                var res = a.add(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
                this._verify2(a, b);

                var res = a.iadd(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res;
            };

            Red.prototype.sub = function sub(a, b) {
                this._verify2(a, b);

                var res = a.sub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
                this._verify2(a, b);

                var res = a.isub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res;
            };

            Red.prototype.shl = function shl(a, num) {
                this._verify1(a);
                return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
                this._verify2(a, b);
                return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
                this._verify2(a, b);
                return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
                return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
                return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
                if (a.isZero()) return a.clone();

                var mod3 = this.m.andln(3);
                assert(mod3 % 2 === 1);

                // Fast case
                if (mod3 === 3) {
                    var pow = this.m.add(new BN(1)).iushrn(2);
                    return this.pow(a, pow);
                }

                // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                //
                // Find Q and S, that Q * 2 ^ S = (P - 1)
                var q = this.m.subn(1);
                var s = 0;
                while (!q.isZero() && q.andln(1) === 0) {
                    s++;
                    q.iushrn(1);
                }
                assert(!q.isZero());

                var one = new BN(1).toRed(this);
                var nOne = one.redNeg();

                // Find quadratic non-residue
                // NOTE: Max is such because of generalized Riemann hypothesis.
                var lpow = this.m.subn(1).iushrn(1);
                var z = this.m.bitLength();
                z = new BN(2 * z * z).toRed(this);

                while (this.pow(z, lpow).cmp(nOne) !== 0) {
                    z.redIAdd(nOne);
                }

                var c = this.pow(z, q);
                var r = this.pow(a, q.addn(1).iushrn(1));
                var t = this.pow(a, q);
                var m = s;
                while (t.cmp(one) !== 0) {
                    var tmp = t;
                    for (var i = 0; tmp.cmp(one) !== 0; i++) {
                        tmp = tmp.redSqr();
                    }
                    assert(i < m);
                    var b = this.pow(c, new BN(1).iushln(m - i - 1));

                    r = r.redMul(b);
                    c = b.redSqr();
                    t = t.redMul(c);
                    m = i;
                }

                return r;
            };

            Red.prototype.invm = function invm(a) {
                var inv = a._invmp(this.m);
                if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                } else {
                    return this.imod(inv);
                }
            };

            Red.prototype.pow = function pow(a, num) {
                if (num.isZero()) return new BN(1).toRed(this);
                if (num.cmpn(1) === 0) return a.clone();

                var windowSize = 4;
                var wnd = new Array(1 << windowSize);
                wnd[0] = new BN(1).toRed(this);
                wnd[1] = a;
                for (var i = 2; i < wnd.length; i++) {
                    wnd[i] = this.mul(wnd[i - 1], a);
                }

                var res = wnd[0];
                var current = 0;
                var currentLen = 0;
                var start = num.bitLength() % 26;
                if (start === 0) {
                    start = 26;
                }

                for (i = num.length - 1; i >= 0; i--) {
                    var word = num.words[i];
                    for (var j = start - 1; j >= 0; j--) {
                        var bit = (word >> j) & 1;
                        if (res !== wnd[0]) {
                            res = this.sqr(res);
                        }

                        if (bit === 0 && current === 0) {
                            currentLen = 0;
                            continue;
                        }

                        current <<= 1;
                        current |= bit;
                        currentLen++;
                        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                        res = this.mul(res, wnd[current]);
                        currentLen = 0;
                        current = 0;
                    }
                    start = 26;
                }

                return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
                var r = num.umod(this.m);

                return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
                var res = num.clone();
                res.red = null;
                return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont(num) {
                return new Mont(num);
            };

            function Mont(m) {
                Red.call(this, m);

                this.shift = this.m.bitLength();
                if (this.shift % 26 !== 0) {
                    this.shift += 26 - (this.shift % 26);
                }

                this.r = new BN(1).iushln(this.shift);
                this.r2 = this.imod(this.r.sqr());
                this.rinv = this.r._invmp(this.m);

                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                this.minv = this.minv.umod(this.r);
                this.minv = this.r.sub(this.minv);
            }

            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
                return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
                var r = this.imod(num.mul(this.rinv));
                r.red = null;
                return r;
            };

            Mont.prototype.imul = function imul(a, b) {
                if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                }

                var t = a.imul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;

                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }

                return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
                if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

                var t = a.mul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;
                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }

                return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
                // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                var res = this.imod(a._invmp(this.m).mul(this.r2));
                return res._forceRed(this);
            };
        })(typeof module === 'undefined' || module, this);

    }, {"buffer": 22}],
    21: [function (require, module, exports) {
        var r;

        module.exports = function rand(len) {
            if (!r)
                r = new Rand(null);

            return r.generate(len);
        };

        function Rand(rand) {
            this.rand = rand;
        }

        module.exports.Rand = Rand;

        Rand.prototype.generate = function generate(len) {
            return this._rand(len);
        };

// Emulate crypto API using randy
        Rand.prototype._rand = function _rand(n) {
            if (this.rand.getBytes)
                return this.rand.getBytes(n);

            var res = new Uint8Array(n);
            for (var i = 0; i < res.length; i++)
                res[i] = this.rand.getByte();
            return res;
        };

        if (typeof self === 'object') {
            if (self.crypto && self.crypto.getRandomValues) {
                // Modern browsers
                Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.crypto.getRandomValues(arr);
                    return arr;
                };
            } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                // IE
                Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.msCrypto.getRandomValues(arr);
                    return arr;
                };

                // Safari's WebWorkers do not have `crypto`
            } else if (typeof window === 'object') {
                // Old junk
                Rand.prototype._rand = function () {
                    throw new Error('Not implemented yet');
                };
            }
        } else {
            // Node.js or Web worker with no crypto support
            try {
                var crypto = require('crypto');
                if (typeof crypto.randomBytes !== 'function')
                    throw new Error('Not supported');

                Rand.prototype._rand = function _rand(n) {
                    return crypto.randomBytes(n);
                };
            } catch (e) {
            }
        }

    }, {"crypto": 22}],
    22: [function (require, module, exports) {

    }, {}],
    23: [function (require, module, exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

        var Buffer = require('safe-buffer').Buffer

        function asUInt32Array(buf) {
            if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

            var len = (buf.length / 4) | 0
            var out = new Array(len)

            for (var i = 0; i < len; i++) {
                out[i] = buf.readUInt32BE(i * 4)
            }

            return out
        }

        function scrubVec(v) {
            for (var i = 0; i < v.length; v++) {
                v[i] = 0
            }
        }

        function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
            var SUB_MIX0 = SUB_MIX[0]
            var SUB_MIX1 = SUB_MIX[1]
            var SUB_MIX2 = SUB_MIX[2]
            var SUB_MIX3 = SUB_MIX[3]

            var s0 = M[0] ^ keySchedule[0]
            var s1 = M[1] ^ keySchedule[1]
            var s2 = M[2] ^ keySchedule[2]
            var s3 = M[3] ^ keySchedule[3]
            var t0, t1, t2, t3
            var ksRow = 4

            for (var round = 1; round < nRounds; round++) {
                t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
                t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
                t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
                t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
                s0 = t0
                s1 = t1
                s2 = t2
                s3 = t3
            }

            t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
            t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
            t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
            t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
            t0 = t0 >>> 0
            t1 = t1 >>> 0
            t2 = t2 >>> 0
            t3 = t3 >>> 0

            return [t0, t1, t2, t3]
        }

// AES constants
        var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
        var G = (function () {
            // Compute double table
            var d = new Array(256)
            for (var j = 0; j < 256; j++) {
                if (j < 128) {
                    d[j] = j << 1
                } else {
                    d[j] = (j << 1) ^ 0x11b
                }
            }

            var SBOX = []
            var INV_SBOX = []
            var SUB_MIX = [[], [], [], []]
            var INV_SUB_MIX = [[], [], [], []]

            // Walk GF(2^8)
            var x = 0
            var xi = 0
            for (var i = 0; i < 256; ++i) {
                // Compute sbox
                var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
                sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
                SBOX[x] = sx
                INV_SBOX[sx] = x

                // Compute multiplication
                var x2 = d[x]
                var x4 = d[x2]
                var x8 = d[x4]

                // Compute sub bytes, mix columns tables
                var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
                SUB_MIX[0][x] = (t << 24) | (t >>> 8)
                SUB_MIX[1][x] = (t << 16) | (t >>> 16)
                SUB_MIX[2][x] = (t << 8) | (t >>> 24)
                SUB_MIX[3][x] = t

                // Compute inv sub bytes, inv mix columns tables
                t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
                INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
                INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
                INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
                INV_SUB_MIX[3][sx] = t

                if (x === 0) {
                    x = xi = 1
                } else {
                    x = x2 ^ d[d[d[x8 ^ x2]]]
                    xi ^= d[d[xi]]
                }
            }

            return {
                SBOX: SBOX,
                INV_SBOX: INV_SBOX,
                SUB_MIX: SUB_MIX,
                INV_SUB_MIX: INV_SUB_MIX
            }
        })()

        function AES(key) {
            this._key = asUInt32Array(key)
            this._reset()
        }

        AES.blockSize = 4 * 4
        AES.keySize = 256 / 8
        AES.prototype.blockSize = AES.blockSize
        AES.prototype.keySize = AES.keySize
        AES.prototype._reset = function () {
            var keyWords = this._key
            var keySize = keyWords.length
            var nRounds = keySize + 6
            var ksRows = (nRounds + 1) * 4

            var keySchedule = []
            for (var k = 0; k < keySize; k++) {
                keySchedule[k] = keyWords[k]
            }

            for (k = keySize; k < ksRows; k++) {
                var t = keySchedule[k - 1]

                if (k % keySize === 0) {
                    t = (t << 8) | (t >>> 24)
                    t =
                        (G.SBOX[t >>> 24] << 24) |
                        (G.SBOX[(t >>> 16) & 0xff] << 16) |
                        (G.SBOX[(t >>> 8) & 0xff] << 8) |
                        (G.SBOX[t & 0xff])

                    t ^= RCON[(k / keySize) | 0] << 24
                } else if (keySize > 6 && k % keySize === 4) {
                    t =
                        (G.SBOX[t >>> 24] << 24) |
                        (G.SBOX[(t >>> 16) & 0xff] << 16) |
                        (G.SBOX[(t >>> 8) & 0xff] << 8) |
                        (G.SBOX[t & 0xff])
                }

                keySchedule[k] = keySchedule[k - keySize] ^ t
            }

            var invKeySchedule = []
            for (var ik = 0; ik < ksRows; ik++) {
                var ksR = ksRows - ik
                var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

                if (ik < 4 || ksR <= 4) {
                    invKeySchedule[ik] = tt
                } else {
                    invKeySchedule[ik] =
                        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
                        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
                        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
                        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
                }
            }

            this._nRounds = nRounds
            this._keySchedule = keySchedule
            this._invKeySchedule = invKeySchedule
        }

        AES.prototype.encryptBlockRaw = function (M) {
            M = asUInt32Array(M)
            return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
        }

        AES.prototype.encryptBlock = function (M) {
            var out = this.encryptBlockRaw(M)
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0], 0)
            buf.writeUInt32BE(out[1], 4)
            buf.writeUInt32BE(out[2], 8)
            buf.writeUInt32BE(out[3], 12)
            return buf
        }

        AES.prototype.decryptBlock = function (M) {
            M = asUInt32Array(M)

            // swap
            var m1 = M[1]
            M[1] = M[3]
            M[3] = m1

            var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0], 0)
            buf.writeUInt32BE(out[3], 4)
            buf.writeUInt32BE(out[2], 8)
            buf.writeUInt32BE(out[1], 12)
            return buf
        }

        AES.prototype.scrub = function () {
            scrubVec(this._keySchedule)
            scrubVec(this._invKeySchedule)
            scrubVec(this._key)
        }

        module.exports.AES = AES

    }, {"safe-buffer": 147}],
    24: [function (require, module, exports) {
        var aes = require('./aes')
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('cipher-base')
        var inherits = require('inherits')
        var GHASH = require('./ghash')
        var xor = require('buffer-xor')
        var incr32 = require('./incr32')

        function xorTest(a, b) {
            var out = 0
            if (a.length !== b.length) out++

            var len = Math.min(a.length, b.length)
            for (var i = 0; i < len; ++i) {
                out += (a[i] ^ b[i])
            }

            return out
        }

        function calcIv(self, iv, ck) {
            if (iv.length === 12) {
                self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
                return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
            }
            var ghash = new GHASH(ck)
            var len = iv.length
            var toPad = len % 16
            ghash.update(iv)
            if (toPad) {
                toPad = 16 - toPad
                ghash.update(Buffer.alloc(toPad, 0))
            }
            ghash.update(Buffer.alloc(8, 0))
            var ivBits = len * 8
            var tail = Buffer.alloc(8)
            tail.writeUIntBE(ivBits, 0, 8)
            ghash.update(tail)
            self._finID = ghash.state
            var out = Buffer.from(self._finID)
            incr32(out)
            return out
        }

        function StreamCipher(mode, key, iv, decrypt) {
            Transform.call(this)

            var h = Buffer.alloc(4, 0)

            this._cipher = new aes.AES(key)
            var ck = this._cipher.encryptBlock(h)
            this._ghash = new GHASH(ck)
            iv = calcIv(this, iv, ck)

            this._prev = Buffer.from(iv)
            this._cache = Buffer.allocUnsafe(0)
            this._secCache = Buffer.allocUnsafe(0)
            this._decrypt = decrypt
            this._alen = 0
            this._len = 0
            this._mode = mode

            this._authTag = null
            this._called = false
        }

        inherits(StreamCipher, Transform)

        StreamCipher.prototype._update = function (chunk) {
            if (!this._called && this._alen) {
                var rump = 16 - (this._alen % 16)
                if (rump < 16) {
                    rump = Buffer.alloc(rump, 0)
                    this._ghash.update(rump)
                }
            }

            this._called = true
            var out = this._mode.encrypt(this, chunk)
            if (this._decrypt) {
                this._ghash.update(chunk)
            } else {
                this._ghash.update(out)
            }
            this._len += chunk.length
            return out
        }

        StreamCipher.prototype._final = function () {
            if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

            var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
            if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

            this._authTag = tag
            this._cipher.scrub()
        }

        StreamCipher.prototype.getAuthTag = function getAuthTag() {
            if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

            return this._authTag
        }

        StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
            if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

            this._authTag = tag
        }

        StreamCipher.prototype.setAAD = function setAAD(buf) {
            if (this._called) throw new Error('Attempting to set AAD in unsupported state')

            this._ghash.update(buf)
            this._alen += buf.length
        }

        module.exports = StreamCipher

    }, {
        "./aes": 23,
        "./ghash": 28,
        "./incr32": 29,
        "buffer-xor": 50,
        "cipher-base": 52,
        "inherits": 103,
        "safe-buffer": 147
    }],
    25: [function (require, module, exports) {
        var ciphers = require('./encrypter')
        var deciphers = require('./decrypter')
        var modes = require('./modes/list.json')

        function getCiphers() {
            return Object.keys(modes)
        }

        exports.createCipher = exports.Cipher = ciphers.createCipher
        exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
        exports.createDecipher = exports.Decipher = deciphers.createDecipher
        exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
        exports.listCiphers = exports.getCiphers = getCiphers

    }, {"./decrypter": 26, "./encrypter": 27, "./modes/list.json": 37}],
    26: [function (require, module, exports) {
        var AuthCipher = require('./authCipher')
        var Buffer = require('safe-buffer').Buffer
        var MODES = require('./modes')
        var StreamCipher = require('./streamCipher')
        var Transform = require('cipher-base')
        var aes = require('./aes')
        var ebtk = require('evp_bytestokey')
        var inherits = require('inherits')

        function Decipher(mode, key, iv) {
            Transform.call(this)

            this._cache = new Splitter()
            this._last = void 0
            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._mode = mode
            this._autopadding = true
        }

        inherits(Decipher, Transform)

        Decipher.prototype._update = function (data) {
            this._cache.add(data)
            var chunk
            var thing
            var out = []
            while ((chunk = this._cache.get(this._autopadding))) {
                thing = this._mode.decrypt(this, chunk)
                out.push(thing)
            }
            return Buffer.concat(out)
        }

        Decipher.prototype._final = function () {
            var chunk = this._cache.flush()
            if (this._autopadding) {
                return unpad(this._mode.decrypt(this, chunk))
            } else if (chunk) {
                throw new Error('data not multiple of block length')
            }
        }

        Decipher.prototype.setAutoPadding = function (setTo) {
            this._autopadding = !!setTo
            return this
        }

        function Splitter() {
            this.cache = Buffer.allocUnsafe(0)
        }

        Splitter.prototype.add = function (data) {
            this.cache = Buffer.concat([this.cache, data])
        }

        Splitter.prototype.get = function (autoPadding) {
            var out
            if (autoPadding) {
                if (this.cache.length > 16) {
                    out = this.cache.slice(0, 16)
                    this.cache = this.cache.slice(16)
                    return out
                }
            } else {
                if (this.cache.length >= 16) {
                    out = this.cache.slice(0, 16)
                    this.cache = this.cache.slice(16)
                    return out
                }
            }

            return null
        }

        Splitter.prototype.flush = function () {
            if (this.cache.length) return this.cache
        }

        function unpad(last) {
            var padded = last[15]
            if (padded < 1 || padded > 16) {
                throw new Error('unable to decrypt data')
            }
            var i = -1
            while (++i < padded) {
                if (last[(i + (16 - padded))] !== padded) {
                    throw new Error('unable to decrypt data')
                }
            }
            if (padded === 16) return

            return last.slice(0, 16 - padded)
        }

        function createDecipheriv(suite, password, iv) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            if (typeof iv === 'string') iv = Buffer.from(iv)
            if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

            if (typeof password === 'string') password = Buffer.from(password)
            if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

            if (config.type === 'stream') {
                return new StreamCipher(config.module, password, iv, true)
            } else if (config.type === 'auth') {
                return new AuthCipher(config.module, password, iv, true)
            }

            return new Decipher(config.module, password, iv)
        }

        function createDecipher(suite, password) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            var keys = ebtk(password, false, config.key, config.iv)
            return createDecipheriv(suite, keys.key, keys.iv)
        }

        exports.createDecipher = createDecipher
        exports.createDecipheriv = createDecipheriv

    }, {
        "./aes": 23,
        "./authCipher": 24,
        "./modes": 36,
        "./streamCipher": 39,
        "cipher-base": 52,
        "evp_bytestokey": 87,
        "inherits": 103,
        "safe-buffer": 147
    }],
    27: [function (require, module, exports) {
        var MODES = require('./modes')
        var AuthCipher = require('./authCipher')
        var Buffer = require('safe-buffer').Buffer
        var StreamCipher = require('./streamCipher')
        var Transform = require('cipher-base')
        var aes = require('./aes')
        var ebtk = require('evp_bytestokey')
        var inherits = require('inherits')

        function Cipher(mode, key, iv) {
            Transform.call(this)

            this._cache = new Splitter()
            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._mode = mode
            this._autopadding = true
        }

        inherits(Cipher, Transform)

        Cipher.prototype._update = function (data) {
            this._cache.add(data)
            var chunk
            var thing
            var out = []

            while ((chunk = this._cache.get())) {
                thing = this._mode.encrypt(this, chunk)
                out.push(thing)
            }

            return Buffer.concat(out)
        }

        var PADDING = Buffer.alloc(16, 0x10)

        Cipher.prototype._final = function () {
            var chunk = this._cache.flush()
            if (this._autopadding) {
                chunk = this._mode.encrypt(this, chunk)
                this._cipher.scrub()
                return chunk
            }

            if (!chunk.equals(PADDING)) {
                this._cipher.scrub()
                throw new Error('data not multiple of block length')
            }
        }

        Cipher.prototype.setAutoPadding = function (setTo) {
            this._autopadding = !!setTo
            return this
        }

        function Splitter() {
            this.cache = Buffer.allocUnsafe(0)
        }

        Splitter.prototype.add = function (data) {
            this.cache = Buffer.concat([this.cache, data])
        }

        Splitter.prototype.get = function () {
            if (this.cache.length > 15) {
                var out = this.cache.slice(0, 16)
                this.cache = this.cache.slice(16)
                return out
            }
            return null
        }

        Splitter.prototype.flush = function () {
            var len = 16 - this.cache.length
            var padBuff = Buffer.allocUnsafe(len)

            var i = -1
            while (++i < len) {
                padBuff.writeUInt8(len, i)
            }

            return Buffer.concat([this.cache, padBuff])
        }

        function createCipheriv(suite, password, iv) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            if (typeof password === 'string') password = Buffer.from(password)
            if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

            if (typeof iv === 'string') iv = Buffer.from(iv)
            if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

            if (config.type === 'stream') {
                return new StreamCipher(config.module, password, iv)
            } else if (config.type === 'auth') {
                return new AuthCipher(config.module, password, iv)
            }

            return new Cipher(config.module, password, iv)
        }

        function createCipher(suite, password) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            var keys = ebtk(password, false, config.key, config.iv)
            return createCipheriv(suite, keys.key, keys.iv)
        }

        exports.createCipheriv = createCipheriv
        exports.createCipher = createCipher

    }, {
        "./aes": 23,
        "./authCipher": 24,
        "./modes": 36,
        "./streamCipher": 39,
        "cipher-base": 52,
        "evp_bytestokey": 87,
        "inherits": 103,
        "safe-buffer": 147
    }],
    28: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer
        var ZEROES = Buffer.alloc(16, 0)

        function toArray(buf) {
            return [
                buf.readUInt32BE(0),
                buf.readUInt32BE(4),
                buf.readUInt32BE(8),
                buf.readUInt32BE(12)
            ]
        }

        function fromArray(out) {
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0] >>> 0, 0)
            buf.writeUInt32BE(out[1] >>> 0, 4)
            buf.writeUInt32BE(out[2] >>> 0, 8)
            buf.writeUInt32BE(out[3] >>> 0, 12)
            return buf
        }

        function GHASH(key) {
            this.h = key
            this.state = Buffer.alloc(16, 0)
            this.cache = Buffer.allocUnsafe(0)
        }

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
        GHASH.prototype.ghash = function (block) {
            var i = -1
            while (++i < block.length) {
                this.state[i] ^= block[i]
            }
            this._multiply()
        }

        GHASH.prototype._multiply = function () {
            var Vi = toArray(this.h)
            var Zi = [0, 0, 0, 0]
            var j, xi, lsbVi
            var i = -1
            while (++i < 128) {
                xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
                if (xi) {
                    // Z_i+1 = Z_i ^ V_i
                    Zi[0] ^= Vi[0]
                    Zi[1] ^= Vi[1]
                    Zi[2] ^= Vi[2]
                    Zi[3] ^= Vi[3]
                }

                // Store the value of LSB(V_i)
                lsbVi = (Vi[3] & 1) !== 0

                // V_i+1 = V_i >> 1
                for (j = 3; j > 0; j--) {
                    Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
                }
                Vi[0] = Vi[0] >>> 1

                // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
                if (lsbVi) {
                    Vi[0] = Vi[0] ^ (0xe1 << 24)
                }
            }
            this.state = fromArray(Zi)
        }

        GHASH.prototype.update = function (buf) {
            this.cache = Buffer.concat([this.cache, buf])
            var chunk
            while (this.cache.length >= 16) {
                chunk = this.cache.slice(0, 16)
                this.cache = this.cache.slice(16)
                this.ghash(chunk)
            }
        }

        GHASH.prototype.final = function (abl, bl) {
            if (this.cache.length) {
                this.ghash(Buffer.concat([this.cache, ZEROES], 16))
            }

            this.ghash(fromArray([0, abl, 0, bl]))
            return this.state
        }

        module.exports = GHASH

    }, {"safe-buffer": 147}],
    29: [function (require, module, exports) {
        function incr32(iv) {
            var len = iv.length
            var item
            while (len--) {
                item = iv.readUInt8(len)
                if (item === 255) {
                    iv.writeUInt8(0, len)
                } else {
                    item++
                    iv.writeUInt8(item, len)
                    break
                }
            }
        }

        module.exports = incr32

    }, {}],
    30: [function (require, module, exports) {
        var xor = require('buffer-xor')

        exports.encrypt = function (self, block) {
            var data = xor(block, self._prev)

            self._prev = self._cipher.encryptBlock(data)
            return self._prev
        }

        exports.decrypt = function (self, block) {
            var pad = self._prev

            self._prev = block
            var out = self._cipher.decryptBlock(block)

            return xor(out, pad)
        }

    }, {"buffer-xor": 50}],
    31: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer
        var xor = require('buffer-xor')

        function encryptStart(self, data, decrypt) {
            var len = data.length
            var out = xor(data, self._cache)
            self._cache = self._cache.slice(len)
            self._prev = Buffer.concat([self._prev, decrypt ? data : out])
            return out
        }

        exports.encrypt = function (self, data, decrypt) {
            var out = Buffer.allocUnsafe(0)
            var len

            while (data.length) {
                if (self._cache.length === 0) {
                    self._cache = self._cipher.encryptBlock(self._prev)
                    self._prev = Buffer.allocUnsafe(0)
                }

                if (self._cache.length <= data.length) {
                    len = self._cache.length
                    out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
                    data = data.slice(len)
                } else {
                    out = Buffer.concat([out, encryptStart(self, data, decrypt)])
                    break
                }
            }

            return out
        }

    }, {"buffer-xor": 50, "safe-buffer": 147}],
    32: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer

        function encryptByte(self, byteParam, decrypt) {
            var pad
            var i = -1
            var len = 8
            var out = 0
            var bit, value
            while (++i < len) {
                pad = self._cipher.encryptBlock(self._prev)
                bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
                value = pad[0] ^ bit
                out += ((value & 0x80) >> (i % 8))
                self._prev = shiftIn(self._prev, decrypt ? bit : value)
            }
            return out
        }

        function shiftIn(buffer, value) {
            var len = buffer.length
            var i = -1
            var out = Buffer.allocUnsafe(buffer.length)
            buffer = Buffer.concat([buffer, Buffer.from([value])])

            while (++i < len) {
                out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
            }

            return out
        }

        exports.encrypt = function (self, chunk, decrypt) {
            var len = chunk.length
            var out = Buffer.allocUnsafe(len)
            var i = -1

            while (++i < len) {
                out[i] = encryptByte(self, chunk[i], decrypt)
            }

            return out
        }

    }, {"safe-buffer": 147}],
    33: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer

        function encryptByte(self, byteParam, decrypt) {
            var pad = self._cipher.encryptBlock(self._prev)
            var out = pad[0] ^ byteParam

            self._prev = Buffer.concat([
                self._prev.slice(1),
                Buffer.from([decrypt ? byteParam : out])
            ])

            return out
        }

        exports.encrypt = function (self, chunk, decrypt) {
            var len = chunk.length
            var out = Buffer.allocUnsafe(len)
            var i = -1

            while (++i < len) {
                out[i] = encryptByte(self, chunk[i], decrypt)
            }

            return out
        }

    }, {"safe-buffer": 147}],
    34: [function (require, module, exports) {
        var xor = require('buffer-xor')
        var Buffer = require('safe-buffer').Buffer
        var incr32 = require('../incr32')

        function getBlock(self) {
            var out = self._cipher.encryptBlockRaw(self._prev)
            incr32(self._prev)
            return out
        }

        var blockSize = 16
        exports.encrypt = function (self, chunk) {
            var chunkNum = Math.ceil(chunk.length / blockSize)
            var start = self._cache.length
            self._cache = Buffer.concat([
                self._cache,
                Buffer.allocUnsafe(chunkNum * blockSize)
            ])
            for (var i = 0; i < chunkNum; i++) {
                var out = getBlock(self)
                var offset = start + i * blockSize
                self._cache.writeUInt32BE(out[0], offset + 0)
                self._cache.writeUInt32BE(out[1], offset + 4)
                self._cache.writeUInt32BE(out[2], offset + 8)
                self._cache.writeUInt32BE(out[3], offset + 12)
            }
            var pad = self._cache.slice(0, chunk.length)
            self._cache = self._cache.slice(chunk.length)
            return xor(chunk, pad)
        }

    }, {"../incr32": 29, "buffer-xor": 50, "safe-buffer": 147}],
    35: [function (require, module, exports) {
        exports.encrypt = function (self, block) {
            return self._cipher.encryptBlock(block)
        }

        exports.decrypt = function (self, block) {
            return self._cipher.decryptBlock(block)
        }

    }, {}],
    36: [function (require, module, exports) {
        var modeModules = {
            ECB: require('./ecb'),
            CBC: require('./cbc'),
            CFB: require('./cfb'),
            CFB8: require('./cfb8'),
            CFB1: require('./cfb1'),
            OFB: require('./ofb'),
            CTR: require('./ctr'),
            GCM: require('./ctr')
        }

        var modes = require('./list.json')

        for (var key in modes) {
            modes[key].module = modeModules[modes[key].mode]
        }

        module.exports = modes

    }, {
        "./cbc": 30,
        "./cfb": 31,
        "./cfb1": 32,
        "./cfb8": 33,
        "./ctr": 34,
        "./ecb": 35,
        "./list.json": 37,
        "./ofb": 38
    }],
    37: [function (require, module, exports) {
        module.exports = {
            "aes-128-ecb": {
                "cipher": "AES",
                "key": 128,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-192-ecb": {
                "cipher": "AES",
                "key": 192,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-256-ecb": {
                "cipher": "AES",
                "key": 256,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-128-cbc": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-192-cbc": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-256-cbc": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes128": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes192": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes256": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-128-cfb": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-192-cfb": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-256-cfb": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-128-cfb8": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-192-cfb8": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-256-cfb8": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-128-cfb1": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-192-cfb1": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-256-cfb1": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-128-ofb": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-192-ofb": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-256-ofb": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-128-ctr": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-192-ctr": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-256-ctr": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-128-gcm": {
                "cipher": "AES",
                "key": 128,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            },
            "aes-192-gcm": {
                "cipher": "AES",
                "key": 192,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            },
            "aes-256-gcm": {
                "cipher": "AES",
                "key": 256,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            }
        }

    }, {}],
    38: [function (require, module, exports) {
        (function (Buffer) {
            var xor = require('buffer-xor')

            function getBlock(self) {
                self._prev = self._cipher.encryptBlock(self._prev)
                return self._prev
            }

            exports.encrypt = function (self, chunk) {
                while (self._cache.length < chunk.length) {
                    self._cache = Buffer.concat([self._cache, getBlock(self)])
                }

                var pad = self._cache.slice(0, chunk.length)
                self._cache = self._cache.slice(chunk.length)
                return xor(chunk, pad)
            }

        }).call(this, require("buffer").Buffer)
    }, {"buffer": 51, "buffer-xor": 50}],
    39: [function (require, module, exports) {
        var aes = require('./aes')
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('cipher-base')
        var inherits = require('inherits')

        function StreamCipher(mode, key, iv, decrypt) {
            Transform.call(this)

            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._cache = Buffer.allocUnsafe(0)
            this._secCache = Buffer.allocUnsafe(0)
            this._decrypt = decrypt
            this._mode = mode
        }

        inherits(StreamCipher, Transform)

        StreamCipher.prototype._update = function (chunk) {
            return this._mode.encrypt(this, chunk, this._decrypt)
        }

        StreamCipher.prototype._final = function () {
            this._cipher.scrub()
        }

        module.exports = StreamCipher

    }, {"./aes": 23, "cipher-base": 52, "inherits": 103, "safe-buffer": 147}],
    40: [function (require, module, exports) {
        var DES = require('browserify-des')
        var aes = require('browserify-aes/browser')
        var aesModes = require('browserify-aes/modes')
        var desModes = require('browserify-des/modes')
        var ebtk = require('evp_bytestokey')

        function createCipher(suite, password) {
            suite = suite.toLowerCase()

            var keyLen, ivLen
            if (aesModes[suite]) {
                keyLen = aesModes[suite].key
                ivLen = aesModes[suite].iv
            } else if (desModes[suite]) {
                keyLen = desModes[suite].key * 8
                ivLen = desModes[suite].iv
            } else {
                throw new TypeError('invalid suite type')
            }

            var keys = ebtk(password, false, keyLen, ivLen)
            return createCipheriv(suite, keys.key, keys.iv)
        }

        function createDecipher(suite, password) {
            suite = suite.toLowerCase()

            var keyLen, ivLen
            if (aesModes[suite]) {
                keyLen = aesModes[suite].key
                ivLen = aesModes[suite].iv
            } else if (desModes[suite]) {
                keyLen = desModes[suite].key * 8
                ivLen = desModes[suite].iv
            } else {
                throw new TypeError('invalid suite type')
            }

            var keys = ebtk(password, false, keyLen, ivLen)
            return createDecipheriv(suite, keys.key, keys.iv)
        }

        function createCipheriv(suite, key, iv) {
            suite = suite.toLowerCase()
            if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
            if (desModes[suite]) return new DES({key: key, iv: iv, mode: suite})

            throw new TypeError('invalid suite type')
        }

        function createDecipheriv(suite, key, iv) {
            suite = suite.toLowerCase()
            if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
            if (desModes[suite]) return new DES({key: key, iv: iv, mode: suite, decrypt: true})

            throw new TypeError('invalid suite type')
        }

        function getCiphers() {
            return Object.keys(desModes).concat(aes.getCiphers())
        }

        exports.createCipher = exports.Cipher = createCipher
        exports.createCipheriv = exports.Cipheriv = createCipheriv
        exports.createDecipher = exports.Decipher = createDecipher
        exports.createDecipheriv = exports.Decipheriv = createDecipheriv
        exports.listCiphers = exports.getCiphers = getCiphers

    }, {
        "browserify-aes/browser": 25,
        "browserify-aes/modes": 36,
        "browserify-des": 41,
        "browserify-des/modes": 42,
        "evp_bytestokey": 87
    }],
    41: [function (require, module, exports) {
        var CipherBase = require('cipher-base')
        var des = require('des.js')
        var inherits = require('inherits')
        var Buffer = require('safe-buffer').Buffer

        var modes = {
            'des-ede3-cbc': des.CBC.instantiate(des.EDE),
            'des-ede3': des.EDE,
            'des-ede-cbc': des.CBC.instantiate(des.EDE),
            'des-ede': des.EDE,
            'des-cbc': des.CBC.instantiate(des.DES),
            'des-ecb': des.DES
        }
        modes.des = modes['des-cbc']
        modes.des3 = modes['des-ede3-cbc']
        module.exports = DES
        inherits(DES, CipherBase)

        function DES(opts) {
            CipherBase.call(this)
            var modeName = opts.mode.toLowerCase()
            var mode = modes[modeName]
            var type
            if (opts.decrypt) {
                type = 'decrypt'
            } else {
                type = 'encrypt'
            }
            var key = opts.key
            if (!Buffer.isBuffer(key)) {
                key = Buffer.from(key)
            }
            if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
                key = Buffer.concat([key, key.slice(0, 8)])
            }
            var iv = opts.iv
            if (!Buffer.isBuffer(iv)) {
                iv = Buffer.from(iv)
            }
            this._des = mode.create({
                key: key,
                iv: iv,
                type: type
            })
        }

        DES.prototype._update = function (data) {
            return Buffer.from(this._des.update(data))
        }
        DES.prototype._final = function () {
            return Buffer.from(this._des.final())
        }

    }, {"cipher-base": 52, "des.js": 60, "inherits": 103, "safe-buffer": 147}],
    42: [function (require, module, exports) {
        exports['des-ecb'] = {
            key: 8,
            iv: 0
        }
        exports['des-cbc'] = exports.des = {
            key: 8,
            iv: 8
        }
        exports['des-ede3-cbc'] = exports.des3 = {
            key: 24,
            iv: 8
        }
        exports['des-ede3'] = {
            key: 24,
            iv: 0
        }
        exports['des-ede-cbc'] = {
            key: 16,
            iv: 8
        }
        exports['des-ede'] = {
            key: 16,
            iv: 0
        }

    }, {}],
    43: [function (require, module, exports) {
        (function (Buffer) {
            var bn = require('bn.js');
            var randomBytes = require('randombytes');
            module.exports = crt;

            function blind(priv) {
                var r = getr(priv);
                var blinder = r.toRed(bn.mont(priv.modulus))
                    .redPow(new bn(priv.publicExponent)).fromRed();
                return {
                    blinder: blinder,
                    unblinder: r.invm(priv.modulus)
                };
            }

            function crt(msg, priv) {
                var blinds = blind(priv);
                var len = priv.modulus.byteLength();
                var mod = bn.mont(priv.modulus);
                var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
                var c1 = blinded.toRed(bn.mont(priv.prime1));
                var c2 = blinded.toRed(bn.mont(priv.prime2));
                var qinv = priv.coefficient;
                var p = priv.prime1;
                var q = priv.prime2;
                var m1 = c1.redPow(priv.exponent1);
                var m2 = c2.redPow(priv.exponent2);
                m1 = m1.fromRed();
                m2 = m2.fromRed();
                var h = m1.isub(m2).imul(qinv).umod(p);
                h.imul(q);
                m2.iadd(h);
                return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
            }

            crt.getr = getr;

            function getr(priv) {
                var len = priv.modulus.byteLength();
                var r = new bn(randomBytes(len));
                while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
                    r = new bn(randomBytes(len));
                }
                return r;
            }

        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 20, "buffer": 51, "randombytes": 129}],
    44: [function (require, module, exports) {
        module.exports = require('./browser/algorithms.json')

    }, {"./browser/algorithms.json": 45}],
    45: [function (require, module, exports) {
        module.exports = {
            "sha224WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha224",
                "id": "302d300d06096086480165030402040500041c"
            },
            "RSA-SHA224": {
                "sign": "ecdsa/rsa",
                "hash": "sha224",
                "id": "302d300d06096086480165030402040500041c"
            },
            "sha256WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha256",
                "id": "3031300d060960864801650304020105000420"
            },
            "RSA-SHA256": {
                "sign": "ecdsa/rsa",
                "hash": "sha256",
                "id": "3031300d060960864801650304020105000420"
            },
            "sha384WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha384",
                "id": "3041300d060960864801650304020205000430"
            },
            "RSA-SHA384": {
                "sign": "ecdsa/rsa",
                "hash": "sha384",
                "id": "3041300d060960864801650304020205000430"
            },
            "sha512WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha512",
                "id": "3051300d060960864801650304020305000440"
            },
            "RSA-SHA512": {
                "sign": "ecdsa/rsa",
                "hash": "sha512",
                "id": "3051300d060960864801650304020305000440"
            },
            "RSA-SHA1": {
                "sign": "rsa",
                "hash": "sha1",
                "id": "3021300906052b0e03021a05000414"
            },
            "ecdsa-with-SHA1": {
                "sign": "ecdsa",
                "hash": "sha1",
                "id": ""
            },
            "sha256": {
                "sign": "ecdsa",
                "hash": "sha256",
                "id": ""
            },
            "sha224": {
                "sign": "ecdsa",
                "hash": "sha224",
                "id": ""
            },
            "sha384": {
                "sign": "ecdsa",
                "hash": "sha384",
                "id": ""
            },
            "sha512": {
                "sign": "ecdsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-SHA": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA-SHA1": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA-WITH-SHA224": {
                "sign": "dsa",
                "hash": "sha224",
                "id": ""
            },
            "DSA-SHA224": {
                "sign": "dsa",
                "hash": "sha224",
                "id": ""
            },
            "DSA-WITH-SHA256": {
                "sign": "dsa",
                "hash": "sha256",
                "id": ""
            },
            "DSA-SHA256": {
                "sign": "dsa",
                "hash": "sha256",
                "id": ""
            },
            "DSA-WITH-SHA384": {
                "sign": "dsa",
                "hash": "sha384",
                "id": ""
            },
            "DSA-SHA384": {
                "sign": "dsa",
                "hash": "sha384",
                "id": ""
            },
            "DSA-WITH-SHA512": {
                "sign": "dsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-SHA512": {
                "sign": "dsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-RIPEMD160": {
                "sign": "dsa",
                "hash": "rmd160",
                "id": ""
            },
            "ripemd160WithRSA": {
                "sign": "rsa",
                "hash": "rmd160",
                "id": "3021300906052b2403020105000414"
            },
            "RSA-RIPEMD160": {
                "sign": "rsa",
                "hash": "rmd160",
                "id": "3021300906052b2403020105000414"
            },
            "md5WithRSAEncryption": {
                "sign": "rsa",
                "hash": "md5",
                "id": "3020300c06082a864886f70d020505000410"
            },
            "RSA-MD5": {
                "sign": "rsa",
                "hash": "md5",
                "id": "3020300c06082a864886f70d020505000410"
            }
        }

    }, {}],
    46: [function (require, module, exports) {
        module.exports = {
            "1.3.132.0.10": "secp256k1",
            "1.3.132.0.33": "p224",
            "1.2.840.10045.3.1.1": "p192",
            "1.2.840.10045.3.1.7": "p256",
            "1.3.132.0.34": "p384",
            "1.3.132.0.35": "p521"
        }

    }, {}],
    47: [function (require, module, exports) {
        (function (Buffer) {
            var createHash = require('create-hash')
            var stream = require('stream')
            var inherits = require('inherits')
            var sign = require('./sign')
            var verify = require('./verify')

            var algorithms = require('./algorithms.json')
            Object.keys(algorithms).forEach(function (key) {
                algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
                algorithms[key.toLowerCase()] = algorithms[key]
            })

            function Sign(algorithm) {
                stream.Writable.call(this)

                var data = algorithms[algorithm]
                if (!data) throw new Error('Unknown message digest')

                this._hashType = data.hash
                this._hash = createHash(data.hash)
                this._tag = data.id
                this._signType = data.sign
            }

            inherits(Sign, stream.Writable)

            Sign.prototype._write = function _write(data, _, done) {
                this._hash.update(data)
                done()
            }

            Sign.prototype.update = function update(data, enc) {
                if (typeof data === 'string') data = new Buffer(data, enc)

                this._hash.update(data)
                return this
            }

            Sign.prototype.sign = function signMethod(key, enc) {
                this.end()
                var hash = this._hash.digest()
                var sig = sign(hash, key, this._hashType, this._signType, this._tag)

                return enc ? sig.toString(enc) : sig
            }

            function Verify(algorithm) {
                stream.Writable.call(this)

                var data = algorithms[algorithm]
                if (!data) throw new Error('Unknown message digest')

                this._hash = createHash(data.hash)
                this._tag = data.id
                this._signType = data.sign
            }

            inherits(Verify, stream.Writable)

            Verify.prototype._write = function _write(data, _, done) {
                this._hash.update(data)
                done()
            }

            Verify.prototype.update = function update(data, enc) {
                if (typeof data === 'string') data = new Buffer(data, enc)

                this._hash.update(data)
                return this
            }

            Verify.prototype.verify = function verifyMethod(key, sig, enc) {
                if (typeof sig === 'string') sig = new Buffer(sig, enc)

                this.end()
                var hash = this._hash.digest()
                return verify(sig, hash, key, this._signType, this._tag)
            }

            function createSign(algorithm) {
                return new Sign(algorithm)
            }

            function createVerify(algorithm) {
                return new Verify(algorithm)
            }

            module.exports = {
                Sign: createSign,
                Verify: createVerify,
                createSign: createSign,
                createVerify: createVerify
            }

        }).call(this, require("buffer").Buffer)
    }, {
        "./algorithms.json": 45,
        "./sign": 48,
        "./verify": 49,
        "buffer": 51,
        "create-hash": 55,
        "inherits": 103,
        "stream": 156
    }],
    48: [function (require, module, exports) {
        (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
            var createHmac = require('create-hmac')
            var crt = require('browserify-rsa')
            var EC = require('elliptic').ec
            var BN = require('bn.js')
            var parseKeys = require('parse-asn1')
            var curves = require('./curves.json')

            function sign(hash, key, hashType, signType, tag) {
                var priv = parseKeys(key)
                if (priv.curve) {
                    // rsa keys can be interpreted as ecdsa ones in openssl
                    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                    return ecSign(hash, priv)
                } else if (priv.type === 'dsa') {
                    if (signType !== 'dsa') throw new Error('wrong private key type')
                    return dsaSign(hash, priv, hashType)
                } else {
                    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                }
                hash = Buffer.concat([tag, hash])
                var len = priv.modulus.byteLength()
                var pad = [0, 1]
                while (hash.length + pad.length + 1 < len) pad.push(0xff)
                pad.push(0x00)
                var i = -1
                while (++i < hash.length) pad.push(hash[i])

                var out = crt(pad, priv)
                return out
            }

            function ecSign(hash, priv) {
                var curveId = curves[priv.curve.join('.')]
                if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

                var curve = new EC(curveId)
                var key = curve.keyFromPrivate(priv.privateKey)
                var out = key.sign(hash)

                return new Buffer(out.toDER())
            }

            function dsaSign(hash, priv, algo) {
                var x = priv.params.priv_key
                var p = priv.params.p
                var q = priv.params.q
                var g = priv.params.g
                var r = new BN(0)
                var k
                var H = bits2int(hash, q).mod(q)
                var s = false
                var kv = getKey(x, q, hash, algo)
                while (s === false) {
                    k = makeKey(q, kv, algo)
                    r = makeR(g, k, p, q)
                    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
                    if (s.cmpn(0) === 0) {
                        s = false
                        r = new BN(0)
                    }
                }
                return toDER(r, s)
            }

            function toDER(r, s) {
                r = r.toArray()
                s = s.toArray()

                // Pad values
                if (r[0] & 0x80) r = [0].concat(r)
                if (s[0] & 0x80) s = [0].concat(s)

                var total = r.length + s.length + 4
                var res = [0x30, total, 0x02, r.length]
                res = res.concat(r, [0x02, s.length], s)
                return new Buffer(res)
            }

            function getKey(x, q, hash, algo) {
                x = new Buffer(x.toArray())
                if (x.length < q.byteLength()) {
                    var zeros = new Buffer(q.byteLength() - x.length)
                    zeros.fill(0)
                    x = Buffer.concat([zeros, x])
                }
                var hlen = hash.length
                var hbits = bits2octets(hash, q)
                var v = new Buffer(hlen)
                v.fill(1)
                var k = new Buffer(hlen)
                k.fill(0)
                k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest()
                v = createHmac(algo, k).update(v).digest()
                k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest()
                v = createHmac(algo, k).update(v).digest()
                return {k: k, v: v}
            }

            function bits2int(obits, q) {
                var bits = new BN(obits)
                var shift = (obits.length << 3) - q.bitLength()
                if (shift > 0) bits.ishrn(shift)
                return bits
            }

            function bits2octets(bits, q) {
                bits = bits2int(bits, q)
                bits = bits.mod(q)
                var out = new Buffer(bits.toArray())
                if (out.length < q.byteLength()) {
                    var zeros = new Buffer(q.byteLength() - out.length)
                    zeros.fill(0)
                    out = Buffer.concat([zeros, out])
                }
                return out
            }

            function makeKey(q, kv, algo) {
                var t
                var k

                do {
                    t = new Buffer(0)

                    while (t.length * 8 < q.bitLength()) {
                        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                        t = Buffer.concat([t, kv.v])
                    }

                    k = bits2int(t, q)
                    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest()
                    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                } while (k.cmp(q) !== -1)

                return k
            }

            function makeR(g, k, p, q) {
                return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
            }

            module.exports = sign
            module.exports.getKey = getKey
            module.exports.makeKey = makeKey

        }).call(this, require("buffer").Buffer)
    }, {
        "./curves.json": 46,
        "bn.js": 20,
        "browserify-rsa": 43,
        "buffer": 51,
        "create-hmac": 57,
        "elliptic": 70,
        "parse-asn1": 115
    }],
    49: [function (require, module, exports) {
        (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
            var BN = require('bn.js')
            var EC = require('elliptic').ec
            var parseKeys = require('parse-asn1')
            var curves = require('./curves.json')

            function verify(sig, hash, key, signType, tag) {
                var pub = parseKeys(key)
                if (pub.type === 'ec') {
                    // rsa keys can be interpreted as ecdsa ones in openssl
                    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                    return ecVerify(sig, hash, pub)
                } else if (pub.type === 'dsa') {
                    if (signType !== 'dsa') throw new Error('wrong public key type')
                    return dsaVerify(sig, hash, pub)
                } else {
                    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                }
                hash = Buffer.concat([tag, hash])
                var len = pub.modulus.byteLength()
                var pad = [1]
                var padNum = 0
                while (hash.length + pad.length + 2 < len) {
                    pad.push(0xff)
                    padNum++
                }
                pad.push(0x00)
                var i = -1
                while (++i < hash.length) {
                    pad.push(hash[i])
                }
                pad = new Buffer(pad)
                var red = BN.mont(pub.modulus)
                sig = new BN(sig).toRed(red)

                sig = sig.redPow(new BN(pub.publicExponent))
                sig = new Buffer(sig.fromRed().toArray())
                var out = padNum < 8 ? 1 : 0
                len = Math.min(sig.length, pad.length)
                if (sig.length !== pad.length) out = 1

                i = -1
                while (++i < len) out |= sig[i] ^ pad[i]
                return out === 0
            }

            function ecVerify(sig, hash, pub) {
                var curveId = curves[pub.data.algorithm.curve.join('.')]
                if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

                var curve = new EC(curveId)
                var pubkey = pub.data.subjectPrivateKey.data

                return curve.verify(hash, sig, pubkey)
            }

            function dsaVerify(sig, hash, pub) {
                var p = pub.data.p
                var q = pub.data.q
                var g = pub.data.g
                var y = pub.data.pub_key
                var unpacked = parseKeys.signature.decode(sig, 'der')
                var s = unpacked.s
                var r = unpacked.r
                checkValue(s, q)
                checkValue(r, q)
                var montp = BN.mont(p)
                var w = s.invm(q)
                var v = g.toRed(montp)
                    .redPow(new BN(hash).mul(w).mod(q))
                    .fromRed()
                    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
                    .mod(p)
                    .mod(q)
                return v.cmp(r) === 0
            }

            function checkValue(b, q) {
                if (b.cmpn(0) <= 0) throw new Error('invalid sig')
                if (b.cmp(q) >= q) throw new Error('invalid sig')
            }

            module.exports = verify

        }).call(this, require("buffer").Buffer)
    }, {"./curves.json": 46, "bn.js": 20, "buffer": 51, "elliptic": 70, "parse-asn1": 115}],
    50: [function (require, module, exports) {
        (function (Buffer) {
            module.exports = function xor(a, b) {
                var length = Math.min(a.length, b.length)
                var buffer = new Buffer(length)

                for (var i = 0; i < length; ++i) {
                    buffer[i] = a[i] ^ b[i]
                }

                return buffer
            }

        }).call(this, require("buffer").Buffer)
    }, {"buffer": 51}],
    51: [function (require, module, exports) {
        (function (Buffer) {
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
            /* eslint-disable no-proto */

            'use strict'

            var base64 = require('base64-js')
            var ieee754 = require('ieee754')
            var customInspectSymbol =
                (typeof Symbol === 'function' && typeof Symbol.for === 'function')
                    ? Symbol.for('nodejs.util.inspect.custom')
                    : null

            exports.Buffer = Buffer
            exports.SlowBuffer = SlowBuffer
            exports.INSPECT_MAX_BYTES = 50

            var K_MAX_LENGTH = 0x7fffffff
            exports.kMaxLength = K_MAX_LENGTH

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                typeof console.error === 'function') {
                console.error(
                    'This browser lacks typed array (Uint8Array) support which is required by ' +
                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                )
            }

            function typedArraySupport() {
                // Can typed array instances can be augmented?
                try {
                    var arr = new Uint8Array(1)
                    var proto = {
                        foo: function () {
                            return 42
                        }
                    }
                    Object.setPrototypeOf(proto, Uint8Array.prototype)
                    Object.setPrototypeOf(arr, proto)
                    return arr.foo() === 42
                } catch (e) {
                    return false
                }
            }

            Object.defineProperty(Buffer.prototype, 'parent', {
                enumerable: true,
                get: function () {
                    if (!Buffer.isBuffer(this)) return undefined
                    return this.buffer
                }
            })

            Object.defineProperty(Buffer.prototype, 'offset', {
                enumerable: true,
                get: function () {
                    if (!Buffer.isBuffer(this)) return undefined
                    return this.byteOffset
                }
            })

            function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                    throw new RangeError('The value "' + length + '" is invalid for option "size"')
                }
                // Return an augmented `Uint8Array` instance
                var buf = new Uint8Array(length)
                Object.setPrototypeOf(buf, Buffer.prototype)
                return buf
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
                // Common case.
                if (typeof arg === 'number') {
                    if (typeof encodingOrOffset === 'string') {
                        throw new TypeError(
                            'The "string" argument must be of type string. Received type number'
                        )
                    }
                    return allocUnsafe(arg)
                }
                return from(arg, encodingOrOffset, length)
            }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (typeof Symbol !== 'undefined' && Symbol.species != null &&
                Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                    value: null,
                    configurable: true,
                    enumerable: false,
                    writable: false
                })
            }

            Buffer.poolSize = 8192 // not used by this implementation

            function from(value, encodingOrOffset, length) {
                if (typeof value === 'string') {
                    return fromString(value, encodingOrOffset)
                }

                if (ArrayBuffer.isView(value)) {
                    return fromArrayLike(value)
                }

                if (value == null) {
                    throw new TypeError(
                        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                        'or Array-like Object. Received type ' + (typeof value)
                    )
                }

                if (isInstance(value, ArrayBuffer) ||
                    (value && isInstance(value.buffer, ArrayBuffer))) {
                    return fromArrayBuffer(value, encodingOrOffset, length)
                }

                if (typeof value === 'number') {
                    throw new TypeError(
                        'The "value" argument must not be of type number. Received type number'
                    )
                }

                var valueOf = value.valueOf && value.valueOf()
                if (valueOf != null && valueOf !== value) {
                    return Buffer.from(valueOf, encodingOrOffset, length)
                }

                var b = fromObject(value)
                if (b) return b

                if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
                    typeof value[Symbol.toPrimitive] === 'function') {
                    return Buffer.from(
                        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
                    )
                }

                throw new TypeError(
                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                    'or Array-like Object. Received type ' + (typeof value)
                )
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length)
            }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
            Object.setPrototypeOf(Buffer, Uint8Array)

            function assertSize(size) {
                if (typeof size !== 'number') {
                    throw new TypeError('"size" argument must be of type number')
                } else if (size < 0) {
                    throw new RangeError('The value "' + size + '" is invalid for option "size"')
                }
            }

            function alloc(size, fill, encoding) {
                assertSize(size)
                if (size <= 0) {
                    return createBuffer(size)
                }
                if (fill !== undefined) {
                    // Only pay attention to encoding if it's a string. This
                    // prevents accidentally sending in a number that would
                    // be interpretted as a start offset.
                    return typeof encoding === 'string'
                        ? createBuffer(size).fill(fill, encoding)
                        : createBuffer(size).fill(fill)
                }
                return createBuffer(size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding)
            }

            function allocUnsafe(size) {
                assertSize(size)
                return createBuffer(size < 0 ? 0 : checked(size) | 0)
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
                return allocUnsafe(size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(size)
            }

            function fromString(string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                    encoding = 'utf8'
                }

                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError('Unknown encoding: ' + encoding)
                }

                var length = byteLength(string, encoding) | 0
                var buf = createBuffer(length)

                var actual = buf.write(string, encoding)

                if (actual !== length) {
                    // Writing a hex string, for example, that contains invalid characters will
                    // cause everything after the first invalid character to be ignored. (e.g.
                    // 'abxxcd' will be treated as 'ab')
                    buf = buf.slice(0, actual)
                }

                return buf
            }

            function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0
                var buf = createBuffer(length)
                for (var i = 0; i < length; i += 1) {
                    buf[i] = array[i] & 255
                }
                return buf
            }

            function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('"offset" is outside of buffer bounds')
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('"length" is outside of buffer bounds')
                }

                var buf
                if (byteOffset === undefined && length === undefined) {
                    buf = new Uint8Array(array)
                } else if (length === undefined) {
                    buf = new Uint8Array(array, byteOffset)
                } else {
                    buf = new Uint8Array(array, byteOffset, length)
                }

                // Return an augmented `Uint8Array` instance
                Object.setPrototypeOf(buf, Buffer.prototype)

                return buf
            }

            function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0
                    var buf = createBuffer(len)

                    if (buf.length === 0) {
                        return buf
                    }

                    obj.copy(buf, 0, 0, len)
                    return buf
                }

                if (obj.length !== undefined) {
                    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                        return createBuffer(0)
                    }
                    return fromArrayLike(obj)
                }

                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                    return fromArrayLike(obj.data)
                }
            }

            function checked(length) {
                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= K_MAX_LENGTH) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                        'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
                }
                return length | 0
            }

            function SlowBuffer(length) {
                if (+length != length) { // eslint-disable-line eqeqeq
                    length = 0
                }
                return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer(b) {
                return b != null && b._isBuffer === true &&
                    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
            }

            Buffer.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
                if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError(
                        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                    )
                }

                if (a === b) return 0

                var x = a.length
                var y = b.length

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i]
                        y = b[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true
                    default:
                        return false
                }
            }

            Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }

                if (list.length === 0) {
                    return Buffer.alloc(0)
                }

                var i
                if (length === undefined) {
                    length = 0
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length
                    }
                }

                var buffer = Buffer.allocUnsafe(length)
                var pos = 0
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i]
                    if (isInstance(buf, Uint8Array)) {
                        buf = Buffer.from(buf)
                    }
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }
                    buf.copy(buffer, pos)
                    pos += buf.length
                }
                return buffer
            }

            function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length
                }
                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                    return string.byteLength
                }
                if (typeof string !== 'string') {
                    throw new TypeError(
                        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                        'Received type ' + typeof string
                    )
                }

                var len = string.length
                var mustMatch = (arguments.length > 2 && arguments[2] === true)
                if (!mustMatch && len === 0) return 0

                // Use a for loop to avoid recursion
                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len
                        case 'utf8':
                        case 'utf-8':
                            return utf8ToBytes(string).length
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2
                        case 'hex':
                            return len >>> 1
                        case 'base64':
                            return base64ToBytes(string).length
                        default:
                            if (loweredCase) {
                                return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                            }
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.byteLength = byteLength

            function slowToString(encoding, start, end) {
                var loweredCase = false

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                    start = 0
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                    return ''
                }

                if (end === undefined || end > this.length) {
                    end = this.length
                }

                if (end <= 0) {
                    return ''
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0
                start >>>= 0

                if (end <= start) {
                    return ''
                }

                if (!encoding) encoding = 'utf8'

                while (true) {
                    switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end)

                        case 'ascii':
                            return asciiSlice(this, start, end)

                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end)

                        case 'base64':
                            return base64Slice(this, start, end)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = (encoding + '').toLowerCase()
                            loweredCase = true
                    }
                }
            }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true

            function swap(b, n, m) {
                var i = b[n]
                b[n] = b[m]
                b[m] = i
            }

            Buffer.prototype.swap16 = function swap16() {
                var len = this.length
                if (len % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1)
                }
                return this
            }

            Buffer.prototype.swap32 = function swap32() {
                var len = this.length
                if (len % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3)
                    swap(this, i + 1, i + 2)
                }
                return this
            }

            Buffer.prototype.swap64 = function swap64() {
                var len = this.length
                if (len % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7)
                    swap(this, i + 1, i + 6)
                    swap(this, i + 2, i + 5)
                    swap(this, i + 3, i + 4)
                }
                return this
            }

            Buffer.prototype.toString = function toString() {
                var length = this.length
                if (length === 0) return ''
                if (arguments.length === 0) return utf8Slice(this, 0, length)
                return slowToString.apply(this, arguments)
            }

            Buffer.prototype.toLocaleString = Buffer.prototype.toString

            Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                if (this === b) return true
                return Buffer.compare(this, b) === 0
            }

            Buffer.prototype.inspect = function inspect() {
                var str = ''
                var max = exports.INSPECT_MAX_BYTES
                str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
                if (this.length > max) str += ' ... '
                return '<Buffer ' + str + '>'
            }
            if (customInspectSymbol) {
                Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
            }

            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                    target = Buffer.from(target, target.offset, target.byteLength)
                }
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError(
                        'The "target" argument must be one of type Buffer or Uint8Array. ' +
                        'Received type ' + (typeof target)
                    )
                }

                if (start === undefined) {
                    start = 0
                }
                if (end === undefined) {
                    end = target ? target.length : 0
                }
                if (thisStart === undefined) {
                    thisStart = 0
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError('out of range index')
                }

                if (thisStart >= thisEnd && start >= end) {
                    return 0
                }
                if (thisStart >= thisEnd) {
                    return -1
                }
                if (start >= end) {
                    return 1
                }

                start >>>= 0
                end >>>= 0
                thisStart >>>= 0
                thisEnd >>>= 0

                if (this === target) return 0

                var x = thisEnd - thisStart
                var y = end - start
                var len = Math.min(x, y)

                var thisCopy = this.slice(thisStart, thisEnd)
                var targetCopy = target.slice(start, end)

                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i]
                        y = targetCopy[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                    encoding = byteOffset
                    byteOffset = 0
                } else if (byteOffset > 0x7fffffff) {
                    byteOffset = 0x7fffffff
                } else if (byteOffset < -0x80000000) {
                    byteOffset = -0x80000000
                }
                byteOffset = +byteOffset // Coerce to Number.
                if (numberIsNaN(byteOffset)) {
                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                    byteOffset = dir ? 0 : (buffer.length - 1)
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                if (byteOffset >= buffer.length) {
                    if (dir) return -1
                    else byteOffset = buffer.length - 1
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0
                    else return -1
                }

                // Normalize val
                if (typeof val === 'string') {
                    val = Buffer.from(val, encoding)
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                    // Special case: looking for empty string/buffer always fails
                    if (val.length === 0) {
                        return -1
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                } else if (typeof val === 'number') {
                    val = val & 0xFF // Search for a byte value [0-255]
                    if (typeof Uint8Array.prototype.indexOf === 'function') {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                        }
                    }
                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
                }

                throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1
                var arrLength = arr.length
                var valLength = val.length

                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase()
                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                        encoding === 'utf16le' || encoding === 'utf-16le') {
                        if (arr.length < 2 || val.length < 2) {
                            return -1
                        }
                        indexSize = 2
                        arrLength /= 2
                        valLength /= 2
                        byteOffset /= 2
                    }
                }

                function read(buf, i) {
                    if (indexSize === 1) {
                        return buf[i]
                    } else {
                        return buf.readUInt16BE(i * indexSize)
                    }
                }

                var i
                if (dir) {
                    var foundIndex = -1
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex
                            foundIndex = -1
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false
                                break
                            }
                        }
                        if (found) return i
                    }
                }

                return -1
            }

            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1
            }

            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            }

            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            }

            function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0
                var remaining = buf.length - offset
                if (!length) {
                    length = remaining
                } else {
                    length = Number(length)
                    if (length > remaining) {
                        length = remaining
                    }
                }

                var strLen = string.length

                if (length > strLen / 2) {
                    length = strLen / 2
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                    if (numberIsNaN(parsed)) return i
                    buf[offset + i] = parsed
                }
                return i
            }

            function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length)
            }

            function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write(string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                    encoding = 'utf8'
                    length = this.length
                    offset = 0
                    // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                    encoding = offset
                    length = this.length
                    offset = 0
                    // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                    offset = offset >>> 0
                    if (isFinite(length)) {
                        length = length >>> 0
                        if (encoding === undefined) encoding = 'utf8'
                    } else {
                        encoding = length
                        length = undefined
                    }
                } else {
                    throw new Error(
                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                    )
                }

                var remaining = this.length - offset
                if (length === undefined || length > remaining) length = remaining

                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds')
                }

                if (!encoding) encoding = 'utf8'

                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length)

                        case 'ascii':
                            return asciiWrite(this, string, offset, length)

                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length)

                        case 'base64':
                            // Warning: maxLength not taken into account in base64Write
                            return base64Write(this, string, offset, length)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.prototype.toJSON = function toJSON() {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }

            function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf)
                } else {
                    return base64.fromByteArray(buf.slice(start, end))
                }
            }

            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end)
                var res = []

                var i = start
                while (i < end) {
                    var firstByte = buf[i]
                    var codePoint = null
                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                        : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                                : 1

                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint

                        switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 0x80) {
                                    codePoint = firstByte
                                }
                                break
                            case 2:
                                secondByte = buf[i + 1]
                                if ((secondByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                    if (tempCodePoint > 0x7F) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 3:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 4:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                fourthByte = buf[i + 3]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                        codePoint = tempCodePoint
                                    }
                                }
                        }
                    }

                    if (codePoint === null) {
                        // we did not generate a valid codePoint so insert a
                        // replacement char (U+FFFD) and advance only 1 byte
                        codePoint = 0xFFFD
                        bytesPerSequence = 1
                    } else if (codePoint > 0xFFFF) {
                        // encode to utf16 (surrogate pair dance)
                        codePoint -= 0x10000
                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                        codePoint = 0xDC00 | codePoint & 0x3FF
                    }

                    res.push(codePoint)
                    i += bytesPerSequence
                }

                return decodeCodePointsArray(res)
            }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000

            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = ''
                var i = 0
                while (i < len) {
                    res += String.fromCharCode.apply(
                        String,
                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                    )
                }
                return res
            }

            function asciiSlice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 0x7F)
                }
                return ret
            }

            function latin1Slice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i])
                }
                return ret
            }

            function hexSlice(buf, start, end) {
                var len = buf.length

                if (!start || start < 0) start = 0
                if (!end || end < 0 || end > len) end = len

                var out = ''
                for (var i = start; i < end; ++i) {
                    out += hexSliceLookupTable[buf[i]]
                }
                return out
            }

            function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end)
                var res = ''
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
                }
                return res
            }

            Buffer.prototype.slice = function slice(start, end) {
                var len = this.length
                start = ~~start
                end = end === undefined ? len : ~~end

                if (start < 0) {
                    start += len
                    if (start < 0) start = 0
                } else if (start > len) {
                    start = len
                }

                if (end < 0) {
                    end += len
                    if (end < 0) end = 0
                } else if (end > len) {
                    end = len
                }

                if (end < start) end = start

                var newBuf = this.subarray(start, end)
                // Return an augmented `Uint8Array` instance
                Object.setPrototypeOf(newBuf, Buffer.prototype)

                return newBuf
            }

            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
            function checkOffset(offset, ext, length) {
                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }

                return val
            }

            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length)
                }

                var val = this[offset + --byteLength]
                var mul = 1
                while (byteLength > 0 && (mul *= 0x100)) {
                    val += this[offset + --byteLength] * mul
                }

                return val
            }

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                return this[offset]
            }

            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return this[offset] | (this[offset + 1] << 8)
            }

            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return (this[offset] << 8) | this[offset + 1]
            }

            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return ((this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                    (this[offset + 3] * 0x1000000)
            }

            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] * 0x1000000) +
                    ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
            }

            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var i = byteLength
                var mul = 1
                var val = this[offset + --i]
                while (i > 0 && (mul *= 0x100)) {
                    val += this[offset + --i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                if (!(this[offset] & 0x80)) return (this[offset])
                return ((0xff - this[offset] + 1) * -1)
            }

            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset] | (this[offset + 1] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset + 1] | (this[offset] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16) |
                    (this[offset + 3] << 24)
            }

            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] << 24) |
                    (this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    (this[offset + 3])
            }

            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, true, 23, 4)
            }

            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, false, 23, 4)
            }

            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, true, 52, 8)
            }

            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, false, 52, 8)
            }

            function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var mul = 1
                var i = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var i = byteLength - 1
                var mul = 1
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset + 3] = (value >>> 24)
                this[offset + 2] = (value >>> 16)
                this[offset + 1] = (value >>> 8)
                this[offset] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = 0
                var mul = 1
                var sub = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = byteLength - 1
                var mul = 1
                var sub = 0
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                if (value < 0) value = 0xff + value + 1
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                this[offset + 2] = (value >>> 16)
                this[offset + 3] = (value >>> 24)
                return offset + 4
            }

            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (value < 0) value = 0xffffffff + value + 1
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert)
            }

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert)
            }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
                if (!start) start = 0
                if (!end && end !== 0) end = this.length
                if (targetStart >= target.length) targetStart = target.length
                if (!targetStart) targetStart = 0
                if (end > 0 && end < start) end = start

                // Copy 0 bytes; we're done
                if (end === start) return 0
                if (target.length === 0 || this.length === 0) return 0

                // Fatal error conditions
                if (targetStart < 0) {
                    throw new RangeError('targetStart out of bounds')
                }
                if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                // Are we oob?
                if (end > this.length) end = this.length
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start
                }

                var len = end - start

                if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                    // Use built-in when available, missing from IE11
                    this.copyWithin(targetStart, start, end)
                } else if (this === target && start < targetStart && targetStart < end) {
                    // descending copy from end
                    for (var i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else {
                    Uint8Array.prototype.set.call(
                        target,
                        this.subarray(start, end),
                        targetStart
                    )
                }

                return len
            }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                    if (typeof start === 'string') {
                        encoding = start
                        start = 0
                        end = this.length
                    } else if (typeof end === 'string') {
                        encoding = end
                        end = this.length
                    }
                    if (encoding !== undefined && typeof encoding !== 'string') {
                        throw new TypeError('encoding must be a string')
                    }
                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        throw new TypeError('Unknown encoding: ' + encoding)
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0)
                        if ((encoding === 'utf8' && code < 128) ||
                            encoding === 'latin1') {
                            // Fast path: If `val` fits into a single byte, use that numeric value.
                            val = code
                        }
                    }
                } else if (typeof val === 'number') {
                    val = val & 255
                } else if (typeof val === 'boolean') {
                    val = Number(val)
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError('Out of range index')
                }

                if (end <= start) {
                    return this
                }

                start = start >>> 0
                end = end === undefined ? this.length : end >>> 0

                if (!val) val = 0

                var i
                if (typeof val === 'number') {
                    for (i = start; i < end; ++i) {
                        this[i] = val
                    }
                } else {
                    var bytes = Buffer.isBuffer(val)
                        ? val
                        : Buffer.from(val, encoding)
                    var len = bytes.length
                    if (len === 0) {
                        throw new TypeError('The value "' + val +
                            '" is invalid for argument "value"')
                    }
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len]
                    }
                }

                return this
            }

// HELPER FUNCTIONS
// ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

            function base64clean(str) {
                // Node takes equal signs as end of the Base64 encoding
                str = str.split('=')[0]
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = str.trim().replace(INVALID_BASE64_RE, '')
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return ''
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                    str = str + '='
                }
                return str
            }

            function utf8ToBytes(string, units) {
                units = units || Infinity
                var codePoint
                var length = string.length
                var leadSurrogate = null
                var bytes = []

                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i)

                    // is surrogate component
                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                        // last char was a lead
                        if (!leadSurrogate) {
                            // no lead yet
                            if (codePoint > 0xDBFF) {
                                // unexpected trail
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            } else if (i + 1 === length) {
                                // unpaired lead
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            }

                            // valid lead
                            leadSurrogate = codePoint

                            continue
                        }

                        // 2 leads in a row
                        if (codePoint < 0xDC00) {
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            leadSurrogate = codePoint
                            continue
                        }

                        // valid surrogate pair
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                    } else if (leadSurrogate) {
                        // valid bmp char, but last char was a lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    }

                    leadSurrogate = null

                    // encode utf8
                    if (codePoint < 0x80) {
                        if ((units -= 1) < 0) break
                        bytes.push(codePoint)
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break
                        bytes.push(
                            codePoint >> 0x6 | 0xC0,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break
                        bytes.push(
                            codePoint >> 0xC | 0xE0,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break
                        bytes.push(
                            codePoint >> 0x12 | 0xF0,
                            codePoint >> 0xC & 0x3F | 0x80,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else {
                        throw new Error('Invalid code point')
                    }
                }

                return bytes
            }

            function asciiToBytes(str) {
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    // Node's code seems to be doing this and not & 0x7F..
                    byteArray.push(str.charCodeAt(i) & 0xFF)
                }
                return byteArray
            }

            function utf16leToBytes(str, units) {
                var c, hi, lo
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break

                    c = str.charCodeAt(i)
                    hi = c >> 8
                    lo = c % 256
                    byteArray.push(lo)
                    byteArray.push(hi)
                }

                return byteArray
            }

            function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str))
            }

            function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if ((i + offset >= dst.length) || (i >= src.length)) break
                    dst[i + offset] = src[i]
                }
                return i
            }

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
            function isInstance(obj, type) {
                return obj instanceof type ||
                    (obj != null && obj.constructor != null && obj.constructor.name != null &&
                        obj.constructor.name === type.name)
            }

            function numberIsNaN(obj) {
                // For IE11 support
                return obj !== obj // eslint-disable-line no-self-compare
            }

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
            var hexSliceLookupTable = (function () {
                var alphabet = '0123456789abcdef'
                var table = new Array(256)
                for (var i = 0; i < 16; ++i) {
                    var i16 = i * 16
                    for (var j = 0; j < 16; ++j) {
                        table[i16 + j] = alphabet[i] + alphabet[j]
                    }
                }
                return table
            })()

        }).call(this, require("buffer").Buffer)
    }, {"base64-js": 19, "buffer": 51, "ieee754": 102}],
    52: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var StringDecoder = require('string_decoder').StringDecoder
        var inherits = require('inherits')

        function CipherBase(hashMode) {
            Transform.call(this)
            this.hashMode = typeof hashMode === 'string'
            if (this.hashMode) {
                this[hashMode] = this._finalOrDigest
            } else {
                this.final = this._finalOrDigest
            }
            if (this._final) {
                this.__final = this._final
                this._final = null
            }
            this._decoder = null
            this._encoding = null
        }

        inherits(CipherBase, Transform)

        CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
            if (typeof data === 'string') {
                data = Buffer.from(data, inputEnc)
            }

            var outData = this._update(data)
            if (this.hashMode) return this

            if (outputEnc) {
                outData = this._toString(outData, outputEnc)
            }

            return outData
        }

        CipherBase.prototype.setAutoPadding = function () {
        }
        CipherBase.prototype.getAuthTag = function () {
            throw new Error('trying to get auth tag in unsupported state')
        }

        CipherBase.prototype.setAuthTag = function () {
            throw new Error('trying to set auth tag in unsupported state')
        }

        CipherBase.prototype.setAAD = function () {
            throw new Error('trying to set aad in unsupported state')
        }

        CipherBase.prototype._transform = function (data, _, next) {
            var err
            try {
                if (this.hashMode) {
                    this._update(data)
                } else {
                    this.push(this._update(data))
                }
            } catch (e) {
                err = e
            } finally {
                next(err)
            }
        }
        CipherBase.prototype._flush = function (done) {
            var err
            try {
                this.push(this.__final())
            } catch (e) {
                err = e
            }

            done(err)
        }
        CipherBase.prototype._finalOrDigest = function (outputEnc) {
            var outData = this.__final() || Buffer.alloc(0)
            if (outputEnc) {
                outData = this._toString(outData, outputEnc, true)
            }
            return outData
        }

        CipherBase.prototype._toString = function (value, enc, fin) {
            if (!this._decoder) {
                this._decoder = new StringDecoder(enc)
                this._encoding = enc
            }

            if (this._encoding !== enc) throw new Error('can\'t switch encodings')

            var out = this._decoder.write(value)
            if (fin) {
                out += this._decoder.end()
            }

            return out
        }

        module.exports = CipherBase

    }, {"inherits": 103, "safe-buffer": 147, "stream": 156, "string_decoder": 157}],
    53: [function (require, module, exports) {
        (function (Buffer) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

            function isArray(arg) {
                if (Array.isArray) {
                    return Array.isArray(arg);
                }
                return objectToString(arg) === '[object Array]';
            }

            exports.isArray = isArray;

            function isBoolean(arg) {
                return typeof arg === 'boolean';
            }

            exports.isBoolean = isBoolean;

            function isNull(arg) {
                return arg === null;
            }

            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
                return arg == null;
            }

            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
                return typeof arg === 'number';
            }

            exports.isNumber = isNumber;

            function isString(arg) {
                return typeof arg === 'string';
            }

            exports.isString = isString;

            function isSymbol(arg) {
                return typeof arg === 'symbol';
            }

            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
                return arg === void 0;
            }

            exports.isUndefined = isUndefined;

            function isRegExp(re) {
                return objectToString(re) === '[object RegExp]';
            }

            exports.isRegExp = isRegExp;

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }

            exports.isObject = isObject;

            function isDate(d) {
                return objectToString(d) === '[object Date]';
            }

            exports.isDate = isDate;

            function isError(e) {
                return (objectToString(e) === '[object Error]' || e instanceof Error);
            }

            exports.isError = isError;

            function isFunction(arg) {
                return typeof arg === 'function';
            }

            exports.isFunction = isFunction;

            function isPrimitive(arg) {
                return arg === null ||
                    typeof arg === 'boolean' ||
                    typeof arg === 'number' ||
                    typeof arg === 'string' ||
                    typeof arg === 'symbol' ||  // ES6 symbol
                    typeof arg === 'undefined';
            }

            exports.isPrimitive = isPrimitive;

            exports.isBuffer = Buffer.isBuffer;

            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }

        }).call(this, {"isBuffer": require("../../is-buffer/index.js")})
    }, {"../../is-buffer/index.js": 104}],
    54: [function (require, module, exports) {
        (function (Buffer) {
            var elliptic = require('elliptic')
            var BN = require('bn.js')

            module.exports = function createECDH(curve) {
                return new ECDH(curve)
            }

            var aliases = {
                secp256k1: {
                    name: 'secp256k1',
                    byteLength: 32
                },
                secp224r1: {
                    name: 'p224',
                    byteLength: 28
                },
                prime256v1: {
                    name: 'p256',
                    byteLength: 32
                },
                prime192v1: {
                    name: 'p192',
                    byteLength: 24
                },
                ed25519: {
                    name: 'ed25519',
                    byteLength: 32
                },
                secp384r1: {
                    name: 'p384',
                    byteLength: 48
                },
                secp521r1: {
                    name: 'p521',
                    byteLength: 66
                }
            }

            aliases.p224 = aliases.secp224r1
            aliases.p256 = aliases.secp256r1 = aliases.prime256v1
            aliases.p192 = aliases.secp192r1 = aliases.prime192v1
            aliases.p384 = aliases.secp384r1
            aliases.p521 = aliases.secp521r1

            function ECDH(curve) {
                this.curveType = aliases[curve]
                if (!this.curveType) {
                    this.curveType = {
                        name: curve
                    }
                }
                this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
                this.keys = void 0
            }

            ECDH.prototype.generateKeys = function (enc, format) {
                this.keys = this.curve.genKeyPair()
                return this.getPublicKey(enc, format)
            }

            ECDH.prototype.computeSecret = function (other, inenc, enc) {
                inenc = inenc || 'utf8'
                if (!Buffer.isBuffer(other)) {
                    other = new Buffer(other, inenc)
                }
                var otherPub = this.curve.keyFromPublic(other).getPublic()
                var out = otherPub.mul(this.keys.getPrivate()).getX()
                return formatReturnValue(out, enc, this.curveType.byteLength)
            }

            ECDH.prototype.getPublicKey = function (enc, format) {
                var key = this.keys.getPublic(format === 'compressed', true)
                if (format === 'hybrid') {
                    if (key[key.length - 1] % 2) {
                        key[0] = 7
                    } else {
                        key[0] = 6
                    }
                }
                return formatReturnValue(key, enc)
            }

            ECDH.prototype.getPrivateKey = function (enc) {
                return formatReturnValue(this.keys.getPrivate(), enc)
            }

            ECDH.prototype.setPublicKey = function (pub, enc) {
                enc = enc || 'utf8'
                if (!Buffer.isBuffer(pub)) {
                    pub = new Buffer(pub, enc)
                }
                this.keys._importPublic(pub)
                return this
            }

            ECDH.prototype.setPrivateKey = function (priv, enc) {
                enc = enc || 'utf8'
                if (!Buffer.isBuffer(priv)) {
                    priv = new Buffer(priv, enc)
                }

                var _priv = new BN(priv)
                _priv = _priv.toString(16)
                this.keys = this.curve.genKeyPair()
                this.keys._importPrivate(_priv)
                return this
            }

            function formatReturnValue(bn, enc, len) {
                if (!Array.isArray(bn)) {
                    bn = bn.toArray()
                }
                var buf = new Buffer(bn)
                if (len && buf.length < len) {
                    var zeros = new Buffer(len - buf.length)
                    zeros.fill(0)
                    buf = Buffer.concat([zeros, buf])
                }
                if (!enc) {
                    return buf
                } else {
                    return buf.toString(enc)
                }
            }

        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 20, "buffer": 51, "elliptic": 70}],
    55: [function (require, module, exports) {
        'use strict'
        var inherits = require('inherits')
        var MD5 = require('md5.js')
        var RIPEMD160 = require('ripemd160')
        var sha = require('sha.js')
        var Base = require('cipher-base')

        function Hash(hash) {
            Base.call(this, 'digest')

            this._hash = hash
        }

        inherits(Hash, Base)

        Hash.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hash.prototype._final = function () {
            return this._hash.digest()
        }

        module.exports = function createHash(alg) {
            alg = alg.toLowerCase()
            if (alg === 'md5') return new MD5()
            if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

            return new Hash(sha(alg))
        }

    }, {"cipher-base": 52, "inherits": 103, "md5.js": 106, "ripemd160": 146, "sha.js": 149}],
    56: [function (require, module, exports) {
        var MD5 = require('md5.js')

        module.exports = function (buffer) {
            return new MD5().update(buffer).digest()
        }

    }, {"md5.js": 106}],
    57: [function (require, module, exports) {
        'use strict'
        var inherits = require('inherits')
        var Legacy = require('./legacy')
        var Base = require('cipher-base')
        var Buffer = require('safe-buffer').Buffer
        var md5 = require('create-hash/md5')
        var RIPEMD160 = require('ripemd160')

        var sha = require('sha.js')

        var ZEROS = Buffer.alloc(128)

        function Hmac(alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            this._alg = alg
            this._key = key
            if (key.length > blocksize) {
                var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                key = hash.update(key).digest()
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }
            this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
            this._hash.update(ipad)
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hmac.prototype._final = function () {
            var h = this._hash.digest()
            var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
            return hash.update(this._opad).update(h).digest()
        }

        module.exports = function createHmac(alg, key) {
            alg = alg.toLowerCase()
            if (alg === 'rmd160' || alg === 'ripemd160') {
                return new Hmac('rmd160', key)
            }
            if (alg === 'md5') {
                return new Legacy(md5, key)
            }
            return new Hmac(alg, key)
        }

    }, {
        "./legacy": 58,
        "cipher-base": 52,
        "create-hash/md5": 56,
        "inherits": 103,
        "ripemd160": 146,
        "safe-buffer": 147,
        "sha.js": 149
    }],
    58: [function (require, module, exports) {
        'use strict'
        var inherits = require('inherits')
        var Buffer = require('safe-buffer').Buffer

        var Base = require('cipher-base')

        var ZEROS = Buffer.alloc(128)
        var blocksize = 64

        function Hmac(alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            this._alg = alg
            this._key = key

            if (key.length > blocksize) {
                key = alg(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            this._hash = [ipad]
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.push(data)
        }

        Hmac.prototype._final = function () {
            var h = this._alg(Buffer.concat(this._hash))
            return this._alg(Buffer.concat([this._opad, h]))
        }
        module.exports = Hmac

    }, {"cipher-base": 52, "inherits": 103, "safe-buffer": 147}],
    59: [function (require, module, exports) {
        'use strict'

        exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
        exports.createHash = exports.Hash = require('create-hash')
        exports.createHmac = exports.Hmac = require('create-hmac')

        var algos = require('browserify-sign/algos')
        var algoKeys = Object.keys(algos)
        var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
        exports.getHashes = function () {
            return hashes
        }

        var p = require('pbkdf2')
        exports.pbkdf2 = p.pbkdf2
        exports.pbkdf2Sync = p.pbkdf2Sync

        var aes = require('browserify-cipher')

        exports.Cipher = aes.Cipher
        exports.createCipher = aes.createCipher
        exports.Cipheriv = aes.Cipheriv
        exports.createCipheriv = aes.createCipheriv
        exports.Decipher = aes.Decipher
        exports.createDecipher = aes.createDecipher
        exports.Decipheriv = aes.Decipheriv
        exports.createDecipheriv = aes.createDecipheriv
        exports.getCiphers = aes.getCiphers
        exports.listCiphers = aes.listCiphers

        var dh = require('diffie-hellman')

        exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
        exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
        exports.getDiffieHellman = dh.getDiffieHellman
        exports.createDiffieHellman = dh.createDiffieHellman
        exports.DiffieHellman = dh.DiffieHellman

        var sign = require('browserify-sign')

        exports.createSign = sign.createSign
        exports.Sign = sign.Sign
        exports.createVerify = sign.createVerify
        exports.Verify = sign.Verify

        exports.createECDH = require('create-ecdh')

        var publicEncrypt = require('public-encrypt')

        exports.publicEncrypt = publicEncrypt.publicEncrypt
        exports.privateEncrypt = publicEncrypt.privateEncrypt
        exports.publicDecrypt = publicEncrypt.publicDecrypt
        exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

        var rf = require('randomfill')

        exports.randomFill = rf.randomFill
        exports.randomFillSync = rf.randomFillSync

        exports.createCredentials = function () {
            throw new Error([
                'sorry, createCredentials is not implemented yet',
                'we accept pull requests',
                'https://github.com/crypto-browserify/crypto-browserify'
            ].join('\n'))
        }

        exports.constants = {
            'DH_CHECK_P_NOT_SAFE_PRIME': 2,
            'DH_CHECK_P_NOT_PRIME': 1,
            'DH_UNABLE_TO_CHECK_GENERATOR': 4,
            'DH_NOT_SUITABLE_GENERATOR': 8,
            'NPN_ENABLED': 1,
            'ALPN_ENABLED': 1,
            'RSA_PKCS1_PADDING': 1,
            'RSA_SSLV23_PADDING': 2,
            'RSA_NO_PADDING': 3,
            'RSA_PKCS1_OAEP_PADDING': 4,
            'RSA_X931_PADDING': 5,
            'RSA_PKCS1_PSS_PADDING': 6,
            'POINT_CONVERSION_COMPRESSED': 2,
            'POINT_CONVERSION_UNCOMPRESSED': 4,
            'POINT_CONVERSION_HYBRID': 6
        }

    }, {
        "browserify-cipher": 40,
        "browserify-sign": 47,
        "browserify-sign/algos": 44,
        "create-ecdh": 54,
        "create-hash": 55,
        "create-hmac": 57,
        "diffie-hellman": 66,
        "pbkdf2": 116,
        "public-encrypt": 123,
        "randombytes": 129,
        "randomfill": 130
    }],
    60: [function (require, module, exports) {
        'use strict';

        exports.utils = require('./des/utils');
        exports.Cipher = require('./des/cipher');
        exports.DES = require('./des/des');
        exports.CBC = require('./des/cbc');
        exports.EDE = require('./des/ede');

    }, {"./des/cbc": 61, "./des/cipher": 62, "./des/des": 63, "./des/ede": 64, "./des/utils": 65}],
    61: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var proto = {};

        function CBCState(iv) {
            assert.equal(iv.length, 8, 'Invalid IV length');

            this.iv = new Array(8);
            for (var i = 0; i < this.iv.length; i++)
                this.iv[i] = iv[i];
        }

        function instantiate(Base) {
            function CBC(options) {
                Base.call(this, options);
                this._cbcInit();
            }

            inherits(CBC, Base);

            var keys = Object.keys(proto);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                CBC.prototype[key] = proto[key];
            }

            CBC.create = function create(options) {
                return new CBC(options);
            };

            return CBC;
        }

        exports.instantiate = instantiate;

        proto._cbcInit = function _cbcInit() {
            var state = new CBCState(this.options.iv);
            this._cbcState = state;
        };

        proto._update = function _update(inp, inOff, out, outOff) {
            var state = this._cbcState;
            var superProto = this.constructor.super_.prototype;

            var iv = state.iv;
            if (this.type === 'encrypt') {
                for (var i = 0; i < this.blockSize; i++)
                    iv[i] ^= inp[inOff + i];

                superProto._update.call(this, iv, 0, out, outOff);

                for (var i = 0; i < this.blockSize; i++)
                    iv[i] = out[outOff + i];
            } else {
                superProto._update.call(this, inp, inOff, out, outOff);

                for (var i = 0; i < this.blockSize; i++)
                    out[outOff + i] ^= iv[i];

                for (var i = 0; i < this.blockSize; i++)
                    iv[i] = inp[inOff + i];
            }
        };

    }, {"inherits": 103, "minimalistic-assert": 108}],
    62: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');

        function Cipher(options) {
            this.options = options;

            this.type = this.options.type;
            this.blockSize = 8;
            this._init();

            this.buffer = new Array(this.blockSize);
            this.bufferOff = 0;
        }

        module.exports = Cipher;

        Cipher.prototype._init = function _init() {
            // Might be overrided
        };

        Cipher.prototype.update = function update(data) {
            if (data.length === 0)
                return [];

            if (this.type === 'decrypt')
                return this._updateDecrypt(data);
            else
                return this._updateEncrypt(data);
        };

        Cipher.prototype._buffer = function _buffer(data, off) {
            // Append data to buffer
            var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
            for (var i = 0; i < min; i++)
                this.buffer[this.bufferOff + i] = data[off + i];
            this.bufferOff += min;

            // Shift next
            return min;
        };

        Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
            this._update(this.buffer, 0, out, off);
            this.bufferOff = 0;
            return this.blockSize;
        };

        Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
            var inputOff = 0;
            var outputOff = 0;

            var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
            var out = new Array(count * this.blockSize);

            if (this.bufferOff !== 0) {
                inputOff += this._buffer(data, inputOff);

                if (this.bufferOff === this.buffer.length)
                    outputOff += this._flushBuffer(out, outputOff);
            }

            // Write blocks
            var max = data.length - ((data.length - inputOff) % this.blockSize);
            for (; inputOff < max; inputOff += this.blockSize) {
                this._update(data, inputOff, out, outputOff);
                outputOff += this.blockSize;
            }

            // Queue rest
            for (; inputOff < data.length; inputOff++, this.bufferOff++)
                this.buffer[this.bufferOff] = data[inputOff];

            return out;
        };

        Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
            var inputOff = 0;
            var outputOff = 0;

            var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
            var out = new Array(count * this.blockSize);

            // TODO(indutny): optimize it, this is far from optimal
            for (; count > 0; count--) {
                inputOff += this._buffer(data, inputOff);
                outputOff += this._flushBuffer(out, outputOff);
            }

            // Buffer rest of the input
            inputOff += this._buffer(data, inputOff);

            return out;
        };

        Cipher.prototype.final = function final(buffer) {
            var first;
            if (buffer)
                first = this.update(buffer);

            var last;
            if (this.type === 'encrypt')
                last = this._finalEncrypt();
            else
                last = this._finalDecrypt();

            if (first)
                return first.concat(last);
            else
                return last;
        };

        Cipher.prototype._pad = function _pad(buffer, off) {
            if (off === 0)
                return false;

            while (off < buffer.length)
                buffer[off++] = 0;

            return true;
        };

        Cipher.prototype._finalEncrypt = function _finalEncrypt() {
            if (!this._pad(this.buffer, this.bufferOff))
                return [];

            var out = new Array(this.blockSize);
            this._update(this.buffer, 0, out, 0);
            return out;
        };

        Cipher.prototype._unpad = function _unpad(buffer) {
            return buffer;
        };

        Cipher.prototype._finalDecrypt = function _finalDecrypt() {
            assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
            var out = new Array(this.blockSize);
            this._flushBuffer(out, 0);

            return this._unpad(out);
        };

    }, {"minimalistic-assert": 108}],
    63: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var des = require('../des');
        var utils = des.utils;
        var Cipher = des.Cipher;

        function DESState() {
            this.tmp = new Array(2);
            this.keys = null;
        }

        function DES(options) {
            Cipher.call(this, options);

            var state = new DESState();
            this._desState = state;

            this.deriveKeys(state, options.key);
        }

        inherits(DES, Cipher);
        module.exports = DES;

        DES.create = function create(options) {
            return new DES(options);
        };

        var shiftTable = [
            1, 1, 2, 2, 2, 2, 2, 2,
            1, 2, 2, 2, 2, 2, 2, 1
        ];

        DES.prototype.deriveKeys = function deriveKeys(state, key) {
            state.keys = new Array(16 * 2);

            assert.equal(key.length, this.blockSize, 'Invalid key length');

            var kL = utils.readUInt32BE(key, 0);
            var kR = utils.readUInt32BE(key, 4);

            utils.pc1(kL, kR, state.tmp, 0);
            kL = state.tmp[0];
            kR = state.tmp[1];
            for (var i = 0; i < state.keys.length; i += 2) {
                var shift = shiftTable[i >>> 1];
                kL = utils.r28shl(kL, shift);
                kR = utils.r28shl(kR, shift);
                utils.pc2(kL, kR, state.keys, i);
            }
        };

        DES.prototype._update = function _update(inp, inOff, out, outOff) {
            var state = this._desState;

            var l = utils.readUInt32BE(inp, inOff);
            var r = utils.readUInt32BE(inp, inOff + 4);

            // Initial Permutation
            utils.ip(l, r, state.tmp, 0);
            l = state.tmp[0];
            r = state.tmp[1];

            if (this.type === 'encrypt')
                this._encrypt(state, l, r, state.tmp, 0);
            else
                this._decrypt(state, l, r, state.tmp, 0);

            l = state.tmp[0];
            r = state.tmp[1];

            utils.writeUInt32BE(out, l, outOff);
            utils.writeUInt32BE(out, r, outOff + 4);
        };

        DES.prototype._pad = function _pad(buffer, off) {
            var value = buffer.length - off;
            for (var i = off; i < buffer.length; i++)
                buffer[i] = value;

            return true;
        };

        DES.prototype._unpad = function _unpad(buffer) {
            var pad = buffer[buffer.length - 1];
            for (var i = buffer.length - pad; i < buffer.length; i++)
                assert.equal(buffer[i], pad);

            return buffer.slice(0, buffer.length - pad);
        };

        DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
            var l = lStart;
            var r = rStart;

            // Apply f() x16 times
            for (var i = 0; i < state.keys.length; i += 2) {
                var keyL = state.keys[i];
                var keyR = state.keys[i + 1];

                // f(r, k)
                utils.expand(r, state.tmp, 0);

                keyL ^= state.tmp[0];
                keyR ^= state.tmp[1];
                var s = utils.substitute(keyL, keyR);
                var f = utils.permute(s);

                var t = r;
                r = (l ^ f) >>> 0;
                l = t;
            }

            // Reverse Initial Permutation
            utils.rip(r, l, out, off);
        };

        DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
            var l = rStart;
            var r = lStart;

            // Apply f() x16 times
            for (var i = state.keys.length - 2; i >= 0; i -= 2) {
                var keyL = state.keys[i];
                var keyR = state.keys[i + 1];

                // f(r, k)
                utils.expand(l, state.tmp, 0);

                keyL ^= state.tmp[0];
                keyR ^= state.tmp[1];
                var s = utils.substitute(keyL, keyR);
                var f = utils.permute(s);

                var t = l;
                l = (r ^ f) >>> 0;
                r = t;
            }

            // Reverse Initial Permutation
            utils.rip(l, r, out, off);
        };

    }, {"../des": 60, "inherits": 103, "minimalistic-assert": 108}],
    64: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var des = require('../des');
        var Cipher = des.Cipher;
        var DES = des.DES;

        function EDEState(type, key) {
            assert.equal(key.length, 24, 'Invalid key length');

            var k1 = key.slice(0, 8);
            var k2 = key.slice(8, 16);
            var k3 = key.slice(16, 24);

            if (type === 'encrypt') {
                this.ciphers = [
                    DES.create({type: 'encrypt', key: k1}),
                    DES.create({type: 'decrypt', key: k2}),
                    DES.create({type: 'encrypt', key: k3})
                ];
            } else {
                this.ciphers = [
                    DES.create({type: 'decrypt', key: k3}),
                    DES.create({type: 'encrypt', key: k2}),
                    DES.create({type: 'decrypt', key: k1})
                ];
            }
        }

        function EDE(options) {
            Cipher.call(this, options);

            var state = new EDEState(this.type, this.options.key);
            this._edeState = state;
        }

        inherits(EDE, Cipher);

        module.exports = EDE;

        EDE.create = function create(options) {
            return new EDE(options);
        };

        EDE.prototype._update = function _update(inp, inOff, out, outOff) {
            var state = this._edeState;

            state.ciphers[0]._update(inp, inOff, out, outOff);
            state.ciphers[1]._update(out, outOff, out, outOff);
            state.ciphers[2]._update(out, outOff, out, outOff);
        };

        EDE.prototype._pad = DES.prototype._pad;
        EDE.prototype._unpad = DES.prototype._unpad;

    }, {"../des": 60, "inherits": 103, "minimalistic-assert": 108}],
    65: [function (require, module, exports) {
        'use strict';

        exports.readUInt32BE = function readUInt32BE(bytes, off) {
            var res = (bytes[0 + off] << 24) |
                (bytes[1 + off] << 16) |
                (bytes[2 + off] << 8) |
                bytes[3 + off];
            return res >>> 0;
        };

        exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
            bytes[0 + off] = value >>> 24;
            bytes[1 + off] = (value >>> 16) & 0xff;
            bytes[2 + off] = (value >>> 8) & 0xff;
            bytes[3 + off] = value & 0xff;
        };

        exports.ip = function ip(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inR >>> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inL >>> (j + i)) & 1;
                }
            }

            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inR >>> (j + i)) & 1;
                }
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inL >>> (j + i)) & 1;
                }
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.rip = function rip(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            for (var i = 0; i < 4; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    outL <<= 1;
                    outL |= (inR >>> (j + i)) & 1;
                    outL <<= 1;
                    outL |= (inL >>> (j + i)) & 1;
                }
            }
            for (var i = 4; i < 8; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    outR <<= 1;
                    outR |= (inR >>> (j + i)) & 1;
                    outR <<= 1;
                    outR |= (inL >>> (j + i)) & 1;
                }
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.pc1 = function pc1(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            // 7, 15, 23, 31, 39, 47, 55, 63
            // 6, 14, 22, 30, 39, 47, 55, 63
            // 5, 13, 21, 29, 39, 47, 55, 63
            // 4, 12, 20, 28
            for (var i = 7; i >= 5; i--) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inR >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inL >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outL <<= 1;
                outL |= (inR >> (j + i)) & 1;
            }

            // 1, 9, 17, 25, 33, 41, 49, 57
            // 2, 10, 18, 26, 34, 42, 50, 58
            // 3, 11, 19, 27, 35, 43, 51, 59
            // 36, 44, 52, 60
            for (var i = 1; i <= 3; i++) {
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inR >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inL >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outR <<= 1;
                outR |= (inL >> (j + i)) & 1;
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.r28shl = function r28shl(num, shift) {
            return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
        };

        var pc2table = [
            // inL => outL
            14, 11, 17, 4, 27, 23, 25, 0,
            13, 22, 7, 18, 5, 9, 16, 24,
            2, 20, 12, 21, 1, 8, 15, 26,

            // inR => outR
            15, 4, 25, 19, 9, 1, 26, 16,
            5, 11, 23, 8, 12, 7, 17, 0,
            22, 3, 10, 14, 6, 20, 27, 24
        ];

        exports.pc2 = function pc2(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            var len = pc2table.length >>> 1;
            for (var i = 0; i < len; i++) {
                outL <<= 1;
                outL |= (inL >>> pc2table[i]) & 0x1;
            }
            for (var i = len; i < pc2table.length; i++) {
                outR <<= 1;
                outR |= (inR >>> pc2table[i]) & 0x1;
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.expand = function expand(r, out, off) {
            var outL = 0;
            var outR = 0;

            outL = ((r & 1) << 5) | (r >>> 27);
            for (var i = 23; i >= 15; i -= 4) {
                outL <<= 6;
                outL |= (r >>> i) & 0x3f;
            }
            for (var i = 11; i >= 3; i -= 4) {
                outR |= (r >>> i) & 0x3f;
                outR <<= 6;
            }
            outR |= ((r & 0x1f) << 1) | (r >>> 31);

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        var sTable = [
            14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
            3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
            4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
            15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

            15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
            9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
            0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
            5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

            10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
            1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
            13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
            11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

            7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
            1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
            10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
            15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

            2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
            8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
            4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
            15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

            12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
            0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
            9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
            7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

            4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
            3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
            1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
            10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

            13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
            10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
            7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
            0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
        ];

        exports.substitute = function substitute(inL, inR) {
            var out = 0;
            for (var i = 0; i < 4; i++) {
                var b = (inL >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[i * 0x40 + b];

                out <<= 4;
                out |= sb;
            }
            for (var i = 0; i < 4; i++) {
                var b = (inR >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[4 * 0x40 + i * 0x40 + b];

                out <<= 4;
                out |= sb;
            }
            return out >>> 0;
        };

        var permuteTable = [
            16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
            30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
        ];

        exports.permute = function permute(num) {
            var out = 0;
            for (var i = 0; i < permuteTable.length; i++) {
                out <<= 1;
                out |= (num >>> permuteTable[i]) & 0x1;
            }
            return out >>> 0;
        };

        exports.padSplit = function padSplit(num, size, group) {
            var str = num.toString(2);
            while (str.length < size)
                str = '0' + str;

            var out = [];
            for (var i = 0; i < size; i += group)
                out.push(str.slice(i, i + group));
            return out.join(' ');
        };

    }, {}],
    66: [function (require, module, exports) {
        (function (Buffer) {
            var generatePrime = require('./lib/generatePrime')
            var primes = require('./lib/primes.json')

            var DH = require('./lib/dh')

            function getDiffieHellman(mod) {
                var prime = new Buffer(primes[mod].prime, 'hex')
                var gen = new Buffer(primes[mod].gen, 'hex')

                return new DH(prime, gen)
            }

            var ENCODINGS = {
                'binary': true, 'hex': true, 'base64': true
            }

            function createDiffieHellman(prime, enc, generator, genc) {
                if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
                    return createDiffieHellman(prime, 'binary', enc, generator)
                }

                enc = enc || 'binary'
                genc = genc || 'binary'
                generator = generator || new Buffer([2])

                if (!Buffer.isBuffer(generator)) {
                    generator = new Buffer(generator, genc)
                }

                if (typeof prime === 'number') {
                    return new DH(generatePrime(prime, generator), generator, true)
                }

                if (!Buffer.isBuffer(prime)) {
                    prime = new Buffer(prime, enc)
                }

                return new DH(prime, generator, true)
            }

            exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
            exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

        }).call(this, require("buffer").Buffer)
    }, {"./lib/dh": 67, "./lib/generatePrime": 68, "./lib/primes.json": 69, "buffer": 51}],
    67: [function (require, module, exports) {
        (function (Buffer) {
            var BN = require('bn.js');
            var MillerRabin = require('miller-rabin');
            var millerRabin = new MillerRabin();
            var TWENTYFOUR = new BN(24);
            var ELEVEN = new BN(11);
            var TEN = new BN(10);
            var THREE = new BN(3);
            var SEVEN = new BN(7);
            var primes = require('./generatePrime');
            var randomBytes = require('randombytes');
            module.exports = DH;

            function setPublicKey(pub, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(pub)) {
                    pub = new Buffer(pub, enc);
                }
                this._pub = new BN(pub);
                return this;
            }

            function setPrivateKey(priv, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(priv)) {
                    priv = new Buffer(priv, enc);
                }
                this._priv = new BN(priv);
                return this;
            }

            var primeCache = {};

            function checkPrime(prime, generator) {
                var gen = generator.toString('hex');
                var hex = [gen, prime.toString(16)].join('_');
                if (hex in primeCache) {
                    return primeCache[hex];
                }
                var error = 0;

                if (prime.isEven() ||
                    !primes.simpleSieve ||
                    !primes.fermatTest(prime) ||
                    !millerRabin.test(prime)) {
                    //not a prime so +1
                    error += 1;

                    if (gen === '02' || gen === '05') {
                        // we'd be able to check the generator
                        // it would fail so +8
                        error += 8;
                    } else {
                        //we wouldn't be able to test the generator
                        // so +4
                        error += 4;
                    }
                    primeCache[hex] = error;
                    return error;
                }
                if (!millerRabin.test(prime.shrn(1))) {
                    //not a safe prime
                    error += 2;
                }
                var rem;
                switch (gen) {
                    case '02':
                        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                            // unsuidable generator
                            error += 8;
                        }
                        break;
                    case '05':
                        rem = prime.mod(TEN);
                        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                            // prime mod 10 needs to equal 3 or 7
                            error += 8;
                        }
                        break;
                    default:
                        error += 4;
                }
                primeCache[hex] = error;
                return error;
            }

            function DH(prime, generator, malleable) {
                this.setGenerator(generator);
                this.__prime = new BN(prime);
                this._prime = BN.mont(this.__prime);
                this._primeLen = prime.length;
                this._pub = undefined;
                this._priv = undefined;
                this._primeCode = undefined;
                if (malleable) {
                    this.setPublicKey = setPublicKey;
                    this.setPrivateKey = setPrivateKey;
                } else {
                    this._primeCode = 8;
                }
            }

            Object.defineProperty(DH.prototype, 'verifyError', {
                enumerable: true,
                get: function () {
                    if (typeof this._primeCode !== 'number') {
                        this._primeCode = checkPrime(this.__prime, this.__gen);
                    }
                    return this._primeCode;
                }
            });
            DH.prototype.generateKeys = function () {
                if (!this._priv) {
                    this._priv = new BN(randomBytes(this._primeLen));
                }
                this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                return this.getPublicKey();
            };

            DH.prototype.computeSecret = function (other) {
                other = new BN(other);
                other = other.toRed(this._prime);
                var secret = other.redPow(this._priv).fromRed();
                var out = new Buffer(secret.toArray());
                var prime = this.getPrime();
                if (out.length < prime.length) {
                    var front = new Buffer(prime.length - out.length);
                    front.fill(0);
                    out = Buffer.concat([front, out]);
                }
                return out;
            };

            DH.prototype.getPublicKey = function getPublicKey(enc) {
                return formatReturnValue(this._pub, enc);
            };

            DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                return formatReturnValue(this._priv, enc);
            };

            DH.prototype.getPrime = function (enc) {
                return formatReturnValue(this.__prime, enc);
            };

            DH.prototype.getGenerator = function (enc) {
                return formatReturnValue(this._gen, enc);
            };

            DH.prototype.setGenerator = function (gen, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(gen)) {
                    gen = new Buffer(gen, enc);
                }
                this.__gen = gen;
                this._gen = new BN(gen);
                return this;
            };

            function formatReturnValue(bn, enc) {
                var buf = new Buffer(bn.toArray());
                if (!enc) {
                    return buf;
                } else {
                    return buf.toString(enc);
                }
            }

        }).call(this, require("buffer").Buffer)
    }, {"./generatePrime": 68, "bn.js": 20, "buffer": 51, "miller-rabin": 107, "randombytes": 129}],
    68: [function (require, module, exports) {
        var randomBytes = require('randombytes');
        module.exports = findPrime;
        findPrime.simpleSieve = simpleSieve;
        findPrime.fermatTest = fermatTest;
        var BN = require('bn.js');
        var TWENTYFOUR = new BN(24);
        var MillerRabin = require('miller-rabin');
        var millerRabin = new MillerRabin();
        var ONE = new BN(1);
        var TWO = new BN(2);
        var FIVE = new BN(5);
        var SIXTEEN = new BN(16);
        var EIGHT = new BN(8);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var ELEVEN = new BN(11);
        var FOUR = new BN(4);
        var TWELVE = new BN(12);
        var primes = null;

        function _getPrimes() {
            if (primes !== null)
                return primes;

            var limit = 0x100000;
            var res = [];
            res[0] = 2;
            for (var i = 1, k = 3; k < limit; k += 2) {
                var sqrt = Math.ceil(Math.sqrt(k));
                for (var j = 0; j < i && res[j] <= sqrt; j++)
                    if (k % res[j] === 0)
                        break;

                if (i !== j && res[j] <= sqrt)
                    continue;

                res[i++] = k;
            }
            primes = res;
            return res;
        }

        function simpleSieve(p) {
            var primes = _getPrimes();

            for (var i = 0; i < primes.length; i++)
                if (p.modn(primes[i]) === 0) {
                    if (p.cmpn(primes[i]) === 0) {
                        return true;
                    } else {
                        return false;
                    }
                }

            return true;
        }

        function fermatTest(p) {
            var red = BN.mont(p);
            return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
        }

        function findPrime(bits, gen) {
            if (bits < 16) {
                // this is what openssl does
                if (gen === 2 || gen === 5) {
                    return new BN([0x8c, 0x7b]);
                } else {
                    return new BN([0x8c, 0x27]);
                }
            }
            gen = new BN(gen);

            var num, n2;

            while (true) {
                num = new BN(randomBytes(Math.ceil(bits / 8)));
                while (num.bitLength() > bits) {
                    num.ishrn(1);
                }
                if (num.isEven()) {
                    num.iadd(ONE);
                }
                if (!num.testn(1)) {
                    num.iadd(TWO);
                }
                if (!gen.cmp(TWO)) {
                    while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                        num.iadd(FOUR);
                    }
                } else if (!gen.cmp(FIVE)) {
                    while (num.mod(TEN).cmp(THREE)) {
                        num.iadd(FOUR);
                    }
                }
                n2 = num.shrn(1);
                if (simpleSieve(n2) && simpleSieve(num) &&
                    fermatTest(n2) && fermatTest(num) &&
                    millerRabin.test(n2) && millerRabin.test(num)) {
                    return num;
                }
            }

        }

    }, {"bn.js": 20, "miller-rabin": 107, "randombytes": 129}],
    69: [function (require, module, exports) {
        module.exports = {
            "modp1": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
            },
            "modp2": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
            },
            "modp5": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
            },
            "modp14": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
            },
            "modp15": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
            },
            "modp16": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
            },
            "modp17": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
            },
            "modp18": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
            }
        }
    }, {}],
    70: [function (require, module, exports) {
        'use strict';

        var elliptic = exports;

        elliptic.version = require('../package.json').version;
        elliptic.utils = require('./elliptic/utils');
        elliptic.rand = require('brorand');
        elliptic.curve = require('./elliptic/curve');
        elliptic.curves = require('./elliptic/curves');

// Protocols
        elliptic.ec = require('./elliptic/ec');
        elliptic.eddsa = require('./elliptic/eddsa');

    }, {
        "../package.json": 85,
        "./elliptic/curve": 73,
        "./elliptic/curves": 76,
        "./elliptic/ec": 77,
        "./elliptic/eddsa": 80,
        "./elliptic/utils": 84,
        "brorand": 21
    }],
    71: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;

        function BaseCurve(type, conf) {
            this.type = type;
            this.p = new BN(conf.p, 16);

            // Use Montgomery, when there is no fast reduction for the prime
            this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

            // Useful for many curves
            this.zero = new BN(0).toRed(this.red);
            this.one = new BN(1).toRed(this.red);
            this.two = new BN(2).toRed(this.red);

            // Curve configuration, optional
            this.n = conf.n && new BN(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

            // Temporary arrays
            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4);

            // Generalized Greg Maxwell's trick
            var adjustCount = this.n && this.p.div(this.n);
            if (!adjustCount || adjustCount.cmpn(100) > 0) {
                this.redN = null;
            } else {
                this._maxwellTrick = true;
                this.redN = this.n.toRed(this.red);
            }
        }

        module.exports = BaseCurve;

        BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert(p.precomputed);
            var doubles = p._getDoubles();

            var naf = getNAF(k, 1);
            var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3;

            // Translate into more windowed form
            var repr = [];
            for (var j = 0; j < naf.length; j += doubles.step) {
                var nafW = 0;
                for (var k = j + doubles.step - 1; k >= j; k--)
                    nafW = (nafW << 1) + naf[k];
                repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);
            for (var i = I; i > 0; i--) {
                for (var j = 0; j < repr.length; j++) {
                    var nafW = repr[j];
                    if (nafW === i)
                        b = b.mixedAdd(doubles.points[j]);
                    else if (nafW === -i)
                        b = b.mixedAdd(doubles.points[j].neg());
                }
                a = a.add(b);
            }
            return a.toP();
        };

        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4;

            // Precompute window
            var nafPoints = p._getNAFPoints(w);
            w = nafPoints.wnd;
            var wnd = nafPoints.points;

            // Get NAF form
            var naf = getNAF(k, w);

            // Add `this`*(N+1) for every w-NAF index
            var acc = this.jpoint(null, null, null);
            for (var i = naf.length - 1; i >= 0; i--) {
                // Count zeroes
                for (var k = 0; i >= 0 && naf[i] === 0; i--)
                    k++;
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);

                if (i < 0)
                    break;
                var z = naf[i];
                assert(z !== 0);
                if (p.type === 'affine') {
                    // J +- P
                    if (z > 0)
                        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                } else {
                    // J +- J
                    if (z > 0)
                        acc = acc.add(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.add(wnd[(-z - 1) >> 1].neg());
                }
            }
            return p.type === 'affine' ? acc.toP() : acc;
        };

        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                               points,
                                                               coeffs,
                                                               len,
                                                               jacobianResult) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3;

            // Fill all arrays
            var max = 0;
            for (var i = 0; i < len; i++) {
                var p = points[i];
                var nafPoints = p._getNAFPoints(defW);
                wndWidth[i] = nafPoints.wnd;
                wnd[i] = nafPoints.points;
            }

            // Comb small window NAFs
            for (var i = len - 1; i >= 1; i -= 2) {
                var a = i - 1;
                var b = i;
                if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                    naf[a] = getNAF(coeffs[a], wndWidth[a]);
                    naf[b] = getNAF(coeffs[b], wndWidth[b]);
                    max = Math.max(naf[a].length, max);
                    max = Math.max(naf[b].length, max);
                    continue;
                }

                var comb = [
                    points[a], /* 1 */
                    null, /* 3 */
                    null, /* 5 */
                    points[b] /* 7 */
                ];

                // Try to avoid Projective points, if possible
                if (points[a].y.cmp(points[b].y) === 0) {
                    comb[1] = points[a].add(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].add(points[b].neg());
                } else {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                }

                var index = [
                    -3, /* -1 -1 */
                    -1, /* -1 0 */
                    -5, /* -1 1 */
                    -7, /* 0 -1 */
                    0, /* 0 0 */
                    7, /* 0 1 */
                    5, /* 1 -1 */
                    1, /* 1 0 */
                    3  /* 1 1 */
                ];

                var jsf = getJSF(coeffs[a], coeffs[b]);
                max = Math.max(jsf[0].length, max);
                naf[a] = new Array(max);
                naf[b] = new Array(max);
                for (var j = 0; j < max; j++) {
                    var ja = jsf[0][j] | 0;
                    var jb = jsf[1][j] | 0;

                    naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                    naf[b][j] = 0;
                    wnd[a] = comb;
                }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;
            for (var i = max; i >= 0; i--) {
                var k = 0;

                while (i >= 0) {
                    var zero = true;
                    for (var j = 0; j < len; j++) {
                        tmp[j] = naf[j][i] | 0;
                        if (tmp[j] !== 0)
                            zero = false;
                    }
                    if (!zero)
                        break;
                    k++;
                    i--;
                }
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);
                if (i < 0)
                    break;

                for (var j = 0; j < len; j++) {
                    var z = tmp[j];
                    var p;
                    if (z === 0)
                        continue;
                    else if (z > 0)
                        p = wnd[j][(z - 1) >> 1];
                    else if (z < 0)
                        p = wnd[j][(-z - 1) >> 1].neg();

                    if (p.type === 'affine')
                        acc = acc.mixedAdd(p);
                    else
                        acc = acc.add(p);
                }
            }
            // Zeroify references
            for (var i = 0; i < len; i++)
                wnd[i] = null;

            if (jacobianResult)
                return acc;
            else
                return acc.toP();
        };

        function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
        }

        BaseCurve.BasePoint = BasePoint;

        BasePoint.prototype.eq = function eq(/*other*/) {
            throw new Error('Not implemented');
        };

        BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
        };

        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils.toArray(bytes, enc);

            var len = this.p.byteLength();

            // uncompressed, hybrid-odd, hybrid-even
            if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                bytes.length - 1 === 2 * len) {
                if (bytes[0] === 0x06)
                    assert(bytes[bytes.length - 1] % 2 === 0);
                else if (bytes[0] === 0x07)
                    assert(bytes[bytes.length - 1] % 2 === 1);

                var res = this.point(bytes.slice(1, 1 + len),
                    bytes.slice(1 + len, 1 + 2 * len));

                return res;
            } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
                return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
            }
            throw new Error('Unknown point format');
        };

        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            return this.encode(enc, true);
        };

        BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);

            if (compact)
                return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

            return [0x04].concat(x, this.getY().toArray('be', len));
        };

        BasePoint.prototype.encode = function encode(enc, compact) {
            return utils.encode(this._encode(compact), enc);
        };

        BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed)
                return this;

            var precomputed = {
                doubles: null,
                naf: null,
                beta: null
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;

            return this;
        };

        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed)
                return false;

            var doubles = this.precomputed.doubles;
            if (!doubles)
                return false;

            return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
        };

        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles)
                return this.precomputed.doubles;

            var doubles = [this];
            var acc = this;
            for (var i = 0; i < power; i += step) {
                for (var j = 0; j < step; j++)
                    acc = acc.dbl();
                doubles.push(acc);
            }
            return {
                step: step,
                points: doubles
            };
        };

        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf)
                return this.precomputed.naf;

            var res = [this];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();
            for (var i = 1; i < max; i++)
                res[i] = res[i - 1].add(dbl);
            return {
                wnd: wnd,
                points: res
            };
        };

        BasePoint.prototype._getBeta = function _getBeta() {
            return null;
        };

        BasePoint.prototype.dblp = function dblp(k) {
            var r = this;
            for (var i = 0; i < k; i++)
                r = r.dbl();
            return r;
        };

    }, {"../utils": 84, "bn.js": 20}],
    72: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var assert = utils.assert;

        function EdwardsCurve(conf) {
            // NOTE: Important as we are creating point in Base.call()
            this.twisted = (conf.a | 0) !== 1;
            this.mOneA = this.twisted && (conf.a | 0) === -1;
            this.extended = this.mOneA;

            Base.call(this, 'edwards', conf);

            this.a = new BN(conf.a, 16).umod(this.red.m);
            this.a = this.a.toRed(this.red);
            this.c = new BN(conf.c, 16).toRed(this.red);
            this.c2 = this.c.redSqr();
            this.d = new BN(conf.d, 16).toRed(this.red);
            this.dd = this.d.redAdd(this.d);

            assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
            this.oneC = (conf.c | 0) === 1;
        }

        inherits(EdwardsCurve, Base);
        module.exports = EdwardsCurve;

        EdwardsCurve.prototype._mulA = function _mulA(num) {
            if (this.mOneA)
                return num.redNeg();
            else
                return this.a.redMul(num);
        };

        EdwardsCurve.prototype._mulC = function _mulC(num) {
            if (this.oneC)
                return num;
            else
                return this.c.redMul(num);
        };

// Just for compatibility with Short curve
        EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
            return this.point(x, y, z, t);
        };

        EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red)
                x = x.toRed(this.red);

            var x2 = x.redSqr();
            var rhs = this.c2.redSub(this.a.redMul(x2));
            var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

            var y2 = rhs.redMul(lhs.redInvm());
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd)
                y = y.redNeg();

            return this.point(x, y);
        };

        EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
            y = new BN(y, 16);
            if (!y.red)
                y = y.toRed(this.red);

            // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
            var y2 = y.redSqr();
            var lhs = y2.redSub(this.c2);
            var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
            var x2 = lhs.redMul(rhs.redInvm());

            if (x2.cmp(this.zero) === 0) {
                if (odd)
                    throw new Error('invalid point');
                else
                    return this.point(this.zero, y);
            }

            var x = x2.redSqrt();
            if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            if (x.fromRed().isOdd() !== odd)
                x = x.redNeg();

            return this.point(x, y);
        };

        EdwardsCurve.prototype.validate = function validate(point) {
            if (point.isInfinity())
                return true;

            // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
            point.normalize();

            var x2 = point.x.redSqr();
            var y2 = point.y.redSqr();
            var lhs = x2.redMul(this.a).redAdd(y2);
            var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

            return lhs.cmp(rhs) === 0;
        };

        function Point(curve, x, y, z, t) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && y === null && z === null) {
                this.x = this.curve.zero;
                this.y = this.curve.one;
                this.z = this.curve.one;
                this.t = this.curve.zero;
                this.zOne = true;
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                this.z = z ? new BN(z, 16) : this.curve.one;
                this.t = t && new BN(t, 16);
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
                if (this.t && !this.t.red)
                    this.t = this.t.toRed(this.curve.red);
                this.zOne = this.z === this.curve.one;

                // Use extended coordinates
                if (this.curve.extended && !this.t) {
                    this.t = this.x.redMul(this.y);
                    if (!this.zOne)
                        this.t = this.t.redMul(this.z.redInvm());
                }
            }
        }

        inherits(Point, Base.BasePoint);

        EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
        };

        EdwardsCurve.prototype.point = function point(x, y, z, t) {
            return new Point(this, x, y, z, t);
        };

        Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1], obj[2]);
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' y: ' + this.y.fromRed().toString(16, 2) +
                ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.x.cmpn(0) === 0 &&
                (this.y.cmp(this.z) === 0 ||
                    (this.zOne && this.y.cmp(this.curve.c) === 0));
        };

        Point.prototype._extDbl = function _extDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #doubling-dbl-2008-hwcd
            // 4M + 4S

            // A = X1^2
            var a = this.x.redSqr();
            // B = Y1^2
            var b = this.y.redSqr();
            // C = 2 * Z1^2
            var c = this.z.redSqr();
            c = c.redIAdd(c);
            // D = a * A
            var d = this.curve._mulA(a);
            // E = (X1 + Y1)^2 - A - B
            var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
            // G = D + B
            var g = d.redAdd(b);
            // F = G - C
            var f = g.redSub(c);
            // H = D - B
            var h = d.redSub(b);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projDbl = function _projDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #doubling-dbl-2008-bbjlp
            //     #doubling-dbl-2007-bl
            // and others
            // Generally 3M + 4S or 2M + 4S

            // B = (X1 + Y1)^2
            var b = this.x.redAdd(this.y).redSqr();
            // C = X1^2
            var c = this.x.redSqr();
            // D = Y1^2
            var d = this.y.redSqr();

            var nx;
            var ny;
            var nz;
            if (this.curve.twisted) {
                // E = a * C
                var e = this.curve._mulA(c);
                // F = E + D
                var f = e.redAdd(d);
                if (this.zOne) {
                    // X3 = (B - C - D) * (F - 2)
                    nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                    // Y3 = F * (E - D)
                    ny = f.redMul(e.redSub(d));
                    // Z3 = F^2 - 2 * F
                    nz = f.redSqr().redSub(f).redSub(f);
                } else {
                    // H = Z1^2
                    var h = this.z.redSqr();
                    // J = F - 2 * H
                    var j = f.redSub(h).redISub(h);
                    // X3 = (B-C-D)*J
                    nx = b.redSub(c).redISub(d).redMul(j);
                    // Y3 = F * (E - D)
                    ny = f.redMul(e.redSub(d));
                    // Z3 = F * J
                    nz = f.redMul(j);
                }
            } else {
                // E = C + D
                var e = c.redAdd(d);
                // H = (c * Z1)^2
                var h = this.curve._mulC(this.z).redSqr();
                // J = E - 2 * H
                var j = e.redSub(h).redSub(h);
                // X3 = c * (B - E) * J
                nx = this.curve._mulC(b.redISub(e)).redMul(j);
                // Y3 = c * E * (C - D)
                ny = this.curve._mulC(e).redMul(c.redISub(d));
                // Z3 = E * J
                nz = e.redMul(j);
            }
            return this.curve.point(nx, ny, nz);
        };

        Point.prototype.dbl = function dbl() {
            if (this.isInfinity())
                return this;

            // Double in extended coordinates
            if (this.curve.extended)
                return this._extDbl();
            else
                return this._projDbl();
        };

        Point.prototype._extAdd = function _extAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #addition-add-2008-hwcd-3
            // 8M

            // A = (Y1 - X1) * (Y2 - X2)
            var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
            // B = (Y1 + X1) * (Y2 + X2)
            var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
            // C = T1 * k * T2
            var c = this.t.redMul(this.curve.dd).redMul(p.t);
            // D = Z1 * 2 * Z2
            var d = this.z.redMul(p.z.redAdd(p.z));
            // E = B - A
            var e = b.redSub(a);
            // F = D - C
            var f = d.redSub(c);
            // G = D + C
            var g = d.redAdd(c);
            // H = B + A
            var h = b.redAdd(a);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projAdd = function _projAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #addition-add-2008-bbjlp
            //     #addition-add-2007-bl
            // 10M + 1S

            // A = Z1 * Z2
            var a = this.z.redMul(p.z);
            // B = A^2
            var b = a.redSqr();
            // C = X1 * X2
            var c = this.x.redMul(p.x);
            // D = Y1 * Y2
            var d = this.y.redMul(p.y);
            // E = d * C * D
            var e = this.curve.d.redMul(c).redMul(d);
            // F = B - E
            var f = b.redSub(e);
            // G = B + E
            var g = b.redAdd(e);
            // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
            var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
            var nx = a.redMul(f).redMul(tmp);
            var ny;
            var nz;
            if (this.curve.twisted) {
                // Y3 = A * G * (D - a * C)
                ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                // Z3 = F * G
                nz = f.redMul(g);
            } else {
                // Y3 = A * G * (D - C)
                ny = a.redMul(g).redMul(d.redSub(c));
                // Z3 = c * F * G
                nz = this.curve._mulC(f).redMul(g);
            }
            return this.curve.point(nx, ny, nz);
        };

        Point.prototype.add = function add(p) {
            if (this.isInfinity())
                return p;
            if (p.isInfinity())
                return this;

            if (this.curve.extended)
                return this._extAdd(p);
            else
                return this._projAdd(p);
        };

        Point.prototype.mul = function mul(k) {
            if (this._hasDoubles(k))
                return this.curve._fixedNafMul(this, k);
            else
                return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
        };

        Point.prototype.normalize = function normalize() {
            if (this.zOne)
                return this;

            // Normalize coordinates
            var zi = this.z.redInvm();
            this.x = this.x.redMul(zi);
            this.y = this.y.redMul(zi);
            if (this.t)
                this.t = this.t.redMul(zi);
            this.z = this.curve.one;
            this.zOne = true;
            return this;
        };

        Point.prototype.neg = function neg() {
            return this.curve.point(this.x.redNeg(),
                this.y,
                this.z,
                this.t && this.t.redNeg());
        };

        Point.prototype.getX = function getX() {
            this.normalize();
            return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
            this.normalize();
            return this.y.fromRed();
        };

        Point.prototype.eq = function eq(other) {
            return this === other ||
                this.getX().cmp(other.getX()) === 0 &&
                this.getY().cmp(other.getY()) === 0;
        };

        Point.prototype.eqXToP = function eqXToP(x) {
            var rx = x.toRed(this.curve.red).redMul(this.z);
            if (this.x.cmp(rx) === 0)
                return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(this.z);
            for (; ;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0)
                    return false;

                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0)
                    return true;
            }
        };

// Compatibility with BaseCurve
        Point.prototype.toP = Point.prototype.normalize;
        Point.prototype.mixedAdd = Point.prototype.add;

    }, {"../utils": 84, "./base": 71, "bn.js": 20, "inherits": 103}],
    73: [function (require, module, exports) {
        'use strict';

        var curve = exports;

        curve.base = require('./base');
        curve.short = require('./short');
        curve.mont = require('./mont');
        curve.edwards = require('./edwards');

    }, {"./base": 71, "./edwards": 72, "./mont": 74, "./short": 75}],
    74: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var utils = require('../utils');

        function MontCurve(conf) {
            Base.call(this, 'mont', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.i4 = new BN(4).toRed(this.red).redInvm();
            this.two = new BN(2).toRed(this.red);
            this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }

        inherits(MontCurve, Base);
        module.exports = MontCurve;

        MontCurve.prototype.validate = function validate(point) {
            var x = point.normalize().x;
            var x2 = x.redSqr();
            var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
            var y = rhs.redSqrt();

            return y.redSqr().cmp(rhs) === 0;
        };

        function Point(curve, x, z) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && z === null) {
                this.x = this.curve.one;
                this.z = this.curve.zero;
            } else {
                this.x = new BN(x, 16);
                this.z = new BN(z, 16);
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
            }
        }

        inherits(Point, Base.BasePoint);

        MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            return this.point(utils.toArray(bytes, enc), 1);
        };

        MontCurve.prototype.point = function point(x, z) {
            return new Point(this, x, z);
        };

        MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
        };

        Point.prototype.precompute = function precompute() {
            // No-op
        };

        Point.prototype._encode = function _encode() {
            return this.getX().toArray('be', this.curve.p.byteLength());
        };

        Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1] || curve.one);
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
        };

        Point.prototype.dbl = function dbl() {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
            // 2M + 2S + 4A

            // A = X1 + Z1
            var a = this.x.redAdd(this.z);
            // AA = A^2
            var aa = a.redSqr();
            // B = X1 - Z1
            var b = this.x.redSub(this.z);
            // BB = B^2
            var bb = b.redSqr();
            // C = AA - BB
            var c = aa.redSub(bb);
            // X3 = AA * BB
            var nx = aa.redMul(bb);
            // Z3 = C * (BB + A24 * C)
            var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
            return this.curve.point(nx, nz);
        };

        Point.prototype.add = function add() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.diffAdd = function diffAdd(p, diff) {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
            // 4M + 2S + 6A

            // A = X2 + Z2
            var a = this.x.redAdd(this.z);
            // B = X2 - Z2
            var b = this.x.redSub(this.z);
            // C = X3 + Z3
            var c = p.x.redAdd(p.z);
            // D = X3 - Z3
            var d = p.x.redSub(p.z);
            // DA = D * A
            var da = d.redMul(a);
            // CB = C * B
            var cb = c.redMul(b);
            // X5 = Z1 * (DA + CB)^2
            var nx = diff.z.redMul(da.redAdd(cb).redSqr());
            // Z5 = X1 * (DA - CB)^2
            var nz = diff.x.redMul(da.redISub(cb).redSqr());
            return this.curve.point(nx, nz);
        };

        Point.prototype.mul = function mul(k) {
            var t = k.clone();
            var a = this; // (N / 2) * Q + Q
            var b = this.curve.point(null, null); // (N / 2) * Q
            var c = this; // Q

            for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                bits.push(t.andln(1));

            for (var i = bits.length - 1; i >= 0; i--) {
                if (bits[i] === 0) {
                    // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                    a = a.diffAdd(b, c);
                    // N * Q = 2 * ((N / 2) * Q + Q))
                    b = b.dbl();
                } else {
                    // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                    b = a.diffAdd(b, c);
                    // N * Q + Q = 2 * ((N / 2) * Q + Q)
                    a = a.dbl();
                }
            }
            return b;
        };

        Point.prototype.mulAdd = function mulAdd() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.jumlAdd = function jumlAdd() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.eq = function eq(other) {
            return this.getX().cmp(other.getX()) === 0;
        };

        Point.prototype.normalize = function normalize() {
            this.x = this.x.redMul(this.z.redInvm());
            this.z = this.curve.one;
            return this;
        };

        Point.prototype.getX = function getX() {
            // Normalize coordinates
            this.normalize();

            return this.x.fromRed();
        };

    }, {"../utils": 84, "./base": 71, "bn.js": 20, "inherits": 103}],
    75: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var assert = utils.assert;

        function ShortCurve(conf) {
            Base.call(this, 'short', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.tinv = this.two.redInvm();

            this.zeroA = this.a.fromRed().cmpn(0) === 0;
            this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

            // If the curve is endomorphic, precalculate beta and lambda
            this.endo = this._getEndomorphism(conf);
            this._endoWnafT1 = new Array(4);
            this._endoWnafT2 = new Array(4);
        }

        inherits(ShortCurve, Base);
        module.exports = ShortCurve;

        ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
            // No efficient endomorphism
            if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                return;

            // Compute beta and lambda, that lambda * P = (beta * Px; Py)
            var beta;
            var lambda;
            if (conf.beta) {
                beta = new BN(conf.beta, 16).toRed(this.red);
            } else {
                var betas = this._getEndoRoots(this.p);
                // Choose the smallest beta
                beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                beta = beta.toRed(this.red);
            }
            if (conf.lambda) {
                lambda = new BN(conf.lambda, 16);
            } else {
                // Choose the lambda that is matching selected beta
                var lambdas = this._getEndoRoots(this.n);
                if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                    lambda = lambdas[0];
                } else {
                    lambda = lambdas[1];
                    assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                }
            }

            // Get basis vectors, used for balanced length-two representation
            var basis;
            if (conf.basis) {
                basis = conf.basis.map(function (vec) {
                    return {
                        a: new BN(vec.a, 16),
                        b: new BN(vec.b, 16)
                    };
                });
            } else {
                basis = this._getEndoBasis(lambda);
            }

            return {
                beta: beta,
                lambda: lambda,
                basis: basis
            };
        };

        ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            // Find roots of for x^2 + x + 1 in F
            // Root = (-1 +- Sqrt(-3)) / 2
            //
            var red = num === this.p ? this.red : BN.mont(num);
            var tinv = new BN(2).toRed(red).redInvm();
            var ntinv = tinv.redNeg();

            var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

            var l1 = ntinv.redAdd(s).fromRed();
            var l2 = ntinv.redSub(s).fromRed();
            return [l1, l2];
        };

        ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            // aprxSqrt >= sqrt(this.n)
            var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

            // 3.74
            // Run EGCD, until r(L + 1) < aprxSqrt
            var u = lambda;
            var v = this.n.clone();
            var x1 = new BN(1);
            var y1 = new BN(0);
            var x2 = new BN(0);
            var y2 = new BN(1);

            // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
            var a0;
            var b0;
            // First vector
            var a1;
            var b1;
            // Second vector
            var a2;
            var b2;

            var prevR;
            var i = 0;
            var r;
            var x;
            while (u.cmpn(0) !== 0) {
                var q = v.div(u);
                r = v.sub(q.mul(u));
                x = x2.sub(q.mul(x1));
                var y = y2.sub(q.mul(y1));

                if (!a1 && r.cmp(aprxSqrt) < 0) {
                    a0 = prevR.neg();
                    b0 = x1;
                    a1 = r.neg();
                    b1 = x;
                } else if (a1 && ++i === 2) {
                    break;
                }
                prevR = r;

                v = u;
                u = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
            }
            a2 = r.neg();
            b2 = x;

            var len1 = a1.sqr().add(b1.sqr());
            var len2 = a2.sqr().add(b2.sqr());
            if (len2.cmp(len1) >= 0) {
                a2 = a0;
                b2 = b0;
            }

            // Normalize signs
            if (a1.negative) {
                a1 = a1.neg();
                b1 = b1.neg();
            }
            if (a2.negative) {
                a2 = a2.neg();
                b2 = b2.neg();
            }

            return [
                {a: a1, b: b1},
                {a: a2, b: b2}
            ];
        };

        ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            var basis = this.endo.basis;
            var v1 = basis[0];
            var v2 = basis[1];

            var c1 = v2.b.mul(k).divRound(this.n);
            var c2 = v1.b.neg().mul(k).divRound(this.n);

            var p1 = c1.mul(v1.a);
            var p2 = c2.mul(v2.a);
            var q1 = c1.mul(v1.b);
            var q2 = c2.mul(v2.b);

            // Calculate answer
            var k1 = k.sub(p1).sub(p2);
            var k2 = q1.add(q2).neg();
            return {k1: k1, k2: k2};
        };

        ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red)
                x = x.toRed(this.red);

            var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            // XXX Is there any way to tell if the number is odd without converting it
            // to non-red form?
            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd)
                y = y.redNeg();

            return this.point(x, y);
        };

        ShortCurve.prototype.validate = function validate(point) {
            if (point.inf)
                return true;

            var x = point.x;
            var y = point.y;

            var ax = this.a.redMul(x);
            var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            return y.redSqr().redISub(rhs).cmpn(0) === 0;
        };

        ShortCurve.prototype._endoWnafMulAdd =
            function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                var npoints = this._endoWnafT1;
                var ncoeffs = this._endoWnafT2;
                for (var i = 0; i < points.length; i++) {
                    var split = this._endoSplit(coeffs[i]);
                    var p = points[i];
                    var beta = p._getBeta();

                    if (split.k1.negative) {
                        split.k1.ineg();
                        p = p.neg(true);
                    }
                    if (split.k2.negative) {
                        split.k2.ineg();
                        beta = beta.neg(true);
                    }

                    npoints[i * 2] = p;
                    npoints[i * 2 + 1] = beta;
                    ncoeffs[i * 2] = split.k1;
                    ncoeffs[i * 2 + 1] = split.k2;
                }
                var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

                // Clean-up references to points and coefficients
                for (var j = 0; j < i * 2; j++) {
                    npoints[j] = null;
                    ncoeffs[j] = null;
                }
                return res;
            };

        function Point(curve, x, y, isRed) {
            Base.BasePoint.call(this, curve, 'affine');
            if (x === null && y === null) {
                this.x = null;
                this.y = null;
                this.inf = true;
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                // Force redgomery representation when loading from JSON
                if (isRed) {
                    this.x.forceRed(this.curve.red);
                    this.y.forceRed(this.curve.red);
                }
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                this.inf = false;
            }
        }

        inherits(Point, Base.BasePoint);

        ShortCurve.prototype.point = function point(x, y, isRed) {
            return new Point(this, x, y, isRed);
        };

        ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
            return Point.fromJSON(this, obj, red);
        };

        Point.prototype._getBeta = function _getBeta() {
            if (!this.curve.endo)
                return;

            var pre = this.precomputed;
            if (pre && pre.beta)
                return pre.beta;

            var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (pre) {
                var curve = this.curve;
                var endoMul = function (p) {
                    return curve.point(p.x.redMul(curve.endo.beta), p.y);
                };
                pre.beta = beta;
                beta.precomputed = {
                    beta: null,
                    naf: pre.naf && {
                        wnd: pre.naf.wnd,
                        points: pre.naf.points.map(endoMul)
                    },
                    doubles: pre.doubles && {
                        step: pre.doubles.step,
                        points: pre.doubles.points.map(endoMul)
                    }
                };
            }
            return beta;
        };

        Point.prototype.toJSON = function toJSON() {
            if (!this.precomputed)
                return [this.x, this.y];

            return [this.x, this.y, this.precomputed && {
                doubles: this.precomputed.doubles && {
                    step: this.precomputed.doubles.step,
                    points: this.precomputed.doubles.points.slice(1)
                },
                naf: this.precomputed.naf && {
                    wnd: this.precomputed.naf.wnd,
                    points: this.precomputed.naf.points.slice(1)
                }
            }];
        };

        Point.fromJSON = function fromJSON(curve, obj, red) {
            if (typeof obj === 'string')
                obj = JSON.parse(obj);
            var res = curve.point(obj[0], obj[1], red);
            if (!obj[2])
                return res;

            function obj2point(obj) {
                return curve.point(obj[0], obj[1], red);
            }

            var pre = obj[2];
            res.precomputed = {
                beta: null,
                doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: [res].concat(pre.doubles.points.map(obj2point))
                },
                naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: [res].concat(pre.naf.points.map(obj2point))
                }
            };
            return res;
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' y: ' + this.y.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            return this.inf;
        };

        Point.prototype.add = function add(p) {
            // O + P = P
            if (this.inf)
                return p;

            // P + O = P
            if (p.inf)
                return this;

            // P + P = 2P
            if (this.eq(p))
                return this.dbl();

            // P + (-P) = O
            if (this.neg().eq(p))
                return this.curve.point(null, null);

            // P + Q = O
            if (this.x.cmp(p.x) === 0)
                return this.curve.point(null, null);

            var c = this.y.redSub(p.y);
            if (c.cmpn(0) !== 0)
                c = c.redMul(this.x.redSub(p.x).redInvm());
            var nx = c.redSqr().redISub(this.x).redISub(p.x);
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
        };

        Point.prototype.dbl = function dbl() {
            if (this.inf)
                return this;

            // 2P = O
            var ys1 = this.y.redAdd(this.y);
            if (ys1.cmpn(0) === 0)
                return this.curve.point(null, null);

            var a = this.curve.a;

            var x2 = this.x.redSqr();
            var dyinv = ys1.redInvm();
            var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

            var nx = c.redSqr().redISub(this.x.redAdd(this.x));
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
        };

        Point.prototype.getX = function getX() {
            return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
            return this.y.fromRed();
        };

        Point.prototype.mul = function mul(k) {
            k = new BN(k, 16);
            if (this.isInfinity())
                return this;
            else if (this._hasDoubles(k))
                return this.curve._fixedNafMul(this, k);
            else if (this.curve.endo)
                return this.curve._endoWnafMulAdd([this], [k]);
            else
                return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs);
            else
                return this.curve._wnafMulAdd(1, points, coeffs, 2);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs, true);
            else
                return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
        };

        Point.prototype.eq = function eq(p) {
            return this === p ||
                this.inf === p.inf &&
                (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
        };

        Point.prototype.neg = function neg(_precompute) {
            if (this.inf)
                return this;

            var res = this.curve.point(this.x, this.y.redNeg());
            if (_precompute && this.precomputed) {
                var pre = this.precomputed;
                var negate = function (p) {
                    return p.neg();
                };
                res.precomputed = {
                    naf: pre.naf && {
                        wnd: pre.naf.wnd,
                        points: pre.naf.points.map(negate)
                    },
                    doubles: pre.doubles && {
                        step: pre.doubles.step,
                        points: pre.doubles.points.map(negate)
                    }
                };
            }
            return res;
        };

        Point.prototype.toJ = function toJ() {
            if (this.inf)
                return this.curve.jpoint(null, null, null);

            var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            return res;
        };

        function JPoint(curve, x, y, z) {
            Base.BasePoint.call(this, curve, 'jacobian');
            if (x === null && y === null && z === null) {
                this.x = this.curve.one;
                this.y = this.curve.one;
                this.z = new BN(0);
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                this.z = new BN(z, 16);
            }
            if (!this.x.red)
                this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
                this.y = this.y.toRed(this.curve.red);
            if (!this.z.red)
                this.z = this.z.toRed(this.curve.red);

            this.zOne = this.z === this.curve.one;
        }

        inherits(JPoint, Base.BasePoint);

        ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            return new JPoint(this, x, y, z);
        };

        JPoint.prototype.toP = function toP() {
            if (this.isInfinity())
                return this.curve.point(null, null);

            var zinv = this.z.redInvm();
            var zinv2 = zinv.redSqr();
            var ax = this.x.redMul(zinv2);
            var ay = this.y.redMul(zinv2).redMul(zinv);

            return this.curve.point(ax, ay);
        };

        JPoint.prototype.neg = function neg() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        };

        JPoint.prototype.add = function add(p) {
            // O + P = P
            if (this.isInfinity())
                return p;

            // P + O = P
            if (p.isInfinity())
                return this;

            // 12M + 4S + 7A
            var pz2 = p.z.redSqr();
            var z2 = this.z.redSqr();
            var u1 = this.x.redMul(pz2);
            var u2 = p.x.redMul(z2);
            var s1 = this.y.redMul(pz2.redMul(p.z));
            var s2 = p.y.redMul(z2.redMul(this.z));

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                else
                    return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(p.z).redMul(h);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mixedAdd = function mixedAdd(p) {
            // O + P = P
            if (this.isInfinity())
                return p.toJ();

            // P + O = P
            if (p.isInfinity())
                return this;

            // 8M + 3S + 7A
            var z2 = this.z.redSqr();
            var u1 = this.x;
            var u2 = p.x.redMul(z2);
            var s1 = this.y;
            var s2 = p.y.redMul(z2).redMul(this.z);

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                else
                    return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(h);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.dblp = function dblp(pow) {
            if (pow === 0)
                return this;
            if (this.isInfinity())
                return this;
            if (!pow)
                return this.dbl();

            if (this.curve.zeroA || this.curve.threeA) {
                var r = this;
                for (var i = 0; i < pow; i++)
                    r = r.dbl();
                return r;
            }

            // 1M + 2S + 1A + N * (4S + 5M + 8A)
            // N = 1 => 6M + 6S + 9A
            var a = this.curve.a;
            var tinv = this.curve.tinv;

            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            // Reuse results
            var jyd = jy.redAdd(jy);
            for (var i = 0; i < pow; i++) {
                var jx2 = jx.redSqr();
                var jyd2 = jyd.redSqr();
                var jyd4 = jyd2.redSqr();
                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                var t1 = jx.redMul(jyd2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);
                var dny = c.redMul(t2);
                dny = dny.redIAdd(dny).redISub(jyd4);
                var nz = jyd.redMul(jz);
                if (i + 1 < pow)
                    jz4 = jz4.redMul(jyd4);

                jx = nx;
                jz = nz;
                jyd = dny;
            }

            return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
        };

        JPoint.prototype.dbl = function dbl() {
            if (this.isInfinity())
                return this;

            if (this.curve.zeroA)
                return this._zeroDbl();
            else if (this.curve.threeA)
                return this._threeDbl();
            else
                return this._dbl();
        };

        JPoint.prototype._zeroDbl = function _zeroDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 14A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a; a = 0
                var m = xx.redAdd(xx).redIAdd(xx);
                // T = M ^ 2 - 2*S
                var t = m.redSqr().redISub(s).redISub(s);

                // 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);

                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2*Y1
                nz = this.y.redAdd(this.y);
            } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-dbl-2009-l
                // 2M + 5S + 13A

                // A = X1^2
                var a = this.x.redSqr();
                // B = Y1^2
                var b = this.y.redSqr();
                // C = B^2
                var c = b.redSqr();
                // D = 2 * ((X1 + B)^2 - A - C)
                var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                d = d.redIAdd(d);
                // E = 3 * A
                var e = a.redAdd(a).redIAdd(a);
                // F = E^2
                var f = e.redSqr();

                // 8 * C
                var c8 = c.redIAdd(c);
                c8 = c8.redIAdd(c8);
                c8 = c8.redIAdd(c8);

                // X3 = F - 2 * D
                nx = f.redISub(d).redISub(d);
                // Y3 = E * (D - X3) - 8 * C
                ny = e.redMul(d.redISub(nx)).redISub(c8);
                // Z3 = 2 * Y1 * Z1
                nz = this.y.redMul(this.z);
                nz = nz.redIAdd(nz);
            }

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._threeDbl = function _threeDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 15A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a
                var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                // T = M^2 - 2 * S
                var t = m.redSqr().redISub(s).redISub(s);
                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2 * Y1
                nz = this.y.redAdd(this.y);
            } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                // 3M + 5S

                // delta = Z1^2
                var delta = this.z.redSqr();
                // gamma = Y1^2
                var gamma = this.y.redSqr();
                // beta = X1 * gamma
                var beta = this.x.redMul(gamma);
                // alpha = 3 * (X1 - delta) * (X1 + delta)
                var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                alpha = alpha.redAdd(alpha).redIAdd(alpha);
                // X3 = alpha^2 - 8 * beta
                var beta4 = beta.redIAdd(beta);
                beta4 = beta4.redIAdd(beta4);
                var beta8 = beta4.redAdd(beta4);
                nx = alpha.redSqr().redISub(beta8);
                // Z3 = (Y1 + Z1)^2 - gamma - delta
                nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                var ggamma8 = gamma.redSqr();
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
            }

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._dbl = function _dbl() {
            var a = this.curve.a;

            // 4M + 6S + 10A
            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            var jx2 = jx.redSqr();
            var jy2 = jy.redSqr();

            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var jxd4 = jx.redAdd(jx);
            jxd4 = jxd4.redIAdd(jxd4);
            var t1 = jxd4.redMul(jy2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);

            var jyd8 = jy2.redSqr();
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            var ny = c.redMul(t2).redISub(jyd8);
            var nz = jy.redAdd(jy).redMul(jz);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.trpl = function trpl() {
            if (!this.curve.zeroA)
                return this.dbl().add(this);

            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
            // 5M + 10S + ...

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // ZZ = Z1^2
            var zz = this.z.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // M = 3 * XX + a * ZZ2; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // MM = M^2
            var mm = m.redSqr();
            // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
            var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            e = e.redIAdd(e);
            e = e.redAdd(e).redIAdd(e);
            e = e.redISub(mm);
            // EE = E^2
            var ee = e.redSqr();
            // T = 16*YYYY
            var t = yyyy.redIAdd(yyyy);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            // U = (M + E)^2 - MM - EE - T
            var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
            // X3 = 4 * (X1 * EE - 4 * YY * U)
            var yyu4 = yy.redMul(u);
            yyu4 = yyu4.redIAdd(yyu4);
            yyu4 = yyu4.redIAdd(yyu4);
            var nx = this.x.redMul(ee).redISub(yyu4);
            nx = nx.redIAdd(nx);
            nx = nx.redIAdd(nx);
            // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
            var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            // Z3 = (Z1 + E)^2 - ZZ - EE
            var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mul = function mul(k, kbase) {
            k = new BN(k, kbase);

            return this.curve._wnafMul(this, k);
        };

        JPoint.prototype.eq = function eq(p) {
            if (p.type === 'affine')
                return this.eq(p.toJ());

            if (this === p)
                return true;

            // x1 * z2^2 == x2 * z1^2
            var z2 = this.z.redSqr();
            var pz2 = p.z.redSqr();
            if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                return false;

            // y1 * z2^3 == y2 * z1^3
            var z3 = z2.redMul(this.z);
            var pz3 = pz2.redMul(p.z);
            return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
        };

        JPoint.prototype.eqXToP = function eqXToP(x) {
            var zs = this.z.redSqr();
            var rx = x.toRed(this.curve.red).redMul(zs);
            if (this.x.cmp(rx) === 0)
                return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(zs);
            for (; ;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0)
                    return false;

                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0)
                    return true;
            }
        };

        JPoint.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC JPoint Infinity>';
            return '<EC JPoint x: ' + this.x.toString(16, 2) +
                ' y: ' + this.y.toString(16, 2) +
                ' z: ' + this.z.toString(16, 2) + '>';
        };

        JPoint.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
        };

    }, {"../utils": 84, "./base": 71, "bn.js": 20, "inherits": 103}],
    76: [function (require, module, exports) {
        'use strict';

        var curves = exports;

        var hash = require('hash.js');
        var curve = require('./curve');
        var utils = require('./utils');

        var assert = utils.assert;

        function PresetCurve(options) {
            if (options.type === 'short')
                this.curve = new curve.short(options);
            else if (options.type === 'edwards')
                this.curve = new curve.edwards(options);
            else
                this.curve = new curve.mont(options);
            this.g = this.curve.g;
            this.n = this.curve.n;
            this.hash = options.hash;

            assert(this.g.validate(), 'Invalid curve');
            assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
        }

        curves.PresetCurve = PresetCurve;

        function defineCurve(name, options) {
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                get: function () {
                    var curve = new PresetCurve(options);
                    Object.defineProperty(curves, name, {
                        configurable: true,
                        enumerable: true,
                        value: curve
                    });
                    return curve;
                }
            });
        }

        defineCurve('p192', {
            type: 'short',
            prime: 'p192',
            p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
            b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
            n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
            hash: hash.sha256,
            gRed: false,
            g: [
                '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
            ]
        });

        defineCurve('p224', {
            type: 'short',
            prime: 'p224',
            p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
            b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
            n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
            hash: hash.sha256,
            gRed: false,
            g: [
                'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
            ]
        });

        defineCurve('p256', {
            type: 'short',
            prime: null,
            p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
            a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
            b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
            n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
            hash: hash.sha256,
            gRed: false,
            g: [
                '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
            ]
        });

        defineCurve('p384', {
            type: 'short',
            prime: null,
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 ffffffff',
            a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 fffffffc',
            b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
            n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
            hash: hash.sha384,
            gRed: false,
            g: [
                'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                '5502f25d bf55296c 3a545e38 72760ab7',
                '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
            ]
        });

        defineCurve('p521', {
            type: 'short',
            prime: null,
            p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff',
            a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff fffffffc',
            b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
            n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
            hash: hash.sha512,
            gRed: false,
            g: [
                '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                '3fad0761 353c7086 a272c240 88be9476 9fd16650'
            ]
        });

        defineCurve('curve25519', {
            type: 'mont',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '76d06',
            b: '1',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: [
                '9'
            ]
        });

        defineCurve('ed25519', {
            type: 'edwards',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '-1',
            c: '1',
            // -121665 * (121666^(-1)) (mod P)
            d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: [
                '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                // 4/5
                '6666666666666666666666666666666666666666666666666666666666666658'
            ]
        });

        var pre;
        try {
            pre = require('./precomputed/secp256k1');
        } catch (e) {
            pre = undefined;
        }

        defineCurve('secp256k1', {
            type: 'short',
            prime: 'k256',
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
            a: '0',
            b: '7',
            n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
            h: '1',
            hash: hash.sha256,

            // Precomputed endomorphism
            beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
            lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
            basis: [
                {
                    a: '3086d221a7d46bcde86c90e49284eb15',
                    b: '-e4437ed6010e88286f547fa90abfe4c3'
                },
                {
                    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                    b: '3086d221a7d46bcde86c90e49284eb15'
                }
            ],

            gRed: false,
            g: [
                '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                pre
            ]
        });

    }, {"./curve": 73, "./precomputed/secp256k1": 83, "./utils": 84, "hash.js": 89}],
    77: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var HmacDRBG = require('hmac-drbg');
        var utils = require('../utils');
        var curves = require('../curves');
        var rand = require('brorand');
        var assert = utils.assert;

        var KeyPair = require('./key');
        var Signature = require('./signature');

        function EC(options) {
            if (!(this instanceof EC))
                return new EC(options);

            // Shortcut `elliptic.ec(curve-name)`
            if (typeof options === 'string') {
                assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

                options = curves[options];
            }

            // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
            if (options instanceof curves.PresetCurve)
                options = {curve: options};

            this.curve = options.curve.curve;
            this.n = this.curve.n;
            this.nh = this.n.ushrn(1);
            this.g = this.curve.g;

            // Point on curve
            this.g = options.curve.g;
            this.g.precompute(options.curve.n.bitLength() + 1);

            // Hash for function for DRBG
            this.hash = options.hash || options.curve.hash;
        }

        module.exports = EC;

        EC.prototype.keyPair = function keyPair(options) {
            return new KeyPair(this, options);
        };

        EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            return KeyPair.fromPrivate(this, priv, enc);
        };

        EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            return KeyPair.fromPublic(this, pub, enc);
        };

        EC.prototype.genKeyPair = function genKeyPair(options) {
            if (!options)
                options = {};

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
                hash: this.hash,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8',
                entropy: options.entropy || rand(this.hash.hmacStrength),
                entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                nonce: this.n.toArray()
            });

            var bytes = this.n.byteLength();
            var ns2 = this.n.sub(new BN(2));
            do {
                var priv = new BN(drbg.generate(bytes));
                if (priv.cmp(ns2) > 0)
                    continue;

                priv.iaddn(1);
                return this.keyFromPrivate(priv);
            } while (true);
        };

        EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
            var delta = msg.byteLength() * 8 - this.n.bitLength();
            if (delta > 0)
                msg = msg.ushrn(delta);
            if (!truncOnly && msg.cmp(this.n) >= 0)
                return msg.sub(this.n);
            else
                return msg;
        };

        EC.prototype.sign = function sign(msg, key, enc, options) {
            if (typeof enc === 'object') {
                options = enc;
                enc = null;
            }
            if (!options)
                options = {};

            key = this.keyFromPrivate(key, enc);
            msg = this._truncateToN(new BN(msg, 16));

            // Zero-extend key to provide enough entropy
            var bytes = this.n.byteLength();
            var bkey = key.getPrivate().toArray('be', bytes);

            // Zero-extend nonce to have the same byte size as N
            var nonce = msg.toArray('be', bytes);

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
                hash: this.hash,
                entropy: bkey,
                nonce: nonce,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8'
            });

            // Number of bytes to generate
            var ns1 = this.n.sub(new BN(1));

            for (var iter = 0; true; iter++) {
                var k = options.k ?
                    options.k(iter) :
                    new BN(drbg.generate(this.n.byteLength()));
                k = this._truncateToN(k, true);
                if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                    continue;

                var kp = this.g.mul(k);
                if (kp.isInfinity())
                    continue;

                var kpX = kp.getX();
                var r = kpX.umod(this.n);
                if (r.cmpn(0) === 0)
                    continue;

                var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                s = s.umod(this.n);
                if (s.cmpn(0) === 0)
                    continue;

                var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                    (kpX.cmp(r) !== 0 ? 2 : 0);

                // Use complement of `s`, if it is > `n / 2`
                if (options.canonical && s.cmp(this.nh) > 0) {
                    s = this.n.sub(s);
                    recoveryParam ^= 1;
                }

                return new Signature({r: r, s: s, recoveryParam: recoveryParam});
            }
        };

        EC.prototype.verify = function verify(msg, signature, key, enc) {
            msg = this._truncateToN(new BN(msg, 16));
            key = this.keyFromPublic(key, enc);
            signature = new Signature(signature, 'hex');

            // Perform primitive values validation
            var r = signature.r;
            var s = signature.s;
            if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                return false;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                return false;

            // Validate signature
            var sinv = s.invm(this.n);
            var u1 = sinv.mul(msg).umod(this.n);
            var u2 = sinv.mul(r).umod(this.n);

            if (!this.curve._maxwellTrick) {
                var p = this.g.mulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity())
                    return false;

                return p.getX().umod(this.n).cmp(r) === 0;
            }

            // NOTE: Greg Maxwell's trick, inspired by:
            // https://git.io/vad3K

            var p = this.g.jmulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity())
                return false;

            // Compare `p.x` of Jacobian point with `r`,
            // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
            // inverse of `p.z^2`
            return p.eqXToP(r);
        };

        EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
            assert((3 & j) === j, 'The recovery param is more than two bits');
            signature = new Signature(signature, enc);

            var n = this.n;
            var e = new BN(msg);
            var r = signature.r;
            var s = signature.s;

            // A set LSB signifies that the y-coordinate is odd
            var isYOdd = j & 1;
            var isSecondKey = j >> 1;
            if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                throw new Error('Unable to find sencond key candinate');

            // 1.1. Let x = r + jn.
            if (isSecondKey)
                r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
            else
                r = this.curve.pointFromX(r, isYOdd);

            var rInv = signature.r.invm(n);
            var s1 = n.sub(e).mul(rInv).umod(n);
            var s2 = s.mul(rInv).umod(n);

            // 1.6.1 Compute Q = r^-1 (sR -  eG)
            //               Q = r^-1 (sR + -eG)
            return this.g.mulAdd(s1, r, s2);
        };

        EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
            signature = new Signature(signature, enc);
            if (signature.recoveryParam !== null)
                return signature.recoveryParam;

            for (var i = 0; i < 4; i++) {
                var Qprime;
                try {
                    Qprime = this.recoverPubKey(e, signature, i);
                } catch (e) {
                    continue;
                }

                if (Qprime.eq(Q))
                    return i;
            }
            throw new Error('Unable to find valid recovery factor');
        };

    }, {"../curves": 76, "../utils": 84, "./key": 78, "./signature": 79, "bn.js": 20, "brorand": 21, "hmac-drbg": 101}],
    78: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var assert = utils.assert;

        function KeyPair(ec, options) {
            this.ec = ec;
            this.priv = null;
            this.pub = null;

            // KeyPair(ec, { priv: ..., pub: ... })
            if (options.priv)
                this._importPrivate(options.priv, options.privEnc);
            if (options.pub)
                this._importPublic(options.pub, options.pubEnc);
        }

        module.exports = KeyPair;

        KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            if (pub instanceof KeyPair)
                return pub;

            return new KeyPair(ec, {
                pub: pub,
                pubEnc: enc
            });
        };

        KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            if (priv instanceof KeyPair)
                return priv;

            return new KeyPair(ec, {
                priv: priv,
                privEnc: enc
            });
        };

        KeyPair.prototype.validate = function validate() {
            var pub = this.getPublic();

            if (pub.isInfinity())
                return {result: false, reason: 'Invalid public key'};
            if (!pub.validate())
                return {result: false, reason: 'Public key is not a point'};
            if (!pub.mul(this.ec.curve.n).isInfinity())
                return {result: false, reason: 'Public key * N != O'};

            return {result: true, reason: null};
        };

        KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            // compact is optional argument
            if (typeof compact === 'string') {
                enc = compact;
                compact = null;
            }

            if (!this.pub)
                this.pub = this.ec.g.mul(this.priv);

            if (!enc)
                return this.pub;

            return this.pub.encode(enc, compact);
        };

        KeyPair.prototype.getPrivate = function getPrivate(enc) {
            if (enc === 'hex')
                return this.priv.toString(16, 2);
            else
                return this.priv;
        };

        KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            this.priv = new BN(key, enc || 16);

            // Ensure that the priv won't be bigger than n, otherwise we may fail
            // in fixed multiplication method
            this.priv = this.priv.umod(this.ec.curve.n);
        };

        KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            if (key.x || key.y) {
                // Montgomery points only have an `x` coordinate.
                // Weierstrass/Edwards points on the other hand have both `x` and
                // `y` coordinates.
                if (this.ec.curve.type === 'mont') {
                    assert(key.x, 'Need x coordinate');
                } else if (this.ec.curve.type === 'short' ||
                    this.ec.curve.type === 'edwards') {
                    assert(key.x && key.y, 'Need both x and y coordinate');
                }
                this.pub = this.ec.curve.point(key.x, key.y);
                return;
            }
            this.pub = this.ec.curve.decodePoint(key, enc);
        };

// ECDH
        KeyPair.prototype.derive = function derive(pub) {
            return pub.mul(this.priv).getX();
        };

// ECDSA
        KeyPair.prototype.sign = function sign(msg, enc, options) {
            return this.ec.sign(msg, this, enc, options);
        };

        KeyPair.prototype.verify = function verify(msg, signature) {
            return this.ec.verify(msg, signature, this);
        };

        KeyPair.prototype.inspect = function inspect() {
            return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
                ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
        };

    }, {"../utils": 84, "bn.js": 20}],
    79: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');

        var utils = require('../utils');
        var assert = utils.assert;

        function Signature(options, enc) {
            if (options instanceof Signature)
                return options;

            if (this._importDER(options, enc))
                return;

            assert(options.r && options.s, 'Signature without r or s');
            this.r = new BN(options.r, 16);
            this.s = new BN(options.s, 16);
            if (options.recoveryParam === undefined)
                this.recoveryParam = null;
            else
                this.recoveryParam = options.recoveryParam;
        }

        module.exports = Signature;

        function Position() {
            this.place = 0;
        }

        function getLength(buf, p) {
            var initial = buf[p.place++];
            if (!(initial & 0x80)) {
                return initial;
            }
            var octetLen = initial & 0xf;
            var val = 0;
            for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                val <<= 8;
                val |= buf[off];
            }
            p.place = off;
            return val;
        }

        function rmPadding(buf) {
            var i = 0;
            var len = buf.length - 1;
            while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                i++;
            }
            if (i === 0) {
                return buf;
            }
            return buf.slice(i);
        }

        Signature.prototype._importDER = function _importDER(data, enc) {
            data = utils.toArray(data, enc);
            var p = new Position();
            if (data[p.place++] !== 0x30) {
                return false;
            }
            var len = getLength(data, p);
            if ((len + p.place) !== data.length) {
                return false;
            }
            if (data[p.place++] !== 0x02) {
                return false;
            }
            var rlen = getLength(data, p);
            var r = data.slice(p.place, rlen + p.place);
            p.place += rlen;
            if (data[p.place++] !== 0x02) {
                return false;
            }
            var slen = getLength(data, p);
            if (data.length !== slen + p.place) {
                return false;
            }
            var s = data.slice(p.place, slen + p.place);
            if (r[0] === 0 && (r[1] & 0x80)) {
                r = r.slice(1);
            }
            if (s[0] === 0 && (s[1] & 0x80)) {
                s = s.slice(1);
            }

            this.r = new BN(r);
            this.s = new BN(s);
            this.recoveryParam = null;

            return true;
        };

        function constructLength(arr, len) {
            if (len < 0x80) {
                arr.push(len);
                return;
            }
            var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
            arr.push(octets | 0x80);
            while (--octets) {
                arr.push((len >>> (octets << 3)) & 0xff);
            }
            arr.push(len);
        }

        Signature.prototype.toDER = function toDER(enc) {
            var r = this.r.toArray();
            var s = this.s.toArray();

            // Pad values
            if (r[0] & 0x80)
                r = [0].concat(r);
            // Pad values
            if (s[0] & 0x80)
                s = [0].concat(s);

            r = rmPadding(r);
            s = rmPadding(s);

            while (!s[0] && !(s[1] & 0x80)) {
                s = s.slice(1);
            }
            var arr = [0x02];
            constructLength(arr, r.length);
            arr = arr.concat(r);
            arr.push(0x02);
            constructLength(arr, s.length);
            var backHalf = arr.concat(s);
            var res = [0x30];
            constructLength(res, backHalf.length);
            res = res.concat(backHalf);
            return utils.encode(res, enc);
        };

    }, {"../utils": 84, "bn.js": 20}],
    80: [function (require, module, exports) {
        'use strict';

        var hash = require('hash.js');
        var curves = require('../curves');
        var utils = require('../utils');
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var KeyPair = require('./key');
        var Signature = require('./signature');

        function EDDSA(curve) {
            assert(curve === 'ed25519', 'only tested with ed25519 so far');

            if (!(this instanceof EDDSA))
                return new EDDSA(curve);

            var curve = curves[curve].curve;
            this.curve = curve;
            this.g = curve.g;
            this.g.precompute(curve.n.bitLength() + 1);

            this.pointClass = curve.point().constructor;
            this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
            this.hash = hash.sha512;
        }

        module.exports = EDDSA;

        /**
         * @param {Array|String} message - message bytes
         * @param {Array|String|KeyPair} secret - secret bytes or a keypair
         * @returns {Signature} - signature
         */
        EDDSA.prototype.sign = function sign(message, secret) {
            message = parseBytes(message);
            var key = this.keyFromSecret(secret);
            var r = this.hashInt(key.messagePrefix(), message);
            var R = this.g.mul(r);
            var Rencoded = this.encodePoint(R);
            var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                .mul(key.priv());
            var S = r.add(s_).umod(this.curve.n);
            return this.makeSignature({R: R, S: S, Rencoded: Rencoded});
        };

        /**
         * @param {Array} message - message bytes
         * @param {Array|String|Signature} sig - sig bytes
         * @param {Array|String|Point|KeyPair} pub - public key
         * @returns {Boolean} - true if public key matches sig of message
         */
        EDDSA.prototype.verify = function verify(message, sig, pub) {
            message = parseBytes(message);
            sig = this.makeSignature(sig);
            var key = this.keyFromPublic(pub);
            var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
            var SG = this.g.mul(sig.S());
            var RplusAh = sig.R().add(key.pub().mul(h));
            return RplusAh.eq(SG);
        };

        EDDSA.prototype.hashInt = function hashInt() {
            var hash = this.hash();
            for (var i = 0; i < arguments.length; i++)
                hash.update(arguments[i]);
            return utils.intFromLE(hash.digest()).umod(this.curve.n);
        };

        EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
            return KeyPair.fromPublic(this, pub);
        };

        EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
            return KeyPair.fromSecret(this, secret);
        };

        EDDSA.prototype.makeSignature = function makeSignature(sig) {
            if (sig instanceof Signature)
                return sig;
            return new Signature(this, sig);
        };

        /**
         * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
         *
         * EDDSA defines methods for encoding and decoding points and integers. These are
         * helper convenience methods, that pass along to utility functions implied
         * parameters.
         *
         */
        EDDSA.prototype.encodePoint = function encodePoint(point) {
            var enc = point.getY().toArray('le', this.encodingLength);
            enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
            return enc;
        };

        EDDSA.prototype.decodePoint = function decodePoint(bytes) {
            bytes = utils.parseBytes(bytes);

            var lastIx = bytes.length - 1;
            var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
            var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

            var y = utils.intFromLE(normed);
            return this.curve.pointFromY(y, xIsOdd);
        };

        EDDSA.prototype.encodeInt = function encodeInt(num) {
            return num.toArray('le', this.encodingLength);
        };

        EDDSA.prototype.decodeInt = function decodeInt(bytes) {
            return utils.intFromLE(bytes);
        };

        EDDSA.prototype.isPoint = function isPoint(val) {
            return val instanceof this.pointClass;
        };

    }, {"../curves": 76, "../utils": 84, "./key": 81, "./signature": 82, "hash.js": 89}],
    81: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var cachedProperty = utils.cachedProperty;

        /**
         * @param {EDDSA} eddsa - instance
         * @param {Object} params - public/private key parameters
         *
         * @param {Array<Byte>} [params.secret] - secret seed bytes
         * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
         * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
         *
         */
        function KeyPair(eddsa, params) {
            this.eddsa = eddsa;
            this._secret = parseBytes(params.secret);
            if (eddsa.isPoint(params.pub))
                this._pub = params.pub;
            else
                this._pubBytes = parseBytes(params.pub);
        }

        KeyPair.fromPublic = function fromPublic(eddsa, pub) {
            if (pub instanceof KeyPair)
                return pub;
            return new KeyPair(eddsa, {pub: pub});
        };

        KeyPair.fromSecret = function fromSecret(eddsa, secret) {
            if (secret instanceof KeyPair)
                return secret;
            return new KeyPair(eddsa, {secret: secret});
        };

        KeyPair.prototype.secret = function secret() {
            return this._secret;
        };

        cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
            return this.eddsa.encodePoint(this.pub());
        });

        cachedProperty(KeyPair, 'pub', function pub() {
            if (this._pubBytes)
                return this.eddsa.decodePoint(this._pubBytes);
            return this.eddsa.g.mul(this.priv());
        });

        cachedProperty(KeyPair, 'privBytes', function privBytes() {
            var eddsa = this.eddsa;
            var hash = this.hash();
            var lastIx = eddsa.encodingLength - 1;

            var a = hash.slice(0, eddsa.encodingLength);
            a[0] &= 248;
            a[lastIx] &= 127;
            a[lastIx] |= 64;

            return a;
        });

        cachedProperty(KeyPair, 'priv', function priv() {
            return this.eddsa.decodeInt(this.privBytes());
        });

        cachedProperty(KeyPair, 'hash', function hash() {
            return this.eddsa.hash().update(this.secret()).digest();
        });

        cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
            return this.hash().slice(this.eddsa.encodingLength);
        });

        KeyPair.prototype.sign = function sign(message) {
            assert(this._secret, 'KeyPair can only verify');
            return this.eddsa.sign(message, this);
        };

        KeyPair.prototype.verify = function verify(message, sig) {
            return this.eddsa.verify(message, sig, this);
        };

        KeyPair.prototype.getSecret = function getSecret(enc) {
            assert(this._secret, 'KeyPair is public only');
            return utils.encode(this.secret(), enc);
        };

        KeyPair.prototype.getPublic = function getPublic(enc) {
            return utils.encode(this.pubBytes(), enc);
        };

        module.exports = KeyPair;

    }, {"../utils": 84}],
    82: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var assert = utils.assert;
        var cachedProperty = utils.cachedProperty;
        var parseBytes = utils.parseBytes;

        /**
         * @param {EDDSA} eddsa - eddsa instance
         * @param {Array<Bytes>|Object} sig -
         * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
         * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
         * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
         * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
         */
        function Signature(eddsa, sig) {
            this.eddsa = eddsa;

            if (typeof sig !== 'object')
                sig = parseBytes(sig);

            if (Array.isArray(sig)) {
                sig = {
                    R: sig.slice(0, eddsa.encodingLength),
                    S: sig.slice(eddsa.encodingLength)
                };
            }

            assert(sig.R && sig.S, 'Signature without R or S');

            if (eddsa.isPoint(sig.R))
                this._R = sig.R;
            if (sig.S instanceof BN)
                this._S = sig.S;

            this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
            this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
        }

        cachedProperty(Signature, 'S', function S() {
            return this.eddsa.decodeInt(this.Sencoded());
        });

        cachedProperty(Signature, 'R', function R() {
            return this.eddsa.decodePoint(this.Rencoded());
        });

        cachedProperty(Signature, 'Rencoded', function Rencoded() {
            return this.eddsa.encodePoint(this.R());
        });

        cachedProperty(Signature, 'Sencoded', function Sencoded() {
            return this.eddsa.encodeInt(this.S());
        });

        Signature.prototype.toBytes = function toBytes() {
            return this.Rencoded().concat(this.Sencoded());
        };

        Signature.prototype.toHex = function toHex() {
            return utils.encode(this.toBytes(), 'hex').toUpperCase();
        };

        module.exports = Signature;

    }, {"../utils": 84, "bn.js": 20}],
    83: [function (require, module, exports) {
        module.exports = {
            doubles: {
                step: 4,
                points: [
                    [
                        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
                    ],
                    [
                        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
                    ],
                    [
                        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
                    ],
                    [
                        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
                    ],
                    [
                        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
                    ],
                    [
                        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
                    ],
                    [
                        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
                    ],
                    [
                        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
                    ],
                    [
                        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
                    ],
                    [
                        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
                    ],
                    [
                        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
                    ],
                    [
                        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
                    ],
                    [
                        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
                    ],
                    [
                        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
                    ],
                    [
                        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
                    ],
                    [
                        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
                    ],
                    [
                        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
                    ],
                    [
                        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
                    ],
                    [
                        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
                    ],
                    [
                        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
                    ],
                    [
                        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
                    ],
                    [
                        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
                    ],
                    [
                        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
                    ],
                    [
                        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
                    ],
                    [
                        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
                    ],
                    [
                        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
                    ],
                    [
                        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
                    ],
                    [
                        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
                    ],
                    [
                        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
                    ],
                    [
                        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
                    ],
                    [
                        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
                    ],
                    [
                        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
                    ],
                    [
                        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
                    ],
                    [
                        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
                    ],
                    [
                        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
                    ],
                    [
                        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
                    ],
                    [
                        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
                    ],
                    [
                        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
                    ],
                    [
                        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
                    ],
                    [
                        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
                    ],
                    [
                        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
                    ],
                    [
                        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
                    ],
                    [
                        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
                    ],
                    [
                        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
                    ],
                    [
                        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
                    ],
                    [
                        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
                    ],
                    [
                        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
                    ],
                    [
                        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
                    ],
                    [
                        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
                    ],
                    [
                        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
                    ],
                    [
                        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
                    ],
                    [
                        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
                    ],
                    [
                        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
                    ],
                    [
                        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
                    ],
                    [
                        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
                    ],
                    [
                        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
                    ],
                    [
                        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
                    ],
                    [
                        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
                    ],
                    [
                        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
                    ],
                    [
                        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
                    ],
                    [
                        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
                    ],
                    [
                        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
                    ],
                    [
                        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
                    ],
                    [
                        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
                    ],
                    [
                        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
                    ]
                ]
            },
            naf: {
                wnd: 7,
                points: [
                    [
                        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
                    ],
                    [
                        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
                    ],
                    [
                        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
                    ],
                    [
                        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
                    ],
                    [
                        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
                    ],
                    [
                        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
                    ],
                    [
                        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
                    ],
                    [
                        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
                    ],
                    [
                        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
                    ],
                    [
                        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
                    ],
                    [
                        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
                    ],
                    [
                        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
                    ],
                    [
                        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
                    ],
                    [
                        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
                    ],
                    [
                        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
                    ],
                    [
                        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
                    ],
                    [
                        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
                    ],
                    [
                        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
                    ],
                    [
                        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
                    ],
                    [
                        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
                    ],
                    [
                        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
                    ],
                    [
                        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
                    ],
                    [
                        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
                    ],
                    [
                        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
                    ],
                    [
                        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
                    ],
                    [
                        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
                    ],
                    [
                        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
                    ],
                    [
                        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
                    ],
                    [
                        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
                    ],
                    [
                        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
                    ],
                    [
                        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
                    ],
                    [
                        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
                    ],
                    [
                        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
                    ],
                    [
                        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
                    ],
                    [
                        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
                    ],
                    [
                        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
                    ],
                    [
                        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
                    ],
                    [
                        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
                    ],
                    [
                        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
                    ],
                    [
                        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
                    ],
                    [
                        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
                    ],
                    [
                        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
                    ],
                    [
                        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
                    ],
                    [
                        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
                    ],
                    [
                        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
                    ],
                    [
                        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
                    ],
                    [
                        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
                    ],
                    [
                        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
                    ],
                    [
                        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
                    ],
                    [
                        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
                    ],
                    [
                        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
                    ],
                    [
                        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
                    ],
                    [
                        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
                    ],
                    [
                        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
                    ],
                    [
                        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
                    ],
                    [
                        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
                    ],
                    [
                        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
                    ],
                    [
                        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
                    ],
                    [
                        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
                    ],
                    [
                        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
                    ],
                    [
                        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
                    ],
                    [
                        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
                    ],
                    [
                        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
                    ],
                    [
                        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
                    ],
                    [
                        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
                    ],
                    [
                        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
                    ],
                    [
                        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
                    ],
                    [
                        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
                    ],
                    [
                        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
                    ],
                    [
                        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
                    ],
                    [
                        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
                    ],
                    [
                        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
                    ],
                    [
                        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
                    ],
                    [
                        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
                    ],
                    [
                        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
                    ],
                    [
                        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
                    ],
                    [
                        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
                    ],
                    [
                        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
                    ],
                    [
                        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
                    ],
                    [
                        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
                    ],
                    [
                        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
                    ],
                    [
                        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
                    ],
                    [
                        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
                    ],
                    [
                        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
                    ],
                    [
                        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
                    ],
                    [
                        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
                    ],
                    [
                        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
                    ],
                    [
                        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
                    ],
                    [
                        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
                    ],
                    [
                        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
                    ],
                    [
                        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
                    ],
                    [
                        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
                    ],
                    [
                        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
                    ],
                    [
                        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
                    ],
                    [
                        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
                    ],
                    [
                        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
                    ],
                    [
                        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
                    ],
                    [
                        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
                    ],
                    [
                        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
                    ],
                    [
                        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
                    ],
                    [
                        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
                    ],
                    [
                        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
                    ],
                    [
                        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
                    ],
                    [
                        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
                    ],
                    [
                        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
                    ],
                    [
                        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
                    ],
                    [
                        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
                    ],
                    [
                        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
                    ],
                    [
                        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
                    ],
                    [
                        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
                    ],
                    [
                        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
                    ],
                    [
                        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
                    ],
                    [
                        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
                    ],
                    [
                        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
                    ],
                    [
                        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
                    ],
                    [
                        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
                    ],
                    [
                        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
                    ],
                    [
                        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
                    ],
                    [
                        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
                    ],
                    [
                        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
                    ],
                    [
                        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
                    ],
                    [
                        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
                    ],
                    [
                        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
                    ],
                    [
                        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
                    ],
                    [
                        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
                    ],
                    [
                        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
                    ],
                    [
                        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
                    ]
                ]
            }
        };

    }, {}],
    84: [function (require, module, exports) {
        'use strict';

        var utils = exports;
        var BN = require('bn.js');
        var minAssert = require('minimalistic-assert');
        var minUtils = require('minimalistic-crypto-utils');

        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;

// Represent num in a w-NAF form
        function getNAF(num, w) {
            var naf = [];
            var ws = 1 << (w + 1);
            var k = num.clone();
            while (k.cmpn(1) >= 0) {
                var z;
                if (k.isOdd()) {
                    var mod = k.andln(ws - 1);
                    if (mod > (ws >> 1) - 1)
                        z = (ws >> 1) - mod;
                    else
                        z = mod;
                    k.isubn(z);
                } else {
                    z = 0;
                }
                naf.push(z);

                // Optimization, shift by word if possible
                var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
                for (var i = 1; i < shift; i++)
                    naf.push(0);
                k.iushrn(shift);
            }

            return naf;
        }

        utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
            var jsf = [
                [],
                []
            ];

            k1 = k1.clone();
            k2 = k2.clone();
            var d1 = 0;
            var d2 = 0;
            while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

                // First phase
                var m14 = (k1.andln(3) + d1) & 3;
                var m24 = (k2.andln(3) + d2) & 3;
                if (m14 === 3)
                    m14 = -1;
                if (m24 === 3)
                    m24 = -1;
                var u1;
                if ((m14 & 1) === 0) {
                    u1 = 0;
                } else {
                    var m8 = (k1.andln(7) + d1) & 7;
                    if ((m8 === 3 || m8 === 5) && m24 === 2)
                        u1 = -m14;
                    else
                        u1 = m14;
                }
                jsf[0].push(u1);

                var u2;
                if ((m24 & 1) === 0) {
                    u2 = 0;
                } else {
                    var m8 = (k2.andln(7) + d2) & 7;
                    if ((m8 === 3 || m8 === 5) && m14 === 2)
                        u2 = -m24;
                    else
                        u2 = m24;
                }
                jsf[1].push(u2);

                // Second phase
                if (2 * d1 === u1 + 1)
                    d1 = 1 - d1;
                if (2 * d2 === u2 + 1)
                    d2 = 1 - d2;
                k1.iushrn(1);
                k2.iushrn(1);
            }

            return jsf;
        }

        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
            var key = '_' + name;
            obj.prototype[name] = function cachedProperty() {
                return this[key] !== undefined ? this[key] :
                    this[key] = computer.call(this);
            };
        }

        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
            return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                bytes;
        }

        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
            return new BN(bytes, 'hex', 'le');
        }

        utils.intFromLE = intFromLE;


    }, {"bn.js": 20, "minimalistic-assert": 108, "minimalistic-crypto-utils": 109}],
    85: [function (require, module, exports) {
        module.exports = {
            "_from": "elliptic@^6.0.0",
            "_id": "elliptic@6.5.1",
            "_inBundle": false,
            "_integrity": "sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==",
            "_location": "/browserify/elliptic",
            "_phantomChildren": {},
            "_requested": {
                "type": "range",
                "registry": true,
                "raw": "elliptic@^6.0.0",
                "name": "elliptic",
                "escapedName": "elliptic",
                "rawSpec": "^6.0.0",
                "saveSpec": null,
                "fetchSpec": "^6.0.0"
            },
            "_requiredBy": [
                "/browserify/browserify-sign",
                "/browserify/create-ecdh"
            ],
            "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz",
            "_shasum": "c380f5f909bf1b9b4428d028cd18d3b0efd6b52b",
            "_spec": "elliptic@^6.0.0",
            "_where": "/home/deso/.nvm/versions/node/v8.15.1/lib/node_modules/browserify/node_modules/browserify-sign",
            "author": {
                "name": "Fedor Indutny",
                "email": "fedor@indutny.com"
            },
            "bugs": {
                "url": "https://github.com/indutny/elliptic/issues"
            },
            "bundleDependencies": false,
            "dependencies": {
                "bn.js": "^4.4.0",
                "brorand": "^1.0.1",
                "hash.js": "^1.0.0",
                "hmac-drbg": "^1.0.0",
                "inherits": "^2.0.1",
                "minimalistic-assert": "^1.0.0",
                "minimalistic-crypto-utils": "^1.0.0"
            },
            "deprecated": false,
            "description": "EC cryptography",
            "devDependencies": {
                "brfs": "^1.4.3",
                "coveralls": "^3.0.4",
                "grunt": "^1.0.4",
                "grunt-browserify": "^5.0.0",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-connect": "^1.0.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^1.0.1",
                "grunt-mocha-istanbul": "^3.0.1",
                "grunt-saucelabs": "^9.0.1",
                "istanbul": "^0.4.2",
                "jscs": "^3.0.7",
                "jshint": "^2.6.0",
                "mocha": "^6.1.4"
            },
            "files": [
                "lib"
            ],
            "homepage": "https://github.com/indutny/elliptic",
            "keywords": [
                "EC",
                "Elliptic",
                "curve",
                "Cryptography"
            ],
            "license": "MIT",
            "main": "lib/elliptic.js",
            "name": "elliptic",
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/indutny/elliptic.git"
            },
            "scripts": {
                "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "lint": "npm run jscs && npm run jshint",
                "test": "npm run lint && npm run unit",
                "unit": "istanbul test _mocha --reporter=spec test/index.js",
                "version": "grunt dist && git add dist/"
            },
            "version": "6.5.1"
        }

    }, {}],
    86: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        var objectCreate = Object.create || objectCreatePolyfill
        var objectKeys = Object.keys || objectKeysPolyfill
        var bind = Function.prototype.bind || functionBindPolyfill

        function EventEmitter() {
            if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
                this._events = objectCreate(null);
                this._eventsCount = 0;
            }

            this._maxListeners = this._maxListeners || undefined;
        }

        module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
        var defaultMaxListeners = 10;

        var hasDefineProperty;
        try {
            var o = {};
            if (Object.defineProperty) Object.defineProperty(o, 'x', {value: 0});
            hasDefineProperty = o.x === 0;
        } catch (err) {
            hasDefineProperty = false
        }
        if (hasDefineProperty) {
            Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                enumerable: true,
                get: function () {
                    return defaultMaxListeners;
                },
                set: function (arg) {
                    // check whether the input is a positive number (whose value is zero or
                    // greater and not a NaN).
                    if (typeof arg !== 'number' || arg < 0 || arg !== arg)
                        throw new TypeError('"defaultMaxListeners" must be a positive number');
                    defaultMaxListeners = arg;
                }
            });
        } else {
            EventEmitter.defaultMaxListeners = defaultMaxListeners;
        }

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
            if (typeof n !== 'number' || n < 0 || isNaN(n))
                throw new TypeError('"n" argument must be a positive number');
            this._maxListeners = n;
            return this;
        };

        function $getMaxListeners(that) {
            if (that._maxListeners === undefined)
                return EventEmitter.defaultMaxListeners;
            return that._maxListeners;
        }

        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
            return $getMaxListeners(this);
        };

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
        function emitNone(handler, isFn, self) {
            if (isFn)
                handler.call(self);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self);
            }
        }

        function emitOne(handler, isFn, self, arg1) {
            if (isFn)
                handler.call(self, arg1);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1);
            }
        }

        function emitTwo(handler, isFn, self, arg1, arg2) {
            if (isFn)
                handler.call(self, arg1, arg2);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1, arg2);
            }
        }

        function emitThree(handler, isFn, self, arg1, arg2, arg3) {
            if (isFn)
                handler.call(self, arg1, arg2, arg3);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1, arg2, arg3);
            }
        }

        function emitMany(handler, isFn, self, args) {
            if (isFn)
                handler.apply(self, args);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].apply(self, args);
            }
        }

        EventEmitter.prototype.emit = function emit(type) {
            var er, handler, len, args, i, events;
            var doError = (type === 'error');

            events = this._events;
            if (events)
                doError = (doError && events.error == null);
            else if (!doError)
                return false;

            // If there is no 'error' event listener then throw.
            if (doError) {
                if (arguments.length > 1)
                    er = arguments[1];
                if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                } else {
                    // At least give some kind of context to the user
                    var err = new Error('Unhandled "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                }
                return false;
            }

            handler = events[type];

            if (!handler)
                return false;

            var isFn = typeof handler === 'function';
            len = arguments.length;
            switch (len) {
                // fast cases
                case 1:
                    emitNone(handler, isFn, this);
                    break;
                case 2:
                    emitOne(handler, isFn, this, arguments[1]);
                    break;
                case 3:
                    emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                    break;
                case 4:
                    emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                    break;
                // slower
                default:
                    args = new Array(len - 1);
                    for (i = 1; i < len; i++)
                        args[i - 1] = arguments[i];
                    emitMany(handler, isFn, this, args);
            }

            return true;
        };

        function _addListener(target, type, listener, prepend) {
            var m;
            var events;
            var existing;

            if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');

            events = target._events;
            if (!events) {
                events = target._events = objectCreate(null);
                target._eventsCount = 0;
            } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                    target.emit('newListener', type,
                        listener.listener ? listener.listener : listener);

                    // Re-assign `events` because a newListener handler could have caused the
                    // this._events to be assigned to a new object
                    events = target._events;
                }
                existing = events[type];
            }

            if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
            } else {
                if (typeof existing === 'function') {
                    // Adding the second element, need to change to array.
                    existing = events[type] =
                        prepend ? [listener, existing] : [existing, listener];
                } else {
                    // If we've already got an array, just append.
                    if (prepend) {
                        existing.unshift(listener);
                    } else {
                        existing.push(listener);
                    }
                }

                // Check for listener leak
                if (!existing.warned) {
                    m = $getMaxListeners(target);
                    if (m && m > 0 && existing.length > m) {
                        existing.warned = true;
                        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' "' + String(type) + '" listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit.');
                        w.name = 'MaxListenersExceededWarning';
                        w.emitter = target;
                        w.type = type;
                        w.count = existing.length;
                        if (typeof console === 'object' && console.warn) {
                            console.warn('%s: %s', w.name, w.message);
                        }
                    }
                }
            }

            return target;
        }

        EventEmitter.prototype.addListener = function addListener(type, listener) {
            return _addListener(this, type, listener, false);
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.prependListener =
            function prependListener(type, listener) {
                return _addListener(this, type, listener, true);
            };

        function onceWrapper() {
            if (!this.fired) {
                this.target.removeListener(this.type, this.wrapFn);
                this.fired = true;
                switch (arguments.length) {
                    case 0:
                        return this.listener.call(this.target);
                    case 1:
                        return this.listener.call(this.target, arguments[0]);
                    case 2:
                        return this.listener.call(this.target, arguments[0], arguments[1]);
                    case 3:
                        return this.listener.call(this.target, arguments[0], arguments[1],
                            arguments[2]);
                    default:
                        var args = new Array(arguments.length);
                        for (var i = 0; i < args.length; ++i)
                            args[i] = arguments[i];
                        this.listener.apply(this.target, args);
                }
            }
        }

        function _onceWrap(target, type, listener) {
            var state = {fired: false, wrapFn: undefined, target: target, type: type, listener: listener};
            var wrapped = bind.call(onceWrapper, state);
            wrapped.listener = listener;
            state.wrapFn = wrapped;
            return wrapped;
        }

        EventEmitter.prototype.once = function once(type, listener) {
            if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');
            this.on(type, _onceWrap(this, type, listener));
            return this;
        };

        EventEmitter.prototype.prependOnceListener =
            function prependOnceListener(type, listener) {
                if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
            };

// Emits a 'removeListener' event if and only if the listener was removed.
        EventEmitter.prototype.removeListener =
            function removeListener(type, listener) {
                var list, events, position, i, originalListener;

                if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');

                events = this._events;
                if (!events)
                    return this;

                list = events[type];
                if (!list)
                    return this;

                if (list === listener || list.listener === listener) {
                    if (--this._eventsCount === 0)
                        this._events = objectCreate(null);
                    else {
                        delete events[type];
                        if (events.removeListener)
                            this.emit('removeListener', type, list.listener || listener);
                    }
                } else if (typeof list !== 'function') {
                    position = -1;

                    for (i = list.length - 1; i >= 0; i--) {
                        if (list[i] === listener || list[i].listener === listener) {
                            originalListener = list[i].listener;
                            position = i;
                            break;
                        }
                    }

                    if (position < 0)
                        return this;

                    if (position === 0)
                        list.shift();
                    else
                        spliceOne(list, position);

                    if (list.length === 1)
                        events[type] = list[0];

                    if (events.removeListener)
                        this.emit('removeListener', type, originalListener || listener);
                }

                return this;
            };

        EventEmitter.prototype.removeAllListeners =
            function removeAllListeners(type) {
                var listeners, events, i;

                events = this._events;
                if (!events)
                    return this;

                // not listening for removeListener, no need to emit
                if (!events.removeListener) {
                    if (arguments.length === 0) {
                        this._events = objectCreate(null);
                        this._eventsCount = 0;
                    } else if (events[type]) {
                        if (--this._eventsCount === 0)
                            this._events = objectCreate(null);
                        else
                            delete events[type];
                    }
                    return this;
                }

                // emit removeListener for all listeners on all events
                if (arguments.length === 0) {
                    var keys = objectKeys(events);
                    var key;
                    for (i = 0; i < keys.length; ++i) {
                        key = keys[i];
                        if (key === 'removeListener') continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = objectCreate(null);
                    this._eventsCount = 0;
                    return this;
                }

                listeners = events[type];

                if (typeof listeners === 'function') {
                    this.removeListener(type, listeners);
                } else if (listeners) {
                    // LIFO order
                    for (i = listeners.length - 1; i >= 0; i--) {
                        this.removeListener(type, listeners[i]);
                    }
                }

                return this;
            };

        function _listeners(target, type, unwrap) {
            var events = target._events;

            if (!events)
                return [];

            var evlistener = events[type];
            if (!evlistener)
                return [];

            if (typeof evlistener === 'function')
                return unwrap ? [evlistener.listener || evlistener] : [evlistener];

            return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }

        EventEmitter.prototype.listeners = function listeners(type) {
            return _listeners(this, type, true);
        };

        EventEmitter.prototype.rawListeners = function rawListeners(type) {
            return _listeners(this, type, false);
        };

        EventEmitter.listenerCount = function (emitter, type) {
            if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
            } else {
                return listenerCount.call(emitter, type);
            }
        };

        EventEmitter.prototype.listenerCount = listenerCount;

        function listenerCount(type) {
            var events = this._events;

            if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                    return 1;
                } else if (evlistener) {
                    return evlistener.length;
                }
            }

            return 0;
        }

        EventEmitter.prototype.eventNames = function eventNames() {
            return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
        };

// About 1.5x faster than the two-arg version of Array#splice().
        function spliceOne(list, index) {
            for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
                list[i] = list[k];
            list.pop();
        }

        function arrayClone(arr, n) {
            var copy = new Array(n);
            for (var i = 0; i < n; ++i)
                copy[i] = arr[i];
            return copy;
        }

        function unwrapListeners(arr) {
            var ret = new Array(arr.length);
            for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
            }
            return ret;
        }

        function objectCreatePolyfill(proto) {
            var F = function () {
            };
            F.prototype = proto;
            return new F;
        }

        function objectKeysPolyfill(obj) {
            var keys = [];
            for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
                keys.push(k);
            }
            return k;
        }

        function functionBindPolyfill(context) {
            var fn = this;
            return function () {
                return fn.apply(context, arguments);
            };
        }

    }, {}],
    87: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer
        var MD5 = require('md5.js')

        /* eslint-disable camelcase */
        function EVP_BytesToKey(password, salt, keyBits, ivLen) {
            if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
            if (salt) {
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
                if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
            }

            var keyLen = keyBits / 8
            var key = Buffer.alloc(keyLen)
            var iv = Buffer.alloc(ivLen || 0)
            var tmp = Buffer.alloc(0)

            while (keyLen > 0 || ivLen > 0) {
                var hash = new MD5()
                hash.update(tmp)
                hash.update(password)
                if (salt) hash.update(salt)
                tmp = hash.digest()

                var used = 0

                if (keyLen > 0) {
                    var keyStart = key.length - keyLen
                    used = Math.min(keyLen, tmp.length)
                    tmp.copy(key, keyStart, 0, used)
                    keyLen -= used
                }

                if (used < tmp.length && ivLen > 0) {
                    var ivStart = iv.length - ivLen
                    var length = Math.min(ivLen, tmp.length - used)
                    tmp.copy(iv, ivStart, used, used + length)
                    ivLen -= length
                }
            }

            tmp.fill(0)
            return {key: key, iv: iv}
        }

        module.exports = EVP_BytesToKey

    }, {"md5.js": 106, "safe-buffer": 147}],
    88: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var inherits = require('inherits')

        function throwIfNotStringOrBuffer(val, prefix) {
            if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                throw new TypeError(prefix + ' must be a string or a buffer')
            }
        }

        function HashBase(blockSize) {
            Transform.call(this)

            this._block = Buffer.allocUnsafe(blockSize)
            this._blockSize = blockSize
            this._blockOffset = 0
            this._length = [0, 0, 0, 0]

            this._finalized = false
        }

        inherits(HashBase, Transform)

        HashBase.prototype._transform = function (chunk, encoding, callback) {
            var error = null
            try {
                this.update(chunk, encoding)
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype._flush = function (callback) {
            var error = null
            try {
                this.push(this.digest())
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype.update = function (data, encoding) {
            throwIfNotStringOrBuffer(data, 'Data')
            if (this._finalized) throw new Error('Digest already called')
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

            // consume data
            var block = this._block
            var offset = 0
            while (this._blockOffset + data.length - offset >= this._blockSize) {
                for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                this._update()
                this._blockOffset = 0
            }
            while (offset < data.length) block[this._blockOffset++] = data[offset++]

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                this._length[j] += carry
                carry = (this._length[j] / 0x0100000000) | 0
                if (carry > 0) this._length[j] -= 0x0100000000 * carry
            }

            return this
        }

        HashBase.prototype._update = function () {
            throw new Error('_update is not implemented')
        }

        HashBase.prototype.digest = function (encoding) {
            if (this._finalized) throw new Error('Digest already called')
            this._finalized = true

            var digest = this._digest()
            if (encoding !== undefined) digest = digest.toString(encoding)

            // reset state
            this._block.fill(0)
            this._blockOffset = 0
            for (var i = 0; i < 4; ++i) this._length[i] = 0

            return digest
        }

        HashBase.prototype._digest = function () {
            throw new Error('_digest is not implemented')
        }

        module.exports = HashBase

    }, {"inherits": 103, "safe-buffer": 147, "stream": 156}],
    89: [function (require, module, exports) {
        var hash = exports;

        hash.utils = require('./hash/utils');
        hash.common = require('./hash/common');
        hash.sha = require('./hash/sha');
        hash.ripemd = require('./hash/ripemd');
        hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;

    }, {"./hash/common": 90, "./hash/hmac": 91, "./hash/ripemd": 92, "./hash/sha": 93, "./hash/utils": 100}],
    90: [function (require, module, exports) {
        'use strict';

        var utils = require('./utils');
        var assert = require('minimalistic-assert');

        function BlockHash() {
            this.pending = null;
            this.pendingTotal = 0;
            this.blockSize = this.constructor.blockSize;
            this.outSize = this.constructor.outSize;
            this.hmacStrength = this.constructor.hmacStrength;
            this.padLength = this.constructor.padLength / 8;
            this.endian = 'big';

            this._delta8 = this.blockSize / 8;
            this._delta32 = this.blockSize / 32;
        }

        exports.BlockHash = BlockHash;

        BlockHash.prototype.update = function update(msg, enc) {
            // Convert message to array, pad it, and join into 32bit blocks
            msg = utils.toArray(msg, enc);
            if (!this.pending)
                this.pending = msg;
            else
                this.pending = this.pending.concat(msg);
            this.pendingTotal += msg.length;

            // Enough data, try updating
            if (this.pending.length >= this._delta8) {
                msg = this.pending;

                // Process pending data in blocks
                var r = msg.length % this._delta8;
                this.pending = msg.slice(msg.length - r, msg.length);
                if (this.pending.length === 0)
                    this.pending = null;

                msg = utils.join32(msg, 0, msg.length - r, this.endian);
                for (var i = 0; i < msg.length; i += this._delta32)
                    this._update(msg, i, i + this._delta32);
            }

            return this;
        };

        BlockHash.prototype.digest = function digest(enc) {
            this.update(this._pad());
            assert(this.pending === null);

            return this._digest(enc);
        };

        BlockHash.prototype._pad = function pad() {
            var len = this.pendingTotal;
            var bytes = this._delta8;
            var k = bytes - ((len + this.padLength) % bytes);
            var res = new Array(k + this.padLength);
            res[0] = 0x80;
            for (var i = 1; i < k; i++)
                res[i] = 0;

            // Append length
            len <<= 3;
            if (this.endian === 'big') {
                for (var t = 8; t < this.padLength; t++)
                    res[i++] = 0;

                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = len & 0xff;
            } else {
                res[i++] = len & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;

                for (t = 8; t < this.padLength; t++)
                    res[i++] = 0;
            }

            return res;
        };

    }, {"./utils": 100, "minimalistic-assert": 108}],
    91: [function (require, module, exports) {
        'use strict';

        var utils = require('./utils');
        var assert = require('minimalistic-assert');

        function Hmac(hash, key, enc) {
            if (!(this instanceof Hmac))
                return new Hmac(hash, key, enc);
            this.Hash = hash;
            this.blockSize = hash.blockSize / 8;
            this.outSize = hash.outSize / 8;
            this.inner = null;
            this.outer = null;

            this._init(utils.toArray(key, enc));
        }

        module.exports = Hmac;

        Hmac.prototype._init = function init(key) {
            // Shorten key, if needed
            if (key.length > this.blockSize)
                key = new this.Hash().update(key).digest();
            assert(key.length <= this.blockSize);

            // Add padding to key
            for (var i = key.length; i < this.blockSize; i++)
                key.push(0);

            for (i = 0; i < key.length; i++)
                key[i] ^= 0x36;
            this.inner = new this.Hash().update(key);

            // 0x36 ^ 0x5c = 0x6a
            for (i = 0; i < key.length; i++)
                key[i] ^= 0x6a;
            this.outer = new this.Hash().update(key);
        };

        Hmac.prototype.update = function update(msg, enc) {
            this.inner.update(msg, enc);
            return this;
        };

        Hmac.prototype.digest = function digest(enc) {
            this.outer.update(this.inner.digest());
            return this.outer.digest(enc);
        };

    }, {"./utils": 100, "minimalistic-assert": 108}],
    92: [function (require, module, exports) {
        'use strict';

        var utils = require('./utils');
        var common = require('./common');

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;

        function RIPEMD160() {
            if (!(this instanceof RIPEMD160))
                return new RIPEMD160();

            BlockHash.call(this);

            this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
            this.endian = 'little';
        }

        utils.inherits(RIPEMD160, BlockHash);
        exports.ripemd160 = RIPEMD160;

        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;

        RIPEMD160.prototype._update = function update(msg, start) {
            var A = this.h[0];
            var B = this.h[1];
            var C = this.h[2];
            var D = this.h[3];
            var E = this.h[4];
            var Ah = A;
            var Bh = B;
            var Ch = C;
            var Dh = D;
            var Eh = E;
            for (var j = 0; j < 80; j++) {
                var T = sum32(
                    rotl32(
                        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                        s[j]),
                    E);
                A = E;
                E = D;
                D = rotl32(C, 10);
                C = B;
                B = T;
                T = sum32(
                    rotl32(
                        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                        sh[j]),
                    Eh);
                Ah = Eh;
                Eh = Dh;
                Dh = rotl32(Ch, 10);
                Ch = Bh;
                Bh = T;
            }
            T = sum32_3(this.h[1], C, Dh);
            this.h[1] = sum32_3(this.h[2], D, Eh);
            this.h[2] = sum32_3(this.h[3], E, Ah);
            this.h[3] = sum32_3(this.h[4], A, Bh);
            this.h[4] = sum32_3(this.h[0], B, Ch);
            this.h[0] = T;
        };

        RIPEMD160.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'little');
            else
                return utils.split32(this.h, 'little');
        };

        function f(j, x, y, z) {
            if (j <= 15)
                return x ^ y ^ z;
            else if (j <= 31)
                return (x & y) | ((~x) & z);
            else if (j <= 47)
                return (x | (~y)) ^ z;
            else if (j <= 63)
                return (x & z) | (y & (~z));
            else
                return x ^ (y | (~z));
        }

        function K(j) {
            if (j <= 15)
                return 0x00000000;
            else if (j <= 31)
                return 0x5a827999;
            else if (j <= 47)
                return 0x6ed9eba1;
            else if (j <= 63)
                return 0x8f1bbcdc;
            else
                return 0xa953fd4e;
        }

        function Kh(j) {
            if (j <= 15)
                return 0x50a28be6;
            else if (j <= 31)
                return 0x5c4dd124;
            else if (j <= 47)
                return 0x6d703ef3;
            else if (j <= 63)
                return 0x7a6d76e9;
            else
                return 0x00000000;
        }

        var r = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ];

        var rh = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ];

        var s = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ];

        var sh = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ];

    }, {"./common": 90, "./utils": 100}],
    93: [function (require, module, exports) {
        'use strict';

        exports.sha1 = require('./sha/1');
        exports.sha224 = require('./sha/224');
        exports.sha256 = require('./sha/256');
        exports.sha384 = require('./sha/384');
        exports.sha512 = require('./sha/512');

    }, {"./sha/1": 94, "./sha/224": 95, "./sha/256": 96, "./sha/384": 97, "./sha/512": 98}],
    94: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var shaCommon = require('./common');

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;

        var sha1_K = [
            0x5A827999, 0x6ED9EBA1,
            0x8F1BBCDC, 0xCA62C1D6
        ];

        function SHA1() {
            if (!(this instanceof SHA1))
                return new SHA1();

            BlockHash.call(this);
            this.h = [
                0x67452301, 0xefcdab89, 0x98badcfe,
                0x10325476, 0xc3d2e1f0];
            this.W = new Array(80);
        }

        utils.inherits(SHA1, BlockHash);
        module.exports = SHA1;

        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;

        SHA1.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];

            for (; i < W.length; i++)
                W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];

            for (i = 0; i < W.length; i++) {
                var s = ~~(i / 20);
                var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                e = d;
                d = c;
                c = rotl32(b, 30);
                b = a;
                a = t;
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
        };

        SHA1.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

    }, {"../common": 90, "../utils": 100, "./common": 99}],
    95: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var SHA256 = require('./256');

        function SHA224() {
            if (!(this instanceof SHA224))
                return new SHA224();

            SHA256.call(this);
            this.h = [
                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
        }

        utils.inherits(SHA224, SHA256);
        module.exports = SHA224;

        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;

        SHA224.prototype._digest = function digest(enc) {
            // Just truncate output
            if (enc === 'hex')
                return utils.toHex32(this.h.slice(0, 7), 'big');
            else
                return utils.split32(this.h.slice(0, 7), 'big');
        };


    }, {"../utils": 100, "./256": 96}],
    96: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var shaCommon = require('./common');
        var assert = require('minimalistic-assert');

        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;

        var BlockHash = common.BlockHash;

        var sha256_K = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
            0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
            0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
            0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
            0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
            0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
            0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];

        function SHA256() {
            if (!(this instanceof SHA256))
                return new SHA256();

            BlockHash.call(this);
            this.h = [
                0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
            ];
            this.k = sha256_K;
            this.W = new Array(64);
        }

        utils.inherits(SHA256, BlockHash);
        module.exports = SHA256;

        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;

        SHA256.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];
            for (; i < W.length; i++)
                W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            var f = this.h[5];
            var g = this.h[6];
            var h = this.h[7];

            assert(this.k.length === W.length);
            for (i = 0; i < W.length; i++) {
                var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                var T2 = sum32(s0_256(a), maj32(a, b, c));
                h = g;
                g = f;
                f = e;
                e = sum32(d, T1);
                d = c;
                c = b;
                b = a;
                a = sum32(T1, T2);
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
            this.h[5] = sum32(this.h[5], f);
            this.h[6] = sum32(this.h[6], g);
            this.h[7] = sum32(this.h[7], h);
        };

        SHA256.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

    }, {"../common": 90, "../utils": 100, "./common": 99, "minimalistic-assert": 108}],
    97: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');

        var SHA512 = require('./512');

        function SHA384() {
            if (!(this instanceof SHA384))
                return new SHA384();

            SHA512.call(this);
            this.h = [
                0xcbbb9d5d, 0xc1059ed8,
                0x629a292a, 0x367cd507,
                0x9159015a, 0x3070dd17,
                0x152fecd8, 0xf70e5939,
                0x67332667, 0xffc00b31,
                0x8eb44a87, 0x68581511,
                0xdb0c2e0d, 0x64f98fa7,
                0x47b5481d, 0xbefa4fa4];
        }

        utils.inherits(SHA384, SHA512);
        module.exports = SHA384;

        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;

        SHA384.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h.slice(0, 12), 'big');
            else
                return utils.split32(this.h.slice(0, 12), 'big');
        };

    }, {"../utils": 100, "./512": 98}],
    98: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var assert = require('minimalistic-assert');

        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;

        var BlockHash = common.BlockHash;

        var sha512_K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
            0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
            0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
            0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
            0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
            0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
            0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
            0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
            0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
            0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
            0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
            0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
            0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
            0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
            0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
            0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
            0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ];

        function SHA512() {
            if (!(this instanceof SHA512))
                return new SHA512();

            BlockHash.call(this);
            this.h = [
                0x6a09e667, 0xf3bcc908,
                0xbb67ae85, 0x84caa73b,
                0x3c6ef372, 0xfe94f82b,
                0xa54ff53a, 0x5f1d36f1,
                0x510e527f, 0xade682d1,
                0x9b05688c, 0x2b3e6c1f,
                0x1f83d9ab, 0xfb41bd6b,
                0x5be0cd19, 0x137e2179];
            this.k = sha512_K;
            this.W = new Array(160);
        }

        utils.inherits(SHA512, BlockHash);
        module.exports = SHA512;

        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;

        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
            var W = this.W;

            // 32 x 32bit words
            for (var i = 0; i < 32; i++)
                W[i] = msg[start + i];
            for (; i < W.length; i += 2) {
                var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
                var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                var c1_hi = W[i - 14];  // i - 7
                var c1_lo = W[i - 13];
                var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
                var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                var c3_hi = W[i - 32];  // i - 16
                var c3_lo = W[i - 31];

                W[i] = sum64_4_hi(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo);
                W[i + 1] = sum64_4_lo(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo);
            }
        };

        SHA512.prototype._update = function _update(msg, start) {
            this._prepareBlock(msg, start);

            var W = this.W;

            var ah = this.h[0];
            var al = this.h[1];
            var bh = this.h[2];
            var bl = this.h[3];
            var ch = this.h[4];
            var cl = this.h[5];
            var dh = this.h[6];
            var dl = this.h[7];
            var eh = this.h[8];
            var el = this.h[9];
            var fh = this.h[10];
            var fl = this.h[11];
            var gh = this.h[12];
            var gl = this.h[13];
            var hh = this.h[14];
            var hl = this.h[15];

            assert(this.k.length === W.length);
            for (var i = 0; i < W.length; i += 2) {
                var c0_hi = hh;
                var c0_lo = hl;
                var c1_hi = s1_512_hi(eh, el);
                var c1_lo = s1_512_lo(eh, el);
                var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                var c3_hi = this.k[i];
                var c3_lo = this.k[i + 1];
                var c4_hi = W[i];
                var c4_lo = W[i + 1];

                var T1_hi = sum64_5_hi(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo,
                    c4_hi, c4_lo);
                var T1_lo = sum64_5_lo(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo,
                    c4_hi, c4_lo);

                c0_hi = s0_512_hi(ah, al);
                c0_lo = s0_512_lo(ah, al);
                c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

                var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

                hh = gh;
                hl = gl;

                gh = fh;
                gl = fl;

                fh = eh;
                fl = el;

                eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                el = sum64_lo(dl, dl, T1_hi, T1_lo);

                dh = ch;
                dl = cl;

                ch = bh;
                cl = bl;

                bh = ah;
                bl = al;

                ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
            }

            sum64(this.h, 0, ah, al);
            sum64(this.h, 2, bh, bl);
            sum64(this.h, 4, ch, cl);
            sum64(this.h, 6, dh, dl);
            sum64(this.h, 8, eh, el);
            sum64(this.h, 10, fh, fl);
            sum64(this.h, 12, gh, gl);
            sum64(this.h, 14, hh, hl);
        };

        SHA512.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

        function ch64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ ((~xh) & zh);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function ch64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ ((~xl) & zl);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function maj64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function maj64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 28);
            var c1_hi = rotr64_hi(xl, xh, 2);  // 34
            var c2_hi = rotr64_hi(xl, xh, 7);  // 39

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 28);
            var c1_lo = rotr64_lo(xl, xh, 2);  // 34
            var c2_lo = rotr64_lo(xl, xh, 7);  // 39

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 14);
            var c1_hi = rotr64_hi(xh, xl, 18);
            var c2_hi = rotr64_hi(xl, xh, 9);  // 41

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 14);
            var c1_lo = rotr64_lo(xh, xl, 18);
            var c2_lo = rotr64_lo(xl, xh, 9);  // 41

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 1);
            var c1_hi = rotr64_hi(xh, xl, 8);
            var c2_hi = shr64_hi(xh, xl, 7);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 1);
            var c1_lo = rotr64_lo(xh, xl, 8);
            var c2_lo = shr64_lo(xh, xl, 7);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 19);
            var c1_hi = rotr64_hi(xl, xh, 29);  // 61
            var c2_hi = shr64_hi(xh, xl, 6);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 19);
            var c1_lo = rotr64_lo(xl, xh, 29);  // 61
            var c2_lo = shr64_lo(xh, xl, 6);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

    }, {"../common": 90, "../utils": 100, "minimalistic-assert": 108}],
    99: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');
        var rotr32 = utils.rotr32;

        function ft_1(s, x, y, z) {
            if (s === 0)
                return ch32(x, y, z);
            if (s === 1 || s === 3)
                return p32(x, y, z);
            if (s === 2)
                return maj32(x, y, z);
        }

        exports.ft_1 = ft_1;

        function ch32(x, y, z) {
            return (x & y) ^ ((~x) & z);
        }

        exports.ch32 = ch32;

        function maj32(x, y, z) {
            return (x & y) ^ (x & z) ^ (y & z);
        }

        exports.maj32 = maj32;

        function p32(x, y, z) {
            return x ^ y ^ z;
        }

        exports.p32 = p32;

        function s0_256(x) {
            return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }

        exports.s0_256 = s0_256;

        function s1_256(x) {
            return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }

        exports.s1_256 = s1_256;

        function g0_256(x) {
            return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }

        exports.g0_256 = g0_256;

        function g1_256(x) {
            return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }

        exports.g1_256 = g1_256;

    }, {"../utils": 100}],
    100: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        exports.inherits = inherits;

        function isSurrogatePair(msg, i) {
            if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
                return false;
            }
            if (i < 0 || i + 1 >= msg.length) {
                return false;
            }
            return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
        }

        function toArray(msg, enc) {
            if (Array.isArray(msg))
                return msg.slice();
            if (!msg)
                return [];
            var res = [];
            if (typeof msg === 'string') {
                if (!enc) {
                    // Inspired by stringToUtf8ByteArray() in closure-library by Google
                    // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                    // Apache License 2.0
                    // https://github.com/google/closure-library/blob/master/LICENSE
                    var p = 0;
                    for (var i = 0; i < msg.length; i++) {
                        var c = msg.charCodeAt(i);
                        if (c < 128) {
                            res[p++] = c;
                        } else if (c < 2048) {
                            res[p++] = (c >> 6) | 192;
                            res[p++] = (c & 63) | 128;
                        } else if (isSurrogatePair(msg, i)) {
                            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                            res[p++] = (c >> 18) | 240;
                            res[p++] = ((c >> 12) & 63) | 128;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        } else {
                            res[p++] = (c >> 12) | 224;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        }
                    }
                } else if (enc === 'hex') {
                    msg = msg.replace(/[^a-z0-9]+/ig, '');
                    if (msg.length % 2 !== 0)
                        msg = '0' + msg;
                    for (i = 0; i < msg.length; i += 2)
                        res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
            } else {
                for (i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
            }
            return res;
        }

        exports.toArray = toArray;

        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
            return res;
        }

        exports.toHex = toHex;

        function htonl(w) {
            var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
            return res >>> 0;
        }

        exports.htonl = htonl;

        function toHex32(msg, endian) {
            var res = '';
            for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little')
                    w = htonl(w);
                res += zero8(w.toString(16));
            }
            return res;
        }

        exports.toHex32 = toHex32;

        function zero2(word) {
            if (word.length === 1)
                return '0' + word;
            else
                return word;
        }

        exports.zero2 = zero2;

        function zero8(word) {
            if (word.length === 7)
                return '0' + word;
            else if (word.length === 6)
                return '00' + word;
            else if (word.length === 5)
                return '000' + word;
            else if (word.length === 4)
                return '0000' + word;
            else if (word.length === 3)
                return '00000' + word;
            else if (word.length === 2)
                return '000000' + word;
            else if (word.length === 1)
                return '0000000' + word;
            else
                return word;
        }

        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
            var len = end - start;
            assert(len % 4 === 0);
            var res = new Array(len / 4);
            for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big')
                    w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                else
                    w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                res[i] = w >>> 0;
            }
            return res;
        }

        exports.join32 = join32;

        function split32(msg, endian) {
            var res = new Array(msg.length * 4);
            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];
                if (endian === 'big') {
                    res[k] = m >>> 24;
                    res[k + 1] = (m >>> 16) & 0xff;
                    res[k + 2] = (m >>> 8) & 0xff;
                    res[k + 3] = m & 0xff;
                } else {
                    res[k + 3] = m >>> 24;
                    res[k + 2] = (m >>> 16) & 0xff;
                    res[k + 1] = (m >>> 8) & 0xff;
                    res[k] = m & 0xff;
                }
            }
            return res;
        }

        exports.split32 = split32;

        function rotr32(w, b) {
            return (w >>> b) | (w << (32 - b));
        }

        exports.rotr32 = rotr32;

        function rotl32(w, b) {
            return (w << b) | (w >>> (32 - b));
        }

        exports.rotl32 = rotl32;

        function sum32(a, b) {
            return (a + b) >>> 0;
        }

        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
            return (a + b + c) >>> 0;
        }

        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
            return (a + b + c + d) >>> 0;
        }

        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
            return (a + b + c + d + e) >>> 0;
        }

        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];

            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
        }

        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
        }

        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
        }

        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;

            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
        }

        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
        }

        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = (lo + el) >>> 0;
            carry += lo < el ? 1 : 0;

            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
        }

        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;

            return lo >>> 0;
        }

        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
            var r = (al << (32 - num)) | (ah >>> num);
            return r >>> 0;
        }

        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }

        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
            return ah >>> num;
        }

        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }

        exports.shr64_lo = shr64_lo;

    }, {"inherits": 103, "minimalistic-assert": 108}],
    101: [function (require, module, exports) {
        'use strict';

        var hash = require('hash.js');
        var utils = require('minimalistic-crypto-utils');
        var assert = require('minimalistic-assert');

        function HmacDRBG(options) {
            if (!(this instanceof HmacDRBG))
                return new HmacDRBG(options);
            this.hash = options.hash;
            this.predResist = !!options.predResist;

            this.outLen = this.hash.outSize;
            this.minEntropy = options.minEntropy || this.hash.hmacStrength;

            this._reseed = null;
            this.reseedInterval = null;
            this.K = null;
            this.V = null;

            var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
            var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
            var pers = utils.toArray(options.pers, options.persEnc || 'hex');
            assert(entropy.length >= (this.minEntropy / 8),
                'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
            this._init(entropy, nonce, pers);
        }

        module.exports = HmacDRBG;

        HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            var seed = entropy.concat(nonce).concat(pers);

            this.K = new Array(this.outLen / 8);
            this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) {
                this.K[i] = 0x00;
                this.V[i] = 0x01;
            }

            this._update(seed);
            this._reseed = 1;
            this.reseedInterval = 0x1000000000000;  // 2^48
        };

        HmacDRBG.prototype._hmac = function hmac() {
            return new hash.hmac(this.hash, this.K);
        };

        HmacDRBG.prototype._update = function update(seed) {
            var kmac = this._hmac()
                .update(this.V)
                .update([0x00]);
            if (seed)
                kmac = kmac.update(seed);
            this.K = kmac.digest();
            this.V = this._hmac().update(this.V).digest();
            if (!seed)
                return;

            this.K = this._hmac()
                .update(this.V)
                .update([0x01])
                .update(seed)
                .digest();
            this.V = this._hmac().update(this.V).digest();
        };

        HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
            // Optional entropy enc
            if (typeof entropyEnc !== 'string') {
                addEnc = add;
                add = entropyEnc;
                entropyEnc = null;
            }

            entropy = utils.toArray(entropy, entropyEnc);
            add = utils.toArray(add, addEnc);

            assert(entropy.length >= (this.minEntropy / 8),
                'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

            this._update(entropy.concat(add || []));
            this._reseed = 1;
        };

        HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
            if (this._reseed > this.reseedInterval)
                throw new Error('Reseed is required');

            // Optional encoding
            if (typeof enc !== 'string') {
                addEnc = add;
                add = enc;
                enc = null;
            }

            // Optional additional data
            if (add) {
                add = utils.toArray(add, addEnc || 'hex');
                this._update(add);
            }

            var temp = [];
            while (temp.length < len) {
                this.V = this._hmac().update(this.V).digest();
                temp = temp.concat(this.V);
            }

            var res = temp.slice(0, len);
            this._update(add);
            this._reseed++;
            return utils.encode(res, enc);
        };

    }, {"hash.js": 89, "minimalistic-assert": 108, "minimalistic-crypto-utils": 109}],
    102: [function (require, module, exports) {
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? (nBytes - 1) : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << (-nBits)) - 1)
            s >>= (-nBits)
            nBits += eLen
            for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {
            }

            m = e & ((1 << (-nBits)) - 1)
            e >>= (-nBits)
            nBits += mLen
            for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {
            }

            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
            } else {
                m = m + Math.pow(2, mLen)
                e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
            var i = isLE ? 0 : (nBytes - 1)
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0
                e = eMax
            } else {
                e = Math.floor(Math.log(value) / Math.LN2)
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * Math.pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++
                    c /= 2
                }

                if (e + eBias >= eMax) {
                    m = 0
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = ((value * c) - 1) * Math.pow(2, mLen)
                    e = e + eBias
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                    e = 0
                }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {
            }

            e = (e << mLen) | m
            eLen += mLen
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {
            }

            buffer[offset + i - d] |= s * 128
        }

    }, {}],
    103: [function (require, module, exports) {
        if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    })
                }
            };
        } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function () {
                    }
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }
        }

    }, {}],
    104: [function (require, module, exports) {
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
        module.exports = function (obj) {
            return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }

        function isBuffer(obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }

// For Node v0.10 support. Remove this eventually.
        function isSlowBuffer(obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }

    }, {}],
    105: [function (require, module, exports) {
        var toString = {}.toString;

        module.exports = Array.isArray || function (arr) {
            return toString.call(arr) == '[object Array]';
        };

    }, {}],
    106: [function (require, module, exports) {
        'use strict'
        var inherits = require('inherits')
        var HashBase = require('hash-base')
        var Buffer = require('safe-buffer').Buffer

        var ARRAY16 = new Array(16)

        function MD5() {
            HashBase.call(this, 64)

            // state
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
        }

        inherits(MD5, HashBase)

        MD5.prototype._update = function () {
            var M = ARRAY16
            for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

            var a = this._a
            var b = this._b
            var c = this._c
            var d = this._d

            a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
            d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
            c = fnF(c, d, a, b, M[2], 0x242070db, 17)
            b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
            a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
            d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
            c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
            b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
            a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
            d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
            c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
            b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
            a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
            d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
            c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
            b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

            a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
            d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
            c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
            b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
            a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
            d = fnG(d, a, b, c, M[10], 0x02441453, 9)
            c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
            b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
            a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
            d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
            c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
            b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
            a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
            d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
            c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
            b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

            a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
            d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
            c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
            b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
            a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
            d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
            c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
            b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
            a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
            d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
            c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
            b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
            a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
            d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
            c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
            b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

            a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
            d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
            c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
            b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
            a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
            d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
            c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
            b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
            a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
            d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
            c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
            b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
            a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
            d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
            c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
            b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

            this._a = (this._a + a) | 0
            this._b = (this._b + b) | 0
            this._c = (this._c + c) | 0
            this._d = (this._d + d) | 0
        }

        MD5.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80
            if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64)
                this._update()
                this._blockOffset = 0
            }

            this._block.fill(0, this._blockOffset, 56)
            this._block.writeUInt32LE(this._length[0], 56)
            this._block.writeUInt32LE(this._length[1], 60)
            this._update()

            // produce result
            var buffer = Buffer.allocUnsafe(16)
            buffer.writeInt32LE(this._a, 0)
            buffer.writeInt32LE(this._b, 4)
            buffer.writeInt32LE(this._c, 8)
            buffer.writeInt32LE(this._d, 12)
            return buffer
        }

        function rotl(x, n) {
            return (x << n) | (x >>> (32 - n))
        }

        function fnF(a, b, c, d, m, k, s) {
            return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
        }

        function fnG(a, b, c, d, m, k, s) {
            return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
        }

        function fnH(a, b, c, d, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
        }

        function fnI(a, b, c, d, m, k, s) {
            return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
        }

        module.exports = MD5

    }, {"hash-base": 88, "inherits": 103, "safe-buffer": 147}],
    107: [function (require, module, exports) {
        var bn = require('bn.js');
        var brorand = require('brorand');

        function MillerRabin(rand) {
            this.rand = rand || new brorand.Rand();
        }

        module.exports = MillerRabin;

        MillerRabin.create = function create(rand) {
            return new MillerRabin(rand);
        };

        MillerRabin.prototype._randbelow = function _randbelow(n) {
            var len = n.bitLength();
            var min_bytes = Math.ceil(len / 8);

            // Generage random bytes until a number less than n is found.
            // This ensures that 0..n-1 have an equal probability of being selected.
            do
                var a = new bn(this.rand.generate(min_bytes));
            while (a.cmp(n) >= 0);

            return a;
        };

        MillerRabin.prototype._randrange = function _randrange(start, stop) {
            // Generate a random number greater than or equal to start and less than stop.
            var size = stop.sub(start);
            return start.add(this._randbelow(size));
        };

        MillerRabin.prototype.test = function test(n, k, cb) {
            var len = n.bitLength();
            var red = bn.mont(n);
            var rone = new bn(1).toRed(red);

            if (!k)
                k = Math.max(1, (len / 48) | 0);

            // Find d and s, (n - 1) = (2 ^ s) * d;
            var n1 = n.subn(1);
            for (var s = 0; !n1.testn(s); s++) {
            }
            var d = n.shrn(s);

            var rn1 = n1.toRed(red);

            var prime = true;
            for (; k > 0; k--) {
                var a = this._randrange(new bn(2), n1);
                if (cb)
                    cb(a);

                var x = a.toRed(red).redPow(d);
                if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                    continue;

                for (var i = 1; i < s; i++) {
                    x = x.redSqr();

                    if (x.cmp(rone) === 0)
                        return false;
                    if (x.cmp(rn1) === 0)
                        break;
                }

                if (i === s)
                    return false;
            }

            return prime;
        };

        MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
            var len = n.bitLength();
            var red = bn.mont(n);
            var rone = new bn(1).toRed(red);

            if (!k)
                k = Math.max(1, (len / 48) | 0);

            // Find d and s, (n - 1) = (2 ^ s) * d;
            var n1 = n.subn(1);
            for (var s = 0; !n1.testn(s); s++) {
            }
            var d = n.shrn(s);

            var rn1 = n1.toRed(red);

            for (; k > 0; k--) {
                var a = this._randrange(new bn(2), n1);

                var g = n.gcd(a);
                if (g.cmpn(1) !== 0)
                    return g;

                var x = a.toRed(red).redPow(d);
                if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                    continue;

                for (var i = 1; i < s; i++) {
                    x = x.redSqr();

                    if (x.cmp(rone) === 0)
                        return x.fromRed().subn(1).gcd(n);
                    if (x.cmp(rn1) === 0)
                        break;
                }

                if (i === s) {
                    x = x.redSqr();
                    return x.fromRed().subn(1).gcd(n);
                }
            }

            return false;
        };

    }, {"bn.js": 20, "brorand": 21}],
    108: [function (require, module, exports) {
        module.exports = assert;

        function assert(val, msg) {
            if (!val)
                throw new Error(msg || 'Assertion failed');
        }

        assert.equal = function assertEqual(l, r, msg) {
            if (l != r)
                throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
        };

    }, {}],
    109: [function (require, module, exports) {
        'use strict';

        var utils = exports;

        function toArray(msg, enc) {
            if (Array.isArray(msg))
                return msg.slice();
            if (!msg)
                return [];
            var res = [];
            if (typeof msg !== 'string') {
                for (var i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
                return res;
            }
            if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/ig, '');
                if (msg.length % 2 !== 0)
                    msg = '0' + msg;
                for (var i = 0; i < msg.length; i += 2)
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
            } else {
                for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);
                    var hi = c >> 8;
                    var lo = c & 0xff;
                    if (hi)
                        res.push(hi, lo);
                    else
                        res.push(lo);
                }
            }
            return res;
        }

        utils.toArray = toArray;

        function zero2(word) {
            if (word.length === 1)
                return '0' + word;
            else
                return word;
        }

        utils.zero2 = zero2;

        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
            return res;
        }

        utils.toHex = toHex;

        utils.encode = function encode(arr, enc) {
            if (enc === 'hex')
                return toHex(arr);
            else
                return arr;
        };

    }, {}],
    110: [function (require, module, exports) {
        /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

        'use strict';
        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
            if (val === null || val === undefined) {
                throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
        }

        function shouldUseNative() {
            try {
                if (!Object.assign) {
                    return false;
                }

                // Detect buggy property enumeration order in older V8 versions.

                // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
                test1[5] = 'de';
                if (Object.getOwnPropertyNames(test1)[0] === '5') {
                    return false;
                }

                // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                var test2 = {};
                for (var i = 0; i < 10; i++) {
                    test2['_' + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                    return test2[n];
                });
                if (order2.join('') !== '0123456789') {
                    return false;
                }

                // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                var test3 = {};
                'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                    test3[letter] = letter;
                });
                if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                    return false;
                }

                return true;
            } catch (err) {
                // We don't expect any of the above to throw, but better to be safe.
                return false;
            }
        }

        module.exports = shouldUseNative() ? Object.assign : function (target, source) {
            var from;
            var to = toObject(target);
            var symbols;

            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }

                if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (propIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }

            return to;
        };

    }, {}],
    111: [function (require, module, exports) {
        module.exports = {
            "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
            "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
            "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
            "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
            "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
            "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
            "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
            "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
            "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
            "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
            "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
            "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
        }
    }, {}],
    112: [function (require, module, exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
        'use strict'

        var asn1 = require('asn1.js')

        exports.certificate = require('./certificate')

        var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('modulus').int(),
                this.key('publicExponent').int(),
                this.key('privateExponent').int(),
                this.key('prime1').int(),
                this.key('prime2').int(),
                this.key('exponent1').int(),
                this.key('exponent2').int(),
                this.key('coefficient').int()
            )
        })
        exports.RSAPrivateKey = RSAPrivateKey

        var RSAPublicKey = asn1.define('RSAPublicKey', function () {
            this.seq().obj(
                this.key('modulus').int(),
                this.key('publicExponent').int()
            )
        })
        exports.RSAPublicKey = RSAPublicKey

        var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPublicKey').bitstr()
            )
        })
        exports.PublicKey = PublicKey

        var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
            this.seq().obj(
                this.key('algorithm').objid(),
                this.key('none').null_().optional(),
                this.key('curve').objid().optional(),
                this.key('params').seq().obj(
                    this.key('p').int(),
                    this.key('q').int(),
                    this.key('g').int()
                ).optional()
            )
        })

        var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPrivateKey').octstr()
            )
        })
        exports.PrivateKey = PrivateKeyInfo
        var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').seq().obj(
                    this.key('id').objid(),
                    this.key('decrypt').seq().obj(
                        this.key('kde').seq().obj(
                            this.key('id').objid(),
                            this.key('kdeparams').seq().obj(
                                this.key('salt').octstr(),
                                this.key('iters').int()
                            )
                        ),
                        this.key('cipher').seq().obj(
                            this.key('algo').objid(),
                            this.key('iv').octstr()
                        )
                    )
                ),
                this.key('subjectPrivateKey').octstr()
            )
        })

        exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

        var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('p').int(),
                this.key('q').int(),
                this.key('g').int(),
                this.key('pub_key').int(),
                this.key('priv_key').int()
            )
        })
        exports.DSAPrivateKey = DSAPrivateKey

        exports.DSAparam = asn1.define('DSAparam', function () {
            this.int()
        })

        var ECPrivateKey = asn1.define('ECPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('privateKey').octstr(),
                this.key('parameters').optional().explicit(0).use(ECParameters),
                this.key('publicKey').optional().explicit(1).bitstr()
            )
        })
        exports.ECPrivateKey = ECPrivateKey

        var ECParameters = asn1.define('ECParameters', function () {
            this.choice({
                namedCurve: this.objid()
            })
        })

        exports.signature = asn1.define('signature', function () {
            this.seq().obj(
                this.key('r').int(),
                this.key('s').int()
            )
        })

    }, {"./certificate": 113, "asn1.js": 1}],
    113: [function (require, module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

        'use strict'

        var asn = require('asn1.js')

        var Time = asn.define('Time', function () {
            this.choice({
                utcTime: this.utctime(),
                generalTime: this.gentime()
            })
        })

        var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
            this.seq().obj(
                this.key('type').objid(),
                this.key('value').any()
            )
        })

        var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
            this.seq().obj(
                this.key('algorithm').objid(),
                this.key('parameters').optional(),
                this.key('curve').objid().optional()
            )
        })

        var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPublicKey').bitstr()
            )
        })

        var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
            this.setof(AttributeTypeValue)
        })

        var RDNSequence = asn.define('RDNSequence', function () {
            this.seqof(RelativeDistinguishedName)
        })

        var Name = asn.define('Name', function () {
            this.choice({
                rdnSequence: this.use(RDNSequence)
            })
        })

        var Validity = asn.define('Validity', function () {
            this.seq().obj(
                this.key('notBefore').use(Time),
                this.key('notAfter').use(Time)
            )
        })

        var Extension = asn.define('Extension', function () {
            this.seq().obj(
                this.key('extnID').objid(),
                this.key('critical').bool().def(false),
                this.key('extnValue').octstr()
            )
        })

        var TBSCertificate = asn.define('TBSCertificate', function () {
            this.seq().obj(
                this.key('version').explicit(0).int().optional(),
                this.key('serialNumber').int(),
                this.key('signature').use(AlgorithmIdentifier),
                this.key('issuer').use(Name),
                this.key('validity').use(Validity),
                this.key('subject').use(Name),
                this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
                this.key('issuerUniqueID').implicit(1).bitstr().optional(),
                this.key('subjectUniqueID').implicit(2).bitstr().optional(),
                this.key('extensions').explicit(3).seqof(Extension).optional()
            )
        })

        var X509Certificate = asn.define('X509Certificate', function () {
            this.seq().obj(
                this.key('tbsCertificate').use(TBSCertificate),
                this.key('signatureAlgorithm').use(AlgorithmIdentifier),
                this.key('signatureValue').bitstr()
            )
        })

        module.exports = X509Certificate

    }, {"asn1.js": 1}],
    114: [function (require, module, exports) {
// adapted from https://github.com/apatil/pemstrip
        var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
        var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
        var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
        var evp = require('evp_bytestokey')
        var ciphers = require('browserify-aes')
        var Buffer = require('safe-buffer').Buffer
        module.exports = function (okey, password) {
            var key = okey.toString()
            var match = key.match(findProc)
            var decrypted
            if (!match) {
                var match2 = key.match(fullRegex)
                decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
            } else {
                var suite = 'aes' + match[1]
                var iv = Buffer.from(match[2], 'hex')
                var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
                var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
                var out = []
                var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
                out.push(cipher.update(cipherText))
                out.push(cipher.final())
                decrypted = Buffer.concat(out)
            }
            var tag = key.match(startRegex)[1]
            return {
                tag: tag,
                data: decrypted
            }
        }

    }, {"browserify-aes": 25, "evp_bytestokey": 87, "safe-buffer": 147}],
    115: [function (require, module, exports) {
        var asn1 = require('./asn1')
        var aesid = require('./aesid.json')
        var fixProc = require('./fixProc')
        var ciphers = require('browserify-aes')
        var compat = require('pbkdf2')
        var Buffer = require('safe-buffer').Buffer
        module.exports = parseKeys

        function parseKeys(buffer) {
            var password
            if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
                password = buffer.passphrase
                buffer = buffer.key
            }
            if (typeof buffer === 'string') {
                buffer = Buffer.from(buffer)
            }

            var stripped = fixProc(buffer, password)

            var type = stripped.tag
            var data = stripped.data
            var subtype, ndata
            switch (type) {
                case 'CERTIFICATE':
                    ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
                // falls through
                case 'PUBLIC KEY':
                    if (!ndata) {
                        ndata = asn1.PublicKey.decode(data, 'der')
                    }
                    subtype = ndata.algorithm.algorithm.join('.')
                    switch (subtype) {
                        case '1.2.840.113549.1.1.1':
                            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
                        case '1.2.840.10045.2.1':
                            ndata.subjectPrivateKey = ndata.subjectPublicKey
                            return {
                                type: 'ec',
                                data: ndata
                            }
                        case '1.2.840.10040.4.1':
                            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
                            return {
                                type: 'dsa',
                                data: ndata.algorithm.params
                            }
                        default:
                            throw new Error('unknown key id ' + subtype)
                    }
                    throw new Error('unknown key type ' + type)
                case 'ENCRYPTED PRIVATE KEY':
                    data = asn1.EncryptedPrivateKey.decode(data, 'der')
                    data = decrypt(data, password)
                // falls through
                case 'PRIVATE KEY':
                    ndata = asn1.PrivateKey.decode(data, 'der')
                    subtype = ndata.algorithm.algorithm.join('.')
                    switch (subtype) {
                        case '1.2.840.113549.1.1.1':
                            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
                        case '1.2.840.10045.2.1':
                            return {
                                curve: ndata.algorithm.curve,
                                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                            }
                        case '1.2.840.10040.4.1':
                            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
                            return {
                                type: 'dsa',
                                params: ndata.algorithm.params
                            }
                        default:
                            throw new Error('unknown key id ' + subtype)
                    }
                    throw new Error('unknown key type ' + type)
                case 'RSA PUBLIC KEY':
                    return asn1.RSAPublicKey.decode(data, 'der')
                case 'RSA PRIVATE KEY':
                    return asn1.RSAPrivateKey.decode(data, 'der')
                case 'DSA PRIVATE KEY':
                    return {
                        type: 'dsa',
                        params: asn1.DSAPrivateKey.decode(data, 'der')
                    }
                case 'EC PRIVATE KEY':
                    data = asn1.ECPrivateKey.decode(data, 'der')
                    return {
                        curve: data.parameters.value,
                        privateKey: data.privateKey
                    }
                default:
                    throw new Error('unknown key type ' + type)
            }
        }

        parseKeys.signature = asn1.signature

        function decrypt(data, password) {
            var salt = data.algorithm.decrypt.kde.kdeparams.salt
            var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
            var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
            var iv = data.algorithm.decrypt.cipher.iv
            var cipherText = data.subjectPrivateKey
            var keylen = parseInt(algo.split('-')[1], 10) / 8
            var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
            var cipher = ciphers.createDecipheriv(algo, key, iv)
            var out = []
            out.push(cipher.update(cipherText))
            out.push(cipher.final())
            return Buffer.concat(out)
        }

    }, {"./aesid.json": 111, "./asn1": 112, "./fixProc": 114, "browserify-aes": 25, "pbkdf2": 116, "safe-buffer": 147}],
    116: [function (require, module, exports) {
        exports.pbkdf2 = require('./lib/async')
        exports.pbkdf2Sync = require('./lib/sync')

    }, {"./lib/async": 117, "./lib/sync": 120}],
    117: [function (require, module, exports) {
        (function (process, global) {
            var checkParameters = require('./precondition')
            var defaultEncoding = require('./default-encoding')
            var sync = require('./sync')
            var Buffer = require('safe-buffer').Buffer

            var ZERO_BUF
            var subtle = global.crypto && global.crypto.subtle
            var toBrowser = {
                'sha': 'SHA-1',
                'sha-1': 'SHA-1',
                'sha1': 'SHA-1',
                'sha256': 'SHA-256',
                'sha-256': 'SHA-256',
                'sha384': 'SHA-384',
                'sha-384': 'SHA-384',
                'sha-512': 'SHA-512',
                'sha512': 'SHA-512'
            }
            var checks = []

            function checkNative(algo) {
                if (global.process && !global.process.browser) {
                    return Promise.resolve(false)
                }
                if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                    return Promise.resolve(false)
                }
                if (checks[algo] !== undefined) {
                    return checks[algo]
                }
                ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
                var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                    .then(function () {
                        return true
                    }).catch(function () {
                        return false
                    })
                checks[algo] = prom
                return prom
            }

            function browserPbkdf2(password, salt, iterations, length, algo) {
                return subtle.importKey(
                    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
                ).then(function (key) {
                    return subtle.deriveBits({
                        name: 'PBKDF2',
                        salt: salt,
                        iterations: iterations,
                        hash: {
                            name: algo
                        }
                    }, key, length << 3)
                }).then(function (res) {
                    return Buffer.from(res)
                })
            }

            function resolvePromise(promise, callback) {
                promise.then(function (out) {
                    process.nextTick(function () {
                        callback(null, out)
                    })
                }, function (e) {
                    process.nextTick(function () {
                        callback(e)
                    })
                })
            }

            module.exports = function (password, salt, iterations, keylen, digest, callback) {
                if (typeof digest === 'function') {
                    callback = digest
                    digest = undefined
                }

                digest = digest || 'sha1'
                var algo = toBrowser[digest.toLowerCase()]

                if (!algo || typeof global.Promise !== 'function') {
                    return process.nextTick(function () {
                        var out
                        try {
                            out = sync(password, salt, iterations, keylen, digest)
                        } catch (e) {
                            return callback(e)
                        }
                        callback(null, out)
                    })
                }

                checkParameters(password, salt, iterations, keylen)
                if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
                if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                resolvePromise(checkNative(algo).then(function (resp) {
                    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

                    return sync(password, salt, iterations, keylen, digest)
                }), callback)
            }

        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"./default-encoding": 118, "./precondition": 119, "./sync": 120, "_process": 122, "safe-buffer": 147}],
    118: [function (require, module, exports) {
        (function (process) {
            var defaultEncoding
            /* istanbul ignore next */
            if (process.browser) {
                defaultEncoding = 'utf-8'
            } else {
                var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

                defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
            }
            module.exports = defaultEncoding

        }).call(this, require('_process'))
    }, {"_process": 122}],
    119: [function (require, module, exports) {
        (function (Buffer) {
            var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

            function checkBuffer(buf, name) {
                if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
                    throw new TypeError(name + ' must be a buffer or string')
                }
            }

            module.exports = function (password, salt, iterations, keylen) {
                checkBuffer(password, 'Password')
                checkBuffer(salt, 'Salt')

                if (typeof iterations !== 'number') {
                    throw new TypeError('Iterations not a number')
                }

                if (iterations < 0) {
                    throw new TypeError('Bad iterations')
                }

                if (typeof keylen !== 'number') {
                    throw new TypeError('Key length not a number')
                }

                if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
                    throw new TypeError('Bad key length')
                }
            }

        }).call(this, {"isBuffer": require("../../is-buffer/index.js")})
    }, {"../../is-buffer/index.js": 104}],
    120: [function (require, module, exports) {
        var md5 = require('create-hash/md5')
        var RIPEMD160 = require('ripemd160')
        var sha = require('sha.js')

        var checkParameters = require('./precondition')
        var defaultEncoding = require('./default-encoding')
        var Buffer = require('safe-buffer').Buffer
        var ZEROS = Buffer.alloc(128)
        var sizes = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20
        }

        function Hmac(alg, key, saltLen) {
            var hash = getDigest(alg)
            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            if (key.length > blocksize) {
                key = hash(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
            var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
            ipad.copy(ipad1, 0, 0, blocksize)
            this.ipad1 = ipad1
            this.ipad2 = ipad
            this.opad = opad
            this.alg = alg
            this.blocksize = blocksize
            this.hash = hash
            this.size = sizes[alg]
        }

        Hmac.prototype.run = function (data, ipad) {
            data.copy(ipad, this.blocksize)
            var h = this.hash(ipad)
            h.copy(this.opad, this.blocksize)
            return this.hash(this.opad)
        }

        function getDigest(alg) {
            function shaFunc(data) {
                return sha(alg).update(data).digest()
            }

            function rmd160Func(data) {
                return new RIPEMD160().update(data).digest()
            }

            if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
            if (alg === 'md5') return md5
            return shaFunc
        }

        function pbkdf2(password, salt, iterations, keylen, digest) {
            checkParameters(password, salt, iterations, keylen)

            if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
            if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

            digest = digest || 'sha1'

            var hmac = new Hmac(digest, password, salt.length)

            var DK = Buffer.allocUnsafe(keylen)
            var block1 = Buffer.allocUnsafe(salt.length + 4)
            salt.copy(block1, 0, 0, salt.length)

            var destPos = 0
            var hLen = sizes[digest]
            var l = Math.ceil(keylen / hLen)

            for (var i = 1; i <= l; i++) {
                block1.writeUInt32BE(i, salt.length)

                var T = hmac.run(block1, hmac.ipad1)
                var U = T

                for (var j = 1; j < iterations; j++) {
                    U = hmac.run(U, hmac.ipad2)
                    for (var k = 0; k < hLen; k++) T[k] ^= U[k]
                }

                T.copy(DK, destPos)
                destPos += hLen
            }

            return DK
        }

        module.exports = pbkdf2

    }, {
        "./default-encoding": 118,
        "./precondition": 119,
        "create-hash/md5": 56,
        "ripemd160": 146,
        "safe-buffer": 147,
        "sha.js": 149
    }],
    121: [function (require, module, exports) {
        (function (process) {
            'use strict';

            if (typeof process === 'undefined' ||
                !process.version ||
                process.version.indexOf('v0.') === 0 ||
                process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                module.exports = {nextTick: nextTick};
            } else {
                module.exports = process
            }

            function nextTick(fn, arg1, arg2, arg3) {
                if (typeof fn !== 'function') {
                    throw new TypeError('"callback" argument must be a function');
                }
                var len = arguments.length;
                var args, i;
                switch (len) {
                    case 0:
                    case 1:
                        return process.nextTick(fn);
                    case 2:
                        return process.nextTick(function afterTickOne() {
                            fn.call(null, arg1);
                        });
                    case 3:
                        return process.nextTick(function afterTickTwo() {
                            fn.call(null, arg1, arg2);
                        });
                    case 4:
                        return process.nextTick(function afterTickThree() {
                            fn.call(null, arg1, arg2, arg3);
                        });
                    default:
                        args = new Array(len - 1);
                        i = 0;
                        while (i < args.length) {
                            args[i++] = arguments[i];
                        }
                        return process.nextTick(function afterTick() {
                            fn.apply(null, args);
                        });
                }
            }


        }).call(this, require('_process'))
    }, {"_process": 122}],
    122: [function (require, module, exports) {
// shim for using process in browser
        var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
        }

        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        }())

        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }

        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }


        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

// v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }

        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {
        }

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
            return []
        }

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () {
            return '/'
        };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function () {
            return 0;
        };

    }, {}],
    123: [function (require, module, exports) {
        exports.publicEncrypt = require('./publicEncrypt')
        exports.privateDecrypt = require('./privateDecrypt')

        exports.privateEncrypt = function privateEncrypt(key, buf) {
            return exports.publicEncrypt(key, buf, true)
        }

        exports.publicDecrypt = function publicDecrypt(key, buf) {
            return exports.privateDecrypt(key, buf, true)
        }

    }, {"./privateDecrypt": 125, "./publicEncrypt": 126}],
    124: [function (require, module, exports) {
        var createHash = require('create-hash')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function (seed, len) {
            var t = Buffer.alloc(0)
            var i = 0
            var c
            while (t.length < len) {
                c = i2ops(i++)
                t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
            }
            return t.slice(0, len)
        }

        function i2ops(c) {
            var out = Buffer.allocUnsafe(4)
            out.writeUInt32BE(c, 0)
            return out
        }

    }, {"create-hash": 55, "safe-buffer": 147}],
    125: [function (require, module, exports) {
        var parseKeys = require('parse-asn1')
        var mgf = require('./mgf')
        var xor = require('./xor')
        var BN = require('bn.js')
        var crt = require('browserify-rsa')
        var createHash = require('create-hash')
        var withPublic = require('./withPublic')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function privateDecrypt(privateKey, enc, reverse) {
            var padding
            if (privateKey.padding) {
                padding = privateKey.padding
            } else if (reverse) {
                padding = 1
            } else {
                padding = 4
            }

            var key = parseKeys(privateKey)
            var k = key.modulus.byteLength()
            if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
                throw new Error('decryption error')
            }
            var msg
            if (reverse) {
                msg = withPublic(new BN(enc), key)
            } else {
                msg = crt(enc, key)
            }
            var zBuffer = Buffer.alloc(k - msg.length)
            msg = Buffer.concat([zBuffer, msg], k)
            if (padding === 4) {
                return oaep(key, msg)
            } else if (padding === 1) {
                return pkcs1(key, msg, reverse)
            } else if (padding === 3) {
                return msg
            } else {
                throw new Error('unknown padding')
            }
        }

        function oaep(key, msg) {
            var k = key.modulus.byteLength()
            var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
            var hLen = iHash.length
            if (msg[0] !== 0) {
                throw new Error('decryption error')
            }
            var maskedSeed = msg.slice(1, hLen + 1)
            var maskedDb = msg.slice(hLen + 1)
            var seed = xor(maskedSeed, mgf(maskedDb, hLen))
            var db = xor(maskedDb, mgf(seed, k - hLen - 1))
            if (compare(iHash, db.slice(0, hLen))) {
                throw new Error('decryption error')
            }
            var i = hLen
            while (db[i] === 0) {
                i++
            }
            if (db[i++] !== 1) {
                throw new Error('decryption error')
            }
            return db.slice(i)
        }

        function pkcs1(key, msg, reverse) {
            var p1 = msg.slice(0, 2)
            var i = 2
            var status = 0
            while (msg[i++] !== 0) {
                if (i >= msg.length) {
                    status++
                    break
                }
            }
            var ps = msg.slice(2, i - 1)

            if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
                status++
            }
            if (ps.length < 8) {
                status++
            }
            if (status) {
                throw new Error('decryption error')
            }
            return msg.slice(i)
        }

        function compare(a, b) {
            a = Buffer.from(a)
            b = Buffer.from(b)
            var dif = 0
            var len = a.length
            if (a.length !== b.length) {
                dif++
                len = Math.min(a.length, b.length)
            }
            var i = -1
            while (++i < len) {
                dif += (a[i] ^ b[i])
            }
            return dif
        }

    }, {
        "./mgf": 124,
        "./withPublic": 127,
        "./xor": 128,
        "bn.js": 20,
        "browserify-rsa": 43,
        "create-hash": 55,
        "parse-asn1": 115,
        "safe-buffer": 147
    }],
    126: [function (require, module, exports) {
        var parseKeys = require('parse-asn1')
        var randomBytes = require('randombytes')
        var createHash = require('create-hash')
        var mgf = require('./mgf')
        var xor = require('./xor')
        var BN = require('bn.js')
        var withPublic = require('./withPublic')
        var crt = require('browserify-rsa')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function publicEncrypt(publicKey, msg, reverse) {
            var padding
            if (publicKey.padding) {
                padding = publicKey.padding
            } else if (reverse) {
                padding = 1
            } else {
                padding = 4
            }
            var key = parseKeys(publicKey)
            var paddedMsg
            if (padding === 4) {
                paddedMsg = oaep(key, msg)
            } else if (padding === 1) {
                paddedMsg = pkcs1(key, msg, reverse)
            } else if (padding === 3) {
                paddedMsg = new BN(msg)
                if (paddedMsg.cmp(key.modulus) >= 0) {
                    throw new Error('data too long for modulus')
                }
            } else {
                throw new Error('unknown padding')
            }
            if (reverse) {
                return crt(paddedMsg, key)
            } else {
                return withPublic(paddedMsg, key)
            }
        }

        function oaep(key, msg) {
            var k = key.modulus.byteLength()
            var mLen = msg.length
            var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
            var hLen = iHash.length
            var hLen2 = 2 * hLen
            if (mLen > k - hLen2 - 2) {
                throw new Error('message too long')
            }
            var ps = Buffer.alloc(k - mLen - hLen2 - 2)
            var dblen = k - hLen - 1
            var seed = randomBytes(hLen)
            var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
            var maskedSeed = xor(seed, mgf(maskedDb, hLen))
            return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
        }

        function pkcs1(key, msg, reverse) {
            var mLen = msg.length
            var k = key.modulus.byteLength()
            if (mLen > k - 11) {
                throw new Error('message too long')
            }
            var ps
            if (reverse) {
                ps = Buffer.alloc(k - mLen - 3, 0xff)
            } else {
                ps = nonZero(k - mLen - 3)
            }
            return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
        }

        function nonZero(len) {
            var out = Buffer.allocUnsafe(len)
            var i = 0
            var cache = randomBytes(len * 2)
            var cur = 0
            var num
            while (i < len) {
                if (cur === cache.length) {
                    cache = randomBytes(len * 2)
                    cur = 0
                }
                num = cache[cur++]
                if (num) {
                    out[i++] = num
                }
            }
            return out
        }

    }, {
        "./mgf": 124,
        "./withPublic": 127,
        "./xor": 128,
        "bn.js": 20,
        "browserify-rsa": 43,
        "create-hash": 55,
        "parse-asn1": 115,
        "randombytes": 129,
        "safe-buffer": 147
    }],
    127: [function (require, module, exports) {
        var BN = require('bn.js')
        var Buffer = require('safe-buffer').Buffer

        function withPublic(paddedMsg, key) {
            return Buffer.from(paddedMsg
                .toRed(BN.mont(key.modulus))
                .redPow(new BN(key.publicExponent))
                .fromRed()
                .toArray())
        }

        module.exports = withPublic

    }, {"bn.js": 20, "safe-buffer": 147}],
    128: [function (require, module, exports) {
        module.exports = function xor(a, b) {
            var len = a.length
            var i = -1
            while (++i < len) {
                a[i] ^= b[i]
            }
            return a
        }

    }, {}],
    129: [function (require, module, exports) {
        (function (process, global) {
            'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
            var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
            var MAX_UINT32 = 4294967295

            function oldBrowser() {
                throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
            }

            var Buffer = require('safe-buffer').Buffer
            var crypto = global.crypto || global.msCrypto

            if (crypto && crypto.getRandomValues) {
                module.exports = randomBytes
            } else {
                module.exports = oldBrowser
            }

            function randomBytes(size, cb) {
                // phantomjs needs to throw
                if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

                var bytes = Buffer.allocUnsafe(size)

                if (size > 0) {  // getRandomValues fails on IE if size == 0
                    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
                        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                        for (var generated = 0; generated < size; generated += MAX_BYTES) {
                            // buffer.slice automatically checks if the end is past the end of
                            // the buffer so we don't have to here
                            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
                        }
                    } else {
                        crypto.getRandomValues(bytes)
                    }
                }

                if (typeof cb === 'function') {
                    return process.nextTick(function () {
                        cb(null, bytes)
                    })
                }

                return bytes
            }

        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"_process": 122, "safe-buffer": 147}],
    130: [function (require, module, exports) {
        (function (process, global) {
            'use strict'

            function oldBrowser() {
                throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
            }

            var safeBuffer = require('safe-buffer')
            var randombytes = require('randombytes')
            var Buffer = safeBuffer.Buffer
            var kBufferMaxLength = safeBuffer.kMaxLength
            var crypto = global.crypto || global.msCrypto
            var kMaxUint32 = Math.pow(2, 32) - 1

            function assertOffset(offset, length) {
                if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
                    throw new TypeError('offset must be a number')
                }

                if (offset > kMaxUint32 || offset < 0) {
                    throw new TypeError('offset must be a uint32')
                }

                if (offset > kBufferMaxLength || offset > length) {
                    throw new RangeError('offset out of range')
                }
            }

            function assertSize(size, offset, length) {
                if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
                    throw new TypeError('size must be a number')
                }

                if (size > kMaxUint32 || size < 0) {
                    throw new TypeError('size must be a uint32')
                }

                if (size + offset > length || size > kBufferMaxLength) {
                    throw new RangeError('buffer too small')
                }
            }

            if ((crypto && crypto.getRandomValues) || !process.browser) {
                exports.randomFill = randomFill
                exports.randomFillSync = randomFillSync
            } else {
                exports.randomFill = oldBrowser
                exports.randomFillSync = oldBrowser
            }

            function randomFill(buf, offset, size, cb) {
                if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                }

                if (typeof offset === 'function') {
                    cb = offset
                    offset = 0
                    size = buf.length
                } else if (typeof size === 'function') {
                    cb = size
                    size = buf.length - offset
                } else if (typeof cb !== 'function') {
                    throw new TypeError('"cb" argument must be a function')
                }
                assertOffset(offset, buf.length)
                assertSize(size, offset, buf.length)
                return actualFill(buf, offset, size, cb)
            }

            function actualFill(buf, offset, size, cb) {
                if (process.browser) {
                    var ourBuf = buf.buffer
                    var uint = new Uint8Array(ourBuf, offset, size)
                    crypto.getRandomValues(uint)
                    if (cb) {
                        process.nextTick(function () {
                            cb(null, buf)
                        })
                        return
                    }
                    return buf
                }
                if (cb) {
                    randombytes(size, function (err, bytes) {
                        if (err) {
                            return cb(err)
                        }
                        bytes.copy(buf, offset)
                        cb(null, buf)
                    })
                    return
                }
                var bytes = randombytes(size)
                bytes.copy(buf, offset)
                return buf
            }

            function randomFillSync(buf, offset, size) {
                if (typeof offset === 'undefined') {
                    offset = 0
                }
                if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                }

                assertOffset(offset, buf.length)

                if (size === undefined) size = buf.length - offset

                assertSize(size, offset, buf.length)

                return actualFill(buf, offset, size)
            }

        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"_process": 122, "randombytes": 129, "safe-buffer": 147}],
    131: [function (require, module, exports) {
        module.exports = require('./lib/_stream_duplex.js');

    }, {"./lib/_stream_duplex.js": 132}],
    132: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

        /*<replacement>*/
        var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }
            return keys;
        };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        var Readable = require('./_stream_readable');
        var Writable = require('./_stream_writable');

        util.inherits(Duplex, Readable);

        {
            // avoid scope creep, the keys array can then be collected
            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
        }

        function Duplex(options) {
            if (!(this instanceof Duplex)) return new Duplex(options);

            Readable.call(this, options);
            Writable.call(this, options);

            if (options && options.readable === false) this.readable = false;

            if (options && options.writable === false) this.writable = false;

            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

            this.once('end', onend);
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function () {
                return this._writableState.highWaterMark;
            }
        });

// the no-half-open enforcer
        function onend() {
            // if we allow half-open state, or if the writable side ended,
            // then we're ok.
            if (this.allowHalfOpen || this._writableState.ended) return;

            // no more data can be written.
            // But allow more writes to happen in this tick.
            pna.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
            self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
            get: function () {
                if (this._readableState === undefined || this._writableState === undefined) {
                    return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function (value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (this._readableState === undefined || this._writableState === undefined) {
                    return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
            }
        });

        Duplex.prototype._destroy = function (err, cb) {
            this.push(null);
            this.end();

            pna.nextTick(cb, err);
        };
    }, {
        "./_stream_readable": 134,
        "./_stream_writable": 136,
        "core-util-is": 53,
        "inherits": 103,
        "process-nextick-args": 121
    }],
    133: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

        'use strict';

        module.exports = PassThrough;

        var Transform = require('./_stream_transform');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);

            Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
        };
    }, {"./_stream_transform": 135, "core-util-is": 53, "inherits": 103}],
    134: [function (require, module, exports) {
        (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Readable;

            /*<replacement>*/
            var isArray = require('isarray');
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Readable.ReadableState = ReadableState;

            /*<replacement>*/
            var EE = require('events').EventEmitter;

            var EElistenerCount = function (emitter, type) {
                return emitter.listeners(type).length;
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {
            };

            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }

            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var debugUtil = require('util');
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
            } else {
                debug = function () {
                };
            }
            /*</replacement>*/

            var BufferList = require('./internal/streams/BufferList');
            var destroyImpl = require('./internal/streams/destroy');
            var StringDecoder;

            util.inherits(Readable, Stream);

            var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

            function prependListener(emitter, event, fn) {
                // Sadly this is not cacheable as some libraries bundle their own
                // event emitter implementation with them.
                if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
            }

            function ReadableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag. Used to make read(n) ignore n and to
                // make all the buffer merging and length checks go away
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                // the point at which it stops calling _read() to fill the buffer
                // Note: 0 is a valid value, means "don't call _read preemptively ever"
                var hwm = options.highWaterMark;
                var readableHwm = options.readableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // A linked list is used to store data chunks instead of an array because the
                // linked list can remove elements from the beginning faster than
                // array.shift()
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;

                // a flag to be able to tell if the event 'readable'/'data' is emitted
                // immediately, or on a later tick.  We set this to true at first, because
                // any actions that shouldn't happen until "later" should generally also
                // not happen before the first read call.
                this.sync = true;

                // whenever we return null, then we set a flag to say
                // that we're awaiting a 'readable' event emission.
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;

                // has it been destroyed
                this.destroyed = false;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // the number of writers that are awaiting a drain event in .pipe()s
                this.awaitDrain = 0;

                // if true, a maybeReadMore has been scheduled
                this.readingMore = false;

                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                }
            }

            function Readable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                if (!(this instanceof Readable)) return new Readable(options);

                this._readableState = new ReadableState(options, this);

                // legacy
                this.readable = true;

                if (options) {
                    if (typeof options.read === 'function') this._read = options.read;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                }

                Stream.call(this);
            }

            Object.defineProperty(Readable.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._readableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                }
            });

            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function (err, cb) {
                this.push(null);
                cb(err);
            };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
            Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;

                if (!state.objectMode) {
                    if (typeof chunk === 'string') {
                        encoding = encoding || state.defaultEncoding;
                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = '';
                        }
                        skipChunkCheck = true;
                    }
                } else {
                    skipChunkCheck = true;
                }

                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };

// Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
            };

            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                var state = stream._readableState;
                if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                    if (er) {
                        stream.emit('error', er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }

                        if (addToFront) {
                            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
                        } else if (state.ended) {
                            stream.emit('error', new Error('stream.push() after EOF'));
                        } else {
                            state.reading = false;
                            if (state.decoder && !encoding) {
                                chunk = state.decoder.write(chunk);
                                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                            } else {
                                addChunk(stream, state, chunk, false);
                            }
                        }
                    } else if (!addToFront) {
                        state.reading = false;
                    }
                }

                return needMoreData(state);
            }

            function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit('data', chunk);
                    stream.read(0);
                } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

                    if (state.needReadable) emitReadable(stream);
                }
                maybeReadMore(stream, state);
            }

            function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                return er;
            }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
            function needMoreData(state) {
                return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }

            Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
            };

// backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this._readableState.decoder = new StringDecoder(enc);
                this._readableState.encoding = enc;
                return this;
            };

// Don't raise the hwm > 8MB
            var MAX_HWM = 0x800000;

            function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                    n = MAX_HWM;
                } else {
                    // Get the next highest power of 2 to prevent increasing hwm excessively in
                    // tiny amounts
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                }
                return n;
            }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended) return 0;
                if (state.objectMode) return 1;
                if (n !== n) {
                    // Only flow one buffer at a time
                    if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                }
                // If we're asking for more than the current hwm, then raise the hwm.
                if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n;
                // Don't have enough
                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                }
                return state.length;
            }

// you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
                debug('read', n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;

                if (n !== 0) state.emittedReadable = false;

                // if we're doing read(0) to trigger a readable event, but we
                // already have a bunch of data in the buffer, then just trigger
                // the 'readable' event and move on.
                if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                    debug('read: emitReadable', state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                    return null;
                }

                n = howMuchToRead(n, state);

                // if we've ended, and we're now clear, then finish it up.
                if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                }

                // All the actual chunk generation logic needs to be
                // *below* the call to _read.  The reason is that in certain
                // synthetic stream cases, such as passthrough streams, _read
                // may be a completely synchronous operation which may change
                // the state of the read buffer, providing enough data when
                // before there was *not* enough.
                //
                // So, the steps are:
                // 1. Figure out what the state of things will be after we do
                // a read from the buffer.
                //
                // 2. If that resulting state will trigger a _read, then call _read.
                // Note that this may be asynchronous, or synchronous.  Yes, it is
                // deeply ugly to write APIs this way, but that still doesn't mean
                // that the Readable class should behave improperly, as streams are
                // designed to be sync/async agnostic.
                // Take note if the _read call is sync or async (ie, if the read call
                // has returned yet), so that we know whether or not it's safe to emit
                // 'readable' etc.
                //
                // 3. Actually pull the requested chunks out of the buffer and return.

                // if we need a readable event, then we need to do some reading.
                var doRead = state.needReadable;
                debug('need readable', doRead);

                // if we currently have less than the highWaterMark, then also read some
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug('length less than watermark', doRead);
                }

                // however, if we've ended, then there's no point, and if we're already
                // reading, then it's unnecessary.
                if (state.ended || state.reading) {
                    doRead = false;
                    debug('reading or ended', doRead);
                } else if (doRead) {
                    debug('do read');
                    state.reading = true;
                    state.sync = true;
                    // if the length is currently zero, then we *need* a readable event.
                    if (state.length === 0) state.needReadable = true;
                    // call internal read method
                    this._read(state.highWaterMark);
                    state.sync = false;
                    // If _read pushed data synchronously, then `reading` will be false,
                    // and we need to re-evaluate how much data we can return to the user.
                    if (!state.reading) n = howMuchToRead(nOrig, state);
                }

                var ret;
                if (n > 0) ret = fromList(n, state); else ret = null;

                if (ret === null) {
                    state.needReadable = true;
                    n = 0;
                } else {
                    state.length -= n;
                }

                if (state.length === 0) {
                    // If we have nothing in the buffer, then we want to know
                    // as soon as we *do* get something into the buffer.
                    if (!state.ended) state.needReadable = true;

                    // If we tried to read() past the EOF, then emit end on the next tick.
                    if (nOrig !== n && state.ended) endReadable(this);
                }

                if (ret !== null) this.emit('data', ret);

                return ret;
            };

            function onEofChunk(stream, state) {
                if (state.ended) return;
                if (state.decoder) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) {
                        state.buffer.push(chunk);
                        state.length += state.objectMode ? 1 : chunk.length;
                    }
                }
                state.ended = true;

                // emit 'readable' now to make sure it gets picked up.
                emitReadable(stream);
            }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
                var state = stream._readableState;
                state.needReadable = false;
                if (!state.emittedReadable) {
                    debug('emitReadable', state.flowing);
                    state.emittedReadable = true;
                    if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
                }
            }

            function emitReadable_(stream) {
                debug('emit readable');
                stream.emit('readable');
                flow(stream);
            }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                    state.readingMore = true;
                    pna.nextTick(maybeReadMore_, stream, state);
                }
            }

            function maybeReadMore_(stream, state) {
                var len = state.length;
                while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                    debug('maybeReadMore read 0');
                    stream.read(0);
                    if (len === state.length)
                        // didn't get any data, stop spinning.
                        break; else len = state.length;
                }
                state.readingMore = false;
            }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
                this.emit('error', new Error('_read() is not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;

                switch (state.pipesCount) {
                    case 0:
                        state.pipes = dest;
                        break;
                    case 1:
                        state.pipes = [state.pipes, dest];
                        break;
                    default:
                        state.pipes.push(dest);
                        break;
                }
                state.pipesCount += 1;
                debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);

                dest.on('unpipe', onunpipe);

                function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe');
                    if (readable === src) {
                        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                            unpipeInfo.hasUnpiped = true;
                            cleanup();
                        }
                    }
                }

                function onend() {
                    debug('onend');
                    dest.end();
                }

                // when the dest drains, it reduces the awaitDrain counter
                // on the source.  This would be more elegant with a .once()
                // handler in flow(), but adding and removing repeatedly is
                // too slow.
                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);

                var cleanedUp = false;

                function cleanup() {
                    debug('cleanup');
                    // cleanup event handlers once the pipe is broken
                    dest.removeListener('close', onclose);
                    dest.removeListener('finish', onfinish);
                    dest.removeListener('drain', ondrain);
                    dest.removeListener('error', onerror);
                    dest.removeListener('unpipe', onunpipe);
                    src.removeListener('end', onend);
                    src.removeListener('end', unpipe);
                    src.removeListener('data', ondata);

                    cleanedUp = true;

                    // if the reader is waiting for a drain event from this
                    // specific writer, then it would cause it to never start
                    // flowing again.
                    // So, if this is awaiting a drain, then we just call it now.
                    // If we don't know, then assume that we are waiting for one.
                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                }

                // If the user pushes more data while we're writing to dest then we'll end up
                // in ondata again. However, we only want to increase awaitDrain once because
                // dest will only emit one 'drain' event for the multiple writes.
                // => Introduce a guard on increasing awaitDrain.
                var increasedAwaitDrain = false;
                src.on('data', ondata);

                function ondata(chunk) {
                    debug('ondata');
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);
                    if (false === ret && !increasedAwaitDrain) {
                        // If the user unpiped during `dest.write()`, it is possible
                        // to get stuck in a permanently paused state if that write
                        // also returned false.
                        // => Check whether `dest` is still a piping destination.
                        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                            debug('false write response, pause', src._readableState.awaitDrain);
                            src._readableState.awaitDrain++;
                            increasedAwaitDrain = true;
                        }
                        src.pause();
                    }
                }

                // if the dest has an error, then stop piping into it.
                // however, don't suppress the throwing behavior for this.
                function onerror(er) {
                    debug('onerror', er);
                    unpipe();
                    dest.removeListener('error', onerror);
                    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                }

                // Make sure our error handler is attached before userland ones.
                prependListener(dest, 'error', onerror);

                // Both close and finish should trigger unpipe, but only once.
                function onclose() {
                    dest.removeListener('finish', onfinish);
                    unpipe();
                }

                dest.once('close', onclose);

                function onfinish() {
                    debug('onfinish');
                    dest.removeListener('close', onclose);
                    unpipe();
                }

                dest.once('finish', onfinish);

                function unpipe() {
                    debug('unpipe');
                    src.unpipe(dest);
                }

                // tell the dest that it's being piped to
                dest.emit('pipe', src);

                // start the flow if it hasn't been started already.
                if (!state.flowing) {
                    debug('pipe resume');
                    src.resume();
                }

                return dest;
            };

            function pipeOnDrain(src) {
                return function () {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;
                    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                        state.flowing = true;
                        flow(src);
                    }
                };
            }

            Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = {hasUnpiped: false};

                // if we're not piping anywhere, then do nothing.
                if (state.pipesCount === 0) return this;

                // just one destination.  most common case.
                if (state.pipesCount === 1) {
                    // passed in one, but it's not the right one.
                    if (dest && dest !== state.pipes) return this;

                    if (!dest) dest = state.pipes;

                    // got a match.
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit('unpipe', this, unpipeInfo);
                    return this;
                }

                // slow case. multiple pipe destinations.

                if (!dest) {
                    // remove all.
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;

                    for (var i = 0; i < len; i++) {
                        dests[i].emit('unpipe', this, unpipeInfo);
                    }
                    return this;
                }

                // try to find the right one.
                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;

                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];

                dest.emit('unpipe', this, unpipeInfo);

                return this;
            };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);

                if (ev === 'data') {
                    // Start flowing on next tick if stream isn't explicitly paused
                    if (this._readableState.flowing !== false) this.resume();
                } else if (ev === 'readable') {
                    var state = this._readableState;
                    if (!state.endEmitted && !state.readableListening) {
                        state.readableListening = state.needReadable = true;
                        state.emittedReadable = false;
                        if (!state.reading) {
                            pna.nextTick(nReadingNextTick, this);
                        } else if (state.length) {
                            emitReadable(this);
                        }
                    }
                }

                return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
                debug('readable nexttick read 0');
                self.read(0);
            }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
                var state = this._readableState;
                if (!state.flowing) {
                    debug('resume');
                    state.flowing = true;
                    resume(this, state);
                }
                return this;
            };

            function resume(stream, state) {
                if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    pna.nextTick(resume_, stream, state);
                }
            }

            function resume_(stream, state) {
                if (!state.reading) {
                    debug('resume read 0');
                    stream.read(0);
                }

                state.resumeScheduled = false;
                state.awaitDrain = 0;
                stream.emit('resume');
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
                debug('call pause flowing=%j', this._readableState.flowing);
                if (false !== this._readableState.flowing) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                }
                return this;
            };

            function flow(stream) {
                var state = stream._readableState;
                debug('flow', state.flowing);
                while (state.flowing && stream.read() !== null) {
                }
            }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
                var _this = this;

                var state = this._readableState;
                var paused = false;

                stream.on('end', function () {
                    debug('wrapped end');
                    if (state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) _this.push(chunk);
                    }

                    _this.push(null);
                });

                stream.on('data', function (chunk) {
                    debug('wrapped data');
                    if (state.decoder) chunk = state.decoder.write(chunk);

                    // don't skip over falsy values in objectMode
                    if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

                    var ret = _this.push(chunk);
                    if (!ret) {
                        paused = true;
                        stream.pause();
                    }
                });

                // proxy all the other methods.
                // important when wrapping filters and duplexes.
                for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === 'function') {
                        this[i] = function (method) {
                            return function () {
                                return stream[method].apply(stream, arguments);
                            };
                        }(i);
                    }
                }

                // proxy certain important events.
                for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }

                // when we try to consume some more bytes, simply unpause the
                // underlying stream.
                this._read = function (n) {
                    debug('wrapped _read', n);
                    if (paused) {
                        paused = false;
                        stream.resume();
                    }
                };

                return this;
            };

            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._readableState.highWaterMark;
                }
            });

// exposed for testing purposes only.
            Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromList(n, state) {
                // nothing buffered
                if (state.length === 0) return null;

                var ret;
                if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                    // read it all, truncate the list
                    if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                } else {
                    // read part of list
                    ret = fromListPartial(n, state.buffer, state.decoder);
                }

                return ret;
            }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromListPartial(n, list, hasStrings) {
                var ret;
                if (n < list.head.data.length) {
                    // slice is the same for buffers and strings
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                } else if (n === list.head.data.length) {
                    // first chunk is a perfect match
                    ret = list.shift();
                } else {
                    // result spans more than one buffer
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                }
                return ret;
            }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBufferString(n, list) {
                var p = list.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str; else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) list.head = p.next; else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBuffer(n, list) {
                var ret = Buffer.allocUnsafe(n);
                var p = list.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) list.head = p.next; else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

            function endReadable(stream) {
                var state = stream._readableState;

                // If we get here before consuming all the bytes, then that is a
                // bug in node.  Should never happen.
                if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                if (!state.endEmitted) {
                    state.ended = true;
                    pna.nextTick(endReadableNT, state, stream);
                }
            }

            function endReadableNT(state, stream) {
                // Check that we didn't get one last unshift.
                if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit('end');
                }
            }

            function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                }
                return -1;
            }
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./_stream_duplex": 132,
        "./internal/streams/BufferList": 137,
        "./internal/streams/destroy": 138,
        "./internal/streams/stream": 139,
        "_process": 122,
        "core-util-is": 53,
        "events": 86,
        "inherits": 103,
        "isarray": 105,
        "process-nextick-args": 121,
        "safe-buffer": 140,
        "string_decoder/": 141,
        "util": 22
    }],
    135: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

        'use strict';

        module.exports = Transform;

        var Duplex = require('./_stream_duplex');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;

            var cb = ts.writecb;

            if (!cb) {
                return this.emit('error', new Error('write callback called multiple times'));
            }

            ts.writechunk = null;
            ts.writecb = null;

            if (data != null) // single equals check for both `null` and `undefined`
                this.push(data);

            cb(er);

            var rs = this._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
                this._read(rs.highWaterMark);
            }
        }

        function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);

            Duplex.call(this, options);

            this._transformState = {
                afterTransform: afterTransform.bind(this),
                needTransform: false,
                transforming: false,
                writecb: null,
                writechunk: null,
                writeencoding: null
            };

            // start out asking for a readable event once data is transformed.
            this._readableState.needReadable = true;

            // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.
            this._readableState.sync = false;

            if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;

                if (typeof options.flush === 'function') this._flush = options.flush;
            }

            // When the writable side finishes, then flush out anything remaining.
            this.on('prefinish', prefinish);
        }

        function prefinish() {
            var _this = this;

            if (typeof this._flush === 'function') {
                this._flush(function (er, data) {
                    done(_this, er, data);
                });
            } else {
                done(this, null, null);
            }
        }

        Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
        };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
            throw new Error('_transform() is not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
        };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
            }
        };

        Transform.prototype._destroy = function (err, cb) {
            var _this2 = this;

            Duplex.prototype._destroy.call(this, err, function (err2) {
                cb(err2);
                _this2.emit('close');
            });
        };

        function done(stream, er, data) {
            if (er) return stream.emit('error', er);

            if (data != null) // single equals check for both `null` and `undefined`
                stream.push(data);

            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided
            if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

            if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

            return stream.push(null);
        }
    }, {"./_stream_duplex": 132, "core-util-is": 53, "inherits": 103}],
    136: [function (require, module, exports) {
        (function (process, global, setImmediate) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Writable;

            /* <replacement> */
            function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
            }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
            function CorkedRequest(state) {
                var _this = this;

                this.next = null;
                this.entry = null;
                this.finish = function () {
                    onCorkedFinish(_this, state);
                };
            }

            /* </replacement> */

            /*<replacement>*/
            var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Writable.WritableState = WritableState;

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var internalUtil = {
                deprecate: require('util-deprecate')
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {
            };

            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }

            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            var destroyImpl = require('./internal/streams/destroy');

            util.inherits(Writable, Stream);

            function nop() {
            }

            function WritableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag to indicate whether or not this stream
                // contains buffers or objects.
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                // the point at which write() starts returning false
                // Note: 0 is a valid value, means that we always return false if
                // the entire buffer is not flushed immediately on write()
                var hwm = options.highWaterMark;
                var writableHwm = options.writableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // if _final has been called
                this.finalCalled = false;

                // drain event flag.
                this.needDrain = false;
                // at the start of calling end()
                this.ending = false;
                // when end() has been called, and returned
                this.ended = false;
                // when 'finish' is emitted
                this.finished = false;

                // has it been destroyed
                this.destroyed = false;

                // should we decode strings into buffers before passing to _write?
                // this is here so that some node-core streams can optimize string
                // handling at a lower level.
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // not an actual buffer we keep track of, but a measurement
                // of how much we're waiting to get pushed to some underlying
                // socket or file.
                this.length = 0;

                // a flag to see when we're in the middle of a write.
                this.writing = false;

                // when true all writes will be buffered until .uncork() call
                this.corked = 0;

                // a flag to be able to tell if the onwrite cb is called immediately,
                // or on a later tick.  We set this to true at first, because any
                // actions that shouldn't happen until "later" should generally also
                // not happen before the first write call.
                this.sync = true;

                // a flag to know if we're processing previously buffered items, which
                // may call the _write() callback in the same tick, so that we don't
                // end up in an overlapped onwrite situation.
                this.bufferProcessing = false;

                // the callback that's passed to _write(chunk,cb)
                this.onwrite = function (er) {
                    onwrite(stream, er);
                };

                // the callback that the user supplies to write(chunk,encoding,cb)
                this.writecb = null;

                // the amount that is being written when _write is called.
                this.writelen = 0;

                this.bufferedRequest = null;
                this.lastBufferedRequest = null;

                // number of pending user-supplied write callbacks
                // this must be 0 before 'finish' can be emitted
                this.pendingcb = 0;

                // emit prefinish if the only thing we're waiting for is _write cbs
                // This is relevant for synchronous Transform streams
                this.prefinished = false;

                // True if the error was already emitted and should not be thrown again
                this.errorEmitted = false;

                // count buffered requests
                this.bufferedRequestCount = 0;

                // allocate the first CorkedRequest, there is always
                // one allocated and free to use, and we maintain at most two
                this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                    out.push(current);
                    current = current.next;
                }
                return out;
            };

            (function () {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function () {
                            return this.getBuffer();
                        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                } catch (_) {
                }
            })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
            var realHasInstance;
            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function (object) {
                        if (realHasInstance.call(this, object)) return true;
                        if (this !== Writable) return false;

                        return object && object._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function (object) {
                    return object instanceof this;
                };
            }

            function Writable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                // Writable ctor is applied to Duplexes, too.
                // `realHasInstance` is necessary because using plain `instanceof`
                // would return false, as no `_writableState` property is attached.

                // Trying to use the custom `instanceof` for Writable here will also break the
                // Node.js LazyTransform implementation, which has a non-trivial getter for
                // `_writableState` that would lead to infinite recursion.
                if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options);
                }

                this._writableState = new WritableState(options, this);

                // legacy.
                this.writable = true;

                if (options) {
                    if (typeof options.write === 'function') this._write = options.write;

                    if (typeof options.writev === 'function') this._writev = options.writev;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;

                    if (typeof options.final === 'function') this._final = options.final;
                }

                Stream.call(this);
            }

// Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
                this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
                var er = new Error('write after end');
                // TODO: defer error events consistently everywhere, not just the cb
                stream.emit('error', er);
                pna.nextTick(cb, er);
            }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
            function validChunk(stream, state, chunk, cb) {
                var valid = true;
                var er = false;

                if (chunk === null) {
                    er = new TypeError('May not write null values to stream');
                } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                if (er) {
                    stream.emit('error', er);
                    pna.nextTick(cb, er);
                    valid = false;
                }
                return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);

                if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                }

                if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

                if (typeof cb !== 'function') cb = nop;

                if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }

                return ret;
            };

            Writable.prototype.cork = function () {
                var state = this._writableState;

                state.corked++;
            };

            Writable.prototype.uncork = function () {
                var state = this._writableState;

                if (state.corked) {
                    state.corked--;

                    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                // node::ParseEncoding() requires lower case.
                if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
            };

            function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                    chunk = Buffer.from(chunk, encoding);
                }
                return chunk;
            }

            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._writableState.highWaterMark;
                }
            });

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);
                    if (chunk !== newChunk) {
                        isBuf = true;
                        encoding = 'buffer';
                        chunk = newChunk;
                    }
                }
                var len = state.objectMode ? 1 : chunk.length;

                state.length += len;

                var ret = state.length < state.highWaterMark;
                // we must ensure that previous needDrain will not be reset to false.
                if (!ret) state.needDrain = true;

                if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    };
                    if (last) {
                        last.next = state.lastBufferedRequest;
                    } else {
                        state.bufferedRequest = state.lastBufferedRequest;
                    }
                    state.bufferedRequestCount += 1;
                } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                }

                return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;

                if (sync) {
                    // defer the callback if we are being called synchronously
                    // to avoid piling up things on the stack
                    pna.nextTick(cb, er);
                    // this can emit finish, and it will always happen
                    // after error
                    pna.nextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                } else {
                    // the caller expect this to happen before if
                    // it is async
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                    // this can emit finish, but finish must
                    // always follow error
                    finishMaybe(stream, state);
                }
            }

            function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
            }

            function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;

                onwriteStateUpdate(state);

                if (er) onwriteError(stream, state, sync, er, cb); else {
                    // Check if we're actually ready to finish, but don't emit yet
                    var finished = needFinish(state);

                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                        clearBuffer(stream, state);
                    }

                    if (sync) {
                        /*<replacement>*/
                        asyncWrite(afterWrite, stream, state, finished, cb);
                        /*</replacement>*/
                    } else {
                        afterWrite(stream, state, finished, cb);
                    }
                }
            }

            function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
            }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit('drain');
                }
            }

// if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;

                if (stream._writev && entry && entry.next) {
                    // Fast case, write everything using _writev()
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;

                    var count = 0;
                    var allBuffers = true;
                    while (entry) {
                        buffer[count] = entry;
                        if (!entry.isBuf) allBuffers = false;
                        entry = entry.next;
                        count += 1;
                    }
                    buffer.allBuffers = allBuffers;

                    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                    // doWrite is almost always async, defer these to save a bit of time
                    // as the hot path ends with doWrite
                    state.pendingcb++;
                    state.lastBufferedRequest = null;
                    if (holder.next) {
                        state.corkedRequestsFree = holder.next;
                        holder.next = null;
                    } else {
                        state.corkedRequestsFree = new CorkedRequest(state);
                    }
                    state.bufferedRequestCount = 0;
                } else {
                    // Slow case, write chunks one-by-one
                    while (entry) {
                        var chunk = entry.chunk;
                        var encoding = entry.encoding;
                        var cb = entry.callback;
                        var len = state.objectMode ? 1 : chunk.length;

                        doWrite(stream, state, false, len, chunk, encoding, cb);
                        entry = entry.next;
                        state.bufferedRequestCount--;
                        // if we didn't call the onwrite immediately, then
                        // it means that we need to wait until it does.
                        // also, that means that the chunk and cb are currently
                        // being processed, so move the buffer counter past them.
                        if (state.writing) {
                            break;
                        }
                    }

                    if (entry === null) state.lastBufferedRequest = null;
                }

                state.bufferedRequest = entry;
                state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new Error('_write() is not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;

                if (typeof chunk === 'function') {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                } else if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                // .end() fully uncorks
                if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                }

                // ignore unnecessary end() calls.
                if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function callFinal(stream, state) {
                stream._final(function (err) {
                    state.pendingcb--;
                    if (err) {
                        stream.emit('error', err);
                    }
                    state.prefinished = true;
                    stream.emit('prefinish');
                    finishMaybe(stream, state);
                });
            }

            function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === 'function') {
                        state.pendingcb++;
                        state.finalCalled = true;
                        pna.nextTick(callFinal, stream, state);
                    } else {
                        state.prefinished = true;
                        stream.emit('prefinish');
                    }
                }
            }

            function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                    prefinish(stream, state);
                    if (state.pendingcb === 0) {
                        state.finished = true;
                        stream.emit('finish');
                    }
                }
                return need;
            }

            function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                    if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
                }
                state.ended = true;
                stream.writable = false;
            }

            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = corkReq;
                } else {
                    state.corkedRequestsFree = corkReq;
                }
            }

            Object.defineProperty(Writable.prototype, 'destroyed', {
                get: function () {
                    if (this._writableState === undefined) {
                        return false;
                    }
                    return this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._writableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._writableState.destroyed = value;
                }
            });

            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function (err, cb) {
                this.end();
                cb(err);
            };
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("timers").setImmediate)
    }, {
        "./_stream_duplex": 132,
        "./internal/streams/destroy": 138,
        "./internal/streams/stream": 139,
        "_process": 122,
        "core-util-is": 53,
        "inherits": 103,
        "process-nextick-args": 121,
        "safe-buffer": 140,
        "timers": 158,
        "util-deprecate": 159
    }],
    137: [function (require, module, exports) {
        'use strict';

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var Buffer = require('safe-buffer').Buffer;
        var util = require('util');

        function copyBuffer(src, target, offset) {
            src.copy(target, offset);
        }

        module.exports = function () {
            function BufferList() {
                _classCallCheck(this, BufferList);

                this.head = null;
                this.tail = null;
                this.length = 0;
            }

            BufferList.prototype.push = function push(v) {
                var entry = {data: v, next: null};
                if (this.length > 0) this.tail.next = entry; else this.head = entry;
                this.tail = entry;
                ++this.length;
            };

            BufferList.prototype.unshift = function unshift(v) {
                var entry = {data: v, next: this.head};
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            };

            BufferList.prototype.shift = function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                --this.length;
                return ret;
            };

            BufferList.prototype.clear = function clear() {
                this.head = this.tail = null;
                this.length = 0;
            };

            BufferList.prototype.join = function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while (p = p.next) {
                    ret += s + p.data;
                }
                return ret;
            };

            BufferList.prototype.concat = function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                if (this.length === 1) return this.head.data;
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            };

            return BufferList;
        }();

        if (util && util.inspect && util.inspect.custom) {
            module.exports.prototype[util.inspect.custom] = function () {
                var obj = util.inspect({length: this.length});
                return this.constructor.name + ' ' + obj;
            };
        }
    }, {"safe-buffer": 140, "util": 22}],
    138: [function (require, module, exports) {
        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
        function destroy(err, cb) {
            var _this = this;

            var readableDestroyed = this._readableState && this._readableState.destroyed;
            var writableDestroyed = this._writableState && this._writableState.destroyed;

            if (readableDestroyed || writableDestroyed) {
                if (cb) {
                    cb(err);
                } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                    pna.nextTick(emitErrorNT, this, err);
                }
                return this;
            }

            // we set destroyed to true before firing error callbacks in order
            // to make it re-entrance safe in case destroy() is called within callbacks

            if (this._readableState) {
                this._readableState.destroyed = true;
            }

            // if this is a duplex stream mark the writable part as destroyed as well
            if (this._writableState) {
                this._writableState.destroyed = true;
            }

            this._destroy(err || null, function (err) {
                if (!cb && err) {
                    pna.nextTick(emitErrorNT, _this, err);
                    if (_this._writableState) {
                        _this._writableState.errorEmitted = true;
                    }
                } else if (cb) {
                    cb(err);
                }
            });

            return this;
        }

        function undestroy() {
            if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
            }

            if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
            }
        }

        function emitErrorNT(self, err) {
            self.emit('error', err);
        }

        module.exports = {
            destroy: destroy,
            undestroy: undestroy
        };
    }, {"process-nextick-args": 121}],
    139: [function (require, module, exports) {
        module.exports = require('events').EventEmitter;

    }, {"events": 86}],
    140: [function (require, module, exports) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer')
        var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
            for (var key in src) {
                dst[key] = src[key]
            }
        }

        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
        } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
        }

// Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
                throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
                if (typeof encoding === 'string') {
                    buf.fill(fill, encoding)
                } else {
                    buf.fill(fill)
                }
            } else {
                buf.fill(0)
            }
            return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
        }

    }, {"buffer": 51}],
    141: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        /*<replacement>*/

        var Buffer = require('safe-buffer').Buffer;
        /*</replacement>*/

        var isEncoding = Buffer.isEncoding || function (encoding) {
            encoding = '' + encoding;
            switch (encoding && encoding.toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                case 'raw':
                    return true;
                default:
                    return false;
            }
        };

        function _normalizeEncoding(enc) {
            if (!enc) return 'utf8';
            var retried;
            while (true) {
                switch (enc) {
                    case 'utf8':
                    case 'utf-8':
                        return 'utf8';
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return 'utf16le';
                    case 'latin1':
                    case 'binary':
                        return 'latin1';
                    case 'base64':
                    case 'ascii':
                    case 'hex':
                        return enc;
                    default:
                        if (retried) return; // undefined
                        enc = ('' + enc).toLowerCase();
                        retried = true;
                }
            }
        };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
            var nenc = _normalizeEncoding(enc);
            if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
            return nenc || enc;
        }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
        exports.StringDecoder = StringDecoder;

        function StringDecoder(encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
                case 'utf16le':
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;
                case 'utf8':
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;
                case 'base64':
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;
                default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
        }

        StringDecoder.prototype.write = function (buf) {
            if (buf.length === 0) return '';
            var r;
            var i;
            if (this.lastNeed) {
                r = this.fillLast(buf);
                if (r === undefined) return '';
                i = this.lastNeed;
                this.lastNeed = 0;
            } else {
                i = 0;
            }
            if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || '';
        };

        StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
            this.lastNeed -= buf.length;
        };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
        function utf8CheckByte(byte) {
            if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
            return byte >> 6 === 0x02 ? -1 : -2;
        }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 1;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 2;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) {
                    if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
                }
                return nb;
            }
            return 0;
        }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
        function utf8CheckExtraBytes(self, buf, p) {
            if ((buf[0] & 0xC0) !== 0x80) {
                self.lastNeed = 0;
                return '\ufffd';
            }
            if (self.lastNeed > 1 && buf.length > 1) {
                if ((buf[1] & 0xC0) !== 0x80) {
                    self.lastNeed = 1;
                    return '\ufffd';
                }
                if (self.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 0xC0) !== 0x80) {
                        self.lastNeed = 2;
                        return '\ufffd';
                    }
                }
            }
        }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, p, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
        }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
        function utf8Text(buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString('utf8', i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString('utf8', i, end);
        }

// For UTF-8, a replacement character is added when ending on a partial
// character.
        function utf8End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + '\ufffd';
            return r;
        }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
        function utf16Text(buf, i) {
            if ((buf.length - i) % 2 === 0) {
                var r = buf.toString('utf16le', i);
                if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 0xD800 && c <= 0xDBFF) {
                        this.lastNeed = 2;
                        this.lastTotal = 4;
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                        return r.slice(0, -1);
                    }
                }
                return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString('utf16le', i, buf.length - 1);
        }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) {
                var end = this.lastTotal - this.lastNeed;
                return r + this.lastChar.toString('utf16le', 0, end);
            }
            return r;
        }

        function base64Text(buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString('base64', i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
                this.lastChar[0] = buf[buf.length - 1];
            } else {
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString('base64', i, buf.length - n);
        }

        function base64End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
            return r;
        }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
            return buf.toString(this.encoding);
        }

        function simpleEnd(buf) {
            return buf && buf.length ? this.write(buf) : '';
        }
    }, {"safe-buffer": 140}],
    142: [function (require, module, exports) {
        module.exports = require('./readable').PassThrough

    }, {"./readable": 143}],
    143: [function (require, module, exports) {
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');

    }, {
        "./lib/_stream_duplex.js": 132,
        "./lib/_stream_passthrough.js": 133,
        "./lib/_stream_readable.js": 134,
        "./lib/_stream_transform.js": 135,
        "./lib/_stream_writable.js": 136
    }],
    144: [function (require, module, exports) {
        module.exports = require('./readable').Transform

    }, {"./readable": 143}],
    145: [function (require, module, exports) {
        module.exports = require('./lib/_stream_writable.js');

    }, {"./lib/_stream_writable.js": 136}],
    146: [function (require, module, exports) {
        'use strict'
        var Buffer = require('buffer').Buffer
        var inherits = require('inherits')
        var HashBase = require('hash-base')

        var ARRAY16 = new Array(16)

        var zl = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]

        var zr = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]

        var sl = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]

        var sr = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]

        var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
        var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

        function RIPEMD160() {
            HashBase.call(this, 64)

            // state
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0
        }

        inherits(RIPEMD160, HashBase)

        RIPEMD160.prototype._update = function () {
            var words = ARRAY16
            for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

            var al = this._a | 0
            var bl = this._b | 0
            var cl = this._c | 0
            var dl = this._d | 0
            var el = this._e | 0

            var ar = this._a | 0
            var br = this._b | 0
            var cr = this._c | 0
            var dr = this._d | 0
            var er = this._e | 0

            // computation
            for (var i = 0; i < 80; i += 1) {
                var tl
                var tr
                if (i < 16) {
                    tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
                    tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
                } else if (i < 32) {
                    tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
                    tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
                } else if (i < 48) {
                    tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
                    tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
                } else if (i < 64) {
                    tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
                    tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
                } else { // if (i<80) {
                    tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
                    tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
                }

                al = el
                el = dl
                dl = rotl(cl, 10)
                cl = bl
                bl = tl

                ar = er
                er = dr
                dr = rotl(cr, 10)
                cr = br
                br = tr
            }

            // update state
            var t = (this._b + cl + dr) | 0
            this._b = (this._c + dl + er) | 0
            this._c = (this._d + el + ar) | 0
            this._d = (this._e + al + br) | 0
            this._e = (this._a + bl + cr) | 0
            this._a = t
        }

        RIPEMD160.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80
            if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64)
                this._update()
                this._blockOffset = 0
            }

            this._block.fill(0, this._blockOffset, 56)
            this._block.writeUInt32LE(this._length[0], 56)
            this._block.writeUInt32LE(this._length[1], 60)
            this._update()

            // produce result
            var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
            buffer.writeInt32LE(this._a, 0)
            buffer.writeInt32LE(this._b, 4)
            buffer.writeInt32LE(this._c, 8)
            buffer.writeInt32LE(this._d, 12)
            buffer.writeInt32LE(this._e, 16)
            return buffer
        }

        function rotl(x, n) {
            return (x << n) | (x >>> (32 - n))
        }

        function fn1(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn2(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
        }

        function fn3(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn4(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
        }

        function fn5(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
        }

        module.exports = RIPEMD160

    }, {"buffer": 51, "hash-base": 88, "inherits": 103}],
    147: [function (require, module, exports) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer')
        var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
            for (var key in src) {
                dst[key] = src[key]
            }
        }

        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
        } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
                throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
                if (typeof encoding === 'string') {
                    buf.fill(fill, encoding)
                } else {
                    buf.fill(fill)
                }
            } else {
                buf.fill(0)
            }
            return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
        }

    }, {"buffer": 51}],
    148: [function (require, module, exports) {
        var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
        function Hash(blockSize, finalSize) {
            this._block = Buffer.alloc(blockSize)
            this._finalSize = finalSize
            this._blockSize = blockSize
            this._len = 0
        }

        Hash.prototype.update = function (data, enc) {
            if (typeof data === 'string') {
                enc = enc || 'utf8'
                data = Buffer.from(data, enc)
            }

            var block = this._block
            var blockSize = this._blockSize
            var length = data.length
            var accum = this._len

            for (var offset = 0; offset < length;) {
                var assigned = accum % blockSize
                var remainder = Math.min(length - offset, blockSize - assigned)

                for (var i = 0; i < remainder; i++) {
                    block[assigned + i] = data[offset + i]
                }

                accum += remainder
                offset += remainder

                if ((accum % blockSize) === 0) {
                    this._update(block)
                }
            }

            this._len += length
            return this
        }

        Hash.prototype.digest = function (enc) {
            var rem = this._len % this._blockSize

            this._block[rem] = 0x80

            // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
            // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
            this._block.fill(0, rem + 1)

            if (rem >= this._finalSize) {
                this._update(this._block)
                this._block.fill(0)
            }

            var bits = this._len * 8

            // uint32
            if (bits <= 0xffffffff) {
                this._block.writeUInt32BE(bits, this._blockSize - 4)

                // uint64
            } else {
                var lowBits = (bits & 0xffffffff) >>> 0
                var highBits = (bits - lowBits) / 0x100000000

                this._block.writeUInt32BE(highBits, this._blockSize - 8)
                this._block.writeUInt32BE(lowBits, this._blockSize - 4)
            }

            this._update(this._block)
            var hash = this._hash()

            return enc ? hash.toString(enc) : hash
        }

        Hash.prototype._update = function () {
            throw new Error('_update must be implemented by subclass')
        }

        module.exports = Hash

    }, {"safe-buffer": 147}],
    149: [function (require, module, exports) {
        var exports = module.exports = function SHA(algorithm) {
            algorithm = algorithm.toLowerCase()

            var Algorithm = exports[algorithm]
            if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

            return new Algorithm()
        }

        exports.sha = require('./sha')
        exports.sha1 = require('./sha1')
        exports.sha224 = require('./sha224')
        exports.sha256 = require('./sha256')
        exports.sha384 = require('./sha384')
        exports.sha512 = require('./sha512')

    }, {"./sha": 150, "./sha1": 151, "./sha224": 152, "./sha256": 153, "./sha384": 154, "./sha512": 155}],
    150: [function (require, module, exports) {
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha() {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha, Hash)

        Sha.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl5(num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30(num) {
            return (num << 30) | (num >>> 2)
        }

        function ft(s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha

    }, {"./hash": 148, "inherits": 103, "safe-buffer": 147}],
    151: [function (require, module, exports) {
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha1() {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha1, Hash)

        Sha1.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl1(num) {
            return (num << 1) | (num >>> 31)
        }

        function rotl5(num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30(num) {
            return (num << 30) | (num >>> 2)
        }

        function ft(s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha1.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha1.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha1

    }, {"./hash": 148, "inherits": 103, "safe-buffer": 147}],
    152: [function (require, module, exports) {
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Sha256 = require('./sha256')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(64)

        function Sha224() {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha224, Sha256)

        Sha224.prototype.init = function () {
            this._a = 0xc1059ed8
            this._b = 0x367cd507
            this._c = 0x3070dd17
            this._d = 0xf70e5939
            this._e = 0xffc00b31
            this._f = 0x68581511
            this._g = 0x64f98fa7
            this._h = 0xbefa4fa4

            return this
        }

        Sha224.prototype._hash = function () {
            var H = Buffer.allocUnsafe(28)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)

            return H
        }

        module.exports = Sha224

    }, {"./hash": 148, "./sha256": 153, "inherits": 103, "safe-buffer": 147}],
    153: [function (require, module, exports) {
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
            0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
            0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
            0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
            0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
            0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
            0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
            0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
            0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        ]

        var W = new Array(64)

        function Sha256() {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha256, Hash)

        Sha256.prototype.init = function () {
            this._a = 0x6a09e667
            this._b = 0xbb67ae85
            this._c = 0x3c6ef372
            this._d = 0xa54ff53a
            this._e = 0x510e527f
            this._f = 0x9b05688c
            this._g = 0x1f83d9ab
            this._h = 0x5be0cd19

            return this
        }

        function ch(x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj(x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0(x) {
            return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
        }

        function sigma1(x) {
            return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
        }

        function gamma0(x) {
            return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
        }

        function gamma1(x) {
            return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
        }

        Sha256.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0
            var f = this._f | 0
            var g = this._g | 0
            var h = this._h | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

            for (var j = 0; j < 64; ++j) {
                var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
                var T2 = (sigma0(a) + maj(a, b, c)) | 0

                h = g
                g = f
                f = e
                e = (d + T1) | 0
                d = c
                c = b
                b = a
                a = (T1 + T2) | 0
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
            this._f = (f + this._f) | 0
            this._g = (g + this._g) | 0
            this._h = (h + this._h) | 0
        }

        Sha256.prototype._hash = function () {
            var H = Buffer.allocUnsafe(32)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)
            H.writeInt32BE(this._h, 28)

            return H
        }

        module.exports = Sha256

    }, {"./hash": 148, "inherits": 103, "safe-buffer": 147}],
    154: [function (require, module, exports) {
        var inherits = require('inherits')
        var SHA512 = require('./sha512')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(160)

        function Sha384() {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha384, SHA512)

        Sha384.prototype.init = function () {
            this._ah = 0xcbbb9d5d
            this._bh = 0x629a292a
            this._ch = 0x9159015a
            this._dh = 0x152fecd8
            this._eh = 0x67332667
            this._fh = 0x8eb44a87
            this._gh = 0xdb0c2e0d
            this._hh = 0x47b5481d

            this._al = 0xc1059ed8
            this._bl = 0x367cd507
            this._cl = 0x3070dd17
            this._dl = 0xf70e5939
            this._el = 0xffc00b31
            this._fl = 0x68581511
            this._gl = 0x64f98fa7
            this._hl = 0xbefa4fa4

            return this
        }

        Sha384.prototype._hash = function () {
            var H = Buffer.allocUnsafe(48)

            function writeInt64BE(h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)

            return H
        }

        module.exports = Sha384

    }, {"./hash": 148, "./sha512": 155, "inherits": 103, "safe-buffer": 147}],
    155: [function (require, module, exports) {
        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
            0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
            0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
            0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
            0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
            0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
            0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
            0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
            0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
            0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
            0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
            0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
            0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
            0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
            0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
            0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
            0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ]

        var W = new Array(160)

        function Sha512() {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha512, Hash)

        Sha512.prototype.init = function () {
            this._ah = 0x6a09e667
            this._bh = 0xbb67ae85
            this._ch = 0x3c6ef372
            this._dh = 0xa54ff53a
            this._eh = 0x510e527f
            this._fh = 0x9b05688c
            this._gh = 0x1f83d9ab
            this._hh = 0x5be0cd19

            this._al = 0xf3bcc908
            this._bl = 0x84caa73b
            this._cl = 0xfe94f82b
            this._dl = 0x5f1d36f1
            this._el = 0xade682d1
            this._fl = 0x2b3e6c1f
            this._gl = 0xfb41bd6b
            this._hl = 0x137e2179

            return this
        }

        function Ch(x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj(x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0(x, xl) {
            return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
        }

        function sigma1(x, xl) {
            return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
        }

        function Gamma0(x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
        }

        function Gamma0l(x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
        }

        function Gamma1(x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
        }

        function Gamma1l(x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
        }

        function getCarry(a, b) {
            return (a >>> 0) < (b >>> 0) ? 1 : 0
        }

        Sha512.prototype._update = function (M) {
            var W = this._w

            var ah = this._ah | 0
            var bh = this._bh | 0
            var ch = this._ch | 0
            var dh = this._dh | 0
            var eh = this._eh | 0
            var fh = this._fh | 0
            var gh = this._gh | 0
            var hh = this._hh | 0

            var al = this._al | 0
            var bl = this._bl | 0
            var cl = this._cl | 0
            var dl = this._dl | 0
            var el = this._el | 0
            var fl = this._fl | 0
            var gl = this._gl | 0
            var hl = this._hl | 0

            for (var i = 0; i < 32; i += 2) {
                W[i] = M.readInt32BE(i * 4)
                W[i + 1] = M.readInt32BE(i * 4 + 4)
            }
            for (; i < 160; i += 2) {
                var xh = W[i - 15 * 2]
                var xl = W[i - 15 * 2 + 1]
                var gamma0 = Gamma0(xh, xl)
                var gamma0l = Gamma0l(xl, xh)

                xh = W[i - 2 * 2]
                xl = W[i - 2 * 2 + 1]
                var gamma1 = Gamma1(xh, xl)
                var gamma1l = Gamma1l(xl, xh)

                // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                var Wi7h = W[i - 7 * 2]
                var Wi7l = W[i - 7 * 2 + 1]

                var Wi16h = W[i - 16 * 2]
                var Wi16l = W[i - 16 * 2 + 1]

                var Wil = (gamma0l + Wi7l) | 0
                var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
                Wil = (Wil + gamma1l) | 0
                Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
                Wil = (Wil + Wi16l) | 0
                Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

                W[i] = Wih
                W[i + 1] = Wil
            }

            for (var j = 0; j < 160; j += 2) {
                Wih = W[j]
                Wil = W[j + 1]

                var majh = maj(ah, bh, ch)
                var majl = maj(al, bl, cl)

                var sigma0h = sigma0(ah, al)
                var sigma0l = sigma0(al, ah)
                var sigma1h = sigma1(eh, el)
                var sigma1l = sigma1(el, eh)

                // t1 = h + sigma1 + ch + K[j] + W[j]
                var Kih = K[j]
                var Kil = K[j + 1]

                var chh = Ch(eh, fh, gh)
                var chl = Ch(el, fl, gl)

                var t1l = (hl + sigma1l) | 0
                var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
                t1l = (t1l + chl) | 0
                t1h = (t1h + chh + getCarry(t1l, chl)) | 0
                t1l = (t1l + Kil) | 0
                t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
                t1l = (t1l + Wil) | 0
                t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

                // t2 = sigma0 + maj
                var t2l = (sigma0l + majl) | 0
                var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

                hh = gh
                hl = gl
                gh = fh
                gl = fl
                fh = eh
                fl = el
                el = (dl + t1l) | 0
                eh = (dh + t1h + getCarry(el, dl)) | 0
                dh = ch
                dl = cl
                ch = bh
                cl = bl
                bh = ah
                bl = al
                al = (t1l + t2l) | 0
                ah = (t1h + t2h + getCarry(al, t1l)) | 0
            }

            this._al = (this._al + al) | 0
            this._bl = (this._bl + bl) | 0
            this._cl = (this._cl + cl) | 0
            this._dl = (this._dl + dl) | 0
            this._el = (this._el + el) | 0
            this._fl = (this._fl + fl) | 0
            this._gl = (this._gl + gl) | 0
            this._hl = (this._hl + hl) | 0

            this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
            this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
            this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
            this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
            this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
            this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
            this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
            this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
        }

        Sha512.prototype._hash = function () {
            var H = Buffer.allocUnsafe(64)

            function writeInt64BE(h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)
            writeInt64BE(this._gh, this._gl, 48)
            writeInt64BE(this._hh, this._hl, 56)

            return H
        }

        module.exports = Sha512

    }, {"./hash": 148, "inherits": 103, "safe-buffer": 147}],
    156: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = require('events').EventEmitter;
        var inherits = require('inherits');

        inherits(Stream, EE);
        Stream.Readable = require('readable-stream/readable.js');
        Stream.Writable = require('readable-stream/writable.js');
        Stream.Duplex = require('readable-stream/duplex.js');
        Stream.Transform = require('readable-stream/transform.js');
        Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
        Stream.Stream = Stream;


// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

        function Stream() {
            EE.call(this);
        }

        Stream.prototype.pipe = function (dest, options) {
            var source = this;

            function ondata(chunk) {
                if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                        source.pause();
                    }
                }
            }

            source.on('data', ondata);

            function ondrain() {
                if (source.readable && source.resume) {
                    source.resume();
                }
            }

            dest.on('drain', ondrain);

            // If the 'end' option is not supplied, dest.end() will be called when
            // source gets the 'end' or 'close' events.  Only dest.end() once.
            if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
            }

            var didOnEnd = false;

            function onend() {
                if (didOnEnd) return;
                didOnEnd = true;

                dest.end();
            }


            function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;

                if (typeof dest.destroy === 'function') dest.destroy();
            }

            // don't leave dangling pipes when there are errors.
            function onerror(er) {
                cleanup();
                if (EE.listenerCount(this, 'error') === 0) {
                    throw er; // Unhandled stream error in pipe.
                }
            }

            source.on('error', onerror);
            dest.on('error', onerror);

            // remove all the event listeners that were added.
            function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);

                source.removeListener('end', onend);
                source.removeListener('close', onclose);

                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);

                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);

                dest.removeListener('close', cleanup);
            }

            source.on('end', cleanup);
            source.on('close', cleanup);

            dest.on('close', cleanup);

            dest.emit('pipe', source);

            // Allow for unix-like usage: A.pipe(B).pipe(C)
            return dest;
        };

    }, {
        "events": 86,
        "inherits": 103,
        "readable-stream/duplex.js": 131,
        "readable-stream/passthrough.js": 142,
        "readable-stream/readable.js": 143,
        "readable-stream/transform.js": 144,
        "readable-stream/writable.js": 145
    }],
    157: [function (require, module, exports) {
        arguments[4][141][0].apply(exports, arguments)
    }, {"dup": 141, "safe-buffer": 147}],
    158: [function (require, module, exports) {
        (function (setImmediate, clearImmediate) {
            var nextTick = require('process/browser.js').nextTick;
            var apply = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;

// DOM APIs, for completeness

            exports.setTimeout = function () {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function () {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function (timeout) {
                    timeout.close();
                };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }

            Timeout.prototype.unref = Timeout.prototype.ref = function () {
            };
            Timeout.prototype.close = function () {
                this._clearFn.call(window, this._id);
            };

// Does not start the time, just sets up the members needed.
            exports.enroll = function (item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function (item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function (item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

// That's not how node.js implements it but the exposed api is the same.
            exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
                var id = nextImmediateId++;
                var args = arguments.length < 2 ? false : slice.call(arguments, 1);

                immediateIds[id] = true;

                nextTick(function onNextTick() {
                    if (immediateIds[id]) {
                        // fn.call() is faster so we optimize for the common use-case
                        // @see http://jsperf.com/call-apply-segu
                        if (args) {
                            fn.apply(null, args);
                        } else {
                            fn.call(null);
                        }
                        // Prevent ids from leaking
                        exports.clearImmediate(id);
                    }
                });

                return id;
            };

            exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
                delete immediateIds[id];
            };
        }).call(this, require("timers").setImmediate, require("timers").clearImmediate)
    }, {"process/browser.js": 122, "timers": 158}],
    159: [function (require, module, exports) {
        (function (global) {

            /**
             * Module exports.
             */

            module.exports = deprecate;

            /**
             * Mark that a method should not be used.
             * Returns a modified function which warns once by default.
             *
             * If `localStorage.noDeprecation = true` is set, then it is a no-op.
             *
             * If `localStorage.throwDeprecation = true` is set, then deprecated functions
             * will throw an Error when invoked.
             *
             * If `localStorage.traceDeprecation = true` is set, then deprecated functions
             * will invoke `console.trace()` instead of `console.error()`.
             *
             * @param {Function} fn - the function to deprecate
             * @param {String} msg - the string to print to the console when `fn` is invoked
             * @returns {Function} a new "deprecated" version of `fn`
             * @api public
             */

            function deprecate(fn, msg) {
                if (config('noDeprecation')) {
                    return fn;
                }

                var warned = false;

                function deprecated() {
                    if (!warned) {
                        if (config('throwDeprecation')) {
                            throw new Error(msg);
                        } else if (config('traceDeprecation')) {
                            console.trace(msg);
                        } else {
                            console.warn(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }

                return deprecated;
            }

            /**
             * Checks `localStorage` for boolean values for the given `name`.
             *
             * @param {String} name
             * @returns {Boolean}
             * @api private
             */

            function config(name) {
                // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                try {
                    if (!global.localStorage) return false;
                } catch (_) {
                    return false;
                }
                var val = global.localStorage[name];
                if (null == val) return false;
                return String(val).toLowerCase() === 'true';
            }

        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    160: [function (require, module, exports) {
        var indexOf = function (xs, item) {
            if (xs.indexOf) return xs.indexOf(item);
            else for (var i = 0; i < xs.length; i++) {
                if (xs[i] === item) return i;
            }
            return -1;
        };
        var Object_keys = function (obj) {
            if (Object.keys) return Object.keys(obj)
            else {
                var res = [];
                for (var key in obj) res.push(key)
                return res;
            }
        };

        var forEach = function (xs, fn) {
            if (xs.forEach) return xs.forEach(fn)
            else for (var i = 0; i < xs.length; i++) {
                fn(xs[i], i, xs);
            }
        };

        var defineProp = (function () {
            try {
                Object.defineProperty({}, '_', {});
                return function (obj, name, value) {
                    Object.defineProperty(obj, name, {
                        writable: true,
                        enumerable: false,
                        configurable: true,
                        value: value
                    })
                };
            } catch (e) {
                return function (obj, name, value) {
                    obj[name] = value;
                };
            }
        }());

        var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
            'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
            'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
            'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
            'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

        function Context() {
        }

        Context.prototype = {};

        var Script = exports.Script = function NodeScript(code) {
            if (!(this instanceof Script)) return new Script(code);
            this.code = code;
        };

        Script.prototype.runInContext = function (context) {
            if (!(context instanceof Context)) {
                throw new TypeError("needs a 'context' argument.");
            }

            var iframe = document.createElement('iframe');
            if (!iframe.style) iframe.style = {};
            iframe.style.display = 'none';

            document.body.appendChild(iframe);

            var win = iframe.contentWindow;
            var wEval = win.eval, wExecScript = win.execScript;

            if (!wEval && wExecScript) {
                // win.eval() magically appears when this is called in IE:
                wExecScript.call(win, 'null');
                wEval = win.eval;
            }

            forEach(Object_keys(context), function (key) {
                win[key] = context[key];
            });
            forEach(globals, function (key) {
                if (context[key]) {
                    win[key] = context[key];
                }
            });

            var winKeys = Object_keys(win);

            var res = wEval.call(win, this.code);

            forEach(Object_keys(win), function (key) {
                // Avoid copying circular objects like `top` and `window` by only
                // updating existing context properties or new properties in the `win`
                // that was only introduced after the eval.
                if (key in context || indexOf(winKeys, key) === -1) {
                    context[key] = win[key];
                }
            });

            forEach(globals, function (key) {
                if (!(key in context)) {
                    defineProp(context, key, win[key]);
                }
            });

            document.body.removeChild(iframe);

            return res;
        };

        Script.prototype.runInThisContext = function () {
            return eval(this.code); // maybe...
        };

        Script.prototype.runInNewContext = function (context) {
            var ctx = Script.createContext(context);
            var res = this.runInContext(ctx);

            if (context) {
                forEach(Object_keys(ctx), function (key) {
                    context[key] = ctx[key];
                });
            }

            return res;
        };

        forEach(Object_keys(Script.prototype), function (name) {
            exports[name] = Script[name] = function (code) {
                var s = Script(code);
                return s[name].apply(s, [].slice.call(arguments, 1));
            };
        });

        exports.isContext = function (context) {
            return context instanceof Context;
        };

        exports.createScript = function (code) {
            return exports.Script(code);
        };

        exports.createContext = Script.createContext = function (context) {
            var copy = new Context();
            if (typeof context === 'object') {
                forEach(Object_keys(context), function (key) {
                    copy[key] = context[key];
                });
            }
            return copy;
        };

    }, {}],
    161: [function (require, module, exports) {
        window.RECHECK = require('./index.js');

    }, {"./index.js": 162}],
    162: [function (require, module, exports) {
        (function (Buffer) {
            const {box, secretbox, randomBytes} = require('tweetnacl');
            const {decodeUTF8, encodeUTF8, encodeBase64, decodeBase64} = require('tweetnacl-util');
            const diceware = require('diceware');
            const session25519 = require('session25519');
            const keccak256 = require('keccak256');
            const bs58check = require('bs58check');
            const axios = require('axios');
            const nacl = require('tweetnacl');
            const ethCrypto = require('eth-crypto');
            const stringify = require('json-stable-stringify');

            let debug = true;

            let baseUrl = 'http://localhost:3000';
            let token = null;
            let network = "ae"; //ae,eth

            const defaultRequestId = 'ReCheck';
            let isWorkingExecReEncr = false;

            let browserKeyPair = undefined; // represents the browser temporary keypair while polling

            const newNonce = () => randomBytes(box.nonceLength);

            const generateKey = () => encodeBase64(randomBytes(secretbox.keyLength));

            const log = (message, params) => {
                if (debug) {
                    console.log(`[${message}]`, params ? params : '');
                }
            };

            function getRequestHash(requestBodyOrUrl) {
                let requestString = '';

                if (typeof requestBodyOrUrl === "object") {
                    let resultObj = JSON.parse(JSON.stringify(requestBodyOrUrl));

                    if (!isNullAny(resultObj.payload)) {
                        resultObj.payload = '';
                    }

                    if (!isNullAny(resultObj.requestBodyHashSignature)) {
                        resultObj.requestBodyHashSignature = 'NULL';
                    }

                    requestString = stringify(resultObj).replace(/\s/g, "");
                } else {
                    requestString = requestBodyOrUrl.replace(/([&|?]requestBodyHashSignature=)(.*?)([&]|$)/g, '$1NULL$3');
                    requestString = getUrlPathname(requestString);
                }

                return getHash(requestString);

                function getUrlPathname(url) {
                    let urlSplit = url.split('/');

                    if (urlSplit.length < 4) {
                        throw new Error(`Can not get url pathname from ${url}`);
                    }

                    let host = `${urlSplit[0]}//${urlSplit[2]}`;

                    return url.replace(host, '');
                }
            }

            function encodeBase58Check(input) {
                return bs58check.encode(Buffer.from(input));
            }

            function decodeBase58Check(input) {
                return bs58check.decode(input);
            }

            function hexStringToByte(hexString) {
                if (isNullAny(hexString)) {
                    return new Uint8Array();
                }

                let result = [];
                for (let i = 0; i < hexString.length; i += 2) {
                    result.push(parseInt(hexString.substr(i, 2), 16));
                }

                return new Uint8Array(result);
            }

            async function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            async function encryptDataToPublicKeyWithKeyPair(data, dstPublicEncKey, srcAkPair) {
                if (isNullAny(srcAkPair)) {
                    srcAkPair = await newKeyPair(null); // create random seed
                }

                let destPublicEncKeyArray = new Uint8Array(decodeBase58Check(dstPublicEncKey));
                let rawSrcAkPair = akPairToRaw(srcAkPair);
                let dstBox = box.before(destPublicEncKeyArray, rawSrcAkPair.secretEncKey);
                let encryptedData = encryptData(dstBox, data);

                return {
                    payload: encryptedData,
                    dstPublicEncKey: dstPublicEncKey,
                    srcPublicEncKey: srcAkPair.publicEncKey
                };//encrypted


                function akPairToRaw(akPair) {
                    return {
                        secretEncKey: hexStringToByte(akPair.secretEncKey),
                        publicEncKey: new Uint8Array(decodeBase58Check(akPair.publicEncKey)),
                    }
                }

                function encryptData(secretOrSharedKey, message, key) {
                    if (typeof message !== "string") {
                        throw new Error("only string allowed for message for encryption");
                    }

                    const nonce = newNonce();
                    const messageUint8 = decodeUTF8(message);

                    const encrypted = key
                        ? box(messageUint8, nonce, new Uint8Array(key), new Uint8Array(secretOrSharedKey))
                        : box.after(messageUint8, nonce, new Uint8Array(secretOrSharedKey));

                    const fullMessage = new Uint8Array(nonce.length + encrypted.length);
                    fullMessage.set(nonce);
                    fullMessage.set(encrypted, nonce.length);

                    return encodeBase64(fullMessage);//base64FullMessage
                }
            }

            function decryptDataWithPublicAndPrivateKey(payload, srcPublicEncKey, secretKey) {
                let srcPublicEncKeyArray = new Uint8Array(decodeBase58Check(srcPublicEncKey));
                let secretKeyArray = hexStringToByte(secretKey);
                let decryptedBox = box.before(srcPublicEncKeyArray, secretKeyArray);

                return decryptData(decryptedBox, payload);//decrypted


                function decryptData(secretOrSharedKey, messageWithNonce, key) {
                    const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);
                    const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);
                    const message = messageWithNonceAsUint8Array.slice(
                        box.nonceLength,
                        messageWithNonce.length
                    );

                    const decrypted = key
                        ? box.open(message, nonce, new Uint8Array(key), new Uint8Array(secretOrSharedKey))
                        : box.open.after(message, nonce, new Uint8Array(secretOrSharedKey));

                    if (isNullAny(decrypted)) {
                        throw new Error('Decryption failed.');
                    }

                    return encodeUTF8(decrypted);//base64DecryptedMessage
                }
            }

            function getEndpointUrl(action, appendix) {
                let url = `${baseUrl}/${action}?noapi=1`;

                if (!isNullAny(token)) {
                    url = `${baseUrl}/${action}?api=1&token=${token}`;
                }

                if (!isNullAny(appendix)) {
                    url = url + appendix;
                }

                return url;
            }

            async function processExternalId(dataIdInput, userId, isExternal) {
                if (!isExternal) {
                    return dataIdInput;
                }

                let isArray = Array.isArray(dataIdInput);
                if (!isArray) {
                    dataIdInput = [dataIdInput];
                }

                for (let i = 0; i < dataIdInput.length; i++) {
                    dataIdInput[i] = await convertExternalId(dataIdInput[i], userId);
                }

                if (isArray) {
                    return dataIdInput;
                } else {
                    return dataIdInput[0];
                }
            }

            async function processTxPolling(dataId, userId, matchTxPropName, matchTxPropValue) {

                let timeStep = 1000;
                let currentTime = 0;
                let maxTime = 20000;

                while (currentTime < maxTime) {
                    await sleep(timeStep);

                    let txList = await checkHash(dataId, userId);

                    if (Array.isArray(txList)) {
                        for (let i = 0; i < txList.length; i++) {
                            log(txList[i].txStatus);

                            if (txList[i][matchTxPropName] !== matchTxPropValue) {
                                continue;
                            }

                            let currentTxStatus = txList[i].txStatus;
                            if (currentTxStatus === 'complete') {
                                return txList[i].txReceipt;
                            }

                            if (currentTxStatus.includes('error')) {
                                return 'Receipt Unavailable. Transaction processing failed.';
                            }
                        }
                    }

                    currentTime += timeStep;
                }

                return false;
            }

            function getTrailHash(dataChainId, senderChainId, requestType, recipientChainId = senderChainId, trailExtraArgs = null) {
                if (isNullAny(trailExtraArgs)) {
                    trailExtraArgs = "";
                } else {
                    trailExtraArgs = JSON.stringify(trailExtraArgs);
                }

                return getHash(dataChainId + senderChainId + requestType + recipientChainId + trailExtraArgs);
            }

////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////// Application layer functions (higher level)
////////////////////////////////////////////////////////////

            (function setOrigin() {
                if (typeof window !== 'undefined'
                    && window
                    && window.location
                    && window.location.origin) {
                    init(window.location.origin);
                }
            }());

            function getHash(string) {
                return `0x${keccak256(string).toString('hex')}`;
            }

            function isNullAny(...args) {
                for (let i = 0; i < args.length; i++) {
                    let current = args[i];

                    if (current == null //element == null covers element === undefined
                        || (current.hasOwnProperty('length') && current.length === 0) // has length and it's zero
                        || (current.constructor === Object && Object.keys(current).length === 0) // is an Object and has no keys
                        || current.toString().toLowerCase() === 'null'
                        || current.toString().toLowerCase() === 'undefined'
                        || current.toString().trim() === "") {

                        return true;
                    }
                }
                return false;
            }

            const setDebugMode = (debugFlag) => {
                debug = debugFlag;
            };

            function init(sourceBaseUrl, sourceNetwork = network, sourceToken = token) {
                baseUrl = sourceBaseUrl;

                if (!isNullAny(sourceToken)) {
                    token = sourceToken;
                }

                if (!isNullAny(sourceNetwork)) {
                    network = sourceNetwork;
                }
            }

            async function getServerInfo() {
                let getUrl = getEndpointUrl('login/check');

                let serverResponse = (await axios.get(getUrl)).data;

                if (isNullAny(serverResponse)) {
                    throw new Error('Unable to connect to server.');
                }

                return {
                    apiVersion: serverResponse.apiVersion,
                    blockchain: serverResponse.blockchain,
                    contractAddress: serverResponse.contractAddress
                };
            }

            async function login(keyPair) {
                let getChallengeUrl = getEndpointUrl('login/challenge');

                let challengeResponse = (await axios.get(getChallengeUrl)).data;

                if (isNullAny(challengeResponse.data.challenge)) {
                    throw new Error('Unable to retrieve login challenge.');
                }

                return await loginWithChallenge(challengeResponse.data.challenge, keyPair);
            }

            async function loginWithChallenge(challenge, keyPair) {
                let payload = {
                    action: 'login',
                    pubKey: keyPair.publicKey,
                    pubEncKey: keyPair.publicEncKey,
                    firebase: 'notoken',
                    challenge: challenge,
                    challengeSignature: signMessage(challenge, keyPair.secretKey),//signatureB58
                    rtnToken: 'notoken'
                };

                let loginUrl = getEndpointUrl('login/mobile');

                let loginPostResult = (await axios.post(loginUrl, payload)).data;

                if (isNullAny(loginPostResult.data.rtnToken)) {
                    throw new Error('Unable to retrieve API token.');
                }

                token = loginPostResult.data.rtnToken;
                return token;
            }

            async function newKeyPair(passPhrase) {

                let key1 = '';
                let key2 = '';

                if (!isNullAny(passPhrase)) {
                    const words = passPhrase.split(' ');

                    if (words.length !== 12) {
                        throw('Invalid passphrase. Must be 12 words long.');
                    }

                    key1 = words.slice(0, 6).join(' ');//0-5
                    key2 = words.slice(6, 12).join(' ');//6-11
                } else {
                    key1 = diceware(6);
                    key2 = diceware(6);
                }

                let phrase = `${key1} ${key2}`;

                let keys = await _session25519(key1, key2);

                let publicEncBufferEncoded = encodeBase58Check(Buffer.from(keys.publicKey));
                let secretEncBufferHex = Buffer.from(keys.secretKey).toString('hex');  // 32-bytes private key
                let secretSignBuffer;
                switch (network) {
                    case"ae":
                        let publicSignBuffer = Buffer.from(keys.publicSignKey);
                        secretSignBuffer = Buffer.from(keys.secretSignKey).toString('hex'); // 64-bytes private key
                        let address = `ak_${encodeBase58Check(publicSignBuffer)}`;

                        return {
                            address: address,
                            publicKey: address,
                            secretKey: secretSignBuffer,
                            publicEncKey: publicEncBufferEncoded,
                            secretEncKey: secretEncBufferHex,
                            phrase: phrase
                        };

                    case  "eth":
                        secretSignBuffer = Buffer.from(keys.secretKey); // 32-bytes private key
                        let secretSignKey = `0x${secretSignBuffer.toString('hex')}`;
                        let publicSignKey = ethCrypto.publicKeyByPrivateKey(secretSignKey);
                        let publicAddress = ethCrypto.publicKey.toAddress(publicSignKey);

                        return {
                            address: publicAddress,
                            publicKey: publicSignKey,
                            secretKey: secretSignKey,
                            publicEncKey: publicEncBufferEncoded,
                            secretEncKey: secretEncBufferHex,
                            phrase: phrase
                        };

                    default:
                        log("Current selected network: ", network);
                        throw new Error("Can not find selected network");
                }

                async function _session25519(key1, key2) {
                    return new Promise(resolve => {
                        session25519(key1, key2, (err, result) => resolve(result));
                    });
                }
            }

            async function store(fileObj, userChainId, userChainIdPubKey, externalId = null, txPolling = false, trailExtraArgs = null) {

                log('Browser encrypts to receiver', fileObj, userChainId);

                let fileUploadData = await getFileUploadData(fileObj, userChainId, userChainIdPubKey, trailExtraArgs);
                log('Browser submits encrypted data to API', fileUploadData);

                if (!isNullAny(externalId)) {
                    await saveExternalId(externalId, userChainId, fileUploadData.encryption.dataOriginalHash);
                }

                let submitUrl = getEndpointUrl('data/create');
                log('store post', submitUrl);

                let submitRes = (await axios.post(submitUrl, fileUploadData)).data;
                log('Server returns result', submitRes.data);

                if (submitRes.status === "ERROR") {
                    throw submitRes.data;
                }

                if (!txPolling) {
                    return submitRes.data;
                }

                return await processTxPolling(getHash(fileObj.payload), userChainId, 'requestType', 'upload');

                async function getFileUploadData(fileObj, userChainId, userChainIdPubKey, trailExtraArgs = null) {
                    let fileContents = fileObj.payload;
                    let encryptedFile = await encryptFileToPublicKey(fileContents, userChainIdPubKey);
                    let syncPassHash = getHash(encryptedFile.credentials.syncPass);
                    let dataOriginalHash = getHash(fileContents);
                    let dataChainId = getHash(dataOriginalHash);
                    let requestType = 'upload';

                    let trailHash = getTrailHash(dataChainId, userChainId, requestType, userChainId, trailExtraArgs);

                    let fileUploadData = {
                        userId: userChainId,
                        dataId: dataChainId,
                        requestId: defaultRequestId,
                        requestType: requestType,
                        requestBodyHashSignature: 'NULL',
                        trailHash: trailHash,
                        trailHashSignatureHash: getHash(trailHash),//TODO signature getHash(signMessage(trailHash, keyPair.secretKey))
                        dataName: fileObj.dataName,
                        dataExtension: fileObj.dataExtension,
                        category: fileObj.category,
                        keywords: fileObj.keywords,
                        payload: encryptedFile.payload,
                        encryption: {
                            dataOriginalHash: dataOriginalHash,
                            salt: encryptedFile.credentials.salt,
                            passHash: syncPassHash,
                            encryptedPassA: encryptedFile.credentials.encryptedPass,
                            pubKeyA: encryptedFile.credentials.encryptingPubKey
                        }
                    };

                    //TODO signature signMessage(getRequestHash(fileUploadData), keyPair.secretKey)
                    fileUploadData.requestBodyHashSignature = getRequestHash(fileUploadData);

                    return fileUploadData;


                    async function encryptFileToPublicKey(fileData, dstPublicKey) {
                        let fileKey = generateKey();
                        let saltKey = generateKey();
                        log('fileKey', fileKey);
                        log('saltKey', saltKey);

                        let symKey = encodeBase64(keccak256(fileKey + saltKey));
                        log('symKey', symKey);
                        log('fileData', fileData);

                        let encryptedFile = encryptDataWithSymmetricKey(fileData, symKey);
                        let encryptedPass = await encryptDataToPublicKeyWithKeyPair(fileKey, dstPublicKey);

                        return {
                            payload: encryptedFile,
                            credentials: {
                                syncPass: fileKey,
                                salt: saltKey,
                                encryptedPass: encryptedPass.payload,
                                encryptingPubKey: encryptedPass.srcPublicEncKey
                            }
                        };


                        function encryptDataWithSymmetricKey(data, key) {
                            const keyUint8Array = decodeBase64(key);

                            const nonce = newNonce();
                            log('data', data);
                            const messageUint8 = decodeUTF8(data);
                            const box = secretbox(messageUint8, nonce, keyUint8Array);

                            const fullMessage = new Uint8Array(nonce.length + box.length);
                            fullMessage.set(nonce);
                            fullMessage.set(box, nonce.length);

                            return encodeBase64(fullMessage);//base64FullMessage
                        }
                    }
                }
            }

            async function open(dataChainId, userChainId, keyPair, isExternal = false, txPolling = false, trailExtraArgs = null) {

                dataChainId = await processExternalId(dataChainId, userChainId, isExternal);

                let credentialsResponse = await prepare(dataChainId, userChainId);
                let scanResult = await reEncrypt(userChainId, dataChainId, keyPair, trailExtraArgs);

                if (isNullAny(scanResult.userId)) {
                    throw new Error('Unable to decrypt file');
                }

                //polling server for pass to decrypt message
                return pollOpen(credentialsResponse, keyPair.publicEncKey, txPolling, trailExtraArgs);
            }

            async function validate(fileContents, userId, dataId, isExternal = false, txPolling = false, trailExtraArgs = null) {

                dataId = await processExternalId(dataId, userId, isExternal);

                let requestType = 'verify';

                let trailHash = getTrailHash(dataId, userId, requestType, userId, trailExtraArgs);

                let fileHash = getHash(fileContents);

                let postObj = {
                    userId: userId,
                    dataId: dataId,
                    requestId: defaultRequestId,
                    requestType: requestType,
                    requestBodyHashSignature: 'NULL',
                    trailHash: trailHash,
                    trailHashSignatureHash: getHash(trailHash),//TODO signature getHash(signMessage(trailHash, keyPair.secretKey))
                    encryption: {
                        decrDataOrigHash: fileHash
                    }
                };

                //TODO signature signMessage(getRequestHash(postObj), keyPair.secretKey)
                postObj.requestBodyHashSignature = getRequestHash(postObj);

                let validateUrl = getEndpointUrl('credentials/validate');

                let result = (await axios.post(validateUrl, postObj)).data;

                if (!txPolling) {
                    return result.data;
                }

                return await processTxPolling(dataId, userId, 'requestType', 'verify');
            }

            async function share(dataId, recipientId, keyPair, isExternal = false, txPolling = false, trailExtraArgs = null) {

                let userId = keyPair.address;

                dataId = await processExternalId(dataId, userId, isExternal);
                let getUrl = getEndpointUrl('share/credentials', `&dataId=${dataId}&recipientId=${recipientId}`);
                log('shareencrypted get request', getUrl);

                let getShareResponse = (await axios.get(getUrl)).data;

                if (getShareResponse.status === "ERROR") {
                    throw getShareResponse.data;
                }

                if (getShareResponse.data.dataId !== dataId) {
                    throw new Error('Unable to create share. Data id mismatch.');
                }

                recipientId = getShareResponse.data.recipientId;
                dataId = getShareResponse.data.dataId;
                let requestType = 'share';

                let trailHash = getTrailHash(dataId, userId, requestType, recipientId, trailExtraArgs);

                let encryptedPassA = getShareResponse.data.encryption.encryptedPassA;
                let pubKeyA = getShareResponse.data.encryption.pubKeyA;
                let decryptedPassword = decryptDataWithPublicAndPrivateKey(encryptedPassA, pubKeyA, keyPair.secretEncKey);
                let syncPassHash = getHash(decryptedPassword);

                let recipientEncrKey = getShareResponse.data.encryption.recipientEncrKey;
                let reEncryptedPasswordInfo = await encryptDataToPublicKeyWithKeyPair(decryptedPassword, recipientEncrKey, keyPair);

                let createShare = {
                    userId: userId,
                    dataId: dataId,
                    requestId: defaultRequestId,
                    requestType: requestType,
                    requestBodyHashSignature: 'NULL',
                    trailHash: trailHash,
                    trailHashSignatureHash: getHash(signMessage(trailHash, keyPair.secretKey)),
                    recipientId: recipientId,
                    encryption: {
                        senderEncrKey: keyPair.publicEncKey,
                        syncPassHash: syncPassHash,
                        encryptedPassA: reEncryptedPasswordInfo.payload
                    }
                };

                createShare.requestBodyHashSignature = signMessage(getRequestHash(createShare), keyPair.secretKey);

                let postUrl = getEndpointUrl('share/create');

                let serverPostResponse = (await axios.post(postUrl, createShare)).data;
                log('Share POST to server encryption info', createShare);
                log('Server responds to user device POST', serverPostResponse.data);

                if (serverPostResponse.status === "ERROR") {
                    throw serverPostResponse.data;
                }

                if (!txPolling) {
                    return serverPostResponse.data;
                }

                return await processTxPolling(dataId, userId, 'requestType', 'share');
            }

            async function sign(dataId, recipientId, keyPair, isExternal = false, txPolling = false, trailExtraArgs = null) {
                let userId = keyPair.address;

                dataId = await processExternalId(dataId, userId, isExternal);

                let requestType = 'sign';

                let trailHash = getTrailHash(dataId, userId, requestType, recipientId, trailExtraArgs);

                let userSecretKey = keyPair.secretKey;

                let signObj = {
                    dataId: dataId,
                    userId: keyPair.address,
                    requestId: defaultRequestId,
                    recipientId: recipientId,
                    requestType: requestType,
                    requestBodyHashSignature: 'NULL',
                    trailHash: trailHash,
                    trailHashSignatureHash: getHash(signMessage(trailHash, userSecretKey)),
                };

                signObj.requestBodyHashSignature = signMessage(getRequestHash(signObj), userSecretKey);

                let postUrl = getEndpointUrl('signature/create');
                log('dataSign, ', signObj);

                let serverPostResponse = (await axios.post(postUrl, signObj)).data;
                log('Server responds to data sign POST', serverPostResponse.data);

                if (!txPolling) {
                    return serverPostResponse.data;
                }

                return await processTxPolling(dataId, userId, 'requestType', 'sign');
            }

            async function prepare(dataChainId, userChainId, isExternal = false) {

                dataChainId = await processExternalId(dataChainId, userChainId, isExternal);

                if (isNullAny(browserKeyPair)) {
                    browserKeyPair = await newKeyPair(null);
                }
                log('Browser generates keypairB', browserKeyPair);

                let browserPubKeySubmit = {
                    dataId: dataChainId,
                    userId: userChainId,
                    encryption: {
                        pubKeyB: browserKeyPair.publicEncKey
                    }
                };
                log('submit pubkey payload', browserPubKeySubmit);

                let browserPubKeySubmitUrl = getEndpointUrl('credentials/create/pubkeyb');
                log('browser poll post submit pubKeyB', browserPubKeySubmitUrl);

                let browserPubKeySubmitRes = (await axios.post(browserPubKeySubmitUrl, browserPubKeySubmit)).data;
                log('browser poll post result', browserPubKeySubmitRes.data);

                if (browserPubKeySubmitRes.status === 'ERROR') {
                    throw browserPubKeySubmitRes.data;
                }

                return browserPubKeySubmitRes.data;
            }

            async function reEncrypt(userId, dataChainId, keyPair, isExternal = false, trailExtraArgs = null) {

                dataChainId = await processExternalId(dataChainId, userId, isExternal);

                log('Browser renders the dataId as qr code', dataChainId);
                log('User device scans the qr', dataChainId);
                log('User device requests decryption info from server', dataChainId, userId);

                let requestType = 'download';
                let trailHash = getTrailHash(dataChainId, userId, requestType, userId, trailExtraArgs);

                let trailHashSignatureHash = getHash(signMessage(trailHash, keyPair.secretKey));

                let query = `&userId=${userId}&dataId=${dataChainId}&requestId=${defaultRequestId}&requestType=${requestType}&requestBodyHashSignature=NULL&trailHash=${trailHash}&trailHashSignatureHash=${trailHashSignatureHash}`;
                let getUrl = getEndpointUrl('credentials/info', query);
                getUrl = getUrl.replace('NULL', signMessage(getRequestHash(getUrl), keyPair.secretKey));
                log('decrypt get request', getUrl);

                let serverEncryptionInfo = (await axios.get(getUrl)).data;
                let serverEncryptionData = serverEncryptionInfo.data;
                log('Server responds to device with encryption info', serverEncryptionData);

                let dataEncryption = serverEncryptionData.encryption;
                if (isNullAny(dataEncryption) || isNullAny(dataEncryption.pubKeyB)) {
                    throw new Error('Unable to retrieve intermediate public key B.');
                }

                let decryptedPassword = decryptDataWithPublicAndPrivateKey(dataEncryption.encryptedPassA, dataEncryption.pubKeyA, keyPair.secretEncKey);
                log('User device decrypts the sym password', decryptedPassword);

                let syncPassHash = getHash(decryptedPassword);

                let reEncryptedPasswordInfo = await encryptDataToPublicKeyWithKeyPair(decryptedPassword, dataEncryption.pubKeyB, keyPair);
                log('User device reencrypts password for browser', reEncryptedPasswordInfo);

                let devicePost = {
                    dataId: dataChainId,
                    userId: keyPair.address,
                    encryption: {
                        syncPassHash: syncPassHash,
                        encryptedPassB: reEncryptedPasswordInfo.payload
                    }
                };
                log('devicePost', devicePost);

                let postUrl = getEndpointUrl('credentials/create/passb');
                log('decrypt post', postUrl);

                let serverPostResponse = (await axios.post(postUrl, devicePost)).data;
                log('User device POST to server encryption info', devicePost);
                log('Server responds to user device POST', serverPostResponse.data);

                return serverPostResponse.data;
            }

            async function pollOpen(credentialsResponse, receiverPubKey, isExternal = false, txPolling = false, trailExtraArgs = null) {
                let userId = credentialsResponse.userId;
                let dataId = credentialsResponse.dataId;

                if (isNullAny(userId, dataId)) {
                    throw new Error(`Server did not return userId or dataId/externalId. Details:${credentialsResponse}`);
                }

                dataId = await processExternalId(dataId, userId, isExternal);

                let pollUrl = getEndpointUrl('data/info', `&userId=${userId}&dataId=${dataId}`);

                for (let i = 0; i < 50; i++) {
                    let pollRes = (await axios.get(pollUrl)).data;

                    if (isNullAny(pollRes.data) || isNullAny(pollRes.data.encryption)) {
                        // log('waiting a bit')
                        await sleep(1000);
                        continue;
                    }

                    log('Server responds to polling with', pollRes.data);

                    let decryptedFile = await processEncryptedFileInfo(pollRes.data, receiverPubKey, browserKeyPair.secretEncKey);

                    let validationResult = await validate(decryptedFile.payload, decryptedFile.userId, decryptedFile.dataId, txPolling, trailExtraArgs);

                    if (isNullAny(validationResult) || txPolling) {
                        return validationResult;
                    } else {
                        return decryptedFile;
                    }
                }

                throw new Error('Polling timeout.');


                async function processEncryptedFileInfo(encryptedFileInfo, devicePublicKey, browserPrivateKey) {
                    let decryptedSymPassword = decryptDataWithPublicAndPrivateKey(encryptedFileInfo.encryption.encryptedPassB, devicePublicKey, browserPrivateKey);
                    log('Browser decrypts sym password', decryptedSymPassword);

                    let fullPassword = encodeBase64(keccak256(decryptedSymPassword + encryptedFileInfo.encryption.salt));
                    log('Browser composes full password', fullPassword);

                    let decryptedFile = decryptDataWithSymmetricKey(encryptedFileInfo.payload, fullPassword);
                    log('Browser decrypts the file with the full password', decryptedFile);

                    let resultFileInfo = encryptedFileInfo;
                    resultFileInfo.payload = decryptedFile;
                    delete resultFileInfo.encryption;

                    return resultFileInfo;


                    function decryptDataWithSymmetricKey(messageWithNonce, key) {
                        const keyUint8Array = decodeBase64(key);

                        const messageWithNonceAsUint8Array = new Uint8Array(Array.prototype.slice.call(new Buffer(messageWithNonce, 'base64'), 0));//decodeBase64 without validation

                        const nonce = messageWithNonceAsUint8Array.slice(0, secretbox.nonceLength);

                        const message = messageWithNonceAsUint8Array.slice(
                            secretbox.nonceLength,
                            messageWithNonce.length
                        );

                        const decrypted = secretbox.open(message, nonce, keyUint8Array);

                        if (isNullAny(decrypted)) {
                            throw new Error("Decryption failed");
                        }

                        return encodeUTF8(decrypted); //base64DecryptedMessage
                    }
                }
            }

            async function pollShare(dataIds, recipientIds, userId, isExternal = false) {
                if (!Array.isArray(dataIds)) {
                    dataIds = [dataIds];
                    recipientIds = [recipientIds];
                }

                if (dataIds.length !== recipientIds.length) {
                    throw new Error(`Data count and recipient count mismatch.`);
                }

                dataIds = await processExternalId(dataIds, userId, isExternal);

                for (let i = 0; i < 50; i++) {
                    for (let j = 0; j < dataIds.length; j++) {
                        let pollUrl = getEndpointUrl('share/info', `&recipientId=${recipientIds[j]}&dataId=${dataIds[j]}`);

                        let pollRes = (await axios.get(pollUrl)).data;

                        if (isNullAny(pollRes.data)) {
                            await sleep(1000);
                            break;
                        } else {
                            dataIds.splice(j, 1);
                            recipientIds.splice(j, 1);
                            j--;
                        }
                    }

                    if (dataIds.length === 0) {
                        return true;
                    }
                }

                throw new Error('Share polling timeout.');
            }

            async function pollSign(dataIds, userId, isExternal = false) {
                if (!Array.isArray(dataIds)) {
                    dataIds = [dataIds];
                }

                dataIds = await processExternalId(dataIds, userId, isExternal);

                for (let i = 0; i < 50; i++) {
                    for (let j = 0; j < dataIds.length; j++) {
                        let pollUrl = getEndpointUrl('signature/info', `&userId=${userId}&dataId=${dataIds[j]}`);

                        let pollRes = (await axios.get(pollUrl)).data;

                        if (isNullAny(pollRes.data)) {
                            await sleep(1000);
                            break;
                        } else {
                            dataIds.splice(j, 1);
                            j--;
                        }
                    }

                    if (dataIds.length === 0) {
                        return true;
                    }
                }

                throw new Error('Signature polling timeout.');
            }

            async function select(files, recipients, isExternal = false) {

                files = await processExternalId(files, null, isExternal);

                let validateUrl = getEndpointUrl('selection/create');

                let result = (await axios.post(validateUrl, {
                    dataIds: files,
                    usersIds: recipients
                })).data;

                if (result.status === 'ERROR') {
                    throw  result.data;
                }

                return result.data.selectionHash;
            }

            async function getSelected(selectionHash) {
                let getUrl = getEndpointUrl('selection/info', `&selectionHash=${selectionHash}`);
                log('getSelected get request', getUrl);

                let selectionResponse = (await axios.get(getUrl)).data;

                if (selectionResponse.status === "ERROR") {
                    throw selectionResponse.data;
                }

                return selectionResponse.data;
            }

            async function prepareSelection(selection, keyPair) {
                if (selection.indexOf(':') <= 0) {// check if we have a selection or an id
                    throw new Error('Missing selection operation code.');
                }

                let actionSelectionHash = selection.split(':');
                let action = actionSelectionHash[0];
                let selectionHash = actionSelectionHash[1];

                if (action !== 'op') {
                    throw new Error('Unsupported selection operation code.');
                }

                let selectionResult = await getSelected(selectionHash);
                log('selection result', selectionResult);

                if (isNullAny(selectionResult.selectionHash)) {
                    return [];
                }

                let recipients = selectionResult.usersIds;
                let files = selectionResult.dataIds;
                if (recipients.length !== files.length) {    // the array sizes must be equal
                    throw new Error('Invalid selection format.');
                }

                let result = [];
                for (let i = 0; i < files.length; i++) {  // iterate open each entry from the array
                    if (keyPair.address !== recipients[i]) {
                        log('selection entry omitted', `${recipients[i]}:${files[i]}`);
                        continue;                           // skip entries that are not for that keypair
                    }

                    let credentialsResponse = await prepare(files[i], recipients[i]);

                    result.push({dataId: files[i], data: credentialsResponse});
                }

                return result;
            }

            async function execSelection(selection, keyPair, txPolling = false, trailExtraArgs = null) {
                this.isWorkingExecReEncr = false;

                if (selection.indexOf(':') <= 0) {// check if we have a selection or an id
                    throw new Error('Missing selection operation code.');
                }

                try {
                    let actionSelectionHash = selection.split(':');
                    let action = actionSelectionHash[0];
                    let selectionHash = actionSelectionHash[1];

                    let selectionResult = await getSelected(selectionHash);
                    log('selection result', selectionResult);

                    if (isNullAny(selectionResult.selectionHash)) {
                        return [];
                    }

                    let recipients = selectionResult.usersIds;
                    let files = selectionResult.dataIds;

                    if (recipients.length !== files.length) {   // the array sizes must be equal
                        throw new Error('Invalid selection format.');
                    }

                    let result = [];
                    for (let i = 0; i < files.length; i++) {  // iterate open each entry from the array
                        switch (action) {
                            case 'op':
                                if (keyPair.address !== recipients[i]) {
                                    log('selection entry omitted', `${recipients[i]}:${files[i]}`);
                                    continue;                             // skip entries that are not for that keypair
                                }

                                if (!isNullAny(keyPair.secretEncKey)) {
                                    log('selection entry added', `${recipients[i]}:${files[i]}`);

                                    let fileContent = await open(files[i], keyPair.address, keyPair, false, txPolling, trailExtraArgs);

                                    let fileObj = {
                                        dataId: files[i],
                                        data: fileContent
                                    };

                                    result.push(fileObj);
                                } else {
                                    let credentialsResponse = {
                                        dataId: files[i],
                                        userId: recipients[i]
                                    };

                                    let fileContent = await pollOpen(credentialsResponse, keyPair.publicEncKey, txPolling, trailExtraArgs);

                                    this.isWorkingExecReEncr = true;

                                    let fileObj = {
                                        dataId: files[i],
                                        data: fileContent//returns empty if error
                                    };

                                    result.push(fileObj);
                                }
                                break;

                            case 're':
                                if (keyPair.address !== recipients[i]) {
                                    log('selection entry omitted', `${recipients[i]}:${files[i]}`);
                                    continue;                      // skip entries that are not for that keypair
                                }

                                log('selection entry added', `${recipients[i]}:${files[i]}`);

                                let scanResult = await reEncrypt(recipients[i], files[i], keyPair, trailExtraArgs);

                                let scanObj = {
                                    dataId: files[i],
                                    data: scanResult
                                };

                                result.push(scanObj);
                                break;

                            case'sh':
                                let shareResult = await share(files[i], recipients[i], keyPair, false, txPolling, trailExtraArgs);

                                let shareObj = {
                                    dataId: files[i],
                                    data: shareResult
                                };

                                result.push(shareObj);
                                break;

                            case'sg':
                                let signResult = await sign(files[i], recipients[i], keyPair, false, txPolling, trailExtraArgs);

                                let signObj = {
                                    dataId: files[i],
                                    data: signResult
                                };

                                result.push(signObj);
                                break;

                            default :
                                throw new Error('Unsupported selection operation code.');
                        }
                    }

                    return result;

                } catch (error) {
                    throw (error);
                }
            }

            function signMessage(message, secretKey) {
                try {
                    switch (network) {
                        case "ae":
                            let signatureBytes = naclSign(Buffer.from(message), hexStringToByte(secretKey));

                            return encodeBase58Check(signatureBytes);// signatureB58;

                        case "eth":
                            const messageHash = ethCrypto.hash.keccak256(message);

                            return ethCrypto.sign(
                                secretKey,
                                messageHash
                            );// signature;
                    }
                } catch (ignored) {
                    return false;
                }


                function naclSign(data, privateKey) {
                    return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));
                }
            }

            function verifyMessage(message, signature, pubKey) {
                if (isNullAny(pubKey)) {
                    return false;
                }

                try {
                    switch (network) {
                        case "ae":
                            let verifyResult = nacl.sign.detached.verify(
                                new Uint8Array(Buffer.from(message)),
                                decodeBase58Check(signature),
                                decodeBase58Check(pubKey.split('_')[1])
                            );

                            if (verifyResult) {
                                return pubKey;
                            }

                            return false;

                        case "eth":
                            return ethCrypto.recover(
                                signature,
                                ethCrypto.hash.keccak256(message)
                            ); //signer;
                    }
                } catch (ignored) {
                    return false;
                }
            }

            async function registerHash(dataChainId, requestType, targetUserId, keyPair, requestId = defaultRequestId, extraTrailHashes = [], txPolling = false, trailExtraArgs = null) {
                if (isNullAny(requestId)) {
                    requestId = defaultRequestId;
                }

                if (isNullAny(requestType)) {
                    requestType = 'register';
                }

                if (!['upload', 'register', 'ipo_filing', 'bmd_register'].includes(requestType)) {
                    throw new Error("Unsupported request type.");
                }

                let userId = keyPair.address;
                let trailHash = getTrailHash(dataChainId, userId, requestType, targetUserId, trailExtraArgs);

                let body = {
                    dataId: dataChainId,
                    userId: userId,
                    requestId: requestId,
                    recipientId: targetUserId,
                    requestType: requestType,
                    requestBodyHashSignature: 'NULL',
                    trailHash: trailHash,
                    trailHashSignatureHash: getHash(signMessage(trailHash, keyPair.secretKey)),
                    extraTrailHashes: extraTrailHashes
                };

                body.requestBodyHashSignature = signMessage(getRequestHash(body), keyPair.secretKey);

                let postUrl = getEndpointUrl('tx/create');
                log('registerHash, ', body);

                let serverPostResponse = (await axios.post(postUrl, body)).data;
                log('Server responds to registerHash POST', serverPostResponse.data);

                if (serverPostResponse.status === "ERROR") {
                    throw  serverPostResponse.data;
                }

                if (!txPolling) {
                    return serverPostResponse.data;
                }

                return await processTxPolling(dataChainId, userId, 'requestId', requestId);
            }

            async function checkHash(dataChainId, userId, requestId = null, isExternal = false) {

                dataChainId = await processExternalId(dataChainId, userId, isExternal);

                let query = `&userId=${userId}&dataId=${dataChainId}`;

                if (!isNullAny(requestId)) {
                    query += `&requestId=${requestId}`;
                }

                let getUrl = getEndpointUrl('tx/info', query);
                log('query URL', getUrl);

                let serverResponse = (await axios.get(getUrl)).data;
                log('Server responds to checkHash GET', serverResponse.data);

                return serverResponse.data;
            }

            async function saveExternalId(externalId, userChainId, dataOriginalHash = null) {

                let body = {
                    externalId: externalId,
                    userId: userChainId,
                    dataOriginalHash: dataOriginalHash,
                };

                let postUrl = getEndpointUrl('data/id/create');
                log('saveExternalId, ', body);

                let serverPostResponse = (await axios.post(postUrl, body)).data;
                log('Server responds to saveExternalId POST', serverPostResponse.data);

                if (serverPostResponse.status === "ERROR") {
                    throw serverPostResponse.data;
                }

                return serverPostResponse.data;
            }

            async function convertExternalId(externalId, userId) {
                let query = `&userId=${userId}&externalId=${externalId}`;

                let getUrl = getEndpointUrl('data/id/info', query);
                log('query URL', getUrl);

                let serverResponse = (await axios.get(getUrl)).data;
                log('Server responds to convertExternalId GET', serverResponse.data);

                if (serverResponse.status === "ERROR") {
                    throw serverResponse.data;
                }

                return serverResponse.data;
            }


            module.exports = {
                isNullAny: isNullAny,
                getHash: getHash,

                debug: setDebugMode,
                /* Specify API token and API host */

                init: init,
                //get server info - api version/current blockchain type
                getServerInfo: getServerInfo,
                // login i login with challenge
                // login hammer 0(account) 0x.. (challenge code)
                // node hammer login 1 (second user's login)
                login: login,
                loginWithChallenge: loginWithChallenge,

                /* Create a keypair and recovery phrase */
                newKeyPair: newKeyPair,

                /* Encrypt, upload and register a file or any data */
                //upload new file
                store: store,
                /* Retrieve fle - used in case of client interaction */
                // node hammer open 0x...(dataId) 0 (this account, different number = different account)
                // node hammer open 0x..(dataId) 1 (user's credentials) 1 (user's credentials API)
                // hammer -i <acc.json> store <filename.txt>
                // hammer -i <acc.json> share <fileID> <recipientID>
                // hammer -i <acc.json> open <fileID>
                open: open,
                // verify file contents against a hash and its owner/recipient
                validate: validate,
                // node hammer share 0x..(dataId) 1(user sender) 0(user receiver)

                share: share,
                // browser poll for sharing
                pollShare: pollShare,

                sign: sign,
                // browser poll for signing
                pollSign: pollSign,

                /* Retrieve file - used in case of browser interaction */
                // submit credentials of the decrypting browser
                prepare: prepare,
                // decrypt password and re-encrypt for decrypting browser
                reEncrypt: reEncrypt,
                // polling on the side of decrypting browser for encrypted file
                pollOpen: pollOpen,

                // node hammer select-share 0x...(fileID) 2k_...(recipient) 0(sender) returns "s:qrCode"
                select: select,
                selection: getSelected,
                prepareSelection: prepareSelection,
                // node hammer exec o:0x...(selection hash)
                execSelection: execSelection,
                isWorkingExecReEncr: isWorkingExecReEncr,

                signMessage: signMessage,
                verifyMessage: verifyMessage,

                registerHash: registerHash,
                checkHash: checkHash,

                saveExternalId: saveExternalId,
                convertExternalId: convertExternalId,
            };

        }).call(this, require("buffer").Buffer)
    }, {
        "axios": 163,
        "bs58check": 199,
        "buffer": 51,
        "diceware": 254,
        "eth-crypto": 280,
        "json-stable-stringify": 391,
        "keccak256": 401,
        "session25519": 452,
        "tweetnacl": 465,
        "tweetnacl-util": 464
    }],
    163: [function (require, module, exports) {
        module.exports = require('./lib/axios');
    }, {"./lib/axios": 165}],
    164: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');
        var settle = require('./../core/settle');
        var buildURL = require('./../helpers/buildURL');
        var buildFullPath = require('../core/buildFullPath');
        var parseHeaders = require('./../helpers/parseHeaders');
        var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
        var createError = require('../core/createError');

        module.exports = function xhrAdapter(config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
                var requestData = config.data;
                var requestHeaders = config.headers;

                if (utils.isFormData(requestData)) {
                    delete requestHeaders['Content-Type']; // Let the browser set it
                }

                var request = new XMLHttpRequest();

                // HTTP basic authentication
                if (config.auth) {
                    var username = config.auth.username || '';
                    var password = config.auth.password || '';
                    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                }

                var fullPath = buildFullPath(config.baseURL, config.url);
                request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                // Set the request timeout in MS
                request.timeout = config.timeout;

                // Listen for ready state
                request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                        return;
                    }

                    // The request errored out and we didn't get a response, this will be
                    // handled by onerror instead
                    // With one exception: request that using file: protocol, most browsers
                    // will return status as 0 even though it's a successful request
                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                        return;
                    }

                    // Prepare the response
                    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                    var response = {
                        data: responseData,
                        status: request.status,
                        statusText: request.statusText,
                        headers: responseHeaders,
                        config: config,
                        request: request
                    };

                    settle(resolve, reject, response);

                    // Clean up request
                    request = null;
                };

                // Handle browser request cancellation (as opposed to a manual cancellation)
                request.onabort = function handleAbort() {
                    if (!request) {
                        return;
                    }

                    reject(createError('Request aborted', config, 'ECONNABORTED', request));

                    // Clean up request
                    request = null;
                };

                // Handle low level network errors
                request.onerror = function handleError() {
                    // Real errors are hidden from us by the browser
                    // onerror should only fire if it's a network error
                    reject(createError('Network Error', config, null, request));

                    // Clean up request
                    request = null;
                };

                // Handle timeout
                request.ontimeout = function handleTimeout() {
                    var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                    if (config.timeoutErrorMessage) {
                        timeoutErrorMessage = config.timeoutErrorMessage;
                    }
                    reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
                        request));

                    // Clean up request
                    request = null;
                };

                // Add xsrf header
                // This is only done if running in a standard browser environment.
                // Specifically not if we're in a web worker, or react-native.
                if (utils.isStandardBrowserEnv()) {
                    var cookies = require('./../helpers/cookies');

                    // Add xsrf header
                    var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                        cookies.read(config.xsrfCookieName) :
                        undefined;

                    if (xsrfValue) {
                        requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                }

                // Add headers to the request
                if ('setRequestHeader' in request) {
                    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                            // Remove Content-Type if data is undefined
                            delete requestHeaders[key];
                        } else {
                            // Otherwise add header to the request
                            request.setRequestHeader(key, val);
                        }
                    });
                }

                // Add withCredentials to request if needed
                if (!utils.isUndefined(config.withCredentials)) {
                    request.withCredentials = !!config.withCredentials;
                }

                // Add responseType to request if needed
                if (config.responseType) {
                    try {
                        request.responseType = config.responseType;
                    } catch (e) {
                        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                        if (config.responseType !== 'json') {
                            throw e;
                        }
                    }
                }

                // Handle progress if needed
                if (typeof config.onDownloadProgress === 'function') {
                    request.addEventListener('progress', config.onDownloadProgress);
                }

                // Not all browsers support upload events
                if (typeof config.onUploadProgress === 'function' && request.upload) {
                    request.upload.addEventListener('progress', config.onUploadProgress);
                }

                if (config.cancelToken) {
                    // Handle cancellation
                    config.cancelToken.promise.then(function onCanceled(cancel) {
                        if (!request) {
                            return;
                        }

                        request.abort();
                        reject(cancel);
                        // Clean up request
                        request = null;
                    });
                }

                if (requestData === undefined) {
                    requestData = null;
                }

                // Send the request
                request.send(requestData);
            });
        };

    }, {
        "../core/buildFullPath": 171,
        "../core/createError": 172,
        "./../core/settle": 176,
        "./../helpers/buildURL": 180,
        "./../helpers/cookies": 182,
        "./../helpers/isURLSameOrigin": 184,
        "./../helpers/parseHeaders": 186,
        "./../utils": 188
    }],
    165: [function (require, module, exports) {
        'use strict';

        var utils = require('./utils');
        var bind = require('./helpers/bind');
        var Axios = require('./core/Axios');
        var mergeConfig = require('./core/mergeConfig');
        var defaults = require('./defaults');

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context);

            // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context);

            // Copy context to instance
            utils.extend(instance, context);

            return instance;
        }

// Create the default instance to be exported
        var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
        axios.Axios = Axios;

// Factory for creating new instances
        axios.create = function create(instanceConfig) {
            return createInstance(mergeConfig(axios.defaults, instanceConfig));
        };

// Expose Cancel & CancelToken
        axios.Cancel = require('./cancel/Cancel');
        axios.CancelToken = require('./cancel/CancelToken');
        axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
        axios.all = function all(promises) {
            return Promise.all(promises);
        };
        axios.spread = require('./helpers/spread');

        module.exports = axios;

// Allow use of default import syntax in TypeScript
        module.exports.default = axios;

    }, {
        "./cancel/Cancel": 166,
        "./cancel/CancelToken": 167,
        "./cancel/isCancel": 168,
        "./core/Axios": 169,
        "./core/mergeConfig": 175,
        "./defaults": 178,
        "./helpers/bind": 179,
        "./helpers/spread": 187,
        "./utils": 188
    }],
    166: [function (require, module, exports) {
        'use strict';

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
            this.message = message;
        }

        Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;

    }, {}],
    167: [function (require, module, exports) {
        'use strict';

        var Cancel = require('./Cancel');

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
            }

            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
            });

            var token = this;
            executor(function cancel(message) {
                if (token.reason) {
                    // Cancellation has already been requested
                    return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
            });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
                throw this.reason;
            }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
                cancel = c;
            });
            return {
                token: token,
                cancel: cancel
            };
        };

        module.exports = CancelToken;

    }, {"./Cancel": 166}],
    168: [function (require, module, exports) {
        'use strict';

        module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
        };

    }, {}],
    169: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');
        var buildURL = require('../helpers/buildURL');
        var InterceptorManager = require('./InterceptorManager');
        var dispatchRequest = require('./dispatchRequest');
        var mergeConfig = require('./mergeConfig');

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
            };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof config === 'string') {
                config = arguments[1] || {};
                config.url = arguments[0];
            } else {
                config = config || {};
            }

            config = mergeConfig(this.defaults, config);

            // Set config.method
            if (config.method) {
                config.method = config.method.toLowerCase();
            } else if (this.defaults.method) {
                config.method = this.defaults.method.toLowerCase();
            } else {
                config.method = 'get';
            }

            // Hook up interceptors middleware
            var chain = [dispatchRequest, undefined];
            var promise = Promise.resolve(config);

            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                chain.unshift(interceptor.fulfilled, interceptor.rejected);
            });

            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                chain.push(interceptor.fulfilled, interceptor.rejected);
            });

            while (chain.length) {
                promise = promise.then(chain.shift(), chain.shift());
            }

            return promise;
        };

        Axios.prototype.getUri = function getUri(config) {
            config = mergeConfig(this.defaults, config);
            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
        };

// Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url
                }));
            };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, data, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url,
                    data: data
                }));
            };
        });

        module.exports = Axios;

    }, {
        "../helpers/buildURL": 180,
        "./../utils": 188,
        "./InterceptorManager": 170,
        "./dispatchRequest": 173,
        "./mergeConfig": 175
    }],
    170: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        function InterceptorManager() {
            this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
            this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected
            });
            return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
                this.handlers[id] = null;
            }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                    fn(h);
                }
            });
        };

        module.exports = InterceptorManager;

    }, {"./../utils": 188}],
    171: [function (require, module, exports) {
        'use strict';

        var isAbsoluteURL = require('../helpers/isAbsoluteURL');
        var combineURLs = require('../helpers/combineURLs');

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         * @returns {string} The combined full path
         */
        module.exports = function buildFullPath(baseURL, requestedURL) {
            if (baseURL && !isAbsoluteURL(requestedURL)) {
                return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
        };

    }, {"../helpers/combineURLs": 181, "../helpers/isAbsoluteURL": 183}],
    172: [function (require, module, exports) {
        'use strict';

        var enhanceError = require('./enhanceError');

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
        };

    }, {"./enhanceError": 174}],
    173: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');
        var transformData = require('./transformData');
        var isCancel = require('../cancel/isCancel');
        var defaults = require('../defaults');

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
            }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config);

            // Ensure headers exist
            config.headers = config.headers || {};

            // Transform request data
            config.data = transformData(
                config.data,
                config.headers,
                config.transformRequest
            );

            // Flatten headers
            config.headers = utils.merge(
                config.headers.common || {},
                config.headers[config.method] || {},
                config.headers
            );

            utils.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                function cleanHeaderConfig(method) {
                    delete config.headers[method];
                }
            );

            var adapter = config.adapter || defaults.adapter;

            return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);

                // Transform response data
                response.data = transformData(
                    response.data,
                    response.headers,
                    config.transformResponse
                );

                return response;
            }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    if (reason && reason.response) {
                        reason.response.data = transformData(
                            reason.response.data,
                            reason.response.headers,
                            config.transformResponse
                        );
                    }
                }

                return Promise.reject(reason);
            });
        };

    }, {"../cancel/isCancel": 168, "../defaults": 178, "./../utils": 188, "./transformData": 177}],
    174: [function (require, module, exports) {
        'use strict';

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
                error.code = code;
            }

            error.request = request;
            error.response = response;
            error.isAxiosError = true;

            error.toJSON = function () {
                return {
                    // Standard
                    message: this.message,
                    name: this.name,
                    // Microsoft
                    description: this.description,
                    number: this.number,
                    // Mozilla
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    // Axios
                    config: this.config,
                    code: this.code
                };
            };
            return error;
        };

    }, {}],
    175: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         * @returns {Object} New object resulting from merging config2 to config1
         */
        module.exports = function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            var config = {};

            var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
            var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
            var defaultToConfig2Keys = [
                'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
                'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
                'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
                'httpsAgent', 'cancelToken', 'socketPath'
            ];

            utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                }
            });

            utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
                if (utils.isObject(config2[prop])) {
                    config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                } else if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (utils.isObject(config1[prop])) {
                    config[prop] = utils.deepMerge(config1[prop]);
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            var axiosKeys = valueFromConfig2Keys
                .concat(mergeDeepPropertiesKeys)
                .concat(defaultToConfig2Keys);

            var otherKeys = Object
                .keys(config2)
                .filter(function filterAxiosKeys(key) {
                    return axiosKeys.indexOf(key) === -1;
                });

            utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            return config;
        };

    }, {"../utils": 188}],
    176: [function (require, module, exports) {
        'use strict';

        var createError = require('./createError');

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            if (!validateStatus || validateStatus(response.status)) {
                resolve(response);
            } else {
                reject(createError(
                    'Request failed with status code ' + response.status,
                    response.config,
                    null,
                    response.request,
                    response
                ));
            }
        };

    }, {"./createError": 172}],
    177: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
            /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
                data = fn(data, headers);
            });

            return data;
        };

    }, {"./../utils": 188}],
    178: [function (require, module, exports) {
        (function (process) {
            'use strict';

            var utils = require('./utils');
            var normalizeHeaderName = require('./helpers/normalizeHeaderName');

            var DEFAULT_CONTENT_TYPE = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };

            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                    headers['Content-Type'] = value;
                }
            }

            function getDefaultAdapter() {
                var adapter;
                if (typeof XMLHttpRequest !== 'undefined') {
                    // For browsers use XHR adapter
                    adapter = require('./adapters/xhr');
                } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                    // For node use HTTP adapter
                    adapter = require('./adapters/http');
                }
                return adapter;
            }

            var defaults = {
                adapter: getDefaultAdapter(),

                transformRequest: [function transformRequest(data, headers) {
                    normalizeHeaderName(headers, 'Accept');
                    normalizeHeaderName(headers, 'Content-Type');
                    if (utils.isFormData(data) ||
                        utils.isArrayBuffer(data) ||
                        utils.isBuffer(data) ||
                        utils.isStream(data) ||
                        utils.isFile(data) ||
                        utils.isBlob(data)
                    ) {
                        return data;
                    }
                    if (utils.isArrayBufferView(data)) {
                        return data.buffer;
                    }
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                        return data.toString();
                    }
                    if (utils.isObject(data)) {
                        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                        return JSON.stringify(data);
                    }
                    return data;
                }],

                transformResponse: [function transformResponse(data) {
                    /*eslint no-param-reassign:0*/
                    if (typeof data === 'string') {
                        try {
                            data = JSON.parse(data);
                        } catch (e) { /* Ignore */
                        }
                    }
                    return data;
                }],

                /**
                 * A timeout in milliseconds to abort a request. If set to 0 (default) a
                 * timeout is not created.
                 */
                timeout: 0,

                xsrfCookieName: 'XSRF-TOKEN',
                xsrfHeaderName: 'X-XSRF-TOKEN',

                maxContentLength: -1,

                validateStatus: function validateStatus(status) {
                    return status >= 200 && status < 300;
                }
            };

            defaults.headers = {
                common: {
                    'Accept': 'application/json, text/plain, */*'
                }
            };

            utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                defaults.headers[method] = {};
            });

            utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            });

            module.exports = defaults;

        }).call(this, require('_process'))
    }, {
        "./adapters/http": 164,
        "./adapters/xhr": 164,
        "./helpers/normalizeHeaderName": 185,
        "./utils": 188,
        "_process": 122
    }],
    179: [function (require, module, exports) {
        'use strict';

        module.exports = function bind(fn, thisArg) {
            return function wrap() {
                var args = new Array(arguments.length);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i];
                }
                return fn.apply(thisArg, args);
            };
        };

    }, {}],
    180: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        function encode(val) {
            return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/
            if (!params) {
                return url;
            }

            var serializedParams;
            if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
                serializedParams = params.toString();
            } else {
                var parts = [];

                utils.forEach(params, function serialize(val, key) {
                    if (val === null || typeof val === 'undefined') {
                        return;
                    }

                    if (utils.isArray(val)) {
                        key = key + '[]';
                    } else {
                        val = [val];
                    }

                    utils.forEach(val, function parseValue(v) {
                        if (utils.isDate(v)) {
                            v = v.toISOString();
                        } else if (utils.isObject(v)) {
                            v = JSON.stringify(v);
                        }
                        parts.push(encode(key) + '=' + encode(v));
                    });
                });

                serializedParams = parts.join('&');
            }

            if (serializedParams) {
                var hashmarkIndex = url.indexOf('#');
                if (hashmarkIndex !== -1) {
                    url = url.slice(0, hashmarkIndex);
                }

                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }

            return url;
        };

    }, {"./../utils": 188}],
    181: [function (require, module, exports) {
        'use strict';

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL
                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                : baseURL;
        };

    }, {}],
    182: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs support document.cookie
                (function standardBrowserEnv() {
                    return {
                        write: function write(name, value, expires, path, domain, secure) {
                            var cookie = [];
                            cookie.push(name + '=' + encodeURIComponent(value));

                            if (utils.isNumber(expires)) {
                                cookie.push('expires=' + new Date(expires).toGMTString());
                            }

                            if (utils.isString(path)) {
                                cookie.push('path=' + path);
                            }

                            if (utils.isString(domain)) {
                                cookie.push('domain=' + domain);
                            }

                            if (secure === true) {
                                cookie.push('secure');
                            }

                            document.cookie = cookie.join('; ');
                        },

                        read: function read(name) {
                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                            return (match ? decodeURIComponent(match[3]) : null);
                        },

                        remove: function remove(name) {
                            this.write(name, '', Date.now() - 86400000);
                        }
                    };
                })() :

                // Non standard browser env (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return {
                        write: function write() {
                        },
                        read: function read() {
                            return null;
                        },
                        remove: function remove() {
                        }
                    };
                })()
        );

    }, {"./../utils": 188}],
    183: [function (require, module, exports) {
        'use strict';

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };

    }, {}],
    184: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs have full support of the APIs needed to test
                // whether the request URL is of the same origin as current location.
                (function standardBrowserEnv() {
                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                    var urlParsingNode = document.createElement('a');
                    var originURL;

                    /**
                     * Parse a URL to discover it's components
                     *
                     * @param {String} url The URL to be parsed
                     * @returns {Object}
                     */
                    function resolveURL(url) {
                        var href = url;

                        if (msie) {
                            // IE needs attribute set twice to normalize properties
                            urlParsingNode.setAttribute('href', href);
                            href = urlParsingNode.href;
                        }

                        urlParsingNode.setAttribute('href', href);

                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                        return {
                            href: urlParsingNode.href,
                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                            host: urlParsingNode.host,
                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                            hostname: urlParsingNode.hostname,
                            port: urlParsingNode.port,
                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                urlParsingNode.pathname :
                                '/' + urlParsingNode.pathname
                        };
                    }

                    originURL = resolveURL(window.location.href);

                    /**
                     * Determine if a URL shares the same origin as the current location
                     *
                     * @param {String} requestURL The URL to test
                     * @returns {boolean} True if URL shares the same origin, otherwise false
                     */
                    return function isURLSameOrigin(requestURL) {
                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                        return (parsed.protocol === originURL.protocol &&
                            parsed.host === originURL.host);
                    };
                })() :

                // Non standard browser envs (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return function isURLSameOrigin() {
                        return true;
                    };
                })()
        );

    }, {"./../utils": 188}],
    185: [function (require, module, exports) {
        'use strict';

        var utils = require('../utils');

        module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                    headers[normalizedName] = value;
                    delete headers[name];
                }
            });
        };

    }, {"../utils": 188}],
    186: [function (require, module, exports) {
        'use strict';

        var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
            'age', 'authorization', 'content-length', 'content-type', 'etag',
            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
            'referer', 'retry-after', 'user-agent'
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;

            if (!headers) {
                return parsed;
            }

            utils.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils.trim(line.substr(0, i)).toLowerCase();
                val = utils.trim(line.substr(i + 1));

                if (key) {
                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                        return;
                    }
                    if (key === 'set-cookie') {
                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                    } else {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }
            });

            return parsed;
        };

    }, {"./../utils": 188}],
    187: [function (require, module, exports) {
        'use strict';

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
            return function wrap(arr) {
                return callback.apply(null, arr);
            };
        };

    }, {}],
    188: [function (require, module, exports) {
        'use strict';

        var bind = require('./helpers/bind');

        /*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
            return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
            return typeof val === 'undefined';
        }

        /**
         * Determine if a value is a Buffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
            return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
            var result;
            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                result = ArrayBuffer.isView(val);
            } else {
                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
            }
            return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
            return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
            return typeof val === 'number';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
            return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
            return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
            return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
            return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
            return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
            return str.replace(/^\s*/, '').replace(/\s*$/, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         */
        function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                navigator.product === 'NativeScript' ||
                navigator.product === 'NS')) {
                return false;
            }
            return (
                typeof window !== 'undefined' &&
                typeof document !== 'undefined'
            );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
                return;
            }

            // Force an array if not already something iterable
            if (typeof obj !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
            }

            if (isArray(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                    fn.call(null, obj[i], i, obj);
                }
            } else {
                // Iterate over object keys
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        fn.call(null, obj[key], key, obj);
                    }
                }
            }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
            var result = {};

            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = merge(result[key], val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Function equal to merge with the difference being that no reference
         * to original objects is kept.
         *
         * @see merge
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function deepMerge(/* obj1, obj2, obj3, ... */) {
            var result = {};

            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = deepMerge(result[key], val);
                } else if (typeof val === 'object') {
                    result[key] = deepMerge({}, val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                    a[key] = bind(val, thisArg);
                } else {
                    a[key] = val;
                }
            });
            return a;
        }

        module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            deepMerge: deepMerge,
            extend: extend,
            trim: trim
        };

    }, {"./helpers/bind": 179}],
    189: [function (require, module, exports) {
        module.exports = {"default": require("core-js/library/fn/array/from"), __esModule: true};
    }, {"core-js/library/fn/array/from": 201}],
    190: [function (require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _from = require("../core-js/array/from");

        var _from2 = _interopRequireDefault(_from);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        exports.default = function (arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }

                return arr2;
            } else {
                return (0, _from2.default)(arr);
            }
        };
    }, {"../core-js/array/from": 189}],
    191: [function (require, module, exports) {
        'use strict'
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
        var _Buffer = require('safe-buffer').Buffer

        function base(ALPHABET) {
            if (ALPHABET.length >= 255) {
                throw new TypeError('Alphabet too long')
            }
            var BASE_MAP = new Uint8Array(256)
            for (var j = 0; j < BASE_MAP.length; j++) {
                BASE_MAP[j] = 255
            }
            for (var i = 0; i < ALPHABET.length; i++) {
                var x = ALPHABET.charAt(i)
                var xc = x.charCodeAt(0)
                if (BASE_MAP[xc] !== 255) {
                    throw new TypeError(x + ' is ambiguous')
                }
                BASE_MAP[xc] = i
            }
            var BASE = ALPHABET.length
            var LEADER = ALPHABET.charAt(0)
            var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
            var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
            function encode(source) {
                if (Array.isArray(source) || source instanceof Uint8Array) {
                    source = _Buffer.from(source)
                }
                if (!_Buffer.isBuffer(source)) {
                    throw new TypeError('Expected Buffer')
                }
                if (source.length === 0) {
                    return ''
                }
                // Skip & count leading zeroes.
                var zeroes = 0
                var length = 0
                var pbegin = 0
                var pend = source.length
                while (pbegin !== pend && source[pbegin] === 0) {
                    pbegin++
                    zeroes++
                }
                // Allocate enough space in big-endian base58 representation.
                var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
                var b58 = new Uint8Array(size)
                // Process the bytes.
                while (pbegin !== pend) {
                    var carry = source[pbegin]
                    // Apply "b58 = b58 * 256 + ch".
                    var i = 0
                    for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
                        carry += (256 * b58[it1]) >>> 0
                        b58[it1] = (carry % BASE) >>> 0
                        carry = (carry / BASE) >>> 0
                    }
                    if (carry !== 0) {
                        throw new Error('Non-zero carry')
                    }
                    length = i
                    pbegin++
                }
                // Skip leading zeroes in base58 result.
                var it2 = size - length
                while (it2 !== size && b58[it2] === 0) {
                    it2++
                }
                // Translate the result into a string.
                var str = LEADER.repeat(zeroes)
                for (; it2 < size; ++it2) {
                    str += ALPHABET.charAt(b58[it2])
                }
                return str
            }

            function decodeUnsafe(source) {
                if (typeof source !== 'string') {
                    throw new TypeError('Expected String')
                }
                if (source.length === 0) {
                    return _Buffer.alloc(0)
                }
                var psz = 0
                // Skip leading spaces.
                if (source[psz] === ' ') {
                    return
                }
                // Skip and count leading '1's.
                var zeroes = 0
                var length = 0
                while (source[psz] === LEADER) {
                    zeroes++
                    psz++
                }
                // Allocate enough space in big-endian base256 representation.
                var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
                var b256 = new Uint8Array(size)
                // Process the characters.
                while (source[psz]) {
                    // Decode character
                    var carry = BASE_MAP[source.charCodeAt(psz)]
                    // Invalid character
                    if (carry === 255) {
                        return
                    }
                    var i = 0
                    for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
                        carry += (BASE * b256[it3]) >>> 0
                        b256[it3] = (carry % 256) >>> 0
                        carry = (carry / 256) >>> 0
                    }
                    if (carry !== 0) {
                        throw new Error('Non-zero carry')
                    }
                    length = i
                    psz++
                }
                // Skip trailing spaces.
                if (source[psz] === ' ') {
                    return
                }
                // Skip leading zeroes in b256.
                var it4 = size - length
                while (it4 !== size && b256[it4] === 0) {
                    it4++
                }
                var vch = _Buffer.allocUnsafe(zeroes + (size - it4))
                vch.fill(0x00, 0, zeroes)
                var j = zeroes
                while (it4 !== size) {
                    vch[j++] = b256[it4++]
                }
                return vch
            }

            function decode(string) {
                var buffer = decodeUnsafe(string)
                if (buffer) {
                    return buffer
                }
                throw new Error('Non-base' + BASE + ' character')
            }

            return {
                encode: encode,
                decodeUnsafe: decodeUnsafe,
                decode: decode
            }
        }

        module.exports = base

    }, {"safe-buffer": 428}],
    192: [function (require, module, exports) {
        arguments[4][19][0].apply(exports, arguments)
    }, {"dup": 19}],
    193: [function (require, module, exports) {
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use

        var Buffer = require('safe-buffer').Buffer

        function check(buffer) {
            if (buffer.length < 8) return false
            if (buffer.length > 72) return false
            if (buffer[0] !== 0x30) return false
            if (buffer[1] !== buffer.length - 2) return false
            if (buffer[2] !== 0x02) return false

            var lenR = buffer[3]
            if (lenR === 0) return false
            if (5 + lenR >= buffer.length) return false
            if (buffer[4 + lenR] !== 0x02) return false

            var lenS = buffer[5 + lenR]
            if (lenS === 0) return false
            if ((6 + lenR + lenS) !== buffer.length) return false

            if (buffer[4] & 0x80) return false
            if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

            if (buffer[lenR + 6] & 0x80) return false
            if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
            return true
        }

        function decode(buffer) {
            if (buffer.length < 8) throw new Error('DER sequence length is too short')
            if (buffer.length > 72) throw new Error('DER sequence length is too long')
            if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
            if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
            if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

            var lenR = buffer[3]
            if (lenR === 0) throw new Error('R length is zero')
            if (5 + lenR >= buffer.length) throw new Error('R length is too long')
            if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

            var lenS = buffer[5 + lenR]
            if (lenS === 0) throw new Error('S length is zero')
            if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

            if (buffer[4] & 0x80) throw new Error('R value is negative')
            if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

            if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
            if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

            // non-BIP66 - extract R, S values
            return {
                r: buffer.slice(4, 4 + lenR),
                s: buffer.slice(6 + lenR)
            }
        }

        /*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
        function encode(r, s) {
            var lenR = r.length
            var lenS = s.length
            if (lenR === 0) throw new Error('R length is zero')
            if (lenS === 0) throw new Error('S length is zero')
            if (lenR > 33) throw new Error('R length is too long')
            if (lenS > 33) throw new Error('S length is too long')
            if (r[0] & 0x80) throw new Error('R value is negative')
            if (s[0] & 0x80) throw new Error('S value is negative')
            if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
            if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

            var signature = Buffer.allocUnsafe(6 + lenR + lenS)

            // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
            signature[0] = 0x30
            signature[1] = signature.length - 2
            signature[2] = 0x02
            signature[3] = r.length
            r.copy(signature, 4)
            signature[4 + lenR] = 0x02
            signature[5 + lenR] = s.length
            s.copy(signature, 6 + lenR)

            return signature
        }

        module.exports = {
            check: check,
            decode: decode,
            encode: encode
        }

    }, {"safe-buffer": 428}],
    194: [function (require, module, exports) {
        /* Written in 2012-2014 by Dmitry Chestnykh. Public domain */
        var BLAKE2s = (function () {

            var MAX_DIGEST_LENGTH = 32;
            var BLOCK_LENGTH = 64;
            var MAX_KEY_LENGTH = 32;
            var PERSONALIZATION_LENGTH = 8;
            var SALT_LENGTH = 8;

            var IV = new Uint32Array([
                0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
            ]);

            function isByteArray(a) {
                var kind = Object.prototype.toString.call(a);
                return kind === '[object Uint8Array]' || kind === '[object Array]';
            }

            function checkConfig(config) {
                for (var key in config) {
                    switch (key) {
                        case 'key':
                        case 'personalization':
                        case 'salt':
                            if (!isByteArray(config[key])) {
                                throw new TypeError(key + ' must be a Uint8Array or an Array of bytes');
                            }
                            break;
                        default:
                            throw new Error('unexpected key in config: ' + key)
                    }
                }
            }

            function load32(a, i) {
                return (a[i + 0] & 0xff) | ((a[i + 1] & 0xff) << 8) |
                    ((a[i + 2] & 0xff) << 16) | ((a[i + 3] & 0xff) << 24);
            }

            function BLAKE2s(digestLength, keyOrConfig) {
                if (typeof digestLength === 'undefined')
                    digestLength = MAX_DIGEST_LENGTH;

                if (digestLength <= 0 || digestLength > MAX_DIGEST_LENGTH)
                    throw new Error('bad digestLength');

                this.digestLength = digestLength;

                var key, personalization, salt;
                var keyLength = 0;

                if (isByteArray(keyOrConfig)) {
                    key = keyOrConfig;
                    keyLength = key.length;
                } else if (typeof keyOrConfig === 'object') {
                    checkConfig(keyOrConfig);

                    key = keyOrConfig.key;
                    keyLength = key ? key.length : 0;

                    salt = keyOrConfig.salt;
                    personalization = keyOrConfig.personalization;
                } else if (keyOrConfig) {
                    throw new Error('unexpected key or config type');
                }

                if (keyLength > MAX_KEY_LENGTH)
                    throw new Error('key is too long');
                if (salt && salt.length !== SALT_LENGTH)
                    throw new Error('salt must be ' + SALT_LENGTH + ' bytes');
                if (personalization && personalization.length !== PERSONALIZATION_LENGTH)
                    throw new Error('personalization must be ' + PERSONALIZATION_LENGTH + ' bytes');

                this.isFinished = false;

                // Hash state.
                this.h = new Uint32Array(IV);

                // XOR parts of parameter block into initial state.
                var param = new Uint8Array([digestLength & 0xff, keyLength, 1, 1]);
                this.h[0] ^= load32(param, 0);

                if (salt) {
                    this.h[4] ^= load32(salt, 0);
                    this.h[5] ^= load32(salt, 4);
                }

                if (personalization) {
                    this.h[6] ^= load32(personalization, 0);
                    this.h[7] ^= load32(personalization, 4);
                }

                // Buffer for data.
                this.x = new Uint8Array(BLOCK_LENGTH);
                this.nx = 0;

                // Byte counter.
                this.t0 = 0;
                this.t1 = 0;

                // Flags.
                this.f0 = 0;
                this.f1 = 0;

                // Fill buffer with key, if present.
                if (keyLength > 0) {
                    for (var i = 0; i < keyLength; i++) this.x[i] = key[i];
                    for (i = keyLength; i < BLOCK_LENGTH; i++) this.x[i] = 0;
                    this.nx = BLOCK_LENGTH;
                }
            }

            BLAKE2s.prototype.processBlock = function (length) {
                this.t0 += length;
                if (this.t0 != this.t0 >>> 0) {
                    this.t0 = 0;
                    this.t1++;
                }

                var v0 = this.h[0],
                    v1 = this.h[1],
                    v2 = this.h[2],
                    v3 = this.h[3],
                    v4 = this.h[4],
                    v5 = this.h[5],
                    v6 = this.h[6],
                    v7 = this.h[7],
                    v8 = IV[0],
                    v9 = IV[1],
                    v10 = IV[2],
                    v11 = IV[3],
                    v12 = IV[4] ^ this.t0,
                    v13 = IV[5] ^ this.t1,
                    v14 = IV[6] ^ this.f0,
                    v15 = IV[7] ^ this.f1;

                var x = this.x;
                var m0 = x[0] & 0xff | (x[1] & 0xff) << 8 | (x[2] & 0xff) << 16 | (x[3] & 0xff) << 24,
                    m1 = x[4] & 0xff | (x[5] & 0xff) << 8 | (x[6] & 0xff) << 16 | (x[7] & 0xff) << 24,
                    m2 = x[8] & 0xff | (x[9] & 0xff) << 8 | (x[10] & 0xff) << 16 | (x[11] & 0xff) << 24,
                    m3 = x[12] & 0xff | (x[13] & 0xff) << 8 | (x[14] & 0xff) << 16 | (x[15] & 0xff) << 24,
                    m4 = x[16] & 0xff | (x[17] & 0xff) << 8 | (x[18] & 0xff) << 16 | (x[19] & 0xff) << 24,
                    m5 = x[20] & 0xff | (x[21] & 0xff) << 8 | (x[22] & 0xff) << 16 | (x[23] & 0xff) << 24,
                    m6 = x[24] & 0xff | (x[25] & 0xff) << 8 | (x[26] & 0xff) << 16 | (x[27] & 0xff) << 24,
                    m7 = x[28] & 0xff | (x[29] & 0xff) << 8 | (x[30] & 0xff) << 16 | (x[31] & 0xff) << 24,
                    m8 = x[32] & 0xff | (x[33] & 0xff) << 8 | (x[34] & 0xff) << 16 | (x[35] & 0xff) << 24,
                    m9 = x[36] & 0xff | (x[37] & 0xff) << 8 | (x[38] & 0xff) << 16 | (x[39] & 0xff) << 24,
                    m10 = x[40] & 0xff | (x[41] & 0xff) << 8 | (x[42] & 0xff) << 16 | (x[43] & 0xff) << 24,
                    m11 = x[44] & 0xff | (x[45] & 0xff) << 8 | (x[46] & 0xff) << 16 | (x[47] & 0xff) << 24,
                    m12 = x[48] & 0xff | (x[49] & 0xff) << 8 | (x[50] & 0xff) << 16 | (x[51] & 0xff) << 24,
                    m13 = x[52] & 0xff | (x[53] & 0xff) << 8 | (x[54] & 0xff) << 16 | (x[55] & 0xff) << 24,
                    m14 = x[56] & 0xff | (x[57] & 0xff) << 8 | (x[58] & 0xff) << 16 | (x[59] & 0xff) << 24,
                    m15 = x[60] & 0xff | (x[61] & 0xff) << 8 | (x[62] & 0xff) << 16 | (x[63] & 0xff) << 24;

                // Round 1.
                v0 = v0 + m0 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m2 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m4 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m6 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m5 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m7 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m3 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m1 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m8 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m10 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m12 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m14 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m13 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m15 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m11 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m9 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 2.
                v0 = v0 + m14 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m4 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m9 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m13 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m15 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m6 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m8 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m10 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m1 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m0 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m11 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m5 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m7 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m3 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m2 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m12 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 3.
                v0 = v0 + m11 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m12 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m5 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m15 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m2 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m13 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m0 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m8 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m10 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m3 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m7 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m9 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m1 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m4 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m6 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m14 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 4.
                v0 = v0 + m7 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m3 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m13 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m11 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m12 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m14 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m1 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m9 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m2 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m5 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m4 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m15 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m0 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m8 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m10 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m6 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 5.
                v0 = v0 + m9 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m5 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m2 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m10 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m4 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m15 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m7 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m0 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m14 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m11 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m6 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m3 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m8 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m13 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m12 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m1 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 6.
                v0 = v0 + m2 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m6 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m0 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m8 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m11 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m3 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m10 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m12 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m4 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m7 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m15 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m1 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m14 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m9 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m5 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m13 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 7.
                v0 = v0 + m12 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m1 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m14 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m4 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m13 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m10 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m15 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m5 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m0 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m6 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m9 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m8 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m2 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m11 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m3 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m7 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 8.
                v0 = v0 + m13 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m7 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m12 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m3 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m1 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m9 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m14 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m11 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m5 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m15 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m8 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m2 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m6 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m10 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m4 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m0 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 9.
                v0 = v0 + m6 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m14 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m11 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m0 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m3 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m8 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m9 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m15 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m12 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m13 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m1 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m10 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m4 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m5 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m7 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m2 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                // Round 10.
                v0 = v0 + m10 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v1 = v1 + m8 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v2 = v2 + m7 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v3 = v3 + m1 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v2 = v2 + m6 | 0;
                v2 = v2 + v6 | 0;
                v14 ^= v2;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v10 = v10 + v14 | 0;
                v6 ^= v10;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v3 = v3 + m5 | 0;
                v3 = v3 + v7 | 0;
                v15 ^= v3;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v11 = v11 + v15 | 0;
                v7 ^= v11;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v1 = v1 + m4 | 0;
                v1 = v1 + v5 | 0;
                v13 ^= v1;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v9 = v9 + v13 | 0;
                v5 ^= v9;
                v5 = v5 << (32 - 7) | v5 >>> 7;
                v0 = v0 + m2 | 0;
                v0 = v0 + v4 | 0;
                v12 ^= v0;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v8 = v8 + v12 | 0;
                v4 ^= v8;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v0 = v0 + m15 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 16) | v15 >>> 16;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 12) | v5 >>> 12;
                v1 = v1 + m9 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 16) | v12 >>> 16;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 12) | v6 >>> 12;
                v2 = v2 + m3 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 16) | v13 >>> 16;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 12) | v7 >>> 12;
                v3 = v3 + m13 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 16) | v14 >>> 16;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 12) | v4 >>> 12;
                v2 = v2 + m12 | 0;
                v2 = v2 + v7 | 0;
                v13 ^= v2;
                v13 = v13 << (32 - 8) | v13 >>> 8;
                v8 = v8 + v13 | 0;
                v7 ^= v8;
                v7 = v7 << (32 - 7) | v7 >>> 7;
                v3 = v3 + m0 | 0;
                v3 = v3 + v4 | 0;
                v14 ^= v3;
                v14 = v14 << (32 - 8) | v14 >>> 8;
                v9 = v9 + v14 | 0;
                v4 ^= v9;
                v4 = v4 << (32 - 7) | v4 >>> 7;
                v1 = v1 + m14 | 0;
                v1 = v1 + v6 | 0;
                v12 ^= v1;
                v12 = v12 << (32 - 8) | v12 >>> 8;
                v11 = v11 + v12 | 0;
                v6 ^= v11;
                v6 = v6 << (32 - 7) | v6 >>> 7;
                v0 = v0 + m11 | 0;
                v0 = v0 + v5 | 0;
                v15 ^= v0;
                v15 = v15 << (32 - 8) | v15 >>> 8;
                v10 = v10 + v15 | 0;
                v5 ^= v10;
                v5 = v5 << (32 - 7) | v5 >>> 7;

                this.h[0] ^= v0 ^ v8;
                this.h[1] ^= v1 ^ v9;
                this.h[2] ^= v2 ^ v10;
                this.h[3] ^= v3 ^ v11;
                this.h[4] ^= v4 ^ v12;
                this.h[5] ^= v5 ^ v13;
                this.h[6] ^= v6 ^ v14;
                this.h[7] ^= v7 ^ v15;
            };

            BLAKE2s.prototype.update = function (p, offset, length) {
                if (typeof p === 'string')
                    throw new TypeError('update() accepts Uint8Array or an Array of bytes');
                if (this.isFinished)
                    throw new Error('update() after calling digest()');

                if (typeof offset === 'undefined') {
                    offset = 0;
                }
                if (typeof length === 'undefined') {
                    length = p.length - offset;
                }

                if (length === 0) return this;


                var i, left = 64 - this.nx;

                // Finish buffer.
                if (length > left) {
                    for (i = 0; i < left; i++) {
                        this.x[this.nx + i] = p[offset + i];
                    }
                    this.processBlock(64);
                    offset += left;
                    length -= left;
                    this.nx = 0;
                }

                // Process message blocks.
                while (length > 64) {
                    for (i = 0; i < 64; i++) {
                        this.x[i] = p[offset + i];
                    }
                    this.processBlock(64);
                    offset += 64;
                    length -= 64;
                    this.nx = 0;
                }

                // Copy leftovers to buffer.
                for (i = 0; i < length; i++) {
                    this.x[this.nx + i] = p[offset + i];
                }
                this.nx += length;

                return this;
            };

            BLAKE2s.prototype.digest = function () {
                var i;

                if (this.isFinished) return this.result;

                for (i = this.nx; i < 64; i++) this.x[i] = 0;

                // Set last block flag.
                this.f0 = 0xffffffff;

                //TODO in tree mode, set f1 to 0xffffffff.
                this.processBlock(this.nx);

                var d = new Uint8Array(32);
                for (i = 0; i < 8; i++) {
                    var h = this.h[i];
                    d[i * 4 + 0] = (h >>> 0) & 0xff;
                    d[i * 4 + 1] = (h >>> 8) & 0xff;
                    d[i * 4 + 2] = (h >>> 16) & 0xff;
                    d[i * 4 + 3] = (h >>> 24) & 0xff;
                }
                this.result = new Uint8Array(d.subarray(0, this.digestLength));
                this.isFinished = true;
                return this.result;
            };

            BLAKE2s.prototype.hexDigest = function () {
                var hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
                var out = [];
                var d = this.digest();
                for (var i = 0; i < d.length; i++) {
                    out.push(hex[(d[i] >> 4) & 0xf]);
                    out.push(hex[d[i] & 0xf]);
                }
                return out.join('');
            };

            BLAKE2s.digestLength = MAX_DIGEST_LENGTH;
            BLAKE2s.blockLength = BLOCK_LENGTH;
            BLAKE2s.keyLength = MAX_KEY_LENGTH;
            BLAKE2s.saltLength = SALT_LENGTH;
            BLAKE2s.personalizationLength = PERSONALIZATION_LENGTH;

            return BLAKE2s;

        })();

        if (typeof module !== 'undefined' && module.exports) module.exports = BLAKE2s;

    }, {}],
    195: [function (require, module, exports) {
        arguments[4][20][0].apply(exports, arguments)
    }, {"buffer": 22, "dup": 20}],
    196: [function (require, module, exports) {
        arguments[4][21][0].apply(exports, arguments)
    }, {"crypto": 22, "dup": 21}],
    197: [function (require, module, exports) {
        var basex = require('base-x')
        var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

        module.exports = basex(ALPHABET)

    }, {"base-x": 191}],
    198: [function (require, module, exports) {
        'use strict'

        var base58 = require('bs58')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function (checksumFn) {
            // Encode a buffer as a base58-check encoded string
            function encode(payload) {
                var checksum = checksumFn(payload)

                return base58.encode(Buffer.concat([
                    payload,
                    checksum
                ], payload.length + 4))
            }

            function decodeRaw(buffer) {
                var payload = buffer.slice(0, -4)
                var checksum = buffer.slice(-4)
                var newChecksum = checksumFn(payload)

                if (checksum[0] ^ newChecksum[0] |
                    checksum[1] ^ newChecksum[1] |
                    checksum[2] ^ newChecksum[2] |
                    checksum[3] ^ newChecksum[3]) return

                return payload
            }

            // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
            function decodeUnsafe(string) {
                var buffer = base58.decodeUnsafe(string)
                if (!buffer) return

                return decodeRaw(buffer)
            }

            function decode(string) {
                var buffer = base58.decode(string)
                var payload = decodeRaw(buffer, checksumFn)
                if (!payload) throw new Error('Invalid checksum')
                return payload
            }

            return {
                encode: encode,
                decode: decode,
                decodeUnsafe: decodeUnsafe
            }
        }

    }, {"bs58": 197, "safe-buffer": 428}],
    199: [function (require, module, exports) {
        'use strict'

        var createHash = require('create-hash')
        var bs58checkBase = require('./base')

// SHA256(SHA256(buffer))
        function sha256x2(buffer) {
            var tmp = createHash('sha256').update(buffer).digest()
            return createHash('sha256').update(tmp).digest()
        }

        module.exports = bs58checkBase(sha256x2)

    }, {"./base": 198, "create-hash": 253}],
    200: [function (require, module, exports) {
        arguments[4][52][0].apply(exports, arguments)
    }, {"dup": 52, "inherits": 388, "safe-buffer": 428, "stream": 156, "string_decoder": 157}],
    201: [function (require, module, exports) {
        require('../../modules/es6.string.iterator');
        require('../../modules/es6.array.from');
        module.exports = require('../../modules/_core').Array.from;

    }, {"../../modules/_core": 207, "../../modules/es6.array.from": 251, "../../modules/es6.string.iterator": 252}],
    202: [function (require, module, exports) {
        module.exports = function (it) {
            if (typeof it != 'function') throw TypeError(it + ' is not a function!');
            return it;
        };

    }, {}],
    203: [function (require, module, exports) {
        var isObject = require('./_is-object');
        module.exports = function (it) {
            if (!isObject(it)) throw TypeError(it + ' is not an object!');
            return it;
        };

    }, {"./_is-object": 223}],
    204: [function (require, module, exports) {
// false -> Array#indexOf
// true  -> Array#includes
        var toIObject = require('./_to-iobject');
        var toLength = require('./_to-length');
        var toAbsoluteIndex = require('./_to-absolute-index');
        module.exports = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                // Array#includes uses SameValueZero equality algorithm
                // eslint-disable-next-line no-self-compare
                if (IS_INCLUDES && el != el) while (length > index) {
                    value = O[index++];
                    // eslint-disable-next-line no-self-compare
                    if (value != value) return true;
                    // Array#indexOf ignores holes, Array#includes - not
                } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                }
                return !IS_INCLUDES && -1;
            };
        };

    }, {"./_to-absolute-index": 242, "./_to-iobject": 244, "./_to-length": 245}],
    205: [function (require, module, exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = require('./_cof');
        var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
        var ARG = cof(function () {
            return arguments;
        }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
        var tryGet = function (it, key) {
            try {
                return it[key];
            } catch (e) { /* empty */
            }
        };

        module.exports = function (it) {
            var O, T, B;
            return it === undefined ? 'Undefined' : it === null ? 'Null'
                // @@toStringTag case
                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
                    // builtinTag case
                    : ARG ? cof(O)
                        // ES3 arguments fallback
                        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };

    }, {"./_cof": 206, "./_wks": 249}],
    206: [function (require, module, exports) {
        var toString = {}.toString;

        module.exports = function (it) {
            return toString.call(it).slice(8, -1);
        };

    }, {}],
    207: [function (require, module, exports) {
        var core = module.exports = {version: '2.6.11'};
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

    }, {}],
    208: [function (require, module, exports) {
        'use strict';
        var $defineProperty = require('./_object-dp');
        var createDesc = require('./_property-desc');

        module.exports = function (object, index, value) {
            if (index in object) $defineProperty.f(object, index, createDesc(0, value));
            else object[index] = value;
        };

    }, {"./_object-dp": 231, "./_property-desc": 236}],
    209: [function (require, module, exports) {
// optional / simple context binding
        var aFunction = require('./_a-function');
        module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1:
                    return function (a) {
                        return fn.call(that, a);
                    };
                case 2:
                    return function (a, b) {
                        return fn.call(that, a, b);
                    };
                case 3:
                    return function (a, b, c) {
                        return fn.call(that, a, b, c);
                    };
            }
            return function (/* ...args */) {
                return fn.apply(that, arguments);
            };
        };

    }, {"./_a-function": 202}],
    210: [function (require, module, exports) {
// 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
        };

    }, {}],
    211: [function (require, module, exports) {
// Thank's IE8 for his funny defineProperty
        module.exports = !require('./_fails')(function () {
            return Object.defineProperty({}, 'a', {
                get: function () {
                    return 7;
                }
            }).a != 7;
        });

    }, {"./_fails": 215}],
    212: [function (require, module, exports) {
        var isObject = require('./_is-object');
        var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function (it) {
            return is ? document.createElement(it) : {};
        };

    }, {"./_global": 216, "./_is-object": 223}],
    213: [function (require, module, exports) {
// IE 8- don't enum bug keys
        module.exports = (
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
        ).split(',');

    }, {}],
    214: [function (require, module, exports) {
        var global = require('./_global');
        var core = require('./_core');
        var ctx = require('./_ctx');
        var hide = require('./_hide');
        var has = require('./_has');
        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var IS_WRAP = type & $export.W;
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE];
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
            var key, own, out;
            if (IS_GLOBAL) source = name;
            for (key in source) {
                // contains in native
                own = !IS_FORCED && target && target[key] !== undefined;
                if (own && has(exports, key)) continue;
                // export native or passed
                out = own ? target[key] : source[key];
                // prevent global pollution for namespaces
                exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
                    // bind timers to global for call from export context
                    : IS_BIND && own ? ctx(out, global)
                        // wrap global constructors for prevent change them in library
                        : IS_WRAP && target[key] == out ? (function (C) {
                            var F = function (a, b, c) {
                                if (this instanceof C) {
                                    switch (arguments.length) {
                                        case 0:
                                            return new C();
                                        case 1:
                                            return new C(a);
                                        case 2:
                                            return new C(a, b);
                                    }
                                    return new C(a, b, c);
                                }
                                return C.apply(this, arguments);
                            };
                            F[PROTOTYPE] = C[PROTOTYPE];
                            return F;
                            // make static versions for prototype methods
                        })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
                if (IS_PROTO) {
                    (exports.virtual || (exports.virtual = {}))[key] = out;
                    // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
                    if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
                }
            }
        };
// type bitmap
        $export.F = 1;   // forced
        $export.G = 2;   // global
        $export.S = 4;   // static
        $export.P = 8;   // proto
        $export.B = 16;  // bind
        $export.W = 32;  // wrap
        $export.U = 64;  // safe
        $export.R = 128; // real proto method for `library`
        module.exports = $export;

    }, {"./_core": 207, "./_ctx": 209, "./_global": 216, "./_has": 217, "./_hide": 218}],
    215: [function (require, module, exports) {
        module.exports = function (exec) {
            try {
                return !!exec();
            } catch (e) {
                return true;
            }
        };

    }, {}],
    216: [function (require, module, exports) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math
            ? window : typeof self != 'undefined' && self.Math == Math ? self
                // eslint-disable-next-line no-new-func
                : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

    }, {}],
    217: [function (require, module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function (it, key) {
            return hasOwnProperty.call(it, key);
        };

    }, {}],
    218: [function (require, module, exports) {
        var dP = require('./_object-dp');
        var createDesc = require('./_property-desc');
        module.exports = require('./_descriptors') ? function (object, key, value) {
            return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
            object[key] = value;
            return object;
        };

    }, {"./_descriptors": 211, "./_object-dp": 231, "./_property-desc": 236}],
    219: [function (require, module, exports) {
        var document = require('./_global').document;
        module.exports = document && document.documentElement;

    }, {"./_global": 216}],
    220: [function (require, module, exports) {
        module.exports = !require('./_descriptors') && !require('./_fails')(function () {
            return Object.defineProperty(require('./_dom-create')('div'), 'a', {
                get: function () {
                    return 7;
                }
            }).a != 7;
        });

    }, {"./_descriptors": 211, "./_dom-create": 212, "./_fails": 215}],
    221: [function (require, module, exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
        };

    }, {"./_cof": 206}],
    222: [function (require, module, exports) {
// check on default Array iterator
        var Iterators = require('./_iterators');
        var ITERATOR = require('./_wks')('iterator');
        var ArrayProto = Array.prototype;

        module.exports = function (it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };

    }, {"./_iterators": 228, "./_wks": 249}],
    223: [function (require, module, exports) {
        module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
        };

    }, {}],
    224: [function (require, module, exports) {
// call something on iterator step with safe closing on error
        var anObject = require('./_an-object');
        module.exports = function (iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                // 7.4.6 IteratorClose(iterator, completion)
            } catch (e) {
                var ret = iterator['return'];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
            }
        };

    }, {"./_an-object": 203}],
    225: [function (require, module, exports) {
        'use strict';
        var create = require('./_object-create');
        var descriptor = require('./_property-desc');
        var setToStringTag = require('./_set-to-string-tag');
        var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
            return this;
        });

        module.exports = function (Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
            setToStringTag(Constructor, NAME + ' Iterator');
        };

    }, {"./_hide": 218, "./_object-create": 230, "./_property-desc": 236, "./_set-to-string-tag": 238, "./_wks": 249}],
    226: [function (require, module, exports) {
        'use strict';
        var LIBRARY = require('./_library');
        var $export = require('./_export');
        var redefine = require('./_redefine');
        var hide = require('./_hide');
        var Iterators = require('./_iterators');
        var $iterCreate = require('./_iter-create');
        var setToStringTag = require('./_set-to-string-tag');
        var getPrototypeOf = require('./_object-gpo');
        var ITERATOR = require('./_wks')('iterator');
        var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function () {
            return this;
        };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function (kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind);
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind);
                        };
                }
                return function entries() {
                    return new Constructor(this, kind);
                };
            };
            var TAG = NAME + ' Iterator';
            var DEF_VALUES = DEFAULT == VALUES;
            var VALUES_BUG = false;
            var proto = Base.prototype;
            var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
            var $default = $native || getMethod(DEFAULT);
            var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
            var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
            var methods, key, IteratorPrototype;
            // Fix native
            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                    // Set @@toStringTag to native iterators
                    setToStringTag(IteratorPrototype, TAG, true);
                    // fix for some old engines
                    if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
                }
            }
            // fix Array#{values, @@iterator}.name in V8 / FF
            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                    return $native.call(this);
                };
            }
            // Define iterator
            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
            }
            // Plug for library
            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };
                if (FORCED) for (key in methods) {
                    if (!(key in proto)) redefine(proto, key, methods[key]);
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
        };

    }, {
        "./_export": 214,
        "./_hide": 218,
        "./_iter-create": 225,
        "./_iterators": 228,
        "./_library": 229,
        "./_object-gpo": 233,
        "./_redefine": 237,
        "./_set-to-string-tag": 238,
        "./_wks": 249
    }],
    227: [function (require, module, exports) {
        var ITERATOR = require('./_wks')('iterator');
        var SAFE_CLOSING = false;

        try {
            var riter = [7][ITERATOR]();
            riter['return'] = function () {
                SAFE_CLOSING = true;
            };
            // eslint-disable-next-line no-throw-literal
            Array.from(riter, function () {
                throw 2;
            });
        } catch (e) { /* empty */
        }

        module.exports = function (exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7];
                var iter = arr[ITERATOR]();
                iter.next = function () {
                    return {done: safe = true};
                };
                arr[ITERATOR] = function () {
                    return iter;
                };
                exec(arr);
            } catch (e) { /* empty */
            }
            return safe;
        };

    }, {"./_wks": 249}],
    228: [function (require, module, exports) {
        module.exports = {};

    }, {}],
    229: [function (require, module, exports) {
        module.exports = true;

    }, {}],
    230: [function (require, module, exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = require('./_an-object');
        var dPs = require('./_object-dps');
        var enumBugKeys = require('./_enum-bug-keys');
        var IE_PROTO = require('./_shared-key')('IE_PROTO');
        var Empty = function () { /* empty */
        };
        var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
        var createDict = function () {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = require('./_dom-create')('iframe');
            var i = enumBugKeys.length;
            var lt = '<';
            var gt = '>';
            var iframeDocument;
            iframe.style.display = 'none';
            require('./_html').appendChild(iframe);
            iframe.src = 'javascript:'; // eslint-disable-line no-script-url
            // createDict = iframe.contentWindow.Object;
            // html.removeChild(iframe);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
            return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null;
                // add "__proto__" for Object.getPrototypeOf polyfill
                result[IE_PROTO] = O;
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties);
        };

    }, {
        "./_an-object": 203,
        "./_dom-create": 212,
        "./_enum-bug-keys": 213,
        "./_html": 219,
        "./_object-dps": 232,
        "./_shared-key": 239
    }],
    231: [function (require, module, exports) {
        var anObject = require('./_an-object');
        var IE8_DOM_DEFINE = require('./_ie8-dom-define');
        var toPrimitive = require('./_to-primitive');
        var dP = Object.defineProperty;

        exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
            } catch (e) { /* empty */
            }
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
        };

    }, {"./_an-object": 203, "./_descriptors": 211, "./_ie8-dom-define": 220, "./_to-primitive": 247}],
    232: [function (require, module, exports) {
        var dP = require('./_object-dp');
        var anObject = require('./_an-object');
        var getKeys = require('./_object-keys');

        module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties);
            var length = keys.length;
            var i = 0;
            var P;
            while (length > i) dP.f(O, P = keys[i++], Properties[P]);
            return O;
        };

    }, {"./_an-object": 203, "./_descriptors": 211, "./_object-dp": 231, "./_object-keys": 235}],
    233: [function (require, module, exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = require('./_has');
        var toObject = require('./_to-object');
        var IE_PROTO = require('./_shared-key')('IE_PROTO');
        var ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
        };

    }, {"./_has": 217, "./_shared-key": 239, "./_to-object": 246}],
    234: [function (require, module, exports) {
        var has = require('./_has');
        var toIObject = require('./_to-iobject');
        var arrayIndexOf = require('./_array-includes')(false);
        var IE_PROTO = require('./_shared-key')('IE_PROTO');

        module.exports = function (object, names) {
            var O = toIObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
            // Don't enum bug & hidden keys
            while (names.length > i) if (has(O, key = names[i++])) {
                ~arrayIndexOf(result, key) || result.push(key);
            }
            return result;
        };

    }, {"./_array-includes": 204, "./_has": 217, "./_shared-key": 239, "./_to-iobject": 244}],
    235: [function (require, module, exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = require('./_object-keys-internal');
        var enumBugKeys = require('./_enum-bug-keys');

        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
        };

    }, {"./_enum-bug-keys": 213, "./_object-keys-internal": 234}],
    236: [function (require, module, exports) {
        module.exports = function (bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            };
        };

    }, {}],
    237: [function (require, module, exports) {
        module.exports = require('./_hide');

    }, {"./_hide": 218}],
    238: [function (require, module, exports) {
        var def = require('./_object-dp').f;
        var has = require('./_has');
        var TAG = require('./_wks')('toStringTag');

        module.exports = function (it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {configurable: true, value: tag});
        };

    }, {"./_has": 217, "./_object-dp": 231, "./_wks": 249}],
    239: [function (require, module, exports) {
        var shared = require('./_shared')('keys');
        var uid = require('./_uid');
        module.exports = function (key) {
            return shared[key] || (shared[key] = uid(key));
        };

    }, {"./_shared": 240, "./_uid": 248}],
    240: [function (require, module, exports) {
        var core = require('./_core');
        var global = require('./_global');
        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});

        (module.exports = function (key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
            version: core.version,
            mode: require('./_library') ? 'pure' : 'global',
            copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
        });

    }, {"./_core": 207, "./_global": 216, "./_library": 229}],
    241: [function (require, module, exports) {
        var toInteger = require('./_to-integer');
        var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
        module.exports = function (TO_STRING) {
            return function (that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                a = s.charCodeAt(i);
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
                    ? TO_STRING ? s.charAt(i) : a
                    : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
        };

    }, {"./_defined": 210, "./_to-integer": 243}],
    242: [function (require, module, exports) {
        var toInteger = require('./_to-integer');
        var max = Math.max;
        var min = Math.min;
        module.exports = function (index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
        };

    }, {"./_to-integer": 243}],
    243: [function (require, module, exports) {
// 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function (it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };

    }, {}],
    244: [function (require, module, exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = require('./_iobject');
        var defined = require('./_defined');
        module.exports = function (it) {
            return IObject(defined(it));
        };

    }, {"./_defined": 210, "./_iobject": 221}],
    245: [function (require, module, exports) {
// 7.1.15 ToLength
        var toInteger = require('./_to-integer');
        var min = Math.min;
        module.exports = function (it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };

    }, {"./_to-integer": 243}],
    246: [function (require, module, exports) {
// 7.1.13 ToObject(argument)
        var defined = require('./_defined');
        module.exports = function (it) {
            return Object(defined(it));
        };

    }, {"./_defined": 210}],
    247: [function (require, module, exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
        module.exports = function (it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
            if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
        };

    }, {"./_is-object": 223}],
    248: [function (require, module, exports) {
        var id = 0;
        var px = Math.random();
        module.exports = function (key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };

    }, {}],
    249: [function (require, module, exports) {
        var store = require('./_shared')('wks');
        var uid = require('./_uid');
        var Symbol = require('./_global').Symbol;
        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
            return store[name] || (store[name] =
                USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;

    }, {"./_global": 216, "./_shared": 240, "./_uid": 248}],
    250: [function (require, module, exports) {
        var classof = require('./_classof');
        var ITERATOR = require('./_wks')('iterator');
        var Iterators = require('./_iterators');
        module.exports = require('./_core').getIteratorMethod = function (it) {
            if (it != undefined) return it[ITERATOR]
                || it['@@iterator']
                || Iterators[classof(it)];
        };

    }, {"./_classof": 205, "./_core": 207, "./_iterators": 228, "./_wks": 249}],
    251: [function (require, module, exports) {
        'use strict';
        var ctx = require('./_ctx');
        var $export = require('./_export');
        var toObject = require('./_to-object');
        var call = require('./_iter-call');
        var isArrayIter = require('./_is-array-iter');
        var toLength = require('./_to-length');
        var createProperty = require('./_create-property');
        var getIterFn = require('./core.get-iterator-method');

        $export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
            Array.from(iter);
        }), 'Array', {
            // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
            from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                var O = toObject(arrayLike);
                var C = typeof this == 'function' ? this : Array;
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var index = 0;
                var iterFn = getIterFn(O);
                var length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                // if object isn't iterable or it's array with default iterator - use simple case
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                    }
                } else {
                    length = toLength(O.length);
                    for (result = new C(length); length > index; index++) {
                        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                    }
                }
                result.length = index;
                return result;
            }
        });

    }, {
        "./_create-property": 208,
        "./_ctx": 209,
        "./_export": 214,
        "./_is-array-iter": 222,
        "./_iter-call": 224,
        "./_iter-detect": 227,
        "./_to-length": 245,
        "./_to-object": 246,
        "./core.get-iterator-method": 250
    }],
    252: [function (require, module, exports) {
        'use strict';
        var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
        require('./_iter-define')(String, 'String', function (iterated) {
            this._t = String(iterated); // target
            this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
        }, function () {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return {value: undefined, done: true};
            point = $at(O, index);
            this._i += point.length;
            return {value: point, done: false};
        });

    }, {"./_iter-define": 226, "./_string-at": 241}],
    253: [function (require, module, exports) {
        arguments[4][55][0].apply(exports, arguments)
    }, {"cipher-base": 200, "dup": 55, "inherits": 388, "md5.js": 408, "ripemd160": 426, "sha.js": 455}],
    254: [function (require, module, exports) {
        var wordlist = require('./wordlist');

        var DEFAULT_NUMWORDS = 5;
        var WORDLIST_SIZE = 7776; // 6^5

        module.exports = function (numwords) {
            numwords = numwords || DEFAULT_NUMWORDS;

            var phrase = "";

            for (var i = 0; i < numwords; i++) {
                var rand = Math.floor(Math.random() * WORDLIST_SIZE);
                phrase += wordlist[rand] + " ";
            }

            // remove the trailing space
            return phrase.substring(0, phrase.length - 1);
        }

    }, {"./wordlist": 255}],
    255: [function (require, module, exports) {
        module.exports = [
            "a",
            "a&p",
            "a's",
            "aa",
            "aaa",
            "aaaa",
            "aaron",
            "ab",
            "aba",
            "ababa",
            "aback",
            "abase",
            "abash",
            "abate",
            "abbas",
            "abbe",
            "abbey",
            "abbot",
            "abbott",
            "abc",
            "abe",
            "abed",
            "abel",
            "abet",
            "abide",
            "abject",
            "ablaze",
            "able",
            "abner",
            "abo",
            "abode",
            "abort",
            "about",
            "above",
            "abrade",
            "abram",
            "absorb",
            "abuse",
            "abut",
            "abyss",
            "ac",
            "acadia",
            "accra",
            "accrue",
            "ace",
            "acetic",
            "ache",
            "acid",
            "acidic",
            "acm",
            "acme",
            "acorn",
            "acre",
            "acrid",
            "act",
            "acton",
            "actor",
            "acts",
            "acuity",
            "acute",
            "ad",
            "ada",
            "adage",
            "adagio",
            "adair",
            "adam",
            "adams",
            "adapt",
            "add",
            "added",
            "addict",
            "addis",
            "addle",
            "adele",
            "aden",
            "adept",
            "adieu",
            "adjust",
            "adler",
            "admit",
            "admix",
            "ado",
            "adobe",
            "adonis",
            "adopt",
            "adore",
            "adorn",
            "adult",
            "advent",
            "advert",
            "advise",
            "ae",
            "aegis",
            "aeneid",
            "af",
            "afar",
            "affair",
            "affine",
            "affix",
            "afire",
            "afoot",
            "afraid",
            "africa",
            "afro",
            "aft",
            "ag",
            "again",
            "agate",
            "agave",
            "age",
            "agee",
            "agenda",
            "agent",
            "agile",
            "aging",
            "agnes",
            "agnew",
            "ago",
            "agone",
            "agony",
            "agree",
            "ague",
            "agway",
            "ah",
            "ahead",
            "ahem",
            "ahoy",
            "ai",
            "aid",
            "aida",
            "aide",
            "aides",
            "aiken",
            "ail",
            "aile",
            "aim",
            "ain't",
            "ainu",
            "air",
            "aires",
            "airman",
            "airway",
            "airy",
            "aisle",
            "aj",
            "ajar",
            "ajax",
            "ak",
            "akers",
            "akin",
            "akron",
            "al",
            "ala",
            "alai",
            "alamo",
            "alan",
            "alarm",
            "alaska",
            "alb",
            "alba",
            "album",
            "alcoa",
            "alden",
            "alder",
            "ale",
            "alec",
            "aleck",
            "aleph",
            "alert",
            "alex",
            "alexei",
            "alga",
            "algae",
            "algal",
            "alger",
            "algol",
            "ali",
            "alia",
            "alias",
            "alibi",
            "alice",
            "alien",
            "alight",
            "align",
            "alike",
            "alive",
            "all",
            "allah",
            "allan",
            "allay",
            "allen",
            "alley",
            "allied",
            "allis",
            "allot",
            "allow",
            "alloy",
            "allure",
            "ally",
            "allyl",
            "allyn",
            "alma",
            "almost",
            "aloe",
            "aloft",
            "aloha",
            "alone",
            "along",
            "aloof",
            "aloud",
            "alp",
            "alpha",
            "alps",
            "also",
            "alsop",
            "altair",
            "altar",
            "alter",
            "alto",
            "alton",
            "alum",
            "alumni",
            "alva",
            "alvin",
            "alway",
            "am",
            "ama",
            "amass",
            "amaze",
            "amber",
            "amble",
            "ambush",
            "amen",
            "amend",
            "ames",
            "ami",
            "amid",
            "amide",
            "amigo",
            "amino",
            "amiss",
            "amity",
            "amman",
            "ammo",
            "amoco",
            "amok",
            "among",
            "amort",
            "amos",
            "amp",
            "ampere",
            "ampex",
            "ample",
            "amply",
            "amra",
            "amulet",
            "amuse",
            "amy",
            "an",
            "ana",
            "and",
            "andes",
            "andre",
            "andrew",
            "andy",
            "anent",
            "anew",
            "angel",
            "angelo",
            "anger",
            "angie",
            "angle",
            "anglo",
            "angola",
            "angry",
            "angst",
            "angus",
            "ani",
            "anion",
            "anise",
            "anita",
            "ankle",
            "ann",
            "anna",
            "annal",
            "anne",
            "annex",
            "annie",
            "annoy",
            "annul",
            "annuli",
            "annum",
            "anode",
            "ansi",
            "answer",
            "ant",
            "ante",
            "anti",
            "antic",
            "anton",
            "anus",
            "anvil",
            "any",
            "anyhow",
            "anyway",
            "ao",
            "aok",
            "aorta",
            "ap",
            "apart",
            "apathy",
            "ape",
            "apex",
            "aphid",
            "aplomb",
            "appeal",
            "append",
            "apple",
            "apply",
            "april",
            "apron",
            "apse",
            "apt",
            "aq",
            "aqua",
            "ar",
            "arab",
            "araby",
            "arc",
            "arcana",
            "arch",
            "archer",
            "arden",
            "ardent",
            "are",
            "area",
            "arena",
            "ares",
            "argive",
            "argo",
            "argon",
            "argot",
            "argue",
            "argus",
            "arhat",
            "arid",
            "aries",
            "arise",
            "ark",
            "arlen",
            "arlene",
            "arm",
            "armco",
            "army",
            "arnold",
            "aroma",
            "arose",
            "arpa",
            "array",
            "arrear",
            "arrow",
            "arson",
            "art",
            "artery",
            "arthur",
            "artie",
            "arty",
            "aruba",
            "arum",
            "aryl",
            "as",
            "ascend",
            "ash",
            "ashen",
            "asher",
            "ashley",
            "ashy",
            "asia",
            "aside",
            "ask",
            "askew",
            "asleep",
            "aspen",
            "aspire",
            "ass",
            "assai",
            "assam",
            "assay",
            "asset",
            "assort",
            "assure",
            "aster",
            "astm",
            "astor",
            "astral",
            "at",
            "at&t",
            "ate",
            "athens",
            "atlas",
            "atom",
            "atomic",
            "atone",
            "atop",
            "attic",
            "attire",
            "au",
            "aubrey",
            "audio",
            "audit",
            "aug",
            "auger",
            "augur",
            "august",
            "auk",
            "aunt",
            "aura",
            "aural",
            "auric",
            "austin",
            "auto",
            "autumn",
            "av",
            "avail",
            "ave",
            "aver",
            "avert",
            "avery",
            "aviate",
            "avid",
            "avis",
            "aviv",
            "avoid",
            "avon",
            "avow",
            "aw",
            "await",
            "awake",
            "award",
            "aware",
            "awash",
            "away",
            "awe",
            "awful",
            "awl",
            "awn",
            "awoke",
            "awry",
            "ax",
            "axe",
            "axes",
            "axial",
            "axiom",
            "axis",
            "axle",
            "axon",
            "ay",
            "aye",
            "ayers",
            "az",
            "aztec",
            "azure",
            "b",
            "b's",
            "ba",
            "babe",
            "babel",
            "baby",
            "bach",
            "back",
            "backup",
            "bacon",
            "bad",
            "bade",
            "baden",
            "badge",
            "baffle",
            "bag",
            "baggy",
            "bah",
            "bahama",
            "bail",
            "baird",
            "bait",
            "bake",
            "baku",
            "bald",
            "baldy",
            "bale",
            "bali",
            "balk",
            "balkan",
            "balky",
            "ball",
            "balled",
            "ballot",
            "balm",
            "balmy",
            "balsa",
            "bam",
            "bambi",
            "ban",
            "banal",
            "band",
            "bandit",
            "bandy",
            "bane",
            "bang",
            "banish",
            "banjo",
            "bank",
            "banks",
            "bantu",
            "bar",
            "barb",
            "bard",
            "bare",
            "barfly",
            "barge",
            "bark",
            "barley",
            "barn",
            "barnes",
            "baron",
            "barony",
            "barr",
            "barre",
            "barry",
            "barter",
            "barth",
            "barton",
            "basal",
            "base",
            "basel",
            "bash",
            "basic",
            "basil",
            "basin",
            "basis",
            "bask",
            "bass",
            "bassi",
            "basso",
            "baste",
            "bat",
            "batch",
            "bate",
            "bater",
            "bates",
            "bath",
            "bathe",
            "batik",
            "baton",
            "bator",
            "batt",
            "bauble",
            "baud",
            "bauer",
            "bawd",
            "bawdy",
            "bawl",
            "baxter",
            "bay",
            "bayda",
            "bayed",
            "bayou",
            "bazaar",
            "bb",
            "bbb",
            "bbbb",
            "bc",
            "bcd",
            "bd",
            "be",
            "beach",
            "bead",
            "beady",
            "beak",
            "beam",
            "bean",
            "bear",
            "beard",
            "beast",
            "beat",
            "beau",
            "beauty",
            "beaux",
            "bebop",
            "becalm",
            "beck",
            "becker",
            "becky",
            "bed",
            "bedim",
            "bee",
            "beebe",
            "beech",
            "beef",
            "beefy",
            "been",
            "beep",
            "beer",
            "beet",
            "befall",
            "befit",
            "befog",
            "beg",
            "began",
            "beget",
            "beggar",
            "begin",
            "begun",
            "behind",
            "beige",
            "being",
            "beirut",
            "bel",
            "bela",
            "belch",
            "belfry",
            "belie",
            "bell",
            "bella",
            "belle",
            "belly",
            "below",
            "belt",
            "bema",
            "beman",
            "bemoan",
            "ben",
            "bench",
            "bend",
            "bender",
            "benny",
            "bent",
            "benz",
            "berea",
            "bereft",
            "beret",
            "berg",
            "berlin",
            "bern",
            "berne",
            "bernet",
            "berra",
            "berry",
            "bert",
            "berth",
            "beryl",
            "beset",
            "bess",
            "bessel",
            "best",
            "bestir",
            "bet",
            "beta",
            "betel",
            "beth",
            "bethel",
            "betsy",
            "bette",
            "betty",
            "bevel",
            "bevy",
            "beware",
            "bey",
            "bezel",
            "bf",
            "bg",
            "bh",
            "bhoy",
            "bi",
            "bias",
            "bib",
            "bibb",
            "bible",
            "bicep",
            "biceps",
            "bid",
            "biddy",
            "bide",
            "bien",
            "big",
            "biggs",
            "bigot",
            "bile",
            "bilge",
            "bilk",
            "bill",
            "billow",
            "billy",
            "bin",
            "binary",
            "bind",
            "bing",
            "binge",
            "bingle",
            "bini",
            "biota",
            "birch",
            "bird",
            "birdie",
            "birth",
            "bison",
            "bisque",
            "bit",
            "bitch",
            "bite",
            "bitt",
            "bitten",
            "biz",
            "bizet",
            "bj",
            "bk",
            "bl",
            "blab",
            "black",
            "blade",
            "blair",
            "blake",
            "blame",
            "blanc",
            "bland",
            "blank",
            "blare",
            "blast",
            "blat",
            "blatz",
            "blaze",
            "bleak",
            "bleat",
            "bled",
            "bleed",
            "blend",
            "bless",
            "blest",
            "blew",
            "blimp",
            "blind",
            "blink",
            "blinn",
            "blip",
            "bliss",
            "blithe",
            "blitz",
            "bloat",
            "blob",
            "bloc",
            "bloch",
            "block",
            "bloke",
            "blond",
            "blonde",
            "blood",
            "bloom",
            "bloop",
            "blot",
            "blotch",
            "blow",
            "blown",
            "blue",
            "bluet",
            "bluff",
            "blum",
            "blunt",
            "blur",
            "blurt",
            "blush",
            "blvd",
            "blythe",
            "bm",
            "bmw",
            "bn",
            "bo",
            "boa",
            "boar",
            "board",
            "boast",
            "boat",
            "bob",
            "bobbin",
            "bobby",
            "bobcat",
            "boca",
            "bock",
            "bode",
            "body",
            "bog",
            "bogey",
            "boggy",
            "bogus",
            "bogy",
            "bohr",
            "boil",
            "bois",
            "boise",
            "bold",
            "bole",
            "bolo",
            "bolt",
            "bomb",
            "bombay",
            "bon",
            "bona",
            "bond",
            "bone",
            "bong",
            "bongo",
            "bonn",
            "bonus",
            "bony",
            "bonze",
            "boo",
            "booby",
            "boogie",
            "book",
            "booky",
            "boom",
            "boon",
            "boone",
            "boor",
            "boost",
            "boot",
            "booth",
            "booty",
            "booze",
            "bop",
            "borax",
            "border",
            "bore",
            "borg",
            "boric",
            "boris",
            "born",
            "borne",
            "borneo",
            "boron",
            "bosch",
            "bose",
            "bosom",
            "boson",
            "boss",
            "boston",
            "botch",
            "both",
            "bottle",
            "bough",
            "bouncy",
            "bound",
            "bourn",
            "bout",
            "bovine",
            "bow",
            "bowel",
            "bowen",
            "bowie",
            "bowl",
            "box",
            "boxy",
            "boy",
            "boyar",
            "boyce",
            "boyd",
            "boyle",
            "bp",
            "bq",
            "br",
            "brace",
            "bract",
            "brad",
            "brady",
            "brae",
            "brag",
            "bragg",
            "braid",
            "brain",
            "brainy",
            "brake",
            "bran",
            "brand",
            "brandt",
            "brant",
            "brash",
            "brass",
            "brassy",
            "braun",
            "brave",
            "bravo",
            "brawl",
            "bray",
            "bread",
            "break",
            "bream",
            "breath",
            "bred",
            "breed",
            "breeze",
            "bremen",
            "brent",
            "brest",
            "brett",
            "breve",
            "brew",
            "brian",
            "briar",
            "bribe",
            "brice",
            "brick",
            "bride",
            "brief",
            "brig",
            "briggs",
            "brim",
            "brine",
            "bring",
            "brink",
            "briny",
            "brisk",
            "broad",
            "brock",
            "broil",
            "broke",
            "broken",
            "bronx",
            "brood",
            "brook",
            "brooke",
            "broom",
            "broth",
            "brow",
            "brown",
            "browse",
            "bruce",
            "bruit",
            "brunch",
            "bruno",
            "brunt",
            "brush",
            "brute",
            "bryan",
            "bryant",
            "bryce",
            "bryn",
            "bs",
            "bstj",
            "bt",
            "btl",
            "bu",
            "bub",
            "buck",
            "bud",
            "budd",
            "buddy",
            "budge",
            "buena",
            "buenos",
            "buff",
            "bug",
            "buggy",
            "bugle",
            "buick",
            "build",
            "built",
            "bulb",
            "bulge",
            "bulk",
            "bulky",
            "bull",
            "bully",
            "bum",
            "bump",
            "bun",
            "bunch",
            "bundy",
            "bunk",
            "bunny",
            "bunt",
            "bunyan",
            "buoy",
            "burch",
            "bureau",
            "buret",
            "burg",
            "buried",
            "burke",
            "burl",
            "burly",
            "burma",
            "burn",
            "burnt",
            "burp",
            "burr",
            "burro",
            "burst",
            "burt",
            "burton",
            "burtt",
            "bury",
            "bus",
            "busch",
            "bush",
            "bushel",
            "bushy",
            "buss",
            "bust",
            "busy",
            "but",
            "butane",
            "butch",
            "buteo",
            "butt",
            "butte",
            "butyl",
            "buxom",
            "buy",
            "buyer",
            "buzz",
            "buzzy",
            "bv",
            "bw",
            "bx",
            "by",
            "bye",
            "byers",
            "bylaw",
            "byline",
            "byrd",
            "byrne",
            "byron",
            "byte",
            "byway",
            "byword",
            "bz",
            "c",
            "c's",
            "ca",
            "cab",
            "cabal",
            "cabin",
            "cable",
            "cabot",
            "cacao",
            "cache",
            "cacm",
            "cacti",
            "caddy",
            "cadent",
            "cadet",
            "cadre",
            "cady",
            "cafe",
            "cage",
            "cagey",
            "cahill",
            "caiman",
            "cain",
            "caine",
            "cairn",
            "cairo",
            "cake",
            "cal",
            "calder",
            "caleb",
            "calf",
            "call",
            "calla",
            "callus",
            "calm",
            "calve",
            "cam",
            "camber",
            "came",
            "camel",
            "cameo",
            "camp",
            "can",
            "can't",
            "canal",
            "canary",
            "cancer",
            "candle",
            "candy",
            "cane",
            "canis",
            "canna",
            "cannot",
            "canny",
            "canoe",
            "canon",
            "canopy",
            "cant",
            "canto",
            "canton",
            "cap",
            "cape",
            "caper",
            "capo",
            "car",
            "carbon",
            "card",
            "care",
            "caress",
            "caret",
            "carey",
            "cargo",
            "carib",
            "carl",
            "carla",
            "carlo",
            "carne",
            "carob",
            "carol",
            "carp",
            "carpet",
            "carr",
            "carrie",
            "carry",
            "carson",
            "cart",
            "carte",
            "caruso",
            "carve",
            "case",
            "casey",
            "cash",
            "cashew",
            "cask",
            "casket",
            "cast",
            "caste",
            "cat",
            "catch",
            "cater",
            "cathy",
            "catkin",
            "catsup",
            "cauchy",
            "caulk",
            "cause",
            "cave",
            "cavern",
            "cavil",
            "cavort",
            "caw",
            "cayuga",
            "cb",
            "cbs",
            "cc",
            "ccc",
            "cccc",
            "cd",
            "cdc",
            "ce",
            "cease",
            "cecil",
            "cedar",
            "cede",
            "ceil",
            "celia",
            "cell",
            "census",
            "cent",
            "ceres",
            "cern",
            "cetera",
            "cetus",
            "cf",
            "cg",
            "ch",
            "chad",
            "chafe",
            "chaff",
            "chai",
            "chain",
            "chair",
            "chalk",
            "champ",
            "chance",
            "chang",
            "chant",
            "chao",
            "chaos",
            "chap",
            "chapel",
            "char",
            "chard",
            "charm",
            "chart",
            "chase",
            "chasm",
            "chaste",
            "chat",
            "chaw",
            "cheap",
            "cheat",
            "check",
            "cheek",
            "cheeky",
            "cheer",
            "chef",
            "chen",
            "chert",
            "cherub",
            "chess",
            "chest",
            "chevy",
            "chew",
            "chi",
            "chic",
            "chick",
            "chide",
            "chief",
            "child",
            "chile",
            "chili",
            "chill",
            "chilly",
            "chime",
            "chin",
            "china",
            "chine",
            "chink",
            "chip",
            "chirp",
            "chisel",
            "chit",
            "chive",
            "chock",
            "choir",
            "choke",
            "chomp",
            "chop",
            "chopin",
            "choral",
            "chord",
            "chore",
            "chose",
            "chosen",
            "chou",
            "chow",
            "chris",
            "chub",
            "chuck",
            "chuff",
            "chug",
            "chum",
            "chump",
            "chunk",
            "churn",
            "chute",
            "ci",
            "cia",
            "cicada",
            "cider",
            "cigar",
            "cilia",
            "cinch",
            "cindy",
            "cipher",
            "circa",
            "circe",
            "cite",
            "citrus",
            "city",
            "civet",
            "civic",
            "civil",
            "cj",
            "ck",
            "cl",
            "clad",
            "claim",
            "clam",
            "clammy",
            "clamp",
            "clan",
            "clang",
            "clank",
            "clap",
            "clara",
            "clare",
            "clark",
            "clarke",
            "clash",
            "clasp",
            "class",
            "claus",
            "clause",
            "claw",
            "clay",
            "clean",
            "clear",
            "cleat",
            "cleft",
            "clerk",
            "cliche",
            "click",
            "cliff",
            "climb",
            "clime",
            "cling",
            "clink",
            "clint",
            "clio",
            "clip",
            "clive",
            "cloak",
            "clock",
            "clod",
            "clog",
            "clomp",
            "clone",
            "close",
            "closet",
            "clot",
            "cloth",
            "cloud",
            "clout",
            "clove",
            "clown",
            "cloy",
            "club",
            "cluck",
            "clue",
            "cluj",
            "clump",
            "clumsy",
            "clung",
            "clyde",
            "cm",
            "cn",
            "co",
            "coach",
            "coal",
            "coast",
            "coat",
            "coax",
            "cobb",
            "cobble",
            "cobol",
            "cobra",
            "coca",
            "cock",
            "cockle",
            "cocky",
            "coco",
            "cocoa",
            "cod",
            "coda",
            "coddle",
            "code",
            "codon",
            "cody",
            "coed",
            "cog",
            "cogent",
            "cohen",
            "cohn",
            "coil",
            "coin",
            "coke",
            "col",
            "cola",
            "colby",
            "cold",
            "cole",
            "colon",
            "colony",
            "colt",
            "colza",
            "coma",
            "comb",
            "combat",
            "come",
            "comet",
            "cometh",
            "comic",
            "comma",
            "con",
            "conch",
            "cone",
            "coney",
            "congo",
            "conic",
            "conn",
            "conner",
            "conway",
            "cony",
            "coo",
            "cook",
            "cooke",
            "cooky",
            "cool",
            "cooley",
            "coon",
            "coop",
            "coors",
            "coot",
            "cop",
            "cope",
            "copra",
            "copy",
            "coral",
            "corbel",
            "cord",
            "core",
            "corey",
            "cork",
            "corn",
            "corny",
            "corp",
            "corps",
            "corvus",
            "cos",
            "cosec",
            "coset",
            "cosh",
            "cost",
            "costa",
            "cosy",
            "cot",
            "cotta",
            "cotty",
            "couch",
            "cough",
            "could",
            "count",
            "coup",
            "coupe",
            "court",
            "cousin",
            "cove",
            "coven",
            "cover",
            "covet",
            "cow",
            "cowan",
            "cowl",
            "cowman",
            "cowry",
            "cox",
            "coy",
            "coyote",
            "coypu",
            "cozen",
            "cozy",
            "cp",
            "cpa",
            "cq",
            "cr",
            "crab",
            "crack",
            "craft",
            "crag",
            "craig",
            "cram",
            "cramp",
            "crane",
            "crank",
            "crap",
            "crash",
            "crass",
            "crate",
            "crater",
            "crave",
            "craw",
            "crawl",
            "craze",
            "crazy",
            "creak",
            "cream",
            "credit",
            "credo",
            "creed",
            "creek",
            "creep",
            "creole",
            "creon",
            "crepe",
            "crept",
            "cress",
            "crest",
            "crete",
            "crew",
            "crib",
            "cried",
            "crime",
            "crimp",
            "crisp",
            "criss",
            "croak",
            "crock",
            "crocus",
            "croft",
            "croix",
            "crone",
            "crony",
            "crook",
            "croon",
            "crop",
            "cross",
            "crow",
            "crowd",
            "crown",
            "crt",
            "crud",
            "crude",
            "cruel",
            "crumb",
            "crump",
            "crush",
            "crust",
            "crux",
            "cruz",
            "cry",
            "crypt",
            "cs",
            "ct",
            "cu",
            "cub",
            "cuba",
            "cube",
            "cubic",
            "cud",
            "cuddle",
            "cue",
            "cuff",
            "cull",
            "culpa",
            "cult",
            "cumin",
            "cuny",
            "cup",
            "cupful",
            "cupid",
            "cur",
            "curb",
            "curd",
            "cure",
            "curfew",
            "curia",
            "curie",
            "curio",
            "curl",
            "curry",
            "curse",
            "curt",
            "curve",
            "cusp",
            "cut",
            "cute",
            "cutlet",
            "cv",
            "cw",
            "cx",
            "cy",
            "cycad",
            "cycle",
            "cynic",
            "cyril",
            "cyrus",
            "cyst",
            "cz",
            "czar",
            "czech",
            "d",
            "d'art",
            "d's",
            "da",
            "dab",
            "dacca",
            "dactyl",
            "dad",
            "dada",
            "daddy",
            "dade",
            "daffy",
            "dahl",
            "dahlia",
            "dairy",
            "dais",
            "daisy",
            "dakar",
            "dale",
            "daley",
            "dally",
            "daly",
            "dam",
            "dame",
            "damn",
            "damon",
            "damp",
            "damsel",
            "dan",
            "dana",
            "dance",
            "dandy",
            "dane",
            "dang",
            "dank",
            "danny",
            "dante",
            "dar",
            "dare",
            "dark",
            "darken",
            "darn",
            "darry",
            "dart",
            "dash",
            "data",
            "date",
            "dater",
            "datum",
            "daub",
            "daunt",
            "dave",
            "david",
            "davis",
            "davit",
            "davy",
            "dawn",
            "dawson",
            "day",
            "daze",
            "db",
            "dc",
            "dd",
            "ddd",
            "dddd",
            "de",
            "deacon",
            "dead",
            "deaf",
            "deal",
            "dealt",
            "dean",
            "deane",
            "dear",
            "death",
            "debar",
            "debby",
            "debit",
            "debra",
            "debris",
            "debt",
            "debug",
            "debut",
            "dec",
            "decal",
            "decay",
            "decca",
            "deck",
            "decker",
            "decor",
            "decree",
            "decry",
            "dee",
            "deed",
            "deem",
            "deep",
            "deer",
            "deere",
            "def",
            "defer",
            "deform",
            "deft",
            "defy",
            "degas",
            "degum",
            "deify",
            "deign",
            "deity",
            "deja",
            "del",
            "delay",
            "delft",
            "delhi",
            "delia",
            "dell",
            "della",
            "delta",
            "delve",
            "demark",
            "demit",
            "demon",
            "demur",
            "den",
            "deneb",
            "denial",
            "denny",
            "dense",
            "dent",
            "denton",
            "deny",
            "depot",
            "depth",
            "depute",
            "derby",
            "derek",
            "des",
            "desist",
            "desk",
            "detach",
            "deter",
            "deuce",
            "deus",
            "devil",
            "devoid",
            "devon",
            "dew",
            "dewar",
            "dewey",
            "dewy",
            "dey",
            "df",
            "dg",
            "dh",
            "dhabi",
            "di",
            "dial",
            "diana",
            "diane",
            "diary",
            "dibble",
            "dice",
            "dick",
            "dicta",
            "did",
            "dido",
            "die",
            "died",
            "diego",
            "diem",
            "diesel",
            "diet",
            "diety",
            "dietz",
            "dig",
            "digit",
            "dilate",
            "dill",
            "dim",
            "dime",
            "din",
            "dinah",
            "dine",
            "ding",
            "dingo",
            "dingy",
            "dint",
            "diode",
            "dip",
            "dirac",
            "dire",
            "dirge",
            "dirt",
            "dirty",
            "dis",
            "disc",
            "dish",
            "disk",
            "disney",
            "ditch",
            "ditto",
            "ditty",
            "diva",
            "divan",
            "dive",
            "dixie",
            "dixon",
            "dizzy",
            "dj",
            "dk",
            "dl",
            "dm",
            "dn",
            "dna",
            "do",
            "dobbs",
            "dobson",
            "dock",
            "docket",
            "dod",
            "dodd",
            "dodge",
            "dodo",
            "doe",
            "doff",
            "dog",
            "doge",
            "dogma",
            "dolan",
            "dolce",
            "dole",
            "doll",
            "dolly",
            "dolt",
            "dome",
            "don",
            "don't",
            "done",
            "doneck",
            "donna",
            "donor",
            "doom",
            "door",
            "dope",
            "dora",
            "doria",
            "doric",
            "doris",
            "dose",
            "dot",
            "dote",
            "double",
            "doubt",
            "douce",
            "doug",
            "dough",
            "dour",
            "douse",
            "dove",
            "dow",
            "dowel",
            "down",
            "downs",
            "dowry",
            "doyle",
            "doze",
            "dozen",
            "dp",
            "dq",
            "dr",
            "drab",
            "draco",
            "draft",
            "drag",
            "drain",
            "drake",
            "dram",
            "drama",
            "drank",
            "drape",
            "draw",
            "drawl",
            "drawn",
            "dread",
            "dream",
            "dreamy",
            "dreg",
            "dress",
            "dressy",
            "drew",
            "drib",
            "dried",
            "drier",
            "drift",
            "drill",
            "drink",
            "drip",
            "drive",
            "droll",
            "drone",
            "drool",
            "droop",
            "drop",
            "dross",
            "drove",
            "drown",
            "drub",
            "drug",
            "druid",
            "drum",
            "drunk",
            "drury",
            "dry",
            "dryad",
            "ds",
            "dt",
            "du",
            "dual",
            "duane",
            "dub",
            "dubhe",
            "dublin",
            "ducat",
            "duck",
            "duct",
            "dud",
            "due",
            "duel",
            "duet",
            "duff",
            "duffy",
            "dug",
            "dugan",
            "duke",
            "dull",
            "dully",
            "dulse",
            "duly",
            "duma",
            "dumb",
            "dummy",
            "dump",
            "dumpy",
            "dun",
            "dunce",
            "dune",
            "dung",
            "dunham",
            "dunk",
            "dunlop",
            "dunn",
            "dupe",
            "durer",
            "dusk",
            "dusky",
            "dust",
            "dusty",
            "dutch",
            "duty",
            "dv",
            "dw",
            "dwarf",
            "dwell",
            "dwelt",
            "dwight",
            "dwyer",
            "dx",
            "dy",
            "dyad",
            "dye",
            "dyer",
            "dying",
            "dyke",
            "dylan",
            "dyne",
            "dz",
            "e",
            "e'er",
            "e's",
            "ea",
            "each",
            "eagan",
            "eager",
            "eagle",
            "ear",
            "earl",
            "earn",
            "earth",
            "ease",
            "easel",
            "east",
            "easy",
            "eat",
            "eaten",
            "eater",
            "eaton",
            "eave",
            "eb",
            "ebb",
            "eben",
            "ebony",
            "ec",
            "echo",
            "eclat",
            "ecole",
            "ed",
            "eddie",
            "eddy",
            "eden",
            "edgar",
            "edge",
            "edgy",
            "edict",
            "edify",
            "edit",
            "edith",
            "editor",
            "edna",
            "edt",
            "edwin",
            "ee",
            "eee",
            "eeee",
            "eel",
            "eeoc",
            "eerie",
            "ef",
            "efface",
            "effie",
            "efg",
            "eft",
            "eg",
            "egan",
            "egg",
            "ego",
            "egress",
            "egret",
            "egypt",
            "eh",
            "ei",
            "eider",
            "eight",
            "eire",
            "ej",
            "eject",
            "ek",
            "eke",
            "el",
            "elan",
            "elate",
            "elba",
            "elbow",
            "elder",
            "eldon",
            "elect",
            "elegy",
            "elena",
            "eleven",
            "elfin",
            "elgin",
            "eli",
            "elide",
            "eliot",
            "elite",
            "elk",
            "ell",
            "ella",
            "ellen",
            "ellis",
            "elm",
            "elmer",
            "elope",
            "else",
            "elsie",
            "elton",
            "elude",
            "elute",
            "elves",
            "ely",
            "em",
            "embalm",
            "embark",
            "embed",
            "ember",
            "emcee",
            "emery",
            "emil",
            "emile",
            "emily",
            "emit",
            "emma",
            "emory",
            "empty",
            "en",
            "enact",
            "enamel",
            "end",
            "endow",
            "enemy",
            "eng",
            "engel",
            "engle",
            "engulf",
            "enid",
            "enjoy",
            "enmity",
            "enoch",
            "enol",
            "enos",
            "enrico",
            "ensue",
            "enter",
            "entrap",
            "entry",
            "envoy",
            "envy",
            "eo",
            "ep",
            "epa",
            "epic",
            "epoch",
            "epoxy",
            "epsom",
            "eq",
            "equal",
            "equip",
            "er",
            "era",
            "erase",
            "erato",
            "erda",
            "ere",
            "erect",
            "erg",
            "eric",
            "erich",
            "erie",
            "erik",
            "ernest",
            "ernie",
            "ernst",
            "erode",
            "eros",
            "err",
            "errand",
            "errol",
            "error",
            "erupt",
            "ervin",
            "erwin",
            "es",
            "essay",
            "essen",
            "essex",
            "est",
            "ester",
            "estes",
            "estop",
            "et",
            "eta",
            "etc",
            "etch",
            "ethan",
            "ethel",
            "ether",
            "ethic",
            "ethos",
            "ethyl",
            "etude",
            "eu",
            "eucre",
            "euler",
            "eureka",
            "ev",
            "eva",
            "evade",
            "evans",
            "eve",
            "even",
            "event",
            "every",
            "evict",
            "evil",
            "evoke",
            "evolve",
            "ew",
            "ewe",
            "ewing",
            "ex",
            "exact",
            "exalt",
            "exam",
            "excel",
            "excess",
            "exert",
            "exile",
            "exist",
            "exit",
            "exodus",
            "expel",
            "extant",
            "extent",
            "extol",
            "extra",
            "exude",
            "exult",
            "exxon",
            "ey",
            "eye",
            "eyed",
            "ez",
            "ezra",
            "f",
            "f's",
            "fa",
            "faa",
            "faber",
            "fable",
            "face",
            "facet",
            "facile",
            "fact",
            "facto",
            "fad",
            "fade",
            "faery",
            "fag",
            "fahey",
            "fail",
            "fain",
            "faint",
            "fair",
            "fairy",
            "faith",
            "fake",
            "fall",
            "false",
            "fame",
            "fan",
            "fancy",
            "fang",
            "fanny",
            "fanout",
            "far",
            "farad",
            "farce",
            "fare",
            "fargo",
            "farley",
            "farm",
            "faro",
            "fast",
            "fat",
            "fatal",
            "fate",
            "fatty",
            "fault",
            "faun",
            "fauna",
            "faust",
            "fawn",
            "fay",
            "faze",
            "fb",
            "fbi",
            "fc",
            "fcc",
            "fd",
            "fda",
            "fe",
            "fear",
            "feast",
            "feat",
            "feb",
            "fed",
            "fee",
            "feed",
            "feel",
            "feet",
            "feign",
            "feint",
            "felice",
            "felix",
            "fell",
            "felon",
            "felt",
            "femur",
            "fence",
            "fend",
            "fermi",
            "fern",
            "ferric",
            "ferry",
            "fest",
            "fetal",
            "fetch",
            "fete",
            "fetid",
            "fetus",
            "feud",
            "fever",
            "few",
            "ff",
            "fff",
            "ffff",
            "fg",
            "fgh",
            "fh",
            "fi",
            "fiat",
            "fib",
            "fibrin",
            "fiche",
            "fide",
            "fief",
            "field",
            "fiend",
            "fiery",
            "fife",
            "fifo",
            "fifth",
            "fifty",
            "fig",
            "fight",
            "filch",
            "file",
            "filet",
            "fill",
            "filler",
            "filly",
            "film",
            "filmy",
            "filth",
            "fin",
            "final",
            "finale",
            "finch",
            "find",
            "fine",
            "finite",
            "fink",
            "finn",
            "finny",
            "fir",
            "fire",
            "firm",
            "first",
            "fish",
            "fishy",
            "fisk",
            "fiske",
            "fist",
            "fit",
            "fitch",
            "five",
            "fix",
            "fj",
            "fjord",
            "fk",
            "fl",
            "flack",
            "flag",
            "flail",
            "flair",
            "flak",
            "flake",
            "flaky",
            "flam",
            "flame",
            "flank",
            "flap",
            "flare",
            "flash",
            "flask",
            "flat",
            "flatus",
            "flaw",
            "flax",
            "flea",
            "fleck",
            "fled",
            "flee",
            "fleet",
            "flesh",
            "flew",
            "flex",
            "flick",
            "flier",
            "flinch",
            "fling",
            "flint",
            "flip",
            "flirt",
            "flit",
            "flo",
            "float",
            "floc",
            "flock",
            "floe",
            "flog",
            "flood",
            "floor",
            "flop",
            "floppy",
            "flora",
            "flour",
            "flout",
            "flow",
            "flown",
            "floyd",
            "flu",
            "flub",
            "flue",
            "fluff",
            "fluid",
            "fluke",
            "flung",
            "flush",
            "flute",
            "flux",
            "fly",
            "flyer",
            "flynn",
            "fm",
            "fmc",
            "fn",
            "fo",
            "foal",
            "foam",
            "foamy",
            "fob",
            "focal",
            "foci",
            "focus",
            "fodder",
            "foe",
            "fog",
            "foggy",
            "fogy",
            "foil",
            "foist",
            "fold",
            "foley",
            "folio",
            "folk",
            "folly",
            "fond",
            "font",
            "food",
            "fool",
            "foot",
            "foote",
            "fop",
            "for",
            "foray",
            "force",
            "ford",
            "fore",
            "forge",
            "forgot",
            "fork",
            "form",
            "fort",
            "forte",
            "forth",
            "forty",
            "forum",
            "foss",
            "fossil",
            "foul",
            "found",
            "fount",
            "four",
            "fovea",
            "fowl",
            "fox",
            "foxy",
            "foyer",
            "fp",
            "fpc",
            "fq",
            "fr",
            "frail",
            "frame",
            "fran",
            "franc",
            "franca",
            "frank",
            "franz",
            "frau",
            "fraud",
            "fray",
            "freak",
            "fred",
            "free",
            "freed",
            "freer",
            "frenzy",
            "freon",
            "fresh",
            "fret",
            "freud",
            "frey",
            "freya",
            "friar",
            "frick",
            "fried",
            "frill",
            "frilly",
            "frisky",
            "fritz",
            "fro",
            "frock",
            "frog",
            "from",
            "front",
            "frost",
            "froth",
            "frown",
            "froze",
            "fruit",
            "fry",
            "frye",
            "fs",
            "ft",
            "ftc",
            "fu",
            "fuchs",
            "fudge",
            "fuel",
            "fugal",
            "fugue",
            "fuji",
            "full",
            "fully",
            "fum",
            "fume",
            "fun",
            "fund",
            "fungal",
            "fungi",
            "funk",
            "funny",
            "fur",
            "furl",
            "furry",
            "fury",
            "furze",
            "fuse",
            "fuss",
            "fussy",
            "fusty",
            "fuzz",
            "fuzzy",
            "fv",
            "fw",
            "fx",
            "fy",
            "fz",
            "g",
            "g's",
            "ga",
            "gab",
            "gable",
            "gabon",
            "gad",
            "gadget",
            "gaff",
            "gaffe",
            "gag",
            "gage",
            "gail",
            "gain",
            "gait",
            "gal",
            "gala",
            "galaxy",
            "gale",
            "galen",
            "gall",
            "gallop",
            "galt",
            "gam",
            "game",
            "gamin",
            "gamma",
            "gamut",
            "gander",
            "gang",
            "gao",
            "gap",
            "gape",
            "gar",
            "garb",
            "garish",
            "garner",
            "garry",
            "garth",
            "gary",
            "gas",
            "gash",
            "gasp",
            "gassy",
            "gate",
            "gates",
            "gator",
            "gauche",
            "gaudy",
            "gauge",
            "gaul",
            "gaunt",
            "gaur",
            "gauss",
            "gauze",
            "gave",
            "gavel",
            "gavin",
            "gawk",
            "gawky",
            "gay",
            "gaze",
            "gb",
            "gc",
            "gd",
            "ge",
            "gear",
            "gecko",
            "gee",
            "geese",
            "geigy",
            "gel",
            "geld",
            "gem",
            "gemma",
            "gene",
            "genie",
            "genii",
            "genoa",
            "genre",
            "gent",
            "gentry",
            "genus",
            "gerbil",
            "germ",
            "gerry",
            "get",
            "getty",
            "gf",
            "gg",
            "ggg",
            "gggg",
            "gh",
            "ghana",
            "ghent",
            "ghetto",
            "ghi",
            "ghost",
            "ghoul",
            "gi",
            "giant",
            "gibbs",
            "gibby",
            "gibe",
            "giddy",
            "gift",
            "gig",
            "gil",
            "gila",
            "gild",
            "giles",
            "gill",
            "gilt",
            "gimbal",
            "gimpy",
            "gin",
            "gina",
            "ginn",
            "gino",
            "gird",
            "girl",
            "girth",
            "gist",
            "give",
            "given",
            "gj",
            "gk",
            "gl",
            "glad",
            "gladdy",
            "glade",
            "glamor",
            "gland",
            "glans",
            "glare",
            "glass",
            "glaze",
            "gleam",
            "glean",
            "glee",
            "glen",
            "glenn",
            "glib",
            "glide",
            "glint",
            "gloat",
            "glob",
            "globe",
            "glom",
            "gloom",
            "glory",
            "gloss",
            "glove",
            "glow",
            "glue",
            "glued",
            "gluey",
            "gluing",
            "glum",
            "glut",
            "glyph",
            "gm",
            "gmt",
            "gn",
            "gnarl",
            "gnash",
            "gnat",
            "gnaw",
            "gnome",
            "gnp",
            "gnu",
            "go",
            "goa",
            "goad",
            "goal",
            "goat",
            "gob",
            "goer",
            "goes",
            "goff",
            "gog",
            "goggle",
            "gogh",
            "gogo",
            "gold",
            "golf",
            "golly",
            "gone",
            "gong",
            "goo",
            "good",
            "goode",
            "goody",
            "goof",
            "goofy",
            "goose",
            "gop",
            "gordon",
            "gore",
            "goren",
            "gorge",
            "gorky",
            "gorse",
            "gory",
            "gosh",
            "gospel",
            "got",
            "gouda",
            "gouge",
            "gould",
            "gourd",
            "gout",
            "gown",
            "gp",
            "gpo",
            "gq",
            "gr",
            "grab",
            "grace",
            "grad",
            "grade",
            "grady",
            "graff",
            "graft",
            "grail",
            "grain",
            "grand",
            "grant",
            "grape",
            "graph",
            "grasp",
            "grass",
            "grata",
            "grate",
            "grater",
            "grave",
            "gravy",
            "gray",
            "graze",
            "great",
            "grebe",
            "greed",
            "greedy",
            "greek",
            "green",
            "greer",
            "greet",
            "greg",
            "gregg",
            "greta",
            "grew",
            "grey",
            "grid",
            "grief",
            "grieve",
            "grill",
            "grim",
            "grime",
            "grimm",
            "grin",
            "grind",
            "grip",
            "gripe",
            "grist",
            "grit",
            "groan",
            "groat",
            "groin",
            "groom",
            "grope",
            "gross",
            "groton",
            "group",
            "grout",
            "grove",
            "grow",
            "growl",
            "grown",
            "grub",
            "gruff",
            "grunt",
            "gs",
            "gsa",
            "gt",
            "gu",
            "guam",
            "guano",
            "guard",
            "guess",
            "guest",
            "guide",
            "guild",
            "guile",
            "guilt",
            "guise",
            "guitar",
            "gules",
            "gulf",
            "gull",
            "gully",
            "gulp",
            "gum",
            "gumbo",
            "gummy",
            "gun",
            "gunk",
            "gunky",
            "gunny",
            "gurgle",
            "guru",
            "gus",
            "gush",
            "gust",
            "gusto",
            "gusty",
            "gut",
            "gutsy",
            "guy",
            "guyana",
            "gv",
            "gw",
            "gwen",
            "gwyn",
            "gx",
            "gy",
            "gym",
            "gyp",
            "gypsy",
            "gyro",
            "gz",
            "h",
            "h's",
            "ha",
            "haag",
            "haas",
            "habib",
            "habit",
            "hack",
            "had",
            "hades",
            "hadron",
            "hagen",
            "hager",
            "hague",
            "hahn",
            "haifa",
            "haiku",
            "hail",
            "hair",
            "hairy",
            "haiti",
            "hal",
            "hale",
            "haley",
            "half",
            "hall",
            "halma",
            "halo",
            "halt",
            "halvah",
            "halve",
            "ham",
            "hamal",
            "hamlin",
            "han",
            "hand",
            "handy",
            "haney",
            "hang",
            "hank",
            "hanna",
            "hanoi",
            "hans",
            "hansel",
            "hap",
            "happy",
            "hard",
            "hardy",
            "hare",
            "harem",
            "hark",
            "harley",
            "harm",
            "harp",
            "harpy",
            "harry",
            "harsh",
            "hart",
            "harvey",
            "hash",
            "hasp",
            "hast",
            "haste",
            "hasty",
            "hat",
            "hatch",
            "hate",
            "hater",
            "hath",
            "hatred",
            "haul",
            "haunt",
            "have",
            "haven",
            "havoc",
            "haw",
            "hawk",
            "hay",
            "haydn",
            "hayes",
            "hays",
            "hazard",
            "haze",
            "hazel",
            "hazy",
            "hb",
            "hc",
            "hd",
            "he",
            "he'd",
            "he'll",
            "head",
            "heady",
            "heal",
            "healy",
            "heap",
            "hear",
            "heard",
            "heart",
            "heat",
            "heath",
            "heave",
            "heavy",
            "hebe",
            "hebrew",
            "heck",
            "heckle",
            "hedge",
            "heed",
            "heel",
            "heft",
            "hefty",
            "heigh",
            "heine",
            "heinz",
            "heir",
            "held",
            "helen",
            "helga",
            "helix",
            "hell",
            "hello",
            "helm",
            "helmut",
            "help",
            "hem",
            "hemp",
            "hen",
            "hence",
            "henri",
            "henry",
            "her",
            "hera",
            "herb",
            "herd",
            "here",
            "hero",
            "heroic",
            "heron",
            "herr",
            "hertz",
            "hess",
            "hesse",
            "hettie",
            "hetty",
            "hew",
            "hewitt",
            "hewn",
            "hex",
            "hey",
            "hf",
            "hg",
            "hh",
            "hhh",
            "hhhh",
            "hi",
            "hiatt",
            "hick",
            "hicks",
            "hid",
            "hide",
            "high",
            "hij",
            "hike",
            "hill",
            "hilly",
            "hilt",
            "hilum",
            "him",
            "hind",
            "hindu",
            "hines",
            "hinge",
            "hint",
            "hip",
            "hippo",
            "hippy",
            "hiram",
            "hire",
            "hirsch",
            "his",
            "hiss",
            "hit",
            "hitch",
            "hive",
            "hj",
            "hk",
            "hl",
            "hm",
            "hn",
            "ho",
            "hoagy",
            "hoar",
            "hoard",
            "hob",
            "hobbs",
            "hobby",
            "hobo",
            "hoc",
            "hock",
            "hodge",
            "hodges",
            "hoe",
            "hoff",
            "hog",
            "hogan",
            "hoi",
            "hokan",
            "hold",
            "holdup",
            "hole",
            "holly",
            "holm",
            "holst",
            "holt",
            "home",
            "homo",
            "honda",
            "hondo",
            "hone",
            "honey",
            "hong",
            "honk",
            "hooch",
            "hood",
            "hoof",
            "hook",
            "hookup",
            "hoop",
            "hoot",
            "hop",
            "hope",
            "horde",
            "horn",
            "horny",
            "horse",
            "horus",
            "hose",
            "host",
            "hot",
            "hotbox",
            "hotel",
            "hough",
            "hound",
            "hour",
            "house",
            "hove",
            "hovel",
            "hover",
            "how",
            "howdy",
            "howe",
            "howl",
            "hoy",
            "hoyt",
            "hp",
            "hq",
            "hr",
            "hs",
            "ht",
            "hu",
            "hub",
            "hubbub",
            "hubby",
            "huber",
            "huck",
            "hue",
            "hued",
            "huff",
            "hug",
            "huge",
            "hugh",
            "hughes",
            "hugo",
            "huh",
            "hulk",
            "hull",
            "hum",
            "human",
            "humid",
            "hump",
            "humus",
            "hun",
            "hunch",
            "hung",
            "hunk",
            "hunt",
            "hurd",
            "hurl",
            "huron",
            "hurrah",
            "hurry",
            "hurst",
            "hurt",
            "hurty",
            "hush",
            "husky",
            "hut",
            "hutch",
            "hv",
            "hw",
            "hx",
            "hy",
            "hyde",
            "hydra",
            "hydro",
            "hyena",
            "hying",
            "hyman",
            "hymen",
            "hymn",
            "hymnal",
            "hz",
            "i",
            "i'd",
            "i'll",
            "i'm",
            "i's",
            "i've",
            "ia",
            "iambic",
            "ian",
            "ib",
            "ibex",
            "ibid",
            "ibis",
            "ibm",
            "ibn",
            "ic",
            "icc",
            "ice",
            "icing",
            "icky",
            "icon",
            "icy",
            "id",
            "ida",
            "idaho",
            "idea",
            "ideal",
            "idiom",
            "idiot",
            "idle",
            "idol",
            "idyll",
            "ie",
            "ieee",
            "if",
            "iffy",
            "ifni",
            "ig",
            "igloo",
            "igor",
            "ih",
            "ii",
            "iii",
            "iiii",
            "ij",
            "ijk",
            "ik",
            "ike",
            "il",
            "ileum",
            "iliac",
            "iliad",
            "ill",
            "illume",
            "ilona",
            "im",
            "image",
            "imbue",
            "imp",
            "impel",
            "import",
            "impute",
            "in",
            "inane",
            "inapt",
            "inc",
            "inca",
            "incest",
            "inch",
            "incur",
            "index",
            "india",
            "indies",
            "indy",
            "inept",
            "inert",
            "infect",
            "infer",
            "infima",
            "infix",
            "infra",
            "ingot",
            "inhere",
            "injun",
            "ink",
            "inlay",
            "inlet",
            "inman",
            "inn",
            "inner",
            "input",
            "insect",
            "inset",
            "insult",
            "intend",
            "inter",
            "into",
            "inure",
            "invoke",
            "io",
            "ion",
            "ionic",
            "iota",
            "iowa",
            "ip",
            "ipso",
            "iq",
            "ir",
            "ira",
            "iran",
            "iraq",
            "irate",
            "ire",
            "irene",
            "iris",
            "irish",
            "irk",
            "irma",
            "iron",
            "irony",
            "irs",
            "irvin",
            "irwin",
            "is",
            "isaac",
            "isabel",
            "ising",
            "isis",
            "islam",
            "island",
            "isle",
            "isn't",
            "israel",
            "issue",
            "it",
            "it&t",
            "it'd",
            "it'll",
            "italy",
            "itch",
            "item",
            "ito",
            "itt",
            "iu",
            "iv",
            "ivan",
            "ive",
            "ivory",
            "ivy",
            "iw",
            "ix",
            "iy",
            "iz",
            "j",
            "j's",
            "ja",
            "jab",
            "jack",
            "jacky",
            "jacm",
            "jacob",
            "jacobi",
            "jade",
            "jag",
            "jail",
            "jaime",
            "jake",
            "jam",
            "james",
            "jan",
            "jane",
            "janet",
            "janos",
            "janus",
            "japan",
            "jar",
            "jason",
            "java",
            "jaw",
            "jay",
            "jazz",
            "jazzy",
            "jb",
            "jc",
            "jd",
            "je",
            "jean",
            "jed",
            "jeep",
            "jeff",
            "jejune",
            "jelly",
            "jenny",
            "jeres",
            "jerk",
            "jerky",
            "jerry",
            "jersey",
            "jess",
            "jesse",
            "jest",
            "jesus",
            "jet",
            "jew",
            "jewel",
            "jewett",
            "jewish",
            "jf",
            "jg",
            "jh",
            "ji",
            "jibe",
            "jiffy",
            "jig",
            "jill",
            "jilt",
            "jim",
            "jimmy",
            "jinx",
            "jive",
            "jj",
            "jjj",
            "jjjj",
            "jk",
            "jkl",
            "jl",
            "jm",
            "jn",
            "jo",
            "joan",
            "job",
            "jock",
            "jockey",
            "joe",
            "joel",
            "joey",
            "jog",
            "john",
            "johns",
            "join",
            "joint",
            "joke",
            "jolla",
            "jolly",
            "jolt",
            "jon",
            "jonas",
            "jones",
            "jorge",
            "jose",
            "josef",
            "joshua",
            "joss",
            "jostle",
            "jot",
            "joule",
            "joust",
            "jove",
            "jowl",
            "jowly",
            "joy",
            "joyce",
            "jp",
            "jq",
            "jr",
            "js",
            "jt",
            "ju",
            "juan",
            "judas",
            "judd",
            "jude",
            "judge",
            "judo",
            "judy",
            "jug",
            "juggle",
            "juice",
            "juicy",
            "juju",
            "juke",
            "jukes",
            "julep",
            "jules",
            "julia",
            "julie",
            "julio",
            "july",
            "jumbo",
            "jump",
            "jumpy",
            "junco",
            "june",
            "junk",
            "junky",
            "juno",
            "junta",
            "jura",
            "jure",
            "juror",
            "jury",
            "just",
            "jut",
            "jute",
            "jv",
            "jw",
            "jx",
            "jy",
            "jz",
            "k",
            "k's",
            "ka",
            "kabul",
            "kafka",
            "kahn",
            "kajar",
            "kale",
            "kalmia",
            "kane",
            "kant",
            "kapok",
            "kappa",
            "karate",
            "karen",
            "karl",
            "karma",
            "karol",
            "karp",
            "kate",
            "kathy",
            "katie",
            "katz",
            "kava",
            "kay",
            "kayo",
            "kazoo",
            "kb",
            "kc",
            "kd",
            "ke",
            "keats",
            "keel",
            "keen",
            "keep",
            "keg",
            "keith",
            "keller",
            "kelly",
            "kelp",
            "kemp",
            "ken",
            "keno",
            "kent",
            "kenya",
            "kepler",
            "kept",
            "kern",
            "kerr",
            "kerry",
            "ketch",
            "kevin",
            "key",
            "keyed",
            "keyes",
            "keys",
            "kf",
            "kg",
            "kh",
            "khaki",
            "khan",
            "khmer",
            "ki",
            "kick",
            "kid",
            "kidde",
            "kidney",
            "kiev",
            "kigali",
            "kill",
            "kim",
            "kin",
            "kind",
            "king",
            "kink",
            "kinky",
            "kiosk",
            "kiowa",
            "kirby",
            "kirk",
            "kirov",
            "kiss",
            "kit",
            "kite",
            "kitty",
            "kiva",
            "kivu",
            "kiwi",
            "kj",
            "kk",
            "kkk",
            "kkkk",
            "kl",
            "klan",
            "klaus",
            "klein",
            "kline",
            "klm",
            "klux",
            "km",
            "kn",
            "knack",
            "knapp",
            "knauer",
            "knead",
            "knee",
            "kneel",
            "knelt",
            "knew",
            "knick",
            "knife",
            "knit",
            "knob",
            "knock",
            "knoll",
            "knot",
            "knott",
            "know",
            "known",
            "knox",
            "knurl",
            "ko",
            "koala",
            "koch",
            "kodak",
            "kola",
            "kombu",
            "kong",
            "koran",
            "korea",
            "kp",
            "kq",
            "kr",
            "kraft",
            "krause",
            "kraut",
            "krebs",
            "kruse",
            "ks",
            "kt",
            "ku",
            "kudo",
            "kudzu",
            "kuhn",
            "kulak",
            "kurd",
            "kurt",
            "kv",
            "kw",
            "kx",
            "ky",
            "kyle",
            "kyoto",
            "kz",
            "l",
            "l's",
            "la",
            "lab",
            "laban",
            "label",
            "labia",
            "labile",
            "lac",
            "lace",
            "lack",
            "lacy",
            "lad",
            "laden",
            "ladle",
            "lady",
            "lag",
            "lager",
            "lagoon",
            "lagos",
            "laid",
            "lain",
            "lair",
            "laity",
            "lake",
            "lam",
            "lamar",
            "lamb",
            "lame",
            "lamp",
            "lana",
            "lance",
            "land",
            "lane",
            "lang",
            "lange",
            "lanka",
            "lanky",
            "lao",
            "laos",
            "lap",
            "lapel",
            "lapse",
            "larch",
            "lard",
            "lares",
            "large",
            "lark",
            "larkin",
            "larry",
            "lars",
            "larva",
            "lase",
            "lash",
            "lass",
            "lasso",
            "last",
            "latch",
            "late",
            "later",
            "latest",
            "latex",
            "lath",
            "lathe",
            "latin",
            "latus",
            "laud",
            "laue",
            "laugh",
            "launch",
            "laura",
            "lava",
            "law",
            "lawn",
            "lawson",
            "lax",
            "lay",
            "layup",
            "laze",
            "lazy",
            "lb",
            "lc",
            "ld",
            "le",
            "lea",
            "leach",
            "lead",
            "leaf",
            "leafy",
            "leak",
            "leaky",
            "lean",
            "leap",
            "leapt",
            "lear",
            "learn",
            "lease",
            "leash",
            "least",
            "leave",
            "led",
            "ledge",
            "lee",
            "leech",
            "leeds",
            "leek",
            "leer",
            "leery",
            "leeway",
            "left",
            "lefty",
            "leg",
            "legal",
            "leggy",
            "legion",
            "leigh",
            "leila",
            "leland",
            "lemma",
            "lemon",
            "len",
            "lena",
            "lend",
            "lenin",
            "lenny",
            "lens",
            "lent",
            "leo",
            "leon",
            "leona",
            "leone",
            "leper",
            "leroy",
            "less",
            "lessee",
            "lest",
            "let",
            "lethe",
            "lev",
            "levee",
            "level",
            "lever",
            "levi",
            "levin",
            "levis",
            "levy",
            "lew",
            "lewd",
            "lewis",
            "leyden",
            "lf",
            "lg",
            "lh",
            "li",
            "liar",
            "libel",
            "libido",
            "libya",
            "lice",
            "lick",
            "lid",
            "lie",
            "lied",
            "lien",
            "lieu",
            "life",
            "lifo",
            "lift",
            "light",
            "like",
            "liken",
            "lila",
            "lilac",
            "lilly",
            "lilt",
            "lily",
            "lima",
            "limb",
            "limbo",
            "lime",
            "limit",
            "limp",
            "lin",
            "lind",
            "linda",
            "linden",
            "line",
            "linen",
            "lingo",
            "link",
            "lint",
            "linus",
            "lion",
            "lip",
            "lipid",
            "lisa",
            "lise",
            "lisle",
            "lisp",
            "list",
            "listen",
            "lit",
            "lithe",
            "litton",
            "live",
            "liven",
            "livid",
            "livre",
            "liz",
            "lizzie",
            "lj",
            "lk",
            "ll",
            "lll",
            "llll",
            "lloyd",
            "lm",
            "lmn",
            "ln",
            "lo",
            "load",
            "loaf",
            "loam",
            "loamy",
            "loan",
            "loath",
            "lob",
            "lobar",
            "lobby",
            "lobe",
            "lobo",
            "local",
            "loci",
            "lock",
            "locke",
            "locus",
            "lodge",
            "loeb",
            "loess",
            "loft",
            "lofty",
            "log",
            "logan",
            "loge",
            "logic",
            "loin",
            "loire",
            "lois",
            "loiter",
            "loki",
            "lola",
            "loll",
            "lolly",
            "lomb",
            "lome",
            "lone",
            "long",
            "look",
            "loom",
            "loon",
            "loop",
            "loose",
            "loot",
            "lop",
            "lope",
            "lopez",
            "lord",
            "lore",
            "loren",
            "los",
            "lose",
            "loss",
            "lossy",
            "lost",
            "lot",
            "lotte",
            "lotus",
            "lou",
            "loud",
            "louis",
            "louise",
            "louse",
            "lousy",
            "louver",
            "love",
            "low",
            "lowe",
            "lower",
            "lowry",
            "loy",
            "loyal",
            "lp",
            "lq",
            "lr",
            "ls",
            "lsi",
            "lt",
            "ltv",
            "lu",
            "lucas",
            "lucia",
            "lucid",
            "luck",
            "lucky",
            "lucre",
            "lucy",
            "lug",
            "luge",
            "luger",
            "luis",
            "luke",
            "lull",
            "lulu",
            "lumbar",
            "lumen",
            "lump",
            "lumpy",
            "lunar",
            "lunch",
            "lund",
            "lung",
            "lunge",
            "lura",
            "lurch",
            "lure",
            "lurid",
            "lurk",
            "lush",
            "lust",
            "lusty",
            "lute",
            "lutz",
            "lux",
            "luxe",
            "luzon",
            "lv",
            "lw",
            "lx",
            "ly",
            "lydia",
            "lye",
            "lying",
            "lykes",
            "lyle",
            "lyman",
            "lymph",
            "lynch",
            "lynn",
            "lynx",
            "lyon",
            "lyons",
            "lyra",
            "lyric",
            "lz",
            "m",
            "m&m",
            "m's",
            "ma",
            "mabel",
            "mac",
            "mace",
            "mach",
            "macho",
            "mack",
            "mackey",
            "macon",
            "macro",
            "mad",
            "madam",
            "made",
            "madman",
            "madsen",
            "mae",
            "magi",
            "magic",
            "magma",
            "magna",
            "magog",
            "maid",
            "maier",
            "mail",
            "maim",
            "main",
            "maine",
            "major",
            "make",
            "malady",
            "malay",
            "male",
            "mali",
            "mall",
            "malt",
            "malta",
            "mambo",
            "mamma",
            "mammal",
            "man",
            "mana",
            "manama",
            "mane",
            "mange",
            "mania",
            "manic",
            "mann",
            "manna",
            "manor",
            "mans",
            "manse",
            "mantle",
            "many",
            "mao",
            "maori",
            "map",
            "maple",
            "mar",
            "marc",
            "march",
            "marco",
            "marcy",
            "mardi",
            "mare",
            "margo",
            "maria",
            "marie",
            "marin",
            "marine",
            "mario",
            "mark",
            "marks",
            "marlin",
            "marrow",
            "marry",
            "mars",
            "marsh",
            "mart",
            "marty",
            "marx",
            "mary",
            "maser",
            "mash",
            "mask",
            "mason",
            "masque",
            "mass",
            "mast",
            "mat",
            "match",
            "mate",
            "mateo",
            "mater",
            "math",
            "matte",
            "maul",
            "mauve",
            "mavis",
            "maw",
            "mawr",
            "max",
            "maxim",
            "maxima",
            "may",
            "maya",
            "maybe",
            "mayer",
            "mayhem",
            "mayo",
            "mayor",
            "mayst",
            "mazda",
            "maze",
            "mb",
            "mba",
            "mc",
            "mccoy",
            "mcgee",
            "mckay",
            "mckee",
            "mcleod",
            "md",
            "me",
            "mead",
            "meal",
            "mealy",
            "mean",
            "meant",
            "meat",
            "meaty",
            "mecca",
            "mecum",
            "medal",
            "medea",
            "media",
            "medic",
            "medley",
            "meek",
            "meet",
            "meg",
            "mega",
            "meier",
            "meir",
            "mel",
            "meld",
            "melee",
            "mellow",
            "melon",
            "melt",
            "memo",
            "memoir",
            "men",
            "mend",
            "menlo",
            "menu",
            "merck",
            "mercy",
            "mere",
            "merge",
            "merit",
            "merle",
            "merry",
            "mesa",
            "mescal",
            "mesh",
            "meson",
            "mess",
            "messy",
            "met",
            "metal",
            "mete",
            "meter",
            "metro",
            "mew",
            "meyer",
            "meyers",
            "mezzo",
            "mf",
            "mg",
            "mh",
            "mi",
            "miami",
            "mica",
            "mice",
            "mickey",
            "micky",
            "micro",
            "mid",
            "midas",
            "midge",
            "midst",
            "mien",
            "miff",
            "mig",
            "might",
            "mike",
            "mila",
            "milan",
            "milch",
            "mild",
            "mildew",
            "mile",
            "miles",
            "milk",
            "milky",
            "mill",
            "mills",
            "milt",
            "mimi",
            "mimic",
            "mince",
            "mind",
            "mine",
            "mini",
            "minim",
            "mink",
            "minnow",
            "minor",
            "minos",
            "minot",
            "minsk",
            "mint",
            "minus",
            "mira",
            "mirage",
            "mire",
            "mirth",
            "miser",
            "misery",
            "miss",
            "missy",
            "mist",
            "misty",
            "mit",
            "mite",
            "mitre",
            "mitt",
            "mix",
            "mixup",
            "mizar",
            "mj",
            "mk",
            "ml",
            "mm",
            "mmm",
            "mmmm",
            "mn",
            "mno",
            "mo",
            "moan",
            "moat",
            "mob",
            "mobil",
            "mock",
            "modal",
            "mode",
            "model",
            "modem",
            "modish",
            "moe",
            "moen",
            "mohr",
            "moire",
            "moist",
            "molal",
            "molar",
            "mold",
            "mole",
            "moll",
            "mollie",
            "molly",
            "molt",
            "molten",
            "mommy",
            "mona",
            "monad",
            "mondo",
            "monel",
            "money",
            "monic",
            "monk",
            "mont",
            "monte",
            "month",
            "monty",
            "moo",
            "mood",
            "moody",
            "moon",
            "moor",
            "moore",
            "moose",
            "moot",
            "mop",
            "moral",
            "morale",
            "moran",
            "more",
            "morel",
            "morn",
            "moron",
            "morse",
            "morsel",
            "mort",
            "mosaic",
            "moser",
            "moses",
            "moss",
            "mossy",
            "most",
            "mot",
            "motel",
            "motet",
            "moth",
            "mother",
            "motif",
            "motor",
            "motto",
            "mould",
            "mound",
            "mount",
            "mourn",
            "mouse",
            "mousy",
            "mouth",
            "move",
            "movie",
            "mow",
            "moyer",
            "mp",
            "mph",
            "mq",
            "mr",
            "mrs",
            "ms",
            "mt",
            "mu",
            "much",
            "muck",
            "mucus",
            "mud",
            "mudd",
            "muddy",
            "muff",
            "muffin",
            "mug",
            "muggy",
            "mugho",
            "muir",
            "mulch",
            "mulct",
            "mule",
            "mull",
            "multi",
            "mum",
            "mummy",
            "munch",
            "mung",
            "munson",
            "muon",
            "muong",
            "mural",
            "muriel",
            "murk",
            "murky",
            "murre",
            "muse",
            "mush",
            "mushy",
            "music",
            "musk",
            "muslim",
            "must",
            "musty",
            "mute",
            "mutt",
            "muzak",
            "muzo",
            "mv",
            "mw",
            "mx",
            "my",
            "myel",
            "myers",
            "mylar",
            "mynah",
            "myopia",
            "myra",
            "myron",
            "myrrh",
            "myself",
            "myth",
            "mz",
            "n",
            "n's",
            "na",
            "naacp",
            "nab",
            "nadir",
            "nag",
            "nagoya",
            "nagy",
            "naiad",
            "nail",
            "nair",
            "naive",
            "naked",
            "name",
            "nan",
            "nancy",
            "naomi",
            "nap",
            "nary",
            "nasa",
            "nasal",
            "nash",
            "nasty",
            "nat",
            "natal",
            "nate",
            "nato",
            "natty",
            "nature",
            "naval",
            "nave",
            "navel",
            "navy",
            "nay",
            "nazi",
            "nb",
            "nbc",
            "nbs",
            "nc",
            "ncaa",
            "ncr",
            "nd",
            "ne",
            "neal",
            "near",
            "neat",
            "neath",
            "neck",
            "ned",
            "nee",
            "need",
            "needy",
            "neff",
            "negate",
            "negro",
            "nehru",
            "neil",
            "nell",
            "nelsen",
            "neon",
            "nepal",
            "nero",
            "nerve",
            "ness",
            "nest",
            "net",
            "neuron",
            "neva",
            "neve",
            "new",
            "newel",
            "newt",
            "next",
            "nf",
            "ng",
            "nh",
            "ni",
            "nib",
            "nibs",
            "nice",
            "nicety",
            "niche",
            "nick",
            "niece",
            "niger",
            "nigh",
            "night",
            "nih",
            "nikko",
            "nil",
            "nile",
            "nimbus",
            "nimh",
            "nina",
            "nine",
            "ninth",
            "niobe",
            "nip",
            "nit",
            "nitric",
            "nitty",
            "nixon",
            "nj",
            "nk",
            "nl",
            "nm",
            "nn",
            "nnn",
            "nnnn",
            "no",
            "noaa",
            "noah",
            "nob",
            "nobel",
            "noble",
            "nod",
            "nodal",
            "node",
            "noel",
            "noise",
            "noisy",
            "nolan",
            "noll",
            "nolo",
            "nomad",
            "non",
            "nonce",
            "none",
            "nook",
            "noon",
            "noose",
            "nop",
            "nor",
            "nora",
            "norm",
            "norma",
            "north",
            "norway",
            "nose",
            "not",
            "notch",
            "note",
            "notre",
            "noun",
            "nov",
            "nova",
            "novak",
            "novel",
            "novo",
            "now",
            "np",
            "nq",
            "nr",
            "nrc",
            "ns",
            "nsf",
            "nt",
            "ntis",
            "nu",
            "nuance",
            "nubia",
            "nuclei",
            "nude",
            "nudge",
            "null",
            "numb",
            "nun",
            "nurse",
            "nut",
            "nv",
            "nw",
            "nx",
            "ny",
            "nyc",
            "nylon",
            "nymph",
            "nyu",
            "nz",
            "o",
            "o'er",
            "o's",
            "oa",
            "oaf",
            "oak",
            "oaken",
            "oakley",
            "oar",
            "oases",
            "oasis",
            "oat",
            "oath",
            "ob",
            "obese",
            "obey",
            "objet",
            "oboe",
            "oc",
            "occur",
            "ocean",
            "oct",
            "octal",
            "octave",
            "octet",
            "od",
            "odd",
            "ode",
            "odin",
            "odium",
            "oe",
            "of",
            "off",
            "offal",
            "offend",
            "offer",
            "oft",
            "often",
            "og",
            "ogden",
            "ogle",
            "ogre",
            "oh",
            "ohio",
            "ohm",
            "ohmic",
            "oi",
            "oil",
            "oily",
            "oint",
            "oj",
            "ok",
            "okay",
            "ol",
            "olaf",
            "olav",
            "old",
            "olden",
            "oldy",
            "olga",
            "olin",
            "olive",
            "olsen",
            "olson",
            "om",
            "omaha",
            "oman",
            "omega",
            "omen",
            "omit",
            "on",
            "once",
            "one",
            "onion",
            "only",
            "onset",
            "onto",
            "onus",
            "onward",
            "onyx",
            "oo",
            "ooo",
            "oooo",
            "ooze",
            "op",
            "opal",
            "opec",
            "opel",
            "open",
            "opera",
            "opium",
            "opt",
            "optic",
            "opus",
            "oq",
            "or",
            "oral",
            "orate",
            "orb",
            "orbit",
            "orchid",
            "ordain",
            "order",
            "ore",
            "organ",
            "orgy",
            "orin",
            "orion",
            "ornery",
            "orono",
            "orr",
            "os",
            "osaka",
            "oscar",
            "osier",
            "oslo",
            "ot",
            "other",
            "otis",
            "ott",
            "otter",
            "otto",
            "ou",
            "ouch",
            "ought",
            "ounce",
            "our",
            "oust",
            "out",
            "ouvre",
            "ouzel",
            "ouzo",
            "ov",
            "ova",
            "oval",
            "ovary",
            "ovate",
            "oven",
            "over",
            "overt",
            "ovid",
            "ow",
            "owe",
            "owens",
            "owing",
            "owl",
            "owly",
            "own",
            "ox",
            "oxen",
            "oxeye",
            "oxide",
            "oxnard",
            "oy",
            "oz",
            "ozark",
            "ozone",
            "p",
            "p's",
            "pa",
            "pablo",
            "pabst",
            "pace",
            "pack",
            "packet",
            "pact",
            "pad",
            "paddy",
            "padre",
            "paean",
            "pagan",
            "page",
            "paid",
            "pail",
            "pain",
            "paine",
            "paint",
            "pair",
            "pal",
            "pale",
            "pall",
            "palm",
            "palo",
            "palsy",
            "pam",
            "pampa",
            "pan",
            "panama",
            "panda",
            "pane",
            "panel",
            "pang",
            "panic",
            "pansy",
            "pant",
            "panty",
            "paoli",
            "pap",
            "papa",
            "papal",
            "papaw",
            "paper",
            "pappy",
            "papua",
            "par",
            "parch",
            "pardon",
            "pare",
            "pareto",
            "paris",
            "park",
            "parke",
            "parks",
            "parr",
            "parry",
            "parse",
            "part",
            "party",
            "pascal",
            "pasha",
            "paso",
            "pass",
            "passe",
            "past",
            "paste",
            "pasty",
            "pat",
            "patch",
            "pate",
            "pater",
            "path",
            "patio",
            "patsy",
            "patti",
            "patton",
            "patty",
            "paul",
            "paula",
            "pauli",
            "paulo",
            "pause",
            "pave",
            "paw",
            "pawn",
            "pax",
            "pay",
            "payday",
            "payne",
            "paz",
            "pb",
            "pbs",
            "pc",
            "pd",
            "pe",
            "pea",
            "peace",
            "peach",
            "peak",
            "peaky",
            "peal",
            "peale",
            "pear",
            "pearl",
            "pease",
            "peat",
            "pebble",
            "pecan",
            "peck",
            "pecos",
            "pedal",
            "pedro",
            "pee",
            "peed",
            "peek",
            "peel",
            "peep",
            "peepy",
            "peer",
            "peg",
            "peggy",
            "pelt",
            "pen",
            "penal",
            "pence",
            "pencil",
            "pend",
            "penh",
            "penn",
            "penna",
            "penny",
            "pent",
            "peony",
            "pep",
            "peppy",
            "pepsi",
            "per",
            "perch",
            "percy",
            "perez",
            "peril",
            "perk",
            "perky",
            "perle",
            "perry",
            "persia",
            "pert",
            "perth",
            "peru",
            "peruse",
            "pest",
            "peste",
            "pet",
            "petal",
            "pete",
            "peter",
            "petit",
            "petri",
            "petty",
            "pew",
            "pewee",
            "pf",
            "pg",
            "ph",
            "ph.d",
            "phage",
            "phase",
            "phd",
            "phenol",
            "phi",
            "phil",
            "phlox",
            "phon",
            "phone",
            "phony",
            "photo",
            "phyla",
            "physic",
            "pi",
            "piano",
            "pica",
            "pick",
            "pickup",
            "picky",
            "pie",
            "piece",
            "pier",
            "pierce",
            "piety",
            "pig",
            "piggy",
            "pike",
            "pile",
            "pill",
            "pilot",
            "pimp",
            "pin",
            "pinch",
            "pine",
            "ping",
            "pinion",
            "pink",
            "pint",
            "pinto",
            "pion",
            "piotr",
            "pious",
            "pip",
            "pipe",
            "piper",
            "pique",
            "pit",
            "pitch",
            "pith",
            "pithy",
            "pitney",
            "pitt",
            "pity",
            "pius",
            "pivot",
            "pixel",
            "pixy",
            "pizza",
            "pj",
            "pk",
            "pl",
            "place",
            "plague",
            "plaid",
            "plain",
            "plan",
            "plane",
            "plank",
            "plant",
            "plasm",
            "plat",
            "plate",
            "plato",
            "play",
            "playa",
            "plaza",
            "plea",
            "plead",
            "pleat",
            "pledge",
            "pliny",
            "plod",
            "plop",
            "plot",
            "plow",
            "pluck",
            "plug",
            "plum",
            "plumb",
            "plume",
            "plump",
            "plunk",
            "plus",
            "plush",
            "plushy",
            "pluto",
            "ply",
            "pm",
            "pn",
            "po",
            "poach",
            "pobox",
            "pod",
            "podge",
            "podia",
            "poe",
            "poem",
            "poesy",
            "poet",
            "poetry",
            "pogo",
            "poi",
            "point",
            "poise",
            "poke",
            "pol",
            "polar",
            "pole",
            "police",
            "polio",
            "polis",
            "polk",
            "polka",
            "poll",
            "polo",
            "pomona",
            "pomp",
            "ponce",
            "pond",
            "pong",
            "pont",
            "pony",
            "pooch",
            "pooh",
            "pool",
            "poole",
            "poop",
            "poor",
            "pop",
            "pope",
            "poppy",
            "porch",
            "pore",
            "pork",
            "porous",
            "port",
            "porte",
            "portia",
            "porto",
            "pose",
            "posey",
            "posh",
            "posit",
            "posse",
            "post",
            "posy",
            "pot",
            "potts",
            "pouch",
            "pound",
            "pour",
            "pout",
            "pow",
            "powder",
            "power",
            "pp",
            "ppm",
            "ppp",
            "pppp",
            "pq",
            "pqr",
            "pr",
            "prado",
            "pram",
            "prank",
            "pratt",
            "pray",
            "preen",
            "prefix",
            "prep",
            "press",
            "prexy",
            "prey",
            "priam",
            "price",
            "prick",
            "pride",
            "prig",
            "prim",
            "prima",
            "prime",
            "primp",
            "prince",
            "print",
            "prior",
            "prism",
            "prissy",
            "privy",
            "prize",
            "pro",
            "probe",
            "prod",
            "prof",
            "prom",
            "prone",
            "prong",
            "proof",
            "prop",
            "propyl",
            "prose",
            "proud",
            "prove",
            "prow",
            "prowl",
            "proxy",
            "prune",
            "pry",
            "ps",
            "psalm",
            "psi",
            "psych",
            "pt",
            "pta",
            "pu",
            "pub",
            "puck",
            "puddly",
            "puerto",
            "puff",
            "puffy",
            "pug",
            "pugh",
            "puke",
            "pull",
            "pulp",
            "pulse",
            "puma",
            "pump",
            "pun",
            "punch",
            "punic",
            "punish",
            "punk",
            "punky",
            "punt",
            "puny",
            "pup",
            "pupal",
            "pupil",
            "puppy",
            "pure",
            "purge",
            "purl",
            "purr",
            "purse",
            "pus",
            "pusan",
            "pusey",
            "push",
            "pussy",
            "put",
            "putt",
            "putty",
            "pv",
            "pvc",
            "pw",
            "px",
            "py",
            "pygmy",
            "pyle",
            "pyre",
            "pyrex",
            "pyrite",
            "pz",
            "q",
            "q's",
            "qa",
            "qatar",
            "qb",
            "qc",
            "qd",
            "qe",
            "qed",
            "qf",
            "qg",
            "qh",
            "qi",
            "qj",
            "qk",
            "ql",
            "qm",
            "qn",
            "qo",
            "qp",
            "qq",
            "qqq",
            "qqqq",
            "qr",
            "qrs",
            "qs",
            "qt",
            "qu",
            "qua",
            "quack",
            "quad",
            "quaff",
            "quail",
            "quake",
            "qualm",
            "quark",
            "quarry",
            "quart",
            "quash",
            "quasi",
            "quay",
            "queasy",
            "queen",
            "queer",
            "quell",
            "query",
            "quest",
            "queue",
            "quick",
            "quid",
            "quiet",
            "quill",
            "quilt",
            "quinn",
            "quint",
            "quip",
            "quirk",
            "quirt",
            "quit",
            "quite",
            "quito",
            "quiz",
            "quo",
            "quod",
            "quota",
            "quote",
            "qv",
            "qw",
            "qx",
            "qy",
            "qz",
            "r",
            "r&d",
            "r's",
            "ra",
            "rabat",
            "rabbi",
            "rabbit",
            "rabid",
            "rabin",
            "race",
            "rack",
            "racy",
            "radar",
            "radii",
            "radio",
            "radium",
            "radix",
            "radon",
            "rae",
            "rafael",
            "raft",
            "rag",
            "rage",
            "raid",
            "rail",
            "rain",
            "rainy",
            "raise",
            "raj",
            "rajah",
            "rake",
            "rally",
            "ralph",
            "ram",
            "raman",
            "ramo",
            "ramp",
            "ramsey",
            "ran",
            "ranch",
            "rand",
            "randy",
            "rang",
            "range",
            "rangy",
            "rank",
            "rant",
            "raoul",
            "rap",
            "rape",
            "rapid",
            "rapt",
            "rare",
            "rasa",
            "rascal",
            "rash",
            "rasp",
            "rat",
            "rata",
            "rate",
            "rater",
            "ratio",
            "rattle",
            "raul",
            "rave",
            "ravel",
            "raven",
            "raw",
            "ray",
            "raze",
            "razor",
            "rb",
            "rc",
            "rca",
            "rd",
            "re",
            "reach",
            "read",
            "ready",
            "reagan",
            "real",
            "realm",
            "ream",
            "reap",
            "rear",
            "reave",
            "reb",
            "rebel",
            "rebut",
            "recipe",
            "reck",
            "recur",
            "red",
            "redeem",
            "reduce",
            "reed",
            "reedy",
            "reef",
            "reek",
            "reel",
            "reese",
            "reeve",
            "refer",
            "regal",
            "regina",
            "regis",
            "reich",
            "reid",
            "reign",
            "rein",
            "relax",
            "relay",
            "relic",
            "reman",
            "remedy",
            "remit",
            "remus",
            "rena",
            "renal",
            "rend",
            "rene",
            "renown",
            "rent",
            "rep",
            "repel",
            "repent",
            "resin",
            "resort",
            "rest",
            "ret",
            "retch",
            "return",
            "reub",
            "rev",
            "reveal",
            "revel",
            "rever",
            "revet",
            "revved",
            "rex",
            "rf",
            "rg",
            "rh",
            "rhea",
            "rheum",
            "rhine",
            "rhino",
            "rho",
            "rhoda",
            "rhode",
            "rhyme",
            "ri",
            "rib",
            "rica",
            "rice",
            "rich",
            "rick",
            "rico",
            "rid",
            "ride",
            "ridge",
            "rifle",
            "rift",
            "rig",
            "riga",
            "rigel",
            "riggs",
            "right",
            "rigid",
            "riley",
            "rill",
            "rilly",
            "rim",
            "rime",
            "rimy",
            "ring",
            "rink",
            "rinse",
            "rio",
            "riot",
            "rip",
            "ripe",
            "ripen",
            "ripley",
            "rise",
            "risen",
            "risk",
            "risky",
            "rite",
            "ritz",
            "rival",
            "riven",
            "river",
            "rivet",
            "riyadh",
            "rj",
            "rk",
            "rl",
            "rm",
            "rn",
            "ro",
            "roach",
            "road",
            "roam",
            "roar",
            "roast",
            "rob",
            "robe",
            "robin",
            "robot",
            "rock",
            "rocket",
            "rocky",
            "rod",
            "rode",
            "rodeo",
            "roe",
            "roger",
            "rogue",
            "roil",
            "role",
            "roll",
            "roman",
            "rome",
            "romeo",
            "romp",
            "ron",
            "rondo",
            "rood",
            "roof",
            "rook",
            "rookie",
            "rooky",
            "room",
            "roomy",
            "roost",
            "root",
            "rope",
            "rosa",
            "rose",
            "rosen",
            "ross",
            "rosy",
            "rot",
            "rotc",
            "roth",
            "rotor",
            "rouge",
            "rough",
            "round",
            "rouse",
            "rout",
            "route",
            "rove",
            "row",
            "rowdy",
            "rowe",
            "roy",
            "royal",
            "royce",
            "rp",
            "rpm",
            "rq",
            "rr",
            "rrr",
            "rrrr",
            "rs",
            "rst",
            "rsvp",
            "rt",
            "ru",
            "ruanda",
            "rub",
            "rube",
            "ruben",
            "rubin",
            "rubric",
            "ruby",
            "ruddy",
            "rude",
            "rudy",
            "rue",
            "rufus",
            "rug",
            "ruin",
            "rule",
            "rum",
            "rumen",
            "rummy",
            "rump",
            "rumpus",
            "run",
            "rune",
            "rung",
            "runge",
            "runic",
            "runt",
            "runty",
            "rupee",
            "rural",
            "ruse",
            "rush",
            "rusk",
            "russ",
            "russo",
            "rust",
            "rusty",
            "rut",
            "ruth",
            "rutty",
            "rv",
            "rw",
            "rx",
            "ry",
            "ryan",
            "ryder",
            "rye",
            "rz",
            "s",
            "s's",
            "sa",
            "sabine",
            "sable",
            "sabra",
            "sac",
            "sachs",
            "sack",
            "sad",
            "saddle",
            "sadie",
            "safari",
            "safe",
            "sag",
            "saga",
            "sage",
            "sago",
            "said",
            "sail",
            "saint",
            "sake",
            "sal",
            "salad",
            "sale",
            "salem",
            "saline",
            "salk",
            "salle",
            "sally",
            "salon",
            "salt",
            "salty",
            "salve",
            "salvo",
            "sam",
            "samba",
            "same",
            "sammy",
            "samoa",
            "samuel",
            "san",
            "sana",
            "sand",
            "sandal",
            "sandy",
            "sane",
            "sang",
            "sank",
            "sans",
            "santa",
            "santo",
            "sao",
            "sap",
            "sappy",
            "sara",
            "sarah",
            "saran",
            "sari",
            "sash",
            "sat",
            "satan",
            "satin",
            "satyr",
            "sauce",
            "saucy",
            "saud",
            "saudi",
            "saul",
            "sault",
            "saute",
            "save",
            "savoy",
            "savvy",
            "saw",
            "sawyer",
            "sax",
            "saxon",
            "say",
            "sb",
            "sc",
            "scab",
            "scala",
            "scald",
            "scale",
            "scalp",
            "scam",
            "scamp",
            "scan",
            "scant",
            "scar",
            "scare",
            "scarf",
            "scary",
            "scat",
            "scaup",
            "scene",
            "scent",
            "school",
            "scion",
            "scm",
            "scoff",
            "scold",
            "scoop",
            "scoot",
            "scope",
            "scops",
            "score",
            "scoria",
            "scorn",
            "scot",
            "scott",
            "scour",
            "scout",
            "scowl",
            "scram",
            "scrap",
            "scrape",
            "screw",
            "scrim",
            "scrub",
            "scuba",
            "scud",
            "scuff",
            "scull",
            "scum",
            "scurry",
            "sd",
            "se",
            "sea",
            "seal",
            "seam",
            "seamy",
            "sean",
            "sear",
            "sears",
            "season",
            "seat",
            "sec",
            "secant",
            "sect",
            "sedan",
            "seder",
            "sedge",
            "see",
            "seed",
            "seedy",
            "seek",
            "seem",
            "seen",
            "seep",
            "seethe",
            "seize",
            "self",
            "sell",
            "selma",
            "semi",
            "sen",
            "send",
            "seneca",
            "senor",
            "sense",
            "sent",
            "sentry",
            "seoul",
            "sepal",
            "sepia",
            "sepoy",
            "sept",
            "septa",
            "sequin",
            "sera",
            "serf",
            "serge",
            "serif",
            "serum",
            "serve",
            "servo",
            "set",
            "seth",
            "seton",
            "setup",
            "seven",
            "sever",
            "severe",
            "sew",
            "sewn",
            "sex",
            "sexy",
            "sf",
            "sg",
            "sh",
            "shack",
            "shad",
            "shade",
            "shady",
            "shafer",
            "shaft",
            "shag",
            "shah",
            "shake",
            "shaken",
            "shako",
            "shaky",
            "shale",
            "shall",
            "sham",
            "shame",
            "shank",
            "shape",
            "shard",
            "share",
            "shari",
            "shark",
            "sharp",
            "shave",
            "shaw",
            "shawl",
            "shay",
            "she",
            "she'd",
            "shea",
            "sheaf",
            "shear",
            "sheath",
            "shed",
            "sheen",
            "sheep",
            "sheer",
            "sheet",
            "sheik",
            "shelf",
            "shell",
            "shied",
            "shift",
            "shill",
            "shim",
            "shin",
            "shine",
            "shinto",
            "shiny",
            "ship",
            "shire",
            "shirk",
            "shirt",
            "shish",
            "shiv",
            "shoal",
            "shock",
            "shod",
            "shoe",
            "shoji",
            "shone",
            "shoo",
            "shook",
            "shoot",
            "shop",
            "shore",
            "short",
            "shot",
            "shout",
            "shove",
            "show",
            "shown",
            "showy",
            "shrank",
            "shred",
            "shrew",
            "shrike",
            "shrub",
            "shrug",
            "shu",
            "shuck",
            "shun",
            "shunt",
            "shut",
            "shy",
            "si",
            "sial",
            "siam",
            "sian",
            "sib",
            "sibley",
            "sibyl",
            "sic",
            "sick",
            "side",
            "sidle",
            "siege",
            "siena",
            "sieve",
            "sift",
            "sigh",
            "sight",
            "sigma",
            "sign",
            "signal",
            "signor",
            "silas",
            "silk",
            "silky",
            "sill",
            "silly",
            "silo",
            "silt",
            "silty",
            "sima",
            "simon",
            "simons",
            "sims",
            "sin",
            "sinai",
            "since",
            "sine",
            "sinew",
            "sing",
            "singe",
            "sinh",
            "sink",
            "sinus",
            "sioux",
            "sip",
            "sir",
            "sire",
            "siren",
            "sis",
            "sisal",
            "sit",
            "site",
            "situ",
            "situs",
            "siva",
            "six",
            "sixgun",
            "sixth",
            "sixty",
            "size",
            "sj",
            "sk",
            "skat",
            "skate",
            "skeet",
            "skew",
            "ski",
            "skid",
            "skied",
            "skiff",
            "skill",
            "skim",
            "skimp",
            "skimpy",
            "skin",
            "skip",
            "skirt",
            "skit",
            "skulk",
            "skull",
            "skunk",
            "sky",
            "skye",
            "sl",
            "slab",
            "slack",
            "slag",
            "slain",
            "slake",
            "slam",
            "slang",
            "slant",
            "slap",
            "slash",
            "slat",
            "slate",
            "slater",
            "slav",
            "slave",
            "slay",
            "sled",
            "sleek",
            "sleep",
            "sleet",
            "slept",
            "slew",
            "slice",
            "slick",
            "slid",
            "slide",
            "slim",
            "slime",
            "slimy",
            "sling",
            "slip",
            "slit",
            "sliver",
            "sloan",
            "slob",
            "sloe",
            "slog",
            "sloop",
            "slop",
            "slope",
            "slosh",
            "slot",
            "sloth",
            "slow",
            "slug",
            "sluice",
            "slum",
            "slump",
            "slung",
            "slur",
            "slurp",
            "sly",
            "sm",
            "smack",
            "small",
            "smart",
            "smash",
            "smear",
            "smell",
            "smelt",
            "smile",
            "smirk",
            "smith",
            "smithy",
            "smog",
            "smoke",
            "smoky",
            "smug",
            "smut",
            "sn",
            "snack",
            "snafu",
            "snag",
            "snail",
            "snake",
            "snap",
            "snare",
            "snark",
            "snarl",
            "snatch",
            "sneak",
            "sneer",
            "snell",
            "snick",
            "sniff",
            "snip",
            "snipe",
            "snob",
            "snook",
            "snoop",
            "snore",
            "snort",
            "snout",
            "snow",
            "snowy",
            "snub",
            "snuff",
            "snug",
            "so",
            "soak",
            "soap",
            "soapy",
            "soar",
            "sob",
            "sober",
            "social",
            "sock",
            "sod",
            "soda",
            "sofa",
            "sofia",
            "soft",
            "soften",
            "soggy",
            "soil",
            "sol",
            "solar",
            "sold",
            "sole",
            "solemn",
            "solid",
            "solo",
            "solon",
            "solve",
            "soma",
            "somal",
            "some",
            "son",
            "sonar",
            "song",
            "sonic",
            "sonny",
            "sonora",
            "sony",
            "soon",
            "soot",
            "sooth",
            "sop",
            "sora",
            "sorb",
            "sore",
            "sorry",
            "sort",
            "sos",
            "sou",
            "sough",
            "soul",
            "sound",
            "soup",
            "sour",
            "source",
            "sousa",
            "south",
            "sow",
            "sown",
            "soy",
            "soya",
            "sp",
            "spa",
            "space",
            "spade",
            "spain",
            "span",
            "spar",
            "spare",
            "sparge",
            "spark",
            "spasm",
            "spat",
            "spate",
            "spawn",
            "spay",
            "speak",
            "spear",
            "spec",
            "speck",
            "sped",
            "speed",
            "spell",
            "spend",
            "spent",
            "sperm",
            "sperry",
            "spew",
            "spica",
            "spice",
            "spicy",
            "spike",
            "spiky",
            "spill",
            "spilt",
            "spin",
            "spine",
            "spiny",
            "spire",
            "spiro",
            "spit",
            "spite",
            "spitz",
            "splat",
            "splay",
            "spline",
            "split",
            "spoil",
            "spoke",
            "spoof",
            "spook",
            "spooky",
            "spool",
            "spoon",
            "spore",
            "sport",
            "spot",
            "spout",
            "sprain",
            "spray",
            "spree",
            "sprig",
            "spruce",
            "sprue",
            "spud",
            "spume",
            "spun",
            "spunk",
            "spur",
            "spurn",
            "spurt",
            "spy",
            "sq",
            "squad",
            "squat",
            "squaw",
            "squibb",
            "squid",
            "squint",
            "sr",
            "sri",
            "ss",
            "sss",
            "ssss",
            "sst",
            "st",
            "st.",
            "stab",
            "stack",
            "stacy",
            "staff",
            "stag",
            "stage",
            "stagy",
            "stahl",
            "staid",
            "stain",
            "stair",
            "stake",
            "stale",
            "stalk",
            "stall",
            "stamp",
            "stan",
            "stance",
            "stand",
            "stank",
            "staph",
            "star",
            "stare",
            "stark",
            "starr",
            "start",
            "stash",
            "state",
            "statue",
            "stave",
            "stay",
            "stead",
            "steak",
            "steal",
            "steam",
            "steed",
            "steel",
            "steele",
            "steen",
            "steep",
            "steer",
            "stein",
            "stella",
            "stem",
            "step",
            "stern",
            "steve",
            "stew",
            "stick",
            "stiff",
            "stile",
            "still",
            "stilt",
            "sting",
            "stingy",
            "stink",
            "stint",
            "stir",
            "stock",
            "stoic",
            "stoke",
            "stole",
            "stomp",
            "stone",
            "stony",
            "stood",
            "stool",
            "stoop",
            "stop",
            "store",
            "storey",
            "stork",
            "storm",
            "story",
            "stout",
            "stove",
            "stow",
            "strafe",
            "strap",
            "straw",
            "stray",
            "strewn",
            "strip",
            "stroll",
            "strom",
            "strop",
            "strum",
            "strut",
            "stu",
            "stuart",
            "stub",
            "stuck",
            "stud",
            "study",
            "stuff",
            "stuffy",
            "stump",
            "stun",
            "stung",
            "stunk",
            "stunt",
            "sturm",
            "style",
            "styli",
            "styx",
            "su",
            "suave",
            "sub",
            "subtly",
            "such",
            "suck",
            "sud",
            "sudan",
            "suds",
            "sue",
            "suey",
            "suez",
            "sugar",
            "suit",
            "suite",
            "sulfa",
            "sulk",
            "sulky",
            "sully",
            "sultry",
            "sum",
            "sumac",
            "summon",
            "sun",
            "sung",
            "sunk",
            "sunny",
            "sunset",
            "suny",
            "sup",
            "super",
            "supra",
            "sure",
            "surf",
            "surge",
            "sus",
            "susan",
            "sushi",
            "susie",
            "sutton",
            "sv",
            "sw",
            "swab",
            "swag",
            "swain",
            "swam",
            "swami",
            "swamp",
            "swampy",
            "swan",
            "swank",
            "swap",
            "swarm",
            "swart",
            "swat",
            "swath",
            "sway",
            "swear",
            "sweat",
            "sweaty",
            "swede",
            "sweep",
            "sweet",
            "swell",
            "swelt",
            "swept",
            "swift",
            "swig",
            "swim",
            "swine",
            "swing",
            "swipe",
            "swirl",
            "swish",
            "swiss",
            "swoop",
            "sword",
            "swore",
            "sworn",
            "swum",
            "swung",
            "sx",
            "sy",
            "sybil",
            "sykes",
            "sylow",
            "sylvan",
            "synge",
            "synod",
            "syria",
            "syrup",
            "sz",
            "t",
            "t's",
            "ta",
            "tab",
            "table",
            "taboo",
            "tabu",
            "tabula",
            "tacit",
            "tack",
            "tacky",
            "tacoma",
            "tact",
            "tad",
            "taffy",
            "taft",
            "tag",
            "tahoe",
            "tail",
            "taint",
            "take",
            "taken",
            "talc",
            "tale",
            "talk",
            "talky",
            "tall",
            "tallow",
            "tally",
            "talon",
            "talus",
            "tam",
            "tame",
            "tamp",
            "tampa",
            "tan",
            "tang",
            "tango",
            "tangy",
            "tanh",
            "tank",
            "tansy",
            "tanya",
            "tao",
            "taos",
            "tap",
            "tapa",
            "tape",
            "taper",
            "tapir",
            "tapis",
            "tappa",
            "tar",
            "tara",
            "tardy",
            "tariff",
            "tarry",
            "tart",
            "task",
            "tass",
            "taste",
            "tasty",
            "tat",
            "tate",
            "tater",
            "tattle",
            "tatty",
            "tau",
            "taunt",
            "taut",
            "tavern",
            "tawny",
            "tax",
            "taxi",
            "tb",
            "tc",
            "td",
            "te",
            "tea",
            "teach",
            "teal",
            "team",
            "tear",
            "tease",
            "teat",
            "tech",
            "tecum",
            "ted",
            "teddy",
            "tee",
            "teem",
            "teen",
            "teensy",
            "teet",
            "teeth",
            "telex",
            "tell",
            "tempo",
            "tempt",
            "ten",
            "tend",
            "tenet",
            "tenney",
            "tenon",
            "tenor",
            "tense",
            "tensor",
            "tent",
            "tenth",
            "tepee",
            "tepid",
            "term",
            "tern",
            "terra",
            "terre",
            "terry",
            "terse",
            "tess",
            "test",
            "testy",
            "tete",
            "texan",
            "texas",
            "text",
            "tf",
            "tg",
            "th",
            "thai",
            "than",
            "thank",
            "that",
            "thaw",
            "the",
            "thea",
            "thee",
            "theft",
            "their",
            "them",
            "theme",
            "then",
            "there",
            "these",
            "theta",
            "they",
            "thick",
            "thief",
            "thigh",
            "thin",
            "thine",
            "thing",
            "think",
            "third",
            "this",
            "thong",
            "thor",
            "thorn",
            "thorny",
            "those",
            "thou",
            "thread",
            "three",
            "threw",
            "throb",
            "throes",
            "throw",
            "thrum",
            "thud",
            "thug",
            "thule",
            "thumb",
            "thump",
            "thus",
            "thy",
            "thyme",
            "ti",
            "tiber",
            "tibet",
            "tibia",
            "tic",
            "tick",
            "ticket",
            "tid",
            "tidal",
            "tidbit",
            "tide",
            "tidy",
            "tie",
            "tied",
            "tier",
            "tift",
            "tiger",
            "tight",
            "til",
            "tilde",
            "tile",
            "till",
            "tilt",
            "tilth",
            "tim",
            "time",
            "timex",
            "timid",
            "timon",
            "tin",
            "tina",
            "tine",
            "tinge",
            "tint",
            "tiny",
            "tioga",
            "tip",
            "tipoff",
            "tippy",
            "tipsy",
            "tire",
            "tit",
            "titan",
            "tithe",
            "title",
            "titus",
            "tj",
            "tk",
            "tl",
            "tm",
            "tn",
            "tnt",
            "to",
            "toad",
            "toady",
            "toast",
            "toby",
            "today",
            "todd",
            "toe",
            "tofu",
            "tog",
            "togo",
            "togs",
            "toil",
            "toilet",
            "token",
            "tokyo",
            "told",
            "toll",
            "tom",
            "tomb",
            "tome",
            "tommy",
            "ton",
            "tonal",
            "tone",
            "tong",
            "toni",
            "tonic",
            "tonk",
            "tonsil",
            "tony",
            "too",
            "took",
            "tool",
            "toot",
            "tooth",
            "top",
            "topaz",
            "topic",
            "topple",
            "topsy",
            "tor",
            "torah",
            "torch",
            "tore",
            "tori",
            "torn",
            "torr",
            "torso",
            "tort",
            "torus",
            "tory",
            "toss",
            "tot",
            "total",
            "tote",
            "totem",
            "touch",
            "tough",
            "tour",
            "tout",
            "tow",
            "towel",
            "tower",
            "town",
            "toxic",
            "toxin",
            "toy",
            "tp",
            "tq",
            "tr",
            "trace",
            "track",
            "tract",
            "tracy",
            "trade",
            "trag",
            "trail",
            "train",
            "trait",
            "tram",
            "tramp",
            "trap",
            "trash",
            "trawl",
            "tray",
            "tread",
            "treat",
            "treble",
            "tree",
            "trek",
            "trench",
            "trend",
            "tress",
            "triad",
            "trial",
            "tribe",
            "trick",
            "tried",
            "trig",
            "trill",
            "trim",
            "trio",
            "trip",
            "tripe",
            "trite",
            "triton",
            "trod",
            "troll",
            "troop",
            "trot",
            "trout",
            "troy",
            "truce",
            "truck",
            "trudge",
            "trudy",
            "true",
            "truly",
            "trump",
            "trunk",
            "truss",
            "trust",
            "truth",
            "trw",
            "try",
            "ts",
            "tsar",
            "tt",
            "ttl",
            "ttt",
            "tttt",
            "tty",
            "tu",
            "tub",
            "tuba",
            "tube",
            "tuck",
            "tudor",
            "tuff",
            "tuft",
            "tug",
            "tulane",
            "tulip",
            "tulle",
            "tulsa",
            "tum",
            "tun",
            "tuna",
            "tune",
            "tung",
            "tunic",
            "tunis",
            "tunnel",
            "tuple",
            "turf",
            "turin",
            "turk",
            "turn",
            "turvy",
            "tusk",
            "tussle",
            "tutor",
            "tutu",
            "tuv",
            "tv",
            "tva",
            "tw",
            "twa",
            "twain",
            "tweak",
            "tweed",
            "twice",
            "twig",
            "twill",
            "twin",
            "twine",
            "twirl",
            "twist",
            "twisty",
            "twit",
            "two",
            "twx",
            "tx",
            "ty",
            "tyburn",
            "tying",
            "tyler",
            "type",
            "typic",
            "typo",
            "tyson",
            "tz",
            "u",
            "u's",
            "ua",
            "ub",
            "uc",
            "ucla",
            "ud",
            "ue",
            "uf",
            "ug",
            "ugh",
            "ugly",
            "uh",
            "ui",
            "uj",
            "uk",
            "ul",
            "ulan",
            "ulcer",
            "ultra",
            "um",
            "umber",
            "umbra",
            "umpire",
            "un",
            "unary",
            "uncle",
            "under",
            "unify",
            "union",
            "unit",
            "unite",
            "unity",
            "unix",
            "until",
            "uo",
            "up",
            "upend",
            "uphold",
            "upon",
            "upper",
            "uproar",
            "upset",
            "uptake",
            "upton",
            "uq",
            "ur",
            "urban",
            "urbane",
            "urea",
            "urge",
            "uri",
            "urine",
            "uris",
            "urn",
            "ursa",
            "us",
            "usa",
            "usaf",
            "usage",
            "usc",
            "usda",
            "use",
            "useful",
            "usgs",
            "usher",
            "usia",
            "usn",
            "usps",
            "ussr",
            "usual",
            "usurp",
            "usury",
            "ut",
            "utah",
            "utica",
            "utile",
            "utmost",
            "utter",
            "uu",
            "uuu",
            "uuuu",
            "uv",
            "uvw",
            "uw",
            "ux",
            "uy",
            "uz",
            "v",
            "v's",
            "va",
            "vacua",
            "vacuo",
            "vade",
            "vaduz",
            "vague",
            "vail",
            "vain",
            "vale",
            "valet",
            "valeur",
            "valid",
            "value",
            "valve",
            "vamp",
            "van",
            "vance",
            "vane",
            "vary",
            "vase",
            "vast",
            "vat",
            "vault",
            "vb",
            "vc",
            "vd",
            "ve",
            "veal",
            "veda",
            "vee",
            "veer",
            "veery",
            "vega",
            "veil",
            "vein",
            "velar",
            "veldt",
            "vella",
            "vellum",
            "venal",
            "vend",
            "venial",
            "venom",
            "vent",
            "venus",
            "vera",
            "verb",
            "verde",
            "verdi",
            "verge",
            "verity",
            "verna",
            "verne",
            "versa",
            "verse",
            "verve",
            "very",
            "vessel",
            "vest",
            "vet",
            "vetch",
            "veto",
            "vex",
            "vf",
            "vg",
            "vh",
            "vi",
            "via",
            "vial",
            "vicar",
            "vice",
            "vichy",
            "vicky",
            "vida",
            "video",
            "vie",
            "viet",
            "view",
            "vigil",
            "vii",
            "viii",
            "vile",
            "villa",
            "vine",
            "vinyl",
            "viola",
            "violet",
            "virgil",
            "virgo",
            "virus",
            "vis",
            "visa",
            "vise",
            "visit",
            "visor",
            "vista",
            "vita",
            "vitae",
            "vital",
            "vito",
            "vitro",
            "viva",
            "vivian",
            "vivid",
            "vivo",
            "vixen",
            "viz",
            "vj",
            "vk",
            "vl",
            "vm",
            "vn",
            "vo",
            "vocal",
            "vogel",
            "vogue",
            "voice",
            "void",
            "volt",
            "volta",
            "volvo",
            "vomit",
            "von",
            "voss",
            "vote",
            "vouch",
            "vow",
            "vowel",
            "vp",
            "vq",
            "vr",
            "vs",
            "vt",
            "vu",
            "vulcan",
            "vv",
            "vvv",
            "vvvv",
            "vw",
            "vx",
            "vy",
            "vying",
            "vz",
            "w",
            "w's",
            "wa",
            "waals",
            "wac",
            "wack",
            "wacke",
            "wacky",
            "waco",
            "wad",
            "wade",
            "wadi",
            "wafer",
            "wag",
            "wage",
            "waggle",
            "wah",
            "wahl",
            "wail",
            "waist",
            "wait",
            "waite",
            "waive",
            "wake",
            "waken",
            "waldo",
            "wale",
            "walk",
            "walkie",
            "wall",
            "walls",
            "wally",
            "walsh",
            "walt",
            "walton",
            "waltz",
            "wan",
            "wand",
            "wane",
            "wang",
            "want",
            "war",
            "ward",
            "ware",
            "warm",
            "warmth",
            "warn",
            "warp",
            "warren",
            "wart",
            "warty",
            "wary",
            "was",
            "wash",
            "washy",
            "wasp",
            "wast",
            "waste",
            "watch",
            "water",
            "watt",
            "watts",
            "wave",
            "wavy",
            "wax",
            "waxen",
            "waxy",
            "way",
            "wayne",
            "wb",
            "wc",
            "wd",
            "we",
            "we'd",
            "we'll",
            "we're",
            "we've",
            "weak",
            "weal",
            "wealth",
            "wean",
            "wear",
            "weary",
            "weave",
            "web",
            "webb",
            "weber",
            "weco",
            "wed",
            "wedge",
            "wee",
            "weed",
            "weedy",
            "week",
            "weeks",
            "weep",
            "wehr",
            "wei",
            "weigh",
            "weir",
            "weird",
            "weiss",
            "welch",
            "weld",
            "well",
            "wells",
            "welsh",
            "welt",
            "wendy",
            "went",
            "wept",
            "were",
            "wert",
            "west",
            "wet",
            "wf",
            "wg",
            "wh",
            "whack",
            "whale",
            "wham",
            "wharf",
            "what",
            "wheat",
            "whee",
            "wheel",
            "whelk",
            "whelm",
            "whelp",
            "when",
            "where",
            "whet",
            "which",
            "whiff",
            "whig",
            "while",
            "whim",
            "whine",
            "whinny",
            "whip",
            "whir",
            "whirl",
            "whisk",
            "whit",
            "white",
            "whiz",
            "who",
            "who'd",
            "whoa",
            "whole",
            "whom",
            "whoop",
            "whoosh",
            "whop",
            "whose",
            "whup",
            "why",
            "wi",
            "wick",
            "wide",
            "widen",
            "widow",
            "width",
            "wield",
            "wier",
            "wife",
            "wig",
            "wild",
            "wile",
            "wiley",
            "wilkes",
            "will",
            "willa",
            "wills",
            "wilma",
            "wilt",
            "wily",
            "win",
            "wince",
            "winch",
            "wind",
            "windy",
            "wine",
            "wing",
            "wink",
            "winnie",
            "wino",
            "winter",
            "winy",
            "wipe",
            "wire",
            "wiry",
            "wise",
            "wish",
            "wishy",
            "wisp",
            "wispy",
            "wit",
            "witch",
            "with",
            "withe",
            "withy",
            "witt",
            "witty",
            "wive",
            "wj",
            "wk",
            "wl",
            "wm",
            "wn",
            "wo",
            "woe",
            "wok",
            "woke",
            "wold",
            "wolf",
            "wolfe",
            "wolff",
            "wolve",
            "woman",
            "womb",
            "women",
            "won",
            "won't",
            "wonder",
            "wong",
            "wont",
            "woo",
            "wood",
            "woods",
            "woody",
            "wool",
            "woozy",
            "word",
            "wordy",
            "wore",
            "work",
            "world",
            "worm",
            "wormy",
            "worn",
            "worry",
            "worse",
            "worst",
            "worth",
            "wotan",
            "would",
            "wound",
            "wove",
            "woven",
            "wow",
            "wp",
            "wq",
            "wr",
            "wrack",
            "wrap",
            "wrath",
            "wreak",
            "wreck",
            "wrest",
            "wring",
            "wrist",
            "writ",
            "write",
            "writhe",
            "wrong",
            "wrote",
            "wry",
            "ws",
            "wt",
            "wu",
            "wuhan",
            "wv",
            "ww",
            "www",
            "wwww",
            "wx",
            "wxy",
            "wy",
            "wyatt",
            "wyeth",
            "wylie",
            "wyman",
            "wyner",
            "wynn",
            "wz",
            "x",
            "x's",
            "xa",
            "xb",
            "xc",
            "xd",
            "xe",
            "xenon",
            "xerox",
            "xf",
            "xg",
            "xh",
            "xi",
            "xj",
            "xk",
            "xl",
            "xm",
            "xn",
            "xo",
            "xp",
            "xq",
            "xr",
            "xs",
            "xt",
            "xu",
            "xv",
            "xw",
            "xx",
            "xxx",
            "xxxx",
            "xy",
            "xylem",
            "xyz",
            "xz",
            "y",
            "y's",
            "ya",
            "yacht",
            "yah",
            "yak",
            "yale",
            "yalta",
            "yam",
            "yamaha",
            "yang",
            "yank",
            "yap",
            "yaqui",
            "yard",
            "yarn",
            "yates",
            "yaw",
            "yawl",
            "yawn",
            "yb",
            "yc",
            "yd",
            "ye",
            "yea",
            "yeah",
            "year",
            "yearn",
            "yeast",
            "yeasty",
            "yeats",
            "yell",
            "yelp",
            "yemen",
            "yen",
            "yet",
            "yf",
            "yg",
            "yh",
            "yi",
            "yield",
            "yin",
            "yip",
            "yj",
            "yk",
            "yl",
            "ym",
            "ymca",
            "yn",
            "yo",
            "yodel",
            "yoder",
            "yoga",
            "yogi",
            "yoke",
            "yokel",
            "yolk",
            "yon",
            "yond",
            "yore",
            "york",
            "yost",
            "you",
            "you'd",
            "young",
            "your",
            "youth",
            "yow",
            "yp",
            "yq",
            "yr",
            "ys",
            "yt",
            "yu",
            "yucca",
            "yuck",
            "yuh",
            "yuki",
            "yukon",
            "yule",
            "yv",
            "yves",
            "yw",
            "ywca",
            "yx",
            "yy",
            "yyy",
            "yyyy",
            "yz",
            "z",
            "z's",
            "za",
            "zag",
            "zaire",
            "zan",
            "zap",
            "zazen",
            "zb",
            "zc",
            "zd",
            "ze",
            "zeal",
            "zealot",
            "zebra",
            "zeiss",
            "zen",
            "zero",
            "zest",
            "zesty",
            "zeta",
            "zeus",
            "zf",
            "zg",
            "zh",
            "zi",
            "zig",
            "zilch",
            "zinc",
            "zing",
            "zion",
            "zip",
            "zj",
            "zk",
            "zl",
            "zloty",
            "zm",
            "zn",
            "zo",
            "zoe",
            "zomba",
            "zone",
            "zoo",
            "zoom",
            "zorn",
            "zp",
            "zq",
            "zr",
            "zs",
            "zt",
            "zu",
            "zurich",
            "zv",
            "zw",
            "zx",
            "zy",
            "zz",
            "zzz",
            "zzzz",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "111",
            "123",
            "200",
            "222",
            "234",
            "300",
            "333",
            "345",
            "400",
            "444",
            "456",
            "500",
            "555",
            "567",
            "600",
            "666",
            "678",
            "700",
            "777",
            "789",
            "800",
            "888",
            "900",
            "999",
            "1000",
            "1111",
            "1234",
            "1492",
            "1500",
            "1600",
            "1700",
            "1776",
            "1800",
            "1812",
            "1900",
            "1910",
            "1920",
            "1925",
            "1930",
            "1935",
            "1940",
            "1945",
            "1950",
            "1955",
            "1960",
            "1965",
            "1970",
            "1975",
            "1980",
            "1985",
            "1990",
            "1991",
            "1992",
            "1993",
            "1994",
            "1995",
            "1996",
            "1997",
            "2000",
            "2001",
            "2020",
            "2222",
            "2345",
            "2468",
            "3000",
            "3333",
            "3456",
            "4000",
            "4321",
            "4444",
            "4567",
            "5000",
            "5555",
            "5678",
            "6000",
            "6666",
            "6789",
            "7000",
            "7777",
            "8000",
            "8888",
            "9000",
            "9876",
            "9999",
            "100th",
            "101st",
            "10th",
            "11th",
            "12th",
            "13th",
            "14th",
            "15th",
            "16th",
            "17th",
            "18th",
            "19th",
            "1st",
            "20th",
            "21st",
            "22nd",
            "23rd",
            "24th",
            "25th",
            "26th",
            "27th",
            "28th",
            "29th",
            "2nd",
            "30th",
            "31st",
            "32nd",
            "33rd",
            "34th",
            "35th",
            "36th",
            "37th",
            "38th",
            "39th",
            "3rd",
            "40th",
            "41st",
            "42nd",
            "43rd",
            "44th",
            "45th",
            "46th",
            "47th",
            "48th",
            "49th",
            "4th",
            "50th",
            "51st",
            "52nd",
            "53rd",
            "54th",
            "55th",
            "56th",
            "57th",
            "58th",
            "59th",
            "5th",
            "60th",
            "61st",
            "62nd",
            "63rd",
            "65th",
            "66th",
            "67th",
            "68th",
            "69th",
            "6th",
            "70th",
            "71st",
            "72nd",
            "73rd",
            "74th",
            "75th",
            "76th",
            "77th",
            "78th",
            "79th",
            "7th",
            "80th",
            "81st",
            "82nd",
            "83rd",
            "84th",
            "85th",
            "86th",
            "87th",
            "88th",
            "89th",
            "8th",
            "90th",
            "91st",
            "92nd",
            "93rd",
            "94th",
            "95th",
            "96th",
            "97th",
            "98th",
            "99th",
            "9th",
            "!",
            "!!",
            "\"",
            "#",
            "##",
            "$",
            "$$",
            "%",
            "%%",
            "&",
            "(",
            "()",
            ")",
            "*",
            "**",
            "+",
            "-",
            ":",
            ";",
            "=",
            "?",
            "??",
            "@"
        ]
    }, {}],
    256: [function (require, module, exports) {
        (function (global, Buffer) {
            "use strict";

            var EC = require("elliptic").ec;

            var ec = new EC("secp256k1");
            var browserCrypto = global.crypto || global.msCrypto || {};
            var subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;

            var nodeCrypto = require('crypto');

            const EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');
            const ZERO32 = Buffer.alloc(32, 0);

            function assert(condition, message) {
                if (!condition) {
                    throw new Error(message || "Assertion failed");
                }
            }

            function isScalar(x) {
                return Buffer.isBuffer(x) && x.length === 32;
            }

            function isValidPrivateKey(privateKey) {
                if (!isScalar(privateKey)) {
                    return false;
                }
                return privateKey.compare(ZERO32) > 0 && // > 0
                    privateKey.compare(EC_GROUP_ORDER) < 0; // < G
            }

// Compare two buffers in constant time to prevent timing attacks.
            function equalConstTime(b1, b2) {
                if (b1.length !== b2.length) {
                    return false;
                }
                var res = 0;
                for (var i = 0; i < b1.length; i++) {
                    res |= b1[i] ^ b2[i];  // jshint ignore:line
                }
                return res === 0;
            }

            /* This must check if we're in the browser or
not, since the functions are different and does
not convert using browserify */
            function randomBytes(size) {
                var arr = new Uint8Array(size);
                if (typeof browserCrypto.getRandomValues === 'undefined') {
                    return Buffer.from(nodeCrypto.randomBytes(size));
                } else {
                    browserCrypto.getRandomValues(arr);
                }
                return Buffer.from(arr);
            }

            function sha512(msg) {
                return new Promise(function (resolve) {
                    var hash = nodeCrypto.createHash('sha512');
                    var result = hash.update(msg).digest();
                    resolve(new Uint8Array(result));
                });
            }

            function getAes(op) {
                return function (iv, key, data) {
                    return new Promise(function (resolve) {
                        if (subtle) {
                            var importAlgorithm = {name: "AES-CBC"};
                            var keyp = subtle.importKey("raw", key, importAlgorithm, false, [op]);
                            return keyp.then(function (cryptoKey) {
                                var encAlgorithm = {name: "AES-CBC", iv: iv};
                                return subtle[op](encAlgorithm, cryptoKey, data);
                            }).then(function (result) {
                                resolve(Buffer.from(new Uint8Array(result)));
                            });
                        } else {
                            if (op === 'encrypt') {
                                var cipher = nodeCrypto.createCipheriv('aes-256-cbc', key, iv);
                                cipher.update(data);
                                resolve(cipher.final());
                            } else if (op === 'decrypt') {
                                var decipher = nodeCrypto.createDecipheriv('aes-256-cbc', key, iv);
                                decipher.update(data);
                                resolve(decipher.final());
                            }
                        }
                    });
                };
            }

            var aesCbcEncrypt = getAes("encrypt");
            var aesCbcDecrypt = getAes("decrypt");

            function hmacSha256Sign(key, msg) {
                return new Promise(function (resolve) {
                    var hmac = nodeCrypto.createHmac('sha256', Buffer.from(key));
                    hmac.update(msg);
                    var result = hmac.digest();
                    resolve(result);
                });
            }

            function hmacSha256Verify(key, msg, sig) {
                return new Promise(function (resolve) {
                    var hmac = nodeCrypto.createHmac('sha256', Buffer.from(key));
                    hmac.update(msg);
                    var expectedSig = hmac.digest();
                    resolve(equalConstTime(expectedSig, sig));
                });
            }

            /**
             * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source
             * depending on your browser.
             * @return {Buffer} A 32-byte private key.
             * @function
             */
            exports.generatePrivate = function () {
                var privateKey = randomBytes(32);
                while (!isValidPrivateKey(privateKey)) {
                    privateKey = randomBytes(32);
                }
                return privateKey;
            };

            var getPublic = exports.getPublic = function (privateKey) {
                // This function has sync API so we throw an error immediately.
                assert(privateKey.length === 32, "Bad private key");
                assert(isValidPrivateKey(privateKey), "Bad private key");
                // XXX(Kagami): `elliptic.utils.encode` returns array for every
                // encoding except `hex`.
                return Buffer.from(ec.keyFromPrivate(privateKey).getPublic("arr"));
            };

            /**
             * Get compressed version of public key.
             */
            var getPublicCompressed = exports.getPublicCompressed = function (privateKey) { // jshint ignore:line
                assert(privateKey.length === 32, "Bad private key");
                assert(isValidPrivateKey(privateKey), "Bad private key");
                // See https://github.com/wanderer/secp256k1-node/issues/46
                let compressed = true;
                return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, "arr"));
            };

// NOTE(Kagami): We don't use promise shim in Browser implementation
// because it's supported natively in new browsers (see
// <http://caniuse.com/#feat=promises>) and we can use only new browsers
// because of the WebCryptoAPI (see
// <http://caniuse.com/#feat=cryptography>).
            exports.sign = function (privateKey, msg) {
                return new Promise(function (resolve) {
                    assert(privateKey.length === 32, "Bad private key");
                    assert(isValidPrivateKey(privateKey), "Bad private key");
                    assert(msg.length > 0, "Message should not be empty");
                    assert(msg.length <= 32, "Message is too long");
                    resolve(Buffer.from(ec.sign(msg, privateKey, {canonical: true}).toDER()));
                });
            };

            exports.verify = function (publicKey, msg, sig) {
                return new Promise(function (resolve, reject) {
                    assert(publicKey.length === 65 || publicKey.length === 33, "Bad public key");
                    if (publicKey.length === 65) {
                        assert(publicKey[0] === 4, "Bad public key");
                    }
                    if (publicKey.length === 33) {
                        assert(publicKey[0] === 2 || publicKey[0] === 3, "Bad public key");
                    }
                    assert(msg.length > 0, "Message should not be empty");
                    assert(msg.length <= 32, "Message is too long");
                    if (ec.verify(msg, sig, publicKey)) {
                        resolve(null);
                    } else {
                        reject(new Error("Bad signature"));
                    }
                });
            };

            var derive = exports.derive = function (privateKeyA, publicKeyB) {
                return new Promise(function (resolve) {
                    assert(Buffer.isBuffer(privateKeyA), "Bad private key");
                    assert(Buffer.isBuffer(publicKeyB), "Bad public key");
                    assert(privateKeyA.length === 32, "Bad private key");
                    assert(isValidPrivateKey(privateKeyA), "Bad private key");
                    assert(publicKeyB.length === 65 || publicKeyB.length === 33, "Bad public key");
                    if (publicKeyB.length === 65) {
                        assert(publicKeyB[0] === 4, "Bad public key");
                    }
                    if (publicKeyB.length === 33) {
                        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, "Bad public key");
                    }
                    var keyA = ec.keyFromPrivate(privateKeyA);
                    var keyB = ec.keyFromPublic(publicKeyB);
                    var Px = keyA.derive(keyB.getPublic());  // BN instance
                    resolve(Buffer.from(Px.toArray()));
                });
            };

            exports.encrypt = function (publicKeyTo, msg, opts) {
                opts = opts || {};
                // Tmp variables to save context from flat promises;
                var iv, ephemPublicKey, ciphertext, macKey;
                return new Promise(function (resolve) {
                    var ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);
                    // There is a very unlikely possibility that it is not a valid key
                    while (!isValidPrivateKey(ephemPrivateKey)) {
                        ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);
                    }
                    ephemPublicKey = getPublic(ephemPrivateKey);
                    resolve(derive(ephemPrivateKey, publicKeyTo));
                }).then(function (Px) {
                    return sha512(Px);
                }).then(function (hash) {
                    iv = opts.iv || randomBytes(16);
                    var encryptionKey = hash.slice(0, 32);
                    macKey = hash.slice(32);
                    return aesCbcEncrypt(iv, encryptionKey, msg);
                }).then(function (data) {
                    ciphertext = data;
                    var dataToMac = Buffer.concat([iv, ephemPublicKey, ciphertext]);
                    return hmacSha256Sign(macKey, dataToMac);
                }).then(function (mac) {
                    return {
                        iv: iv,
                        ephemPublicKey: ephemPublicKey,
                        ciphertext: ciphertext,
                        mac: mac,
                    };
                });
            };

            exports.decrypt = function (privateKey, opts) {
                // Tmp variable to save context from flat promises;
                var encryptionKey;
                return derive(privateKey, opts.ephemPublicKey).then(function (Px) {
                    return sha512(Px);
                }).then(function (hash) {
                    encryptionKey = hash.slice(0, 32);
                    var macKey = hash.slice(32);
                    var dataToMac = Buffer.concat([
                        opts.iv,
                        opts.ephemPublicKey,
                        opts.ciphertext
                    ]);
                    return hmacSha256Verify(macKey, dataToMac, opts.mac);
                }).then(function (macGood) {
                    assert(macGood, "Bad MAC");
                    return aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);
                }).then(function (msg) {
                    return Buffer.from(new Uint8Array(msg));
                });
            };


        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer)
    }, {"buffer": 51, "crypto": 59, "elliptic": 257}],
    257: [function (require, module, exports) {
        arguments[4][70][0].apply(exports, arguments)
    }, {
        "../package.json": 272,
        "./elliptic/curve": 260,
        "./elliptic/curves": 263,
        "./elliptic/ec": 264,
        "./elliptic/eddsa": 267,
        "./elliptic/utils": 271,
        "brorand": 196,
        "dup": 70
    }],
    258: [function (require, module, exports) {
        arguments[4][71][0].apply(exports, arguments)
    }, {"../utils": 271, "bn.js": 195, "dup": 71}],
    259: [function (require, module, exports) {
        arguments[4][72][0].apply(exports, arguments)
    }, {"../utils": 271, "./base": 258, "bn.js": 195, "dup": 72, "inherits": 388}],
    260: [function (require, module, exports) {
        arguments[4][73][0].apply(exports, arguments)
    }, {"./base": 258, "./edwards": 259, "./mont": 261, "./short": 262, "dup": 73}],
    261: [function (require, module, exports) {
        arguments[4][74][0].apply(exports, arguments)
    }, {"../utils": 271, "./base": 258, "bn.js": 195, "dup": 74, "inherits": 388}],
    262: [function (require, module, exports) {
        arguments[4][75][0].apply(exports, arguments)
    }, {"../utils": 271, "./base": 258, "bn.js": 195, "dup": 75, "inherits": 388}],
    263: [function (require, module, exports) {
        arguments[4][76][0].apply(exports, arguments)
    }, {"./curve": 260, "./precomputed/secp256k1": 270, "./utils": 271, "dup": 76, "hash.js": 375}],
    264: [function (require, module, exports) {
        arguments[4][77][0].apply(exports, arguments)
    }, {
        "../curves": 263,
        "../utils": 271,
        "./key": 265,
        "./signature": 266,
        "bn.js": 195,
        "brorand": 196,
        "dup": 77,
        "hmac-drbg": 387
    }],
    265: [function (require, module, exports) {
        arguments[4][78][0].apply(exports, arguments)
    }, {"../utils": 271, "bn.js": 195, "dup": 78}],
    266: [function (require, module, exports) {
        arguments[4][79][0].apply(exports, arguments)
    }, {"../utils": 271, "bn.js": 195, "dup": 79}],
    267: [function (require, module, exports) {
        arguments[4][80][0].apply(exports, arguments)
    }, {"../curves": 263, "../utils": 271, "./key": 268, "./signature": 269, "dup": 80, "hash.js": 375}],
    268: [function (require, module, exports) {
        arguments[4][81][0].apply(exports, arguments)
    }, {"../utils": 271, "dup": 81}],
    269: [function (require, module, exports) {
        arguments[4][82][0].apply(exports, arguments)
    }, {"../utils": 271, "bn.js": 195, "dup": 82}],
    270: [function (require, module, exports) {
        arguments[4][83][0].apply(exports, arguments)
    }, {"dup": 83}],
    271: [function (require, module, exports) {
        arguments[4][84][0].apply(exports, arguments)
    }, {"bn.js": 195, "dup": 84, "minimalistic-assert": 409, "minimalistic-crypto-utils": 410}],
    272: [function (require, module, exports) {
        module.exports = {
            "_from": "elliptic@6.5.1",
            "_id": "elliptic@6.5.1",
            "_inBundle": false,
            "_integrity": "sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==",
            "_location": "/elliptic",
            "_phantomChildren": {},
            "_requested": {
                "type": "version",
                "registry": true,
                "raw": "elliptic@6.5.1",
                "name": "elliptic",
                "escapedName": "elliptic",
                "rawSpec": "6.5.1",
                "saveSpec": null,
                "fetchSpec": "6.5.1"
            },
            "_requiredBy": [
                "/eccrypto",
                "/eccrypto/secp256k1",
                "/eth-lib"
            ],
            "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz",
            "_shasum": "c380f5f909bf1b9b4428d028cd18d3b0efd6b52b",
            "_spec": "elliptic@6.5.1",
            "_where": "/home/deso/Documents/recheck/recheck-clientjs-library/node_modules/eccrypto",
            "author": {
                "name": "Fedor Indutny",
                "email": "fedor@indutny.com"
            },
            "bugs": {
                "url": "https://github.com/indutny/elliptic/issues"
            },
            "bundleDependencies": false,
            "dependencies": {
                "bn.js": "^4.4.0",
                "brorand": "^1.0.1",
                "hash.js": "^1.0.0",
                "hmac-drbg": "^1.0.0",
                "inherits": "^2.0.1",
                "minimalistic-assert": "^1.0.0",
                "minimalistic-crypto-utils": "^1.0.0"
            },
            "deprecated": false,
            "description": "EC cryptography",
            "devDependencies": {
                "brfs": "^1.4.3",
                "coveralls": "^3.0.4",
                "grunt": "^1.0.4",
                "grunt-browserify": "^5.0.0",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-connect": "^1.0.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^1.0.1",
                "grunt-mocha-istanbul": "^3.0.1",
                "grunt-saucelabs": "^9.0.1",
                "istanbul": "^0.4.2",
                "jscs": "^3.0.7",
                "jshint": "^2.6.0",
                "mocha": "^6.1.4"
            },
            "files": [
                "lib"
            ],
            "homepage": "https://github.com/indutny/elliptic",
            "keywords": [
                "EC",
                "Elliptic",
                "curve",
                "Cryptography"
            ],
            "license": "MIT",
            "main": "lib/elliptic.js",
            "name": "elliptic",
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/indutny/elliptic.git"
            },
            "scripts": {
                "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "lint": "npm run jscs && npm run jshint",
                "test": "npm run lint && npm run unit",
                "unit": "istanbul test _mocha --reporter=spec test/index.js",
                "version": "grunt dist && git add dist/"
            },
            "version": "6.5.1"
        }

    }, {}],
    273: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports['default'] = calculateContractAddress;

        var _ethereumjsUtil = require('ethereumjs-util');

        function calculateContractAddress(creatorAddress, nonce) {
            var addressBuffer = (0, _ethereumjsUtil.generateAddress)(creatorAddress, nonce);
            var address = addressBuffer.toString('hex');
            return (0, _ethereumjsUtil.toChecksumAddress)(address);
        }
    }, {"ethereumjs-util": 340}],
    274: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.stringify = stringify;
            exports.parse = parse;

            var _publicKey = require('./public-key');

            function stringify(cipher) {
                if (typeof cipher === 'string') return cipher;

                // use compressed key because it's smaller
                var compressedKey = (0, _publicKey.compress)(cipher.ephemPublicKey);

                var ret = Buffer.concat([Buffer.from(cipher.iv, 'hex'), // 16bit
                    Buffer.from(compressedKey, 'hex'), // 33bit
                    Buffer.from(cipher.mac, 'hex'), // 32bit
                    Buffer.from(cipher.ciphertext, 'hex') // var bit
                ]);

                return ret.toString('hex');
            }

            function parse(str) {
                if (typeof str !== 'string') return str;

                var buf = Buffer.from(str, 'hex');

                var ret = {
                    iv: buf.toString('hex', 0, 16),
                    ephemPublicKey: buf.toString('hex', 16, 49),
                    mac: buf.toString('hex', 49, 81),
                    ciphertext: buf.toString('hex', 81, buf.length)
                };

                // decompress publicKey
                ret.ephemPublicKey = '04' + (0, _publicKey.decompress)(ret.ephemPublicKey);

                return ret;
            }
        }).call(this, require("buffer").Buffer)
    }, {"./public-key": 282, "buffer": 51}],
    275: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.createPrivateKey = createPrivateKey;
            exports['default'] = createIdentity;

            var _publicKeyByPrivateKey = require('./public-key-by-private-key');

            var _publicKeyByPrivateKey2 = _interopRequireDefault(_publicKeyByPrivateKey);

            var _account = require('eth-lib/lib/account');

            var _hash = require('eth-lib/lib/hash');

            var _bytes = require('eth-lib/lib/bytes');

            var _bytes2 = _interopRequireDefault(_bytes);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {'default': obj};
            }

            var MIN_ENTROPY_SIZE = 128;

            /**
             * create a privateKey from the given entropy or a new one
             * @param  {Buffer} entropy
             * @return {string}
             */
            function createPrivateKey(entropy) {
                if (entropy) {
                    if (!Buffer.isBuffer(entropy)) throw new Error('EthCrypto.createPrivateKey(): given entropy is no Buffer');
                    if (Buffer.byteLength(entropy, 'utf8') < MIN_ENTROPY_SIZE) throw new Error('EthCrypto.createPrivateKey(): Entropy-size must be at least ' + MIN_ENTROPY_SIZE);

                    var outerHex = (0, _hash.keccak256)(entropy);
                    return outerHex;
                } else {
                    // @link https://github.com/MaiaVictor/eth-lib/blob/master/lib/account.js#L8
                    var innerHex = (0, _hash.keccak256)(_bytes2['default'].concat(_bytes2['default'].random(32), _bytes2['default'].random(32)));
                    var middleHex = _bytes2['default'].concat(_bytes2['default'].concat(_bytes2['default'].random(32), innerHex), _bytes2['default'].random(32));
                    var _outerHex = (0, _hash.keccak256)(middleHex);
                    return _outerHex;
                }
            }

            /**
             * creates a new object with
             * private-, public-Key and address
             * @param {Buffer?} entropy if provided, will use that as single random-source
             */
            function createIdentity(entropy) {
                var privateKey = createPrivateKey(entropy);
                var identity = (0, _account.fromPrivate)(privateKey);
                identity.publicKey = (0, _publicKeyByPrivateKey2['default'])(identity.privateKey);
                return identity;
            }
        }).call(this, require("buffer").Buffer)
    }, {
        "./public-key-by-private-key": 281,
        "buffer": 51,
        "eth-lib/lib/account": 309,
        "eth-lib/lib/bytes": 311,
        "eth-lib/lib/hash": 312
    }],
    276: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports['default'] = decryptWithPrivateKey;

            var _eccrypto = require('eccrypto');

            var _cipher = require('./cipher');

            var _util = require('./util');

            function decryptWithPrivateKey(privateKey, encrypted) {

                encrypted = (0, _cipher.parse)(encrypted);

                // remove trailing '0x' from privateKey
                var twoStripped = (0, _util.removeTrailing0x)(privateKey);

                var encryptedBuffer = {
                    iv: Buffer.from(encrypted.iv, 'hex'),
                    ephemPublicKey: Buffer.from(encrypted.ephemPublicKey, 'hex'),
                    ciphertext: Buffer.from(encrypted.ciphertext, 'hex'),
                    mac: Buffer.from(encrypted.mac, 'hex')
                };

                return (0, _eccrypto.decrypt)(Buffer.from(twoStripped, 'hex'), encryptedBuffer).then(function (decryptedBuffer) {
                    return decryptedBuffer.toString();
                });
            }
        }).call(this, require("buffer").Buffer)
    }, {"./cipher": 274, "./util": 288, "buffer": 51, "eccrypto": 256}],
    277: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports['default'] = encryptWithPublicKey;

            var _eccrypto = require('eccrypto');

            var _publicKey = require('./public-key');

            function encryptWithPublicKey(publicKey, message) {

                // ensure its an uncompressed publicKey
                publicKey = (0, _publicKey.decompress)(publicKey);

                // re-add the compression-flag
                var pubString = '04' + publicKey;

                return (0, _eccrypto.encrypt)(Buffer.from(pubString, 'hex'), Buffer.from(message)).then(function (encryptedBuffers) {
                    var encrypted = {
                        iv: encryptedBuffers.iv.toString('hex'),
                        ephemPublicKey: encryptedBuffers.ephemPublicKey.toString('hex'),
                        ciphertext: encryptedBuffers.ciphertext.toString('hex'),
                        mac: encryptedBuffers.mac.toString('hex')
                    };
                    return encrypted;
                });
            }
        }).call(this, require("buffer").Buffer)
    }, {"./public-key": 282, "buffer": 51, "eccrypto": 256}],
    278: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SIGN_PREFIX = undefined;
        exports.keccak256 = keccak256;

        var _solidity = require('ethers/utils/solidity.js');

        function keccak256(params) {
            var types = [];
            var values = [];
            if (!Array.isArray(params)) {
                types.push('string');
                values.push(params);
            } else {
                params.forEach(function (p) {
                    types.push(p.type);
                    values.push(p.value);
                });
            }
            return (0, _solidity.keccak256)(types, values);
        }

        var SIGN_PREFIX = exports.SIGN_PREFIX = '\x19Ethereum Signed Message:\n32';
    }, {"ethers/utils/solidity.js": 371}],
    279: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compress = compress;
            exports.decompress = decompress;

            var _util = require('./util');

            function compress(hex) {
                var base64 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                hex = (0, _util.removeTrailing0x)(hex);

                // if base64:true, we use our own function because it results in a smaller output
                if (base64 === true) return Buffer.from(hex, 'hex').toString('base64');

                var string = '';
                while (hex.length % 4 != 0) {
                    // we need it to be multiple of 4
                    hex = '0' + hex;
                }
                for (var i = 0; i < hex.length; i += 4) {
                    // get char from ascii code which goes from 0 to 65536
                    string += String.fromCharCode(parseInt(hex.substring(i, i + 4), 16));
                }
                return string;
            }

            /**
             * compress/decompress hex-strings to utf16 or base64
             * thx @juvian
             * @link https://stackoverflow.com/a/40471908/3443137
             */

            function decompress(compressedString) {
                var base64 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


                // if base64:true, we use our own function because it results in a smaller output
                if (base64 === true) {
                    var ret = Buffer.from(compressedString, 'base64').toString('hex');
                    return (0, _util.addTrailing0x)(ret);
                }

                var hex = '';
                for (var i = 0; i < compressedString.length; i++) {
                    // get character ascii code and convert to hexa string, adding necessary 0s
                    hex += ((i == 0 ? '' : '000') + compressedString.charCodeAt(i).toString(16)).slice(-4);
                }
                hex = hex.toLowerCase();
                return (0, _util.addTrailing0x)(hex);
            }
        }).call(this, require("buffer").Buffer)
    }, {"./util": 288, "buffer": 51}],
    280: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.util = exports.vrs = exports.hex = exports.hash = exports.calculateContractAddress = exports.txDataByCompiled = exports.signTransaction = exports.sign = exports.recoverPublicKey = exports.recover = exports.publicKeyByPrivateKey = exports.cipher = exports.encryptWithPublicKey = exports.decryptWithPrivateKey = exports.publicKey = exports.createIdentity = undefined;

        var _createIdentity = require('./create-identity');

        var _createIdentity2 = _interopRequireDefault(_createIdentity);

        var _publicKey = require('./public-key');

        var publicKey = _interopRequireWildcard(_publicKey);

        var _decryptWithPrivateKey = require('./decrypt-with-private-key');

        var _decryptWithPrivateKey2 = _interopRequireDefault(_decryptWithPrivateKey);

        var _encryptWithPublicKey = require('./encrypt-with-public-key');

        var _encryptWithPublicKey2 = _interopRequireDefault(_encryptWithPublicKey);

        var _cipher = require('./cipher');

        var cipher = _interopRequireWildcard(_cipher);

        var _publicKeyByPrivateKey = require('./public-key-by-private-key');

        var _publicKeyByPrivateKey2 = _interopRequireDefault(_publicKeyByPrivateKey);

        var _recover = require('./recover');

        var _recover2 = _interopRequireDefault(_recover);

        var _recoverPublicKey = require('./recover-public-key');

        var _recoverPublicKey2 = _interopRequireDefault(_recoverPublicKey);

        var _sign = require('./sign');

        var _sign2 = _interopRequireDefault(_sign);

        var _signTransaction = require('./sign-transaction');

        var _signTransaction2 = _interopRequireDefault(_signTransaction);

        var _txDataByCompiled = require('./tx-data-by-compiled');

        var _txDataByCompiled2 = _interopRequireDefault(_txDataByCompiled);

        var _calculateContractAddress = require('./calculate-contract-address');

        var _calculateContractAddress2 = _interopRequireDefault(_calculateContractAddress);

        var _hash = require('./hash');

        var hash = _interopRequireWildcard(_hash);

        var _hex = require('./hex');

        var hex = _interopRequireWildcard(_hex);

        var _vrs = require('./vrs');

        var vrs = _interopRequireWildcard(_vrs);

        var _util = require('./util');

        var util = _interopRequireWildcard(_util);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            } else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }
                newObj['default'] = obj;
                return newObj;
            }
        }

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj};
        }

        exports.createIdentity = _createIdentity2['default'];
        exports.publicKey = publicKey;
        exports.decryptWithPrivateKey = _decryptWithPrivateKey2['default'];
        exports.encryptWithPublicKey = _encryptWithPublicKey2['default'];
        exports.cipher = cipher;
        exports.publicKeyByPrivateKey = _publicKeyByPrivateKey2['default'];
        exports.recover = _recover2['default'];
        exports.recoverPublicKey = _recoverPublicKey2['default'];
        exports.sign = _sign2['default'];
        exports.signTransaction = _signTransaction2['default'];
        exports.txDataByCompiled = _txDataByCompiled2['default'];
        exports.calculateContractAddress = _calculateContractAddress2['default'];
        exports.hash = hash;
        exports.hex = hex;
        exports.vrs = vrs;
        exports.util = util;
        exports['default'] = {
            createIdentity: _createIdentity2['default'],
            publicKey: publicKey,
            decryptWithPrivateKey: _decryptWithPrivateKey2['default'],
            encryptWithPublicKey: _encryptWithPublicKey2['default'],
            cipher: cipher,
            publicKeyByPrivateKey: _publicKeyByPrivateKey2['default'],
            recover: _recover2['default'],
            recoverPublicKey: _recoverPublicKey2['default'],
            sign: _sign2['default'],
            signTransaction: _signTransaction2['default'],
            txDataByCompiled: _txDataByCompiled2['default'],
            calculateContractAddress: _calculateContractAddress2['default'],
            hash: hash,
            hex: hex,
            vrs: vrs,
            util: util
        };
    }, {
        "./calculate-contract-address": 273,
        "./cipher": 274,
        "./create-identity": 275,
        "./decrypt-with-private-key": 276,
        "./encrypt-with-public-key": 277,
        "./hash": 278,
        "./hex": 279,
        "./public-key": 282,
        "./public-key-by-private-key": 281,
        "./recover": 284,
        "./recover-public-key": 283,
        "./sign": 286,
        "./sign-transaction": 285,
        "./tx-data-by-compiled": 287,
        "./util": 288,
        "./vrs": 289
    }],
    281: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports['default'] = publicKeyOfPrivateKey;

        var _ethereumjsUtil = require('ethereumjs-util');

        var _util = require('./util');

        /**
         * Generate publicKey from the privateKey.
         * This creates the uncompressed publicKey,
         * where 04 has stripped from left
         * @returns {string}
         */
        function publicKeyOfPrivateKey(privateKey) {
            privateKey = (0, _util.addTrailing0x)(privateKey);
            var publicKeyBuffer = (0, _ethereumjsUtil.privateToPublic)(privateKey);
            return publicKeyBuffer.toString('hex');
        }
    }, {"./util": 288, "ethereumjs-util": 340}],
    282: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.compress = compress;
            exports.decompress = decompress;
            exports.toAddress = toAddress;

            var _secp256k = require('secp256k1');

            var _ethereumjsUtil = require('ethereumjs-util');

            var _util = require('./util');

            function compress(startsWith04) {

                // add trailing 04 if not done before
                var testBuffer = Buffer.from(startsWith04, 'hex');
                if (testBuffer.length === 64) startsWith04 = '04' + startsWith04;

                return (0, _util.uint8ArrayToHex)((0, _secp256k.publicKeyConvert)((0, _util.hexToUnit8Array)(startsWith04), true));
            }

            function decompress(startsWith02Or03) {

                // if already decompressed an not has trailing 04
                var testBuffer = Buffer.from(startsWith02Or03, 'hex');
                if (testBuffer.length === 64) startsWith02Or03 = '04' + startsWith02Or03;

                var decompressed = (0, _util.uint8ArrayToHex)((0, _secp256k.publicKeyConvert)((0, _util.hexToUnit8Array)(startsWith02Or03), false));

                // remove trailing 04
                decompressed = decompressed.substring(2);
                return decompressed;
            }

            /**
             * generates the ethereum-adress of the publicKey
             * We create the checksum-adress which is case-sensitive
             * @returns {string} address
             */
            function toAddress(publicKey) {

                // normalize key
                publicKey = decompress(publicKey);

                var addressBuffer = (0, _ethereumjsUtil.pubToAddress)(Buffer.from(publicKey, 'hex'));
                var checkSumAdress = (0, _ethereumjsUtil.toChecksumAddress)(addressBuffer.toString('hex'));
                return checkSumAdress;
            }
        }).call(this, require("buffer").Buffer)
    }, {"./util": 288, "buffer": 51, "ethereumjs-util": 340, "secp256k1": 306}],
    283: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports['default'] = recoverPublicKey;

        var _secp256k = require('secp256k1');

        var _util = require('./util');

        /**
         * returns the publicKey for the privateKey with which the messageHash was signed
         * @param  {string} signature
         * @param  {string} hash
         * @return {string} publicKey
         */
        function recoverPublicKey(signature, hash) {
            signature = (0, _util.removeTrailing0x)(signature);

            // split into v-value and sig
            var sigOnly = signature.substring(0, signature.length - 2); // all but last 2 chars
            var vValue = signature.slice(-2); // last 2 chars

            var recoveryNumber = vValue === '1c' ? 1 : 0;

            var pubKey = (0, _util.uint8ArrayToHex)((0, _secp256k.ecdsaRecover)((0, _util.hexToUnit8Array)(sigOnly), recoveryNumber, (0, _util.hexToUnit8Array)((0, _util.removeTrailing0x)(hash)), false));

            // remove trailing '04'
            pubKey = pubKey.slice(2);

            return pubKey;
        }
    }, {"./util": 288, "secp256k1": 306}],
    284: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports['default'] = recover;

        var _recoverPublicKey = require('./recover-public-key');

        var _recoverPublicKey2 = _interopRequireDefault(_recoverPublicKey);

        var _publicKey = require('./public-key');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj};
        }

        /**
         * returns the adress with which the messageHash was signed
         * @param  {string} sigString
         * @param  {string} hash
         * @return {string} address
         */
        function recover(sigString, hash) {
            var pubkey = (0, _recoverPublicKey2['default'])(sigString, hash);
            var address = (0, _publicKey.toAddress)(pubkey);
            return address;
        }
    }, {"./public-key": 282, "./recover-public-key": 283}],
    285: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports['default'] = signTransaction;

            var _ethereumjsTx = require('ethereumjs-tx');

            var _publicKeyByPrivateKey = require('./public-key-by-private-key');

            var _publicKeyByPrivateKey2 = _interopRequireDefault(_publicKeyByPrivateKey);

            var _publicKey = require('./public-key');

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {'default': obj};
            }

            function signTransaction(rawTx, privateKey) {

                // check if privateKey->address matches rawTx.from
                var publicKey = (0, _publicKeyByPrivateKey2['default'])(privateKey);
                var address = (0, _publicKey.toAddress)(publicKey);
                if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');

                var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');

                var tx = new _ethereumjsTx.Transaction(rawTx);
                tx.sign(privateKeyBuffer);
                var serializedTx = tx.serialize().toString('hex');
                return serializedTx;
            }
        }).call(this, require("buffer").Buffer)
    }, {"./public-key": 282, "./public-key-by-private-key": 281, "buffer": 51, "ethereumjs-tx": 334}],
    286: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports['default'] = sign;

            var _secp256k = require('secp256k1');

            var _util = require('./util');

            /**
             * signs the given message
             * we do not use sign from eth-lib because the pure secp256k1-version is 90% faster
             * @param  {string} privateKey
             * @param  {string} hash
             * @return {string} hexString
             */
            function sign(privateKey, hash) {
                hash = (0, _util.addTrailing0x)(hash);
                if (hash.length !== 66) throw new Error('EthCrypto.sign(): Can only sign hashes, given: ' + hash);

                var sigObj = (0, _secp256k.ecdsaSign)(new Uint8Array(Buffer.from((0, _util.removeTrailing0x)(hash), 'hex')), new Uint8Array(Buffer.from((0, _util.removeTrailing0x)(privateKey), 'hex')));

                var recoveryId = sigObj.recid === 1 ? '1c' : '1b';

                var newSignature = '0x' + Buffer.from(sigObj.signature).toString('hex') + recoveryId;
                return newSignature;
            }
        }).call(this, require("buffer").Buffer)
    }, {"./util": 288, "buffer": 51, "secp256k1": 306}],
    287: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

        var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

        exports['default'] = txDataByCompiled;

        var _contract = require('ethers/contract.js');

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {'default': obj};
        }

        function txDataByCompiled(abi, bytecode, args) {
            // solc returns a string which is often passed instead of the json
            if (typeof abi === 'string') abi = JSON.parse(abi);

            // Construct a Contract Factory
            var factory = new _contract.ContractFactory(abi, '0x' + bytecode);

            var deployTransaction = factory.getDeployTransaction.apply(factory, (0, _toConsumableArray3['default'])(args));

            return deployTransaction.data;
        }
    }, {"babel-runtime/helpers/toConsumableArray": 190, "ethers/contract.js": 346}],
    288: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.removeTrailing0x = removeTrailing0x;
            exports.addTrailing0x = addTrailing0x;
            exports.uint8ArrayToHex = uint8ArrayToHex;
            exports.hexToUnit8Array = hexToUnit8Array;

            function removeTrailing0x(str) {
                if (str.startsWith('0x')) return str.substring(2); else return str;
            }

            function addTrailing0x(str) {
                if (!str.startsWith('0x')) return '0x' + str; else return str;
            }

            function uint8ArrayToHex(arr) {
                return Buffer.from(arr).toString('hex');
            }

            function hexToUnit8Array(str) {
                return new Uint8Array(Buffer.from(str, 'hex'));
            }
        }).call(this, require("buffer").Buffer)
    }, {"buffer": 51}],
    289: [function (require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromString = fromString;
        exports.toString = toString;

        var _account = require('eth-lib/lib/account');

        /**
         * split signature-hex into parts
         * @param  {string} hexString
         * @return {{v: string, r: string, s: string}}
         */
        function fromString(hexString) {
            var arr = (0, _account.decodeSignature)(hexString);
            return {
                v: arr[0],
                r: arr[1],
                s: arr[2]
            };
        }

        /**
         * merge signature-parts to one string
         * @param  {{v: string, r: string, s: string}} sig
         * @return {string} hexString
         */
        function toString(sig) {
            var partsArray = [sig.v, sig.r, sig.s];
            return (0, _account.encodeSignature)(partsArray);
        }
    }, {"eth-lib/lib/account": 309}],
    290: [function (require, module, exports) {
        arguments[4][70][0].apply(exports, arguments)
    }, {
        "../package.json": 305,
        "./elliptic/curve": 293,
        "./elliptic/curves": 296,
        "./elliptic/ec": 297,
        "./elliptic/eddsa": 300,
        "./elliptic/utils": 304,
        "brorand": 196,
        "dup": 70
    }],
    291: [function (require, module, exports) {
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;

        function BaseCurve(type, conf) {
            this.type = type;
            this.p = new BN(conf.p, 16);

            // Use Montgomery, when there is no fast reduction for the prime
            this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

            // Useful for many curves
            this.zero = new BN(0).toRed(this.red);
            this.one = new BN(1).toRed(this.red);
            this.two = new BN(2).toRed(this.red);

            // Curve configuration, optional
            this.n = conf.n && new BN(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

            // Temporary arrays
            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4);

            this._bitLength = this.n ? this.n.bitLength() : 0;

            // Generalized Greg Maxwell's trick
            var adjustCount = this.n && this.p.div(this.n);
            if (!adjustCount || adjustCount.cmpn(100) > 0) {
                this.redN = null;
            } else {
                this._maxwellTrick = true;
                this.redN = this.n.toRed(this.red);
            }
        }

        module.exports = BaseCurve;

        BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert(p.precomputed);
            var doubles = p._getDoubles();

            var naf = getNAF(k, 1, this._bitLength);
            var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3;

            // Translate into more windowed form
            var repr = [];
            for (var j = 0; j < naf.length; j += doubles.step) {
                var nafW = 0;
                for (var k = j + doubles.step - 1; k >= j; k--)
                    nafW = (nafW << 1) + naf[k];
                repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);
            for (var i = I; i > 0; i--) {
                for (var j = 0; j < repr.length; j++) {
                    var nafW = repr[j];
                    if (nafW === i)
                        b = b.mixedAdd(doubles.points[j]);
                    else if (nafW === -i)
                        b = b.mixedAdd(doubles.points[j].neg());
                }
                a = a.add(b);
            }
            return a.toP();
        };

        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4;

            // Precompute window
            var nafPoints = p._getNAFPoints(w);
            w = nafPoints.wnd;
            var wnd = nafPoints.points;

            // Get NAF form
            var naf = getNAF(k, w, this._bitLength);

            // Add `this`*(N+1) for every w-NAF index
            var acc = this.jpoint(null, null, null);
            for (var i = naf.length - 1; i >= 0; i--) {
                // Count zeroes
                for (var k = 0; i >= 0 && naf[i] === 0; i--)
                    k++;
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);

                if (i < 0)
                    break;
                var z = naf[i];
                assert(z !== 0);
                if (p.type === 'affine') {
                    // J +- P
                    if (z > 0)
                        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                } else {
                    // J +- J
                    if (z > 0)
                        acc = acc.add(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.add(wnd[(-z - 1) >> 1].neg());
                }
            }
            return p.type === 'affine' ? acc.toP() : acc;
        };

        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                               points,
                                                               coeffs,
                                                               len,
                                                               jacobianResult) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3;

            // Fill all arrays
            var max = 0;
            for (var i = 0; i < len; i++) {
                var p = points[i];
                var nafPoints = p._getNAFPoints(defW);
                wndWidth[i] = nafPoints.wnd;
                wnd[i] = nafPoints.points;
            }

            // Comb small window NAFs
            for (var i = len - 1; i >= 1; i -= 2) {
                var a = i - 1;
                var b = i;
                if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                    naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                    naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                    max = Math.max(naf[a].length, max);
                    max = Math.max(naf[b].length, max);
                    continue;
                }

                var comb = [
                    points[a], /* 1 */
                    null, /* 3 */
                    null, /* 5 */
                    points[b] /* 7 */
                ];

                // Try to avoid Projective points, if possible
                if (points[a].y.cmp(points[b].y) === 0) {
                    comb[1] = points[a].add(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].add(points[b].neg());
                } else {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                }

                var index = [
                    -3, /* -1 -1 */
                    -1, /* -1 0 */
                    -5, /* -1 1 */
                    -7, /* 0 -1 */
                    0, /* 0 0 */
                    7, /* 0 1 */
                    5, /* 1 -1 */
                    1, /* 1 0 */
                    3  /* 1 1 */
                ];

                var jsf = getJSF(coeffs[a], coeffs[b]);
                max = Math.max(jsf[0].length, max);
                naf[a] = new Array(max);
                naf[b] = new Array(max);
                for (var j = 0; j < max; j++) {
                    var ja = jsf[0][j] | 0;
                    var jb = jsf[1][j] | 0;

                    naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                    naf[b][j] = 0;
                    wnd[a] = comb;
                }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;
            for (var i = max; i >= 0; i--) {
                var k = 0;

                while (i >= 0) {
                    var zero = true;
                    for (var j = 0; j < len; j++) {
                        tmp[j] = naf[j][i] | 0;
                        if (tmp[j] !== 0)
                            zero = false;
                    }
                    if (!zero)
                        break;
                    k++;
                    i--;
                }
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);
                if (i < 0)
                    break;

                for (var j = 0; j < len; j++) {
                    var z = tmp[j];
                    var p;
                    if (z === 0)
                        continue;
                    else if (z > 0)
                        p = wnd[j][(z - 1) >> 1];
                    else if (z < 0)
                        p = wnd[j][(-z - 1) >> 1].neg();

                    if (p.type === 'affine')
                        acc = acc.mixedAdd(p);
                    else
                        acc = acc.add(p);
                }
            }
            // Zeroify references
            for (var i = 0; i < len; i++)
                wnd[i] = null;

            if (jacobianResult)
                return acc;
            else
                return acc.toP();
        };

        function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
        }

        BaseCurve.BasePoint = BasePoint;

        BasePoint.prototype.eq = function eq(/*other*/) {
            throw new Error('Not implemented');
        };

        BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
        };

        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils.toArray(bytes, enc);

            var len = this.p.byteLength();

            // uncompressed, hybrid-odd, hybrid-even
            if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                bytes.length - 1 === 2 * len) {
                if (bytes[0] === 0x06)
                    assert(bytes[bytes.length - 1] % 2 === 0);
                else if (bytes[0] === 0x07)
                    assert(bytes[bytes.length - 1] % 2 === 1);

                var res = this.point(bytes.slice(1, 1 + len),
                    bytes.slice(1 + len, 1 + 2 * len));

                return res;
            } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
                return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
            }
            throw new Error('Unknown point format');
        };

        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            return this.encode(enc, true);
        };

        BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);

            if (compact)
                return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

            return [0x04].concat(x, this.getY().toArray('be', len));
        };

        BasePoint.prototype.encode = function encode(enc, compact) {
            return utils.encode(this._encode(compact), enc);
        };

        BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed)
                return this;

            var precomputed = {
                doubles: null,
                naf: null,
                beta: null
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;

            return this;
        };

        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed)
                return false;

            var doubles = this.precomputed.doubles;
            if (!doubles)
                return false;

            return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
        };

        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles)
                return this.precomputed.doubles;

            var doubles = [this];
            var acc = this;
            for (var i = 0; i < power; i += step) {
                for (var j = 0; j < step; j++)
                    acc = acc.dbl();
                doubles.push(acc);
            }
            return {
                step: step,
                points: doubles
            };
        };

        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf)
                return this.precomputed.naf;

            var res = [this];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();
            for (var i = 1; i < max; i++)
                res[i] = res[i - 1].add(dbl);
            return {
                wnd: wnd,
                points: res
            };
        };

        BasePoint.prototype._getBeta = function _getBeta() {
            return null;
        };

        BasePoint.prototype.dblp = function dblp(k) {
            var r = this;
            for (var i = 0; i < k; i++)
                r = r.dbl();
            return r;
        };

    }, {"../utils": 304, "bn.js": 195}],
    292: [function (require, module, exports) {
        arguments[4][72][0].apply(exports, arguments)
    }, {"../utils": 304, "./base": 291, "bn.js": 195, "dup": 72, "inherits": 388}],
    293: [function (require, module, exports) {
        arguments[4][73][0].apply(exports, arguments)
    }, {"./base": 291, "./edwards": 292, "./mont": 294, "./short": 295, "dup": 73}],
    294: [function (require, module, exports) {
        arguments[4][74][0].apply(exports, arguments)
    }, {"../utils": 304, "./base": 291, "bn.js": 195, "dup": 74, "inherits": 388}],
    295: [function (require, module, exports) {
        arguments[4][75][0].apply(exports, arguments)
    }, {"../utils": 304, "./base": 291, "bn.js": 195, "dup": 75, "inherits": 388}],
    296: [function (require, module, exports) {
        arguments[4][76][0].apply(exports, arguments)
    }, {"./curve": 293, "./precomputed/secp256k1": 303, "./utils": 304, "dup": 76, "hash.js": 375}],
    297: [function (require, module, exports) {
        arguments[4][77][0].apply(exports, arguments)
    }, {
        "../curves": 296,
        "../utils": 304,
        "./key": 298,
        "./signature": 299,
        "bn.js": 195,
        "brorand": 196,
        "dup": 77,
        "hmac-drbg": 387
    }],
    298: [function (require, module, exports) {
        arguments[4][78][0].apply(exports, arguments)
    }, {"../utils": 304, "bn.js": 195, "dup": 78}],
    299: [function (require, module, exports) {
        arguments[4][79][0].apply(exports, arguments)
    }, {"../utils": 304, "bn.js": 195, "dup": 79}],
    300: [function (require, module, exports) {
        arguments[4][80][0].apply(exports, arguments)
    }, {"../curves": 296, "../utils": 304, "./key": 301, "./signature": 302, "dup": 80, "hash.js": 375}],
    301: [function (require, module, exports) {
        arguments[4][81][0].apply(exports, arguments)
    }, {"../utils": 304, "dup": 81}],
    302: [function (require, module, exports) {
        arguments[4][82][0].apply(exports, arguments)
    }, {"../utils": 304, "bn.js": 195, "dup": 82}],
    303: [function (require, module, exports) {
        arguments[4][83][0].apply(exports, arguments)
    }, {"dup": 83}],
    304: [function (require, module, exports) {
        'use strict';

        var utils = exports;
        var BN = require('bn.js');
        var minAssert = require('minimalistic-assert');
        var minUtils = require('minimalistic-crypto-utils');

        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;

// Represent num in a w-NAF form
        function getNAF(num, w, bits) {
            var naf = new Array(Math.max(num.bitLength(), bits) + 1);
            naf.fill(0);

            var ws = 1 << (w + 1);
            var k = num.clone();

            for (var i = 0; i < naf.length; i++) {
                var z;
                var mod = k.andln(ws - 1);
                if (k.isOdd()) {
                    if (mod > (ws >> 1) - 1)
                        z = (ws >> 1) - mod;
                    else
                        z = mod;
                    k.isubn(z);
                } else {
                    z = 0;
                }

                naf[i] = z;
                k.iushrn(1);
            }

            return naf;
        }

        utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
            var jsf = [
                [],
                []
            ];

            k1 = k1.clone();
            k2 = k2.clone();
            var d1 = 0;
            var d2 = 0;
            while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

                // First phase
                var m14 = (k1.andln(3) + d1) & 3;
                var m24 = (k2.andln(3) + d2) & 3;
                if (m14 === 3)
                    m14 = -1;
                if (m24 === 3)
                    m24 = -1;
                var u1;
                if ((m14 & 1) === 0) {
                    u1 = 0;
                } else {
                    var m8 = (k1.andln(7) + d1) & 7;
                    if ((m8 === 3 || m8 === 5) && m24 === 2)
                        u1 = -m14;
                    else
                        u1 = m14;
                }
                jsf[0].push(u1);

                var u2;
                if ((m24 & 1) === 0) {
                    u2 = 0;
                } else {
                    var m8 = (k2.andln(7) + d2) & 7;
                    if ((m8 === 3 || m8 === 5) && m14 === 2)
                        u2 = -m24;
                    else
                        u2 = m24;
                }
                jsf[1].push(u2);

                // Second phase
                if (2 * d1 === u1 + 1)
                    d1 = 1 - d1;
                if (2 * d2 === u2 + 1)
                    d2 = 1 - d2;
                k1.iushrn(1);
                k2.iushrn(1);
            }

            return jsf;
        }

        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
            var key = '_' + name;
            obj.prototype[name] = function cachedProperty() {
                return this[key] !== undefined ? this[key] :
                    this[key] = computer.call(this);
            };
        }

        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
            return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                bytes;
        }

        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
            return new BN(bytes, 'hex', 'le');
        }

        utils.intFromLE = intFromLE;


    }, {"bn.js": 195, "minimalistic-assert": 409, "minimalistic-crypto-utils": 410}],
    305: [function (require, module, exports) {
        module.exports = {
            "_from": "elliptic@^6.5.2",
            "_id": "elliptic@6.5.2",
            "_inBundle": false,
            "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
            "_location": "/eth-crypto/elliptic",
            "_phantomChildren": {},
            "_requested": {
                "type": "range",
                "registry": true,
                "raw": "elliptic@^6.5.2",
                "name": "elliptic",
                "escapedName": "elliptic",
                "rawSpec": "^6.5.2",
                "saveSpec": null,
                "fetchSpec": "^6.5.2"
            },
            "_requiredBy": [
                "/eth-crypto/secp256k1"
            ],
            "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
            "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762",
            "_spec": "elliptic@^6.5.2",
            "_where": "/home/deso/Documents/recheck/recheck-clientjs-library/node_modules/eth-crypto/node_modules/secp256k1",
            "author": {
                "name": "Fedor Indutny",
                "email": "fedor@indutny.com"
            },
            "bugs": {
                "url": "https://github.com/indutny/elliptic/issues"
            },
            "bundleDependencies": false,
            "dependencies": {
                "bn.js": "^4.4.0",
                "brorand": "^1.0.1",
                "hash.js": "^1.0.0",
                "hmac-drbg": "^1.0.0",
                "inherits": "^2.0.1",
                "minimalistic-assert": "^1.0.0",
                "minimalistic-crypto-utils": "^1.0.0"
            },
            "deprecated": false,
            "description": "EC cryptography",
            "devDependencies": {
                "brfs": "^1.4.3",
                "coveralls": "^3.0.8",
                "grunt": "^1.0.4",
                "grunt-browserify": "^5.0.0",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-connect": "^1.0.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^1.0.1",
                "grunt-mocha-istanbul": "^3.0.1",
                "grunt-saucelabs": "^9.0.1",
                "istanbul": "^0.4.2",
                "jscs": "^3.0.7",
                "jshint": "^2.10.3",
                "mocha": "^6.2.2"
            },
            "files": [
                "lib"
            ],
            "homepage": "https://github.com/indutny/elliptic",
            "keywords": [
                "EC",
                "Elliptic",
                "curve",
                "Cryptography"
            ],
            "license": "MIT",
            "main": "lib/elliptic.js",
            "name": "elliptic",
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/indutny/elliptic.git"
            },
            "scripts": {
                "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "lint": "npm run jscs && npm run jshint",
                "test": "npm run lint && npm run unit",
                "unit": "istanbul test _mocha --reporter=spec test/index.js",
                "version": "grunt dist && git add dist/"
            },
            "version": "6.5.2"
        }

    }, {}],
    306: [function (require, module, exports) {
        module.exports = require('./lib')(require('./lib/elliptic'))

    }, {"./lib": 308, "./lib/elliptic": 307}],
    307: [function (require, module, exports) {
        const EC = require('elliptic').ec

        const ec = new EC('secp256k1')
        const ecparams = ec.curve

// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
        const BN = ecparams.n.constructor

        function loadCompressedPublicKey(first, xbuf) {
            let x = new BN(xbuf)

            // overflow
            if (x.cmp(ecparams.p) >= 0) return null
            x = x.toRed(ecparams.red)

            // compute corresponding Y
            let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
            if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

            return ec.keyPair({pub: {x: x, y: y}})
        }

        function loadUncompressedPublicKey(first, xbuf, ybuf) {
            let x = new BN(xbuf)
            let y = new BN(ybuf)

            // overflow
            if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

            x = x.toRed(ecparams.red)
            y = y.toRed(ecparams.red)

            // is odd flag
            if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

            // x*x*x + b = y*y
            const x3 = x.redSqr().redIMul(x)
            if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

            return ec.keyPair({pub: {x: x, y: y}})
        }

        function loadPublicKey(pubkey) {
            // length should be validated in interface
            const first = pubkey[0]
            switch (first) {
                case 0x02:
                case 0x03:
                    if (pubkey.length !== 33) return null
                    return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
                case 0x04:
                case 0x06:
                case 0x07:
                    if (pubkey.length !== 65) return null
                    return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
                default:
                    return null
            }
        }

        function savePublicKey(output, point) {
            const pubkey = point.encode(null, output.length === 33)
            // Loop should be faster because we do not need create extra Uint8Array
            // output.set(new Uint8Array(pubkey))
            for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
        }

        module.exports = {
            contextRandomize() {
                return 0
            },

            privateKeyVerify(seckey) {
                const bn = new BN(seckey)
                return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
            },

            privateKeyNegate(seckey) {
                const bn = new BN(seckey)
                const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
                seckey.set(negate)
                return 0
            },

            privateKeyTweakAdd(seckey, tweak) {
                const bn = new BN(tweak)
                if (bn.cmp(ecparams.n) >= 0) return 1

                bn.iadd(new BN(seckey))
                if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
                if (bn.isZero()) return 1

                const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
                seckey.set(tweaked)

                return 0
            },

            privateKeyTweakMul(seckey, tweak) {
                let bn = new BN(tweak)
                if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

                bn.imul(new BN(seckey))
                if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)

                const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
                seckey.set(tweaked)

                return 0
            },

            publicKeyVerify(pubkey) {
                const pair = loadPublicKey(pubkey)
                return pair === null ? 1 : 0
            },

            publicKeyCreate(output, seckey) {
                const bn = new BN(seckey)
                if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

                const point = ec.keyFromPrivate(seckey).getPublic()
                savePublicKey(output, point)

                return 0
            },

            publicKeyConvert(output, pubkey) {
                const pair = loadPublicKey(pubkey)
                if (pair === null) return 1

                const point = pair.getPublic()
                savePublicKey(output, point)

                return 0
            },

            publicKeyNegate(output, pubkey) {
                const pair = loadPublicKey(pubkey)
                if (pair === null) return 1

                const point = pair.getPublic()
                point.y = point.y.redNeg()
                savePublicKey(output, point)

                return 0
            },

            publicKeyCombine(output, pubkeys) {
                const pairs = new Array(pubkeys.length)
                for (let i = 0; i < pubkeys.length; ++i) {
                    pairs[i] = loadPublicKey(pubkeys[i])
                    if (pairs[i] === null) return 1
                }

                let point = pairs[0].getPublic()
                for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
                if (point.isInfinity()) return 2

                savePublicKey(output, point)

                return 0
            },

            publicKeyTweakAdd(output, pubkey, tweak) {
                const pair = loadPublicKey(pubkey)
                if (pair === null) return 1

                tweak = new BN(tweak)
                if (tweak.cmp(ecparams.n) >= 0) return 2

                const point = pair.getPublic().add(ecparams.g.mul(tweak))
                if (point.isInfinity()) return 2

                savePublicKey(output, point)

                return 0
            },

            publicKeyTweakMul(output, pubkey, tweak) {
                const pair = loadPublicKey(pubkey)
                if (pair === null) return 1

                tweak = new BN(tweak)
                if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

                const point = pair.getPublic().mul(tweak)
                savePublicKey(output, point)

                return 0
            },

            signatureNormalize(sig) {
                const r = new BN(sig.subarray(0, 32))
                const s = new BN(sig.subarray(32, 64))
                if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

                if (s.cmp(ec.nh) === 1) {
                    sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
                }

                return 0
            },

            // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
            // Adapted for Uint8Array instead Buffer
            signatureExport(obj, sig) {
                const sigR = sig.subarray(0, 32)
                const sigS = sig.subarray(32, 64)
                if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
                if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

                const {output} = obj

                // Prepare R
                let r = output.subarray(4, 4 + 33)
                r[0] = 0x00
                r.set(sigR, 1)

                let lenR = 33
                let posR = 0
                for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) ;

                r = r.subarray(posR)
                if (r[0] & 0x80) return 1
                if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

                // Prepare S
                let s = output.subarray(6 + 33, 6 + 33 + 33)
                s[0] = 0x00
                s.set(sigS, 1)

                let lenS = 33
                let posS = 0
                for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) ;

                s = s.subarray(posS)
                if (s[0] & 0x80) return 1
                if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

                // Set output length for return
                obj.outputlen = 6 + lenR + lenS

                // Output in specified format
                // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
                output[0] = 0x30
                output[1] = obj.outputlen - 2
                output[2] = 0x02
                output[3] = r.length
                output.set(r, 4)
                output[4 + lenR] = 0x02
                output[5 + lenR] = s.length
                output.set(s, 6 + lenR)

                return 0
            },

            // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
            // Adapted for Uint8Array instead Buffer
            signatureImport(output, sig) {
                if (sig.length < 8) return 1
                if (sig.length > 72) return 1
                if (sig[0] !== 0x30) return 1
                if (sig[1] !== sig.length - 2) return 1
                if (sig[2] !== 0x02) return 1

                const lenR = sig[3]
                if (lenR === 0) return 1
                if (5 + lenR >= sig.length) return 1
                if (sig[4 + lenR] !== 0x02) return 1

                const lenS = sig[5 + lenR]
                if (lenS === 0) return 1
                if ((6 + lenR + lenS) !== sig.length) return 1

                if (sig[4] & 0x80) return 1
                if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

                if (sig[lenR + 6] & 0x80) return 1
                if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

                let sigR = sig.subarray(4, 4 + lenR)
                if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
                if (sigR.length > 32) return 1

                let sigS = sig.subarray(6 + lenR)
                if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
                if (sigS.length > 32) throw new Error('S length is too long')

                let r = new BN(sigR)
                if (r.cmp(ecparams.n) >= 0) r = new BN(0)

                let s = new BN(sig.subarray(6 + lenR))
                if (s.cmp(ecparams.n) >= 0) s = new BN(0)

                output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
                output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)

                return 0
            },

            ecdsaSign(obj, message, seckey, data, noncefn) {
                if (noncefn) {
                    const _noncefn = noncefn
                    noncefn = (counter) => {
                        const nonce = _noncefn(message, seckey, null, data, counter)

                        const isValid = nonce instanceof Uint8Array && nonce.length === 32
                        if (!isValid) throw new Error('This is the way')

                        return new BN(nonce)
                    }
                }

                const d = new BN(seckey)
                if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

                let sig
                try {
                    sig = ec.sign(message, seckey, {canonical: true, k: noncefn, pers: data})
                } catch (err) {
                    return 1
                }

                obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
                obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
                obj.recid = sig.recoveryParam

                return 0
            },

            ecdsaVerify(sig, msg32, pubkey) {
                const sigObj = {r: sig.subarray(0, 32), s: sig.subarray(32, 64)}

                const sigr = new BN(sigObj.r)
                const sigs = new BN(sigObj.s)
                if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
                if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

                const pair = loadPublicKey(pubkey)
                if (pair === null) return 2

                const point = pair.getPublic()
                const isValid = ec.verify(msg32, sigObj, point)
                return isValid ? 0 : 3
            },

            ecdsaRecover(output, sig, recid, msg32) {
                const sigObj = {r: sig.slice(0, 32), s: sig.slice(32, 64)}

                const sigr = new BN(sigObj.r)
                const sigs = new BN(sigObj.s)
                if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

                if (sigr.isZero() || sigs.isZero()) return 2

                // Can throw `throw new Error('Unable to find sencond key candinate');`
                let point
                try {
                    point = ec.recoverPubKey(msg32, sigObj, recid)
                } catch (err) {
                    return 2
                }

                savePublicKey(output, point)

                return 0
            },

            ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
                const pair = loadPublicKey(pubkey)
                if (pair === null) return 1

                const scalar = new BN(seckey)
                if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

                const point = pair.getPublic().mul(scalar)

                if (hashfn === undefined) {
                    const data = point.encode(null, true)
                    const sha256 = ec.hash().update(data).digest()
                    for (let i = 0; i < 32; ++i) output[i] = sha256[i]
                } else {
                    if (!xbuf) xbuf = new Uint8Array(32)
                    const x = point.getX().toArray('be', 32)
                    for (let i = 0; i < 32; ++i) xbuf[i] = x[i]

                    if (!ybuf) ybuf = new Uint8Array(32)
                    const y = point.getY().toArray('be', 32)
                    for (let i = 0; i < 32; ++i) ybuf[i] = y[i]

                    const hash = hashfn(xbuf, ybuf, data)

                    const isValid = hash instanceof Uint8Array && hash.length === output.length
                    if (!isValid) return 2

                    output.set(hash)
                }

                return 0
            }
        }

    }, {"elliptic": 290}],
    308: [function (require, module, exports) {
        const errors = {
            IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
            TWEAK_ADD:
                'The tweak was out of range or the resulted private key is invalid',
            TWEAK_MUL: 'The tweak was out of range or equal to zero',
            CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
            SECKEY_INVALID: 'Private Key is invalid',
            PUBKEY_PARSE: 'Public Key could not be parsed',
            PUBKEY_SERIALIZE: 'Public Key serialization error',
            PUBKEY_COMBINE: 'The sum of the public keys is not valid',
            SIG_PARSE: 'Signature could not be parsed',
            SIGN: 'The nonce generation function failed, or the private key was invalid',
            RECOVER: 'Public key could not be recover',
            ECDH: 'Scalar was invalid (zero or overflow)'
        }

        function assert(cond, msg) {
            if (!cond) throw new Error(msg)
        }

        function isUint8Array(name, value, length) {
            assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)

            if (length !== undefined) {
                if (Array.isArray(length)) {
                    const numbers = length.join(', ')
                    const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
                    assert(length.includes(value.length), msg)
                } else {
                    const msg = `Expected ${name} to be an Uint8Array with length ${length}`
                    assert(value.length === length, msg)
                }
            }
        }

        function isCompressed(value) {
            assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
        }

        function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
            if (typeof output === 'function') output = output(length)
            isUint8Array('output', output, length)
            return output
        }

        function toTypeString(value) {
            return Object.prototype.toString.call(value).slice(8, -1)
        }

        module.exports = (secp256k1) => {
            return {
                contextRandomize(seed) {
                    assert(
                        seed === null || seed instanceof Uint8Array,
                        'Expected seed to be an Uint8Array or null'
                    )
                    if (seed !== null) isUint8Array('seed', seed, 32)

                    switch (secp256k1.contextRandomize(seed)) {
                        case 1:
                            throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
                    }
                },

                privateKeyVerify(seckey) {
                    isUint8Array('private key', seckey, 32)

                    return secp256k1.privateKeyVerify(seckey) === 0
                },

                privateKeyNegate(seckey) {
                    isUint8Array('private key', seckey, 32)

                    switch (secp256k1.privateKeyNegate(seckey)) {
                        case 0:
                            return seckey
                        case 1:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                    }
                },

                privateKeyTweakAdd(seckey, tweak) {
                    isUint8Array('private key', seckey, 32)
                    isUint8Array('tweak', tweak, 32)

                    switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
                        case 0:
                            return seckey
                        case 1:
                            throw new Error(errors.TWEAK_ADD)
                    }
                },

                privateKeyTweakMul(seckey, tweak) {
                    isUint8Array('private key', seckey, 32)
                    isUint8Array('tweak', tweak, 32)

                    switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
                        case 0:
                            return seckey
                        case 1:
                            throw new Error(errors.TWEAK_MUL)
                    }
                },

                publicKeyVerify(pubkey) {
                    isUint8Array('public key', pubkey, [33, 65])

                    return secp256k1.publicKeyVerify(pubkey) === 0
                },

                publicKeyCreate(seckey, compressed = true, output) {
                    isUint8Array('private key', seckey, 32)
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyCreate(output, seckey)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.SECKEY_INVALID)
                        case 2:
                            throw new Error(errors.PUBKEY_SERIALIZE)
                    }
                },

                publicKeyConvert(pubkey, compressed = true, output) {
                    isUint8Array('public key', pubkey, [33, 65])
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyConvert(output, pubkey)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.PUBKEY_SERIALIZE)
                    }
                },

                publicKeyNegate(pubkey, compressed = true, output) {
                    isUint8Array('public key', pubkey, [33, 65])
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyNegate(output, pubkey)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                        case 3:
                            throw new Error(errors.PUBKEY_SERIALIZE)
                    }
                },

                publicKeyCombine(pubkeys, compressed = true, output) {
                    assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
                    assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
                    for (const pubkey of pubkeys) {
                        isUint8Array('public key', pubkey, [33, 65])
                    }
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyCombine(output, pubkeys)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.PUBKEY_COMBINE)
                        case 3:
                            throw new Error(errors.PUBKEY_SERIALIZE)
                    }
                },

                publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
                    isUint8Array('public key', pubkey, [33, 65])
                    isUint8Array('tweak', tweak, 32)
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.TWEAK_ADD)
                    }
                },

                publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
                    isUint8Array('public key', pubkey, [33, 65])
                    isUint8Array('tweak', tweak, 32)
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.TWEAK_MUL)
                    }
                },

                signatureNormalize(sig) {
                    isUint8Array('signature', sig, 64)

                    switch (secp256k1.signatureNormalize(sig)) {
                        case 0:
                            return sig
                        case 1:
                            throw new Error(errors.SIG_PARSE)
                    }
                },

                signatureExport(sig, output) {
                    isUint8Array('signature', sig, 64)
                    output = getAssertedOutput(output, 72)

                    const obj = {output, outputlen: 72}
                    switch (secp256k1.signatureExport(obj, sig)) {
                        case 0:
                            return output.slice(0, obj.outputlen)
                        case 1:
                            throw new Error(errors.SIG_PARSE)
                        case 2:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                    }
                },

                signatureImport(sig, output) {
                    isUint8Array('signature', sig)
                    output = getAssertedOutput(output, 64)

                    switch (secp256k1.signatureImport(output, sig)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.SIG_PARSE)
                        case 2:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                    }
                },

                ecdsaSign(msg32, seckey, options = {}, output) {
                    isUint8Array('message', msg32, 32)
                    isUint8Array('private key', seckey, 32)
                    assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
                    if (options.data !== undefined) isUint8Array('options.data', options.data)
                    if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
                    output = getAssertedOutput(output, 64)

                    const obj = {signature: output, recid: null}
                    switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
                        case 0:
                            return obj
                        case 1:
                            throw new Error(errors.SIGN)
                        case 2:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                    }
                },

                ecdsaVerify(sig, msg32, pubkey) {
                    isUint8Array('signature', sig, 64)
                    isUint8Array('message', msg32, 32)
                    isUint8Array('public key', pubkey, [33, 65])

                    switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
                        case 0:
                            return true
                        case 3:
                            return false
                        case 1:
                            throw new Error(errors.SIG_PARSE)
                        case 2:
                            throw new Error(errors.PUBKEY_PARSE)
                    }
                },

                ecdsaRecover(sig, recid, msg32, compressed = true, output) {
                    isUint8Array('signature', sig, 64)
                    assert(
                        toTypeString(recid) === 'Number' &&
                        recid >= 0 &&
                        recid <= 3,
                        'Expected recovery id to be a Number within interval [0, 3]'
                    )
                    isUint8Array('message', msg32, 32)
                    isCompressed(compressed)
                    output = getAssertedOutput(output, compressed ? 33 : 65)

                    switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.SIG_PARSE)
                        case 2:
                            throw new Error(errors.RECOVER)
                        case 3:
                            throw new Error(errors.IMPOSSIBLE_CASE)
                    }
                },

                ecdh(pubkey, seckey, options = {}, output) {
                    isUint8Array('public key', pubkey, [33, 65])
                    isUint8Array('private key', seckey, 32)
                    assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
                    if (options.data !== undefined) isUint8Array('options.data', options.data)
                    if (options.hashfn !== undefined) {
                        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
                        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
                        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
                        isUint8Array('output', output)
                    } else {
                        output = getAssertedOutput(output, 32)
                    }

                    switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
                        case 0:
                            return output
                        case 1:
                            throw new Error(errors.PUBKEY_PARSE)
                        case 2:
                            throw new Error(errors.ECDH)
                    }
                }
            }
        }

    }, {}],
    309: [function (require, module, exports) {
        (function (Buffer) {
            const Bytes = require("./bytes");
            const Nat = require("./nat");
            const elliptic = require("elliptic");
            const rlp = require("./rlp");
            const secp256k1 = new elliptic.ec("secp256k1"); // eslint-disable-line
            const {keccak256, keccak256s} = require("./hash");

            const create = entropy => {
                const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));
                const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));
                const outerHex = keccak256(middleHex);
                return fromPrivate(outerHex);
            };

            const toChecksum = address => {
                const addressHash = keccak256s(address.slice(2));
                let checksumAddress = "0x";
                for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
                return checksumAddress;
            };

            const fromPrivate = privateKey => {
                const buffer = new Buffer(privateKey.slice(2), "hex");
                const ecKey = secp256k1.keyFromPrivate(buffer);
                const publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
                const publicHash = keccak256(publicKey);
                const address = toChecksum("0x" + publicHash.slice(-40));
                return {
                    address: address,
                    privateKey: privateKey
                };
            };

            const encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);

            const decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];

            const makeSigner = addToV => (hash, privateKey) => {
                const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), {canonical: true});
                return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat("0x" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat("0x" + signature.s.toString(16)))]);
            };

            const sign = makeSigner(27); // v=27|28 instead of 0|1...

            const recover = (hash, signature) => {
                const vals = decodeSignature(signature);
                const vrs = {v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2)};
                const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
                const publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
                const publicHash = keccak256(publicKey);
                const address = toChecksum("0x" + publicHash.slice(-40));
                return address;
            };

            module.exports = {
                create,
                toChecksum,
                fromPrivate,
                sign,
                makeSigner,
                recover,
                encodeSignature,
                decodeSignature
            };
        }).call(this, require("buffer").Buffer)
    }, {"./bytes": 311, "./hash": 312, "./nat": 313, "./rlp": 314, "buffer": 51, "elliptic": 257}],
    310: [function (require, module, exports) {
        const generate = (num, fn) => {
            let a = [];
            for (var i = 0; i < num; ++i) a.push(fn(i));
            return a;
        };

        const replicate = (num, val) => generate(num, () => val);

        const concat = (a, b) => a.concat(b);

        const flatten = a => {
            let r = [];
            for (let j = 0, J = a.length; j < J; ++j) for (let i = 0, I = a[j].length; i < I; ++i) r.push(a[j][i]);
            return r;
        };

        const chunksOf = (n, a) => {
            let b = [];
            for (let i = 0, l = a.length; i < l; i += n) b.push(a.slice(i, i + n));
            return b;
        };

        module.exports = {
            generate,
            replicate,
            concat,
            flatten,
            chunksOf
        };
    }, {}],
    311: [function (require, module, exports) {
        const A = require("./array.js");

        const at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);

        const random = bytes => {
            let rnd;
            if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes)); else if (typeof require !== "undefined") rnd = require("c" + "rypto").randomBytes(bytes); else throw "Safe random numbers not available.";
            let hex = "0x";
            for (let i = 0; i < bytes; ++i) hex += ("00" + rnd[i].toString(16)).slice(-2);
            return hex;
        };

        const length = a => (a.length - 2) / 2;

        const flatten = a => "0x" + a.reduce((r, s) => r + s.slice(2), "");

        const slice = (i, j, bs) => "0x" + bs.slice(i * 2 + 2, j * 2 + 2);

        const reverse = hex => {
            let rev = "0x";
            for (let i = 0, l = length(hex); i < l; ++i) {
                rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
            }
            return rev;
        };

        const pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));

        const padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");

        const toArray = hex => {
            let arr = [];
            for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));
            return arr;
        };

        const fromArray = arr => {
            let hex = "0x";
            for (let i = 0, l = arr.length; i < l; ++i) {
                let b = arr[i];
                hex += (b < 16 ? "0" : "") + b.toString(16);
            }
            return hex;
        };

        const toUint8Array = hex => new Uint8Array(toArray(hex));

        const fromUint8Array = arr => fromArray([].slice.call(arr, 0));

        const fromNumber = num => {
            let hex = num.toString(16);
            return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
        };

        const toNumber = hex => parseInt(hex.slice(2), 16);

        const concat = (a, b) => a.concat(b.slice(2));

        const fromNat = bn => bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);

        const toNat = bn => bn[2] === "0" ? "0x" + bn.slice(3) : bn;

        const fromAscii = ascii => {
            let hex = "0x";
            for (let i = 0; i < ascii.length; ++i) hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
            return hex;
        };

        const toAscii = hex => {
            let ascii = "";
            for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
            return ascii;
        };

// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
        const fromString = s => {
            const makeByte = uint8 => {
                const b = uint8.toString(16);
                return b.length < 2 ? "0" + b : b;
            };
            let bytes = "0x";
            for (let ci = 0; ci != s.length; ci++) {
                let c = s.charCodeAt(ci);
                if (c < 128) {
                    bytes += makeByte(c);
                    continue;
                }
                if (c < 2048) {
                    bytes += makeByte(c >> 6 | 192);
                } else {
                    if (c > 0xd7ff && c < 0xdc00) {
                        if (++ci == s.length) return null;
                        let c2 = s.charCodeAt(ci);
                        if (c2 < 0xdc00 || c2 > 0xdfff) return null;
                        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                        bytes += makeByte(c >> 18 | 240);
                        bytes += makeByte(c >> 12 & 63 | 128);
                    } else {
                        // c <= 0xffff
                        bytes += makeByte(c >> 12 | 224);
                    }
                    bytes += makeByte(c >> 6 & 63 | 128);
                }
                bytes += makeByte(c & 63 | 128);
            }
            return bytes;
        };

        const toString = bytes => {
            let s = '';
            let i = 0;
            let l = length(bytes);
            while (i < l) {
                let c = at(bytes, i++);
                if (c > 127) {
                    if (c > 191 && c < 224) {
                        if (i >= l) return null;
                        c = (c & 31) << 6 | at(bytes, i) & 63;
                    } else if (c > 223 && c < 240) {
                        if (i + 1 >= l) return null;
                        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
                    } else if (c > 239 && c < 248) {
                        if (i + 2 >= l) return null;
                        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
                    } else return null;
                    ++i;
                }
                if (c <= 0xffff) s += String.fromCharCode(c); else if (c <= 0x10ffff) {
                    c -= 0x10000;
                    s += String.fromCharCode(c >> 10 | 0xd800);
                    s += String.fromCharCode(c & 0x3FF | 0xdc00);
                } else return null;
            }
            return s;
        };

        module.exports = {
            random,
            length,
            concat,
            flatten,
            slice,
            reverse,
            pad,
            padRight,
            fromAscii,
            toAscii,
            fromString,
            toString,
            fromNumber,
            toNumber,
            fromNat,
            toNat,
            fromArray,
            toArray,
            fromUint8Array,
            toUint8Array
        };
    }, {"./array.js": 310}],
    312: [function (require, module, exports) {
// This was ported from https://github.com/emn178/js-sha3, with some minor
// modifications and pruning. It is licensed under MIT:
//
// Copyright 2015-2016 Chen, Yi-Cyuan
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

        const HEX_CHARS = '0123456789abcdef'.split('');
        const KECCAK_PADDING = [1, 256, 65536, 16777216];
        const SHIFT = [0, 8, 16, 24];
        const RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

        const Keccak = bits => ({
            blocks: [],
            reset: true,
            block: 0,
            start: 0,
            blockCount: 1600 - (bits << 1) >> 5,
            outputBlocks: bits >> 5,
            s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        });

        const update = (state, message) => {
            var length = message.length,
                blocks = state.blocks,
                byteCount = state.blockCount << 2,
                blockCount = state.blockCount,
                outputBlocks = state.outputBlocks,
                s = state.s,
                index = 0,
                i,
                code;

            // update
            while (index < length) {
                if (state.reset) {
                    state.reset = false;
                    blocks[0] = state.block;
                    for (i = 1; i < blockCount + 1; ++i) {
                        blocks[i] = 0;
                    }
                }
                if (typeof message !== "string") {
                    for (i = state.start; index < length && i < byteCount; ++index) {
                        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                    }
                } else {
                    for (i = state.start; index < length && i < byteCount; ++index) {
                        code = message.charCodeAt(index);
                        if (code < 0x80) {
                            blocks[i >> 2] |= code << SHIFT[i++ & 3];
                        } else if (code < 0x800) {
                            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                        } else if (code < 0xd800 || code >= 0xe000) {
                            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                        } else {
                            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                        }
                    }
                }
                state.lastByteIndex = i;
                if (i >= byteCount) {
                    state.start = i - byteCount;
                    state.block = blocks[blockCount];
                    for (i = 0; i < blockCount; ++i) {
                        s[i] ^= blocks[i];
                    }
                    f(s);
                    state.reset = true;
                } else {
                    state.start = i;
                }
            }

            // finalize
            i = state.lastByteIndex;
            blocks[i >> 2] |= KECCAK_PADDING[i & 3];
            if (state.lastByteIndex === byteCount) {
                blocks[0] = blocks[blockCount];
                for (i = 1; i < blockCount + 1; ++i) {
                    blocks[i] = 0;
                }
            }
            blocks[blockCount - 1] |= 0x80000000;
            for (i = 0; i < blockCount; ++i) {
                s[i] ^= blocks[i];
            }
            f(s);

            // toString
            var hex = '',
                i = 0,
                j = 0,
                block;
            while (j < outputBlocks) {
                for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                    block = s[i];
                    hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
                }
                if (j % blockCount === 0) {
                    f(s);
                    i = 0;
                }
            }
            return "0x" + hex;
        };

        const f = s => {
            var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12,
                b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
                b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

            for (n = 0; n < 48; n += 2) {
                c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

                h = c8 ^ (c2 << 1 | c3 >>> 31);
                l = c9 ^ (c3 << 1 | c2 >>> 31);
                s[0] ^= h;
                s[1] ^= l;
                s[10] ^= h;
                s[11] ^= l;
                s[20] ^= h;
                s[21] ^= l;
                s[30] ^= h;
                s[31] ^= l;
                s[40] ^= h;
                s[41] ^= l;
                h = c0 ^ (c4 << 1 | c5 >>> 31);
                l = c1 ^ (c5 << 1 | c4 >>> 31);
                s[2] ^= h;
                s[3] ^= l;
                s[12] ^= h;
                s[13] ^= l;
                s[22] ^= h;
                s[23] ^= l;
                s[32] ^= h;
                s[33] ^= l;
                s[42] ^= h;
                s[43] ^= l;
                h = c2 ^ (c6 << 1 | c7 >>> 31);
                l = c3 ^ (c7 << 1 | c6 >>> 31);
                s[4] ^= h;
                s[5] ^= l;
                s[14] ^= h;
                s[15] ^= l;
                s[24] ^= h;
                s[25] ^= l;
                s[34] ^= h;
                s[35] ^= l;
                s[44] ^= h;
                s[45] ^= l;
                h = c4 ^ (c8 << 1 | c9 >>> 31);
                l = c5 ^ (c9 << 1 | c8 >>> 31);
                s[6] ^= h;
                s[7] ^= l;
                s[16] ^= h;
                s[17] ^= l;
                s[26] ^= h;
                s[27] ^= l;
                s[36] ^= h;
                s[37] ^= l;
                s[46] ^= h;
                s[47] ^= l;
                h = c6 ^ (c0 << 1 | c1 >>> 31);
                l = c7 ^ (c1 << 1 | c0 >>> 31);
                s[8] ^= h;
                s[9] ^= l;
                s[18] ^= h;
                s[19] ^= l;
                s[28] ^= h;
                s[29] ^= l;
                s[38] ^= h;
                s[39] ^= l;
                s[48] ^= h;
                s[49] ^= l;

                b0 = s[0];
                b1 = s[1];
                b32 = s[11] << 4 | s[10] >>> 28;
                b33 = s[10] << 4 | s[11] >>> 28;
                b14 = s[20] << 3 | s[21] >>> 29;
                b15 = s[21] << 3 | s[20] >>> 29;
                b46 = s[31] << 9 | s[30] >>> 23;
                b47 = s[30] << 9 | s[31] >>> 23;
                b28 = s[40] << 18 | s[41] >>> 14;
                b29 = s[41] << 18 | s[40] >>> 14;
                b20 = s[2] << 1 | s[3] >>> 31;
                b21 = s[3] << 1 | s[2] >>> 31;
                b2 = s[13] << 12 | s[12] >>> 20;
                b3 = s[12] << 12 | s[13] >>> 20;
                b34 = s[22] << 10 | s[23] >>> 22;
                b35 = s[23] << 10 | s[22] >>> 22;
                b16 = s[33] << 13 | s[32] >>> 19;
                b17 = s[32] << 13 | s[33] >>> 19;
                b48 = s[42] << 2 | s[43] >>> 30;
                b49 = s[43] << 2 | s[42] >>> 30;
                b40 = s[5] << 30 | s[4] >>> 2;
                b41 = s[4] << 30 | s[5] >>> 2;
                b22 = s[14] << 6 | s[15] >>> 26;
                b23 = s[15] << 6 | s[14] >>> 26;
                b4 = s[25] << 11 | s[24] >>> 21;
                b5 = s[24] << 11 | s[25] >>> 21;
                b36 = s[34] << 15 | s[35] >>> 17;
                b37 = s[35] << 15 | s[34] >>> 17;
                b18 = s[45] << 29 | s[44] >>> 3;
                b19 = s[44] << 29 | s[45] >>> 3;
                b10 = s[6] << 28 | s[7] >>> 4;
                b11 = s[7] << 28 | s[6] >>> 4;
                b42 = s[17] << 23 | s[16] >>> 9;
                b43 = s[16] << 23 | s[17] >>> 9;
                b24 = s[26] << 25 | s[27] >>> 7;
                b25 = s[27] << 25 | s[26] >>> 7;
                b6 = s[36] << 21 | s[37] >>> 11;
                b7 = s[37] << 21 | s[36] >>> 11;
                b38 = s[47] << 24 | s[46] >>> 8;
                b39 = s[46] << 24 | s[47] >>> 8;
                b30 = s[8] << 27 | s[9] >>> 5;
                b31 = s[9] << 27 | s[8] >>> 5;
                b12 = s[18] << 20 | s[19] >>> 12;
                b13 = s[19] << 20 | s[18] >>> 12;
                b44 = s[29] << 7 | s[28] >>> 25;
                b45 = s[28] << 7 | s[29] >>> 25;
                b26 = s[38] << 8 | s[39] >>> 24;
                b27 = s[39] << 8 | s[38] >>> 24;
                b8 = s[48] << 14 | s[49] >>> 18;
                b9 = s[49] << 14 | s[48] >>> 18;

                s[0] = b0 ^ ~b2 & b4;
                s[1] = b1 ^ ~b3 & b5;
                s[10] = b10 ^ ~b12 & b14;
                s[11] = b11 ^ ~b13 & b15;
                s[20] = b20 ^ ~b22 & b24;
                s[21] = b21 ^ ~b23 & b25;
                s[30] = b30 ^ ~b32 & b34;
                s[31] = b31 ^ ~b33 & b35;
                s[40] = b40 ^ ~b42 & b44;
                s[41] = b41 ^ ~b43 & b45;
                s[2] = b2 ^ ~b4 & b6;
                s[3] = b3 ^ ~b5 & b7;
                s[12] = b12 ^ ~b14 & b16;
                s[13] = b13 ^ ~b15 & b17;
                s[22] = b22 ^ ~b24 & b26;
                s[23] = b23 ^ ~b25 & b27;
                s[32] = b32 ^ ~b34 & b36;
                s[33] = b33 ^ ~b35 & b37;
                s[42] = b42 ^ ~b44 & b46;
                s[43] = b43 ^ ~b45 & b47;
                s[4] = b4 ^ ~b6 & b8;
                s[5] = b5 ^ ~b7 & b9;
                s[14] = b14 ^ ~b16 & b18;
                s[15] = b15 ^ ~b17 & b19;
                s[24] = b24 ^ ~b26 & b28;
                s[25] = b25 ^ ~b27 & b29;
                s[34] = b34 ^ ~b36 & b38;
                s[35] = b35 ^ ~b37 & b39;
                s[44] = b44 ^ ~b46 & b48;
                s[45] = b45 ^ ~b47 & b49;
                s[6] = b6 ^ ~b8 & b0;
                s[7] = b7 ^ ~b9 & b1;
                s[16] = b16 ^ ~b18 & b10;
                s[17] = b17 ^ ~b19 & b11;
                s[26] = b26 ^ ~b28 & b20;
                s[27] = b27 ^ ~b29 & b21;
                s[36] = b36 ^ ~b38 & b30;
                s[37] = b37 ^ ~b39 & b31;
                s[46] = b46 ^ ~b48 & b40;
                s[47] = b47 ^ ~b49 & b41;
                s[8] = b8 ^ ~b0 & b2;
                s[9] = b9 ^ ~b1 & b3;
                s[18] = b18 ^ ~b10 & b12;
                s[19] = b19 ^ ~b11 & b13;
                s[28] = b28 ^ ~b20 & b22;
                s[29] = b29 ^ ~b21 & b23;
                s[38] = b38 ^ ~b30 & b32;
                s[39] = b39 ^ ~b31 & b33;
                s[48] = b48 ^ ~b40 & b42;
                s[49] = b49 ^ ~b41 & b43;

                s[0] ^= RC[n];
                s[1] ^= RC[n + 1];
            }
        };

        const keccak = bits => str => {
            var msg;
            if (str.slice(0, 2) === "0x") {
                msg = [];
                for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));
            } else {
                msg = str;
            }
            return update(Keccak(bits, bits), msg);
        };

        module.exports = {
            keccak256: keccak(256),
            keccak512: keccak(512),
            keccak256s: keccak(256),
            keccak512s: keccak(512)
        };
    }, {}],
    313: [function (require, module, exports) {
        const BN = require("bn.js");
        const Bytes = require("./bytes");

        const fromBN = bn => "0x" + bn.toString("hex");

        const toBN = str => new BN(str.slice(2), 16);

        const fromString = str => {
            const bn = "0x" + (str.slice(0, 2) === "0x" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString("hex");
            return bn === "0x0" ? "0x" : bn;
        };

        const toEther = wei => toNumber(div(wei, fromString("10000000000"))) / 100000000;

        const fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString("10000000000"));

        const toString = a => toBN(a).toString(10);

        const fromNumber = a => typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new BN(a).toString("hex");

        const toNumber = a => toBN(a).toNumber();

        const toUint256 = a => Bytes.pad(32, a);

        const bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));

        const add = bin("add");
        const mul = bin("mul");
        const div = bin("div");
        const sub = bin("sub");

        module.exports = {
            toString,
            fromString,
            toNumber,
            fromNumber,
            toEther,
            fromEther,
            toUint256,
            add,
            mul,
            div,
            sub
        };
    }, {"./bytes": 311, "bn.js": 195}],
    314: [function (require, module, exports) {
// The RLP format
// Serialization and deserialization for the BytesTree type, under the following grammar:
// | First byte | Meaning                                                                    |
// | ---------- | -------------------------------------------------------------------------- |
// | 0   to 127 | HEX(leaf)                                                                  |
// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

        const encode = tree => {
            const padEven = str => str.length % 2 === 0 ? str : "0" + str;

            const uint = num => padEven(num.toString(16));

            const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);

            const dataTree = tree => {
                if (typeof tree === "string") {
                    const hex = tree.slice(2);
                    const pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
                    return pre + hex;
                } else {
                    const hex = tree.map(dataTree).join("");
                    const pre = length(hex.length / 2, 192);
                    return pre + hex;
                }
            };

            return "0x" + dataTree(tree);
        };

        const decode = hex => {
            let i = 2;

            const parseTree = () => {
                if (i >= hex.length) throw "";
                const head = hex.slice(i, i + 2);
                return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
            };

            const parseLength = () => {
                const len = parseInt(hex.slice(i, i += 2), 16) % 64;
                return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
            };

            const parseHex = () => {
                const len = parseLength();
                return "0x" + hex.slice(i, i += len * 2);
            };

            const parseList = () => {
                const lim = parseLength() * 2 + i;
                let list = [];
                while (i < lim) list.push(parseTree());
                return list;
            };

            try {
                return parseTree();
            } catch (e) {
                return [];
            }
        };

        module.exports = {encode, decode};
    }, {}],
    315: [function (require, module, exports) {
        module.exports = {
            "name": "goerli",
            "chainId": 5,
            "networkId": 5,
            "comment": "Cross-client PoA test network",
            "url": "https://github.com/goerli/testnet",
            "genesis": {
                "hash": "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a",
                "timestamp": "0x5c51a607",
                "gasLimit": 10485760,
                "difficulty": 1,
                "nonce": "0x0000000000000000",
                "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "stateRoot": "0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"
            },
            "hardforks": [
                {
                    "name": "chainstart",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "homestead",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "dao",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "tangerineWhistle",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "spuriousDragon",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "byzantium",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "constantinople",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "petersburg",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "istanbul",
                    "block": 1561651,
                    "consensus": "poa",
                    "finality": null
                }
            ],
            "bootstrapNodes": [
                {
                    "ip": "51.141.78.53",
                    "port": 30303,
                    "id": "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
                    "location": "",
                    "comment": "Upstream bootnode 1"
                },
                {
                    "ip": "13.93.54.137",
                    "port": 30303,
                    "id": "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
                    "location": "",
                    "comment": "Upstream bootnode 2"
                },
                {
                    "ip": "94.237.54.114",
                    "port": 30313,
                    "id": "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
                    "location": "",
                    "comment": "Upstream bootnode 3"
                },
                {
                    "ip": "52.64.155.147",
                    "port": 30303,
                    "id": "c1f8b7c2ac4453271fa07d8e9ecf9a2e8285aa0bd0c07df0131f47153306b0736fd3db8924e7a9bf0bed6b1d8d4f87362a71b033dc7c64547728d953e43e59b2",
                    "location": "",
                    "comment": "Upstream bootnode 4"
                },
                {
                    "ip": "213.186.16.82",
                    "port": 30303,
                    "id": "f4a9c6ee28586009fb5a96c8af13a58ed6d8315a9eee4772212c1d4d9cebe5a8b8a78ea4434f318726317d04a3f531a1ef0420cf9752605a562cfe858c46e263",
                    "location": "",
                    "comment": "Upstream bootnode 5"
                },
                {
                    "ip": "3.11.147.67",
                    "port": 30303,
                    "id": "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
                    "location": "",
                    "comment": "Ethereum Foundation bootnode"
                }
            ]
        }

    }, {}],
    316: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        exports.chains = {
            names: {
                '1': 'mainnet',
                '3': 'ropsten',
                '4': 'rinkeby',
                '42': 'kovan',
                '6284': 'goerli',
            },
            mainnet: require('./mainnet.json'),
            ropsten: require('./ropsten.json'),
            rinkeby: require('./rinkeby.json'),
            kovan: require('./kovan.json'),
            goerli: require('./goerli.json'),
        };

    }, {
        "./goerli.json": 315,
        "./kovan.json": 317,
        "./mainnet.json": 318,
        "./rinkeby.json": 319,
        "./ropsten.json": 320
    }],
    317: [function (require, module, exports) {
        module.exports = {
            "name": "kovan",
            "chainId": 42,
            "networkId": 42,
            "comment": "Parity PoA test network",
            "url": "https://kovan-testnet.github.io/website/",
            "genesis": {
                "hash": "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9",
                "timestamp": null,
                "gasLimit": 6000000,
                "difficulty": 131072,
                "nonce": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "extraData": "0x",
                "stateRoot": "0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"
            },
            "hardforks": [
                {
                    "name": "chainstart",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "homestead",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "dao",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "tangerineWhistle",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "spuriousDragon",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "byzantium",
                    "block": 5067000,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "constantinople",
                    "block": 9200000,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "petersburg",
                    "block": 10255201,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "istanbul",
                    "block": 14111141,
                    "consensus": "poa",
                    "finality": null
                }
            ],
            "bootstrapNodes": [
                {
                    "ip": "116.203.116.241",
                    "port": 30303,
                    "id": "16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45",
                    "location": "",
                    "comment": "1"
                },
                {
                    "ip": "3.217.96.11",
                    "port": 30303,
                    "id": "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
                    "location": "",
                    "comment": "2"
                },
                {
                    "ip": "108.61.170.124",
                    "port": 30303,
                    "id": "740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c",
                    "location": "",
                    "comment": "3"
                },
                {
                    "ip": "157.230.31.163",
                    "port": 30303,
                    "id": "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
                    "location": "",
                    "comment": "4"
                }
            ]
        }

    }, {}],
    318: [function (require, module, exports) {
        module.exports = {
            "name": "mainnet",
            "chainId": 1,
            "networkId": 1,
            "comment": "The Ethereum main chain",
            "url": "https://ethstats.net/",
            "genesis": {
                "hash": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
                "timestamp": null,
                "gasLimit": 5000,
                "difficulty": 17179869184,
                "nonce": "0x0000000000000042",
                "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
                "stateRoot": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"
            },
            "hardforks": [
                {
                    "name": "chainstart",
                    "block": 0,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "homestead",
                    "block": 1150000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "dao",
                    "block": 1920000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "tangerineWhistle",
                    "block": 2463000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "spuriousDragon",
                    "block": 2675000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "byzantium",
                    "block": 4370000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "constantinople",
                    "block": 7280000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "petersburg",
                    "block": 7280000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "istanbul",
                    "block": 9069000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "muirGlacier",
                    "block": 9200000,
                    "consensus": "pow",
                    "finality": null
                }
            ],
            "bootstrapNodes": [
                {
                    "ip": "18.138.108.67",
                    "port": 30303,
                    "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                    "location": "ap-southeast-1-001",
                    "comment": "bootnode-aws-ap-southeast-1-001"
                },
                {
                    "ip": "3.209.45.79",
                    "port": 30303,
                    "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                    "location": "us-east-1-001",
                    "comment": "bootnode-aws-us-east-1-001"
                },
                {
                    "ip": "34.255.23.113",
                    "port": 30303,
                    "id": "ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",
                    "location": "eu-west-1-001",
                    "comment": "bootnode-aws-eu-west-1-001"
                },
                {
                    "ip": "35.158.244.151",
                    "port": 30303,
                    "id": "279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",
                    "location": "eu-central-1-001",
                    "comment": "bootnode-aws-eu-central-1-001"
                },
                {
                    "ip": "52.187.207.27",
                    "port": 30303,
                    "id": "8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",
                    "location": "australiaeast-001",
                    "comment": "bootnode-azure-australiaeast-001"
                },
                {
                    "ip": "191.234.162.198",
                    "port": 30303,
                    "id": "103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",
                    "location": "brazilsouth-001",
                    "comment": "bootnode-azure-brazilsouth-001"
                },
                {
                    "ip": "52.231.165.108",
                    "port": 30303,
                    "id": "715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",
                    "location": "koreasouth-001",
                    "comment": "bootnode-azure-koreasouth-001"
                },
                {
                    "ip": "104.42.217.25",
                    "port": 30303,
                    "id": "5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",
                    "location": "westus-001",
                    "comment": "bootnode-azure-westus-001"
                }
            ]
        }

    }, {}],
    319: [function (require, module, exports) {
        module.exports = {
            "name": "rinkeby",
            "chainId": 4,
            "networkId": 4,
            "comment": "PoA test network",
            "url": "https://www.rinkeby.io",
            "genesis": {
                "hash": "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177",
                "timestamp": "0x58ee40ba",
                "gasLimit": 4700000,
                "difficulty": 1,
                "nonce": "0x0000000000000000",
                "extraData": "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "stateRoot": "0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"
            },
            "hardforks": [
                {
                    "name": "chainstart",
                    "block": 0,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "homestead",
                    "block": 1,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "dao",
                    "block": null,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "tangerineWhistle",
                    "block": 2,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "spuriousDragon",
                    "block": 3,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "byzantium",
                    "block": 1035301,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "constantinople",
                    "block": 3660663,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "petersburg",
                    "block": 4321234,
                    "consensus": "poa",
                    "finality": null
                },
                {
                    "name": "istanbul",
                    "block": 5435345,
                    "consensus": "poa",
                    "finality": null
                }
            ],
            "bootstrapNodes": [
                {
                    "ip": "52.169.42.101",
                    "port": 30303,
                    "id": "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
                    "location": "",
                    "comment": "IE"
                },
                {
                    "ip": "52.3.158.184",
                    "port": 30303,
                    "id": "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
                    "location": "",
                    "comment": "INFURA"
                },
                {
                    "ip": "159.89.28.211",
                    "port": 30303,
                    "id": "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
                    "location": "",
                    "comment": "AKASHA"
                }
            ]
        }

    }, {}],
    320: [function (require, module, exports) {
        module.exports = {
            "name": "ropsten",
            "chainId": 3,
            "networkId": 3,
            "comment": "PoW test network",
            "url": "https://github.com/ethereum/ropsten",
            "genesis": {
                "hash": "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d",
                "timestamp": null,
                "gasLimit": 16777216,
                "difficulty": 1048576,
                "nonce": "0x0000000000000042",
                "extraData": "0x3535353535353535353535353535353535353535353535353535353535353535",
                "stateRoot": "0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"
            },
            "hardforks": [
                {
                    "name": "chainstart",
                    "block": 0,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "homestead",
                    "block": 0,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "dao",
                    "block": null,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "tangerineWhistle",
                    "block": 0,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "spuriousDragon",
                    "block": 10,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "byzantium",
                    "block": 1700000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "constantinople",
                    "block": 4230000,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "petersburg",
                    "block": 4939394,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "istanbul",
                    "block": 6485846,
                    "consensus": "pow",
                    "finality": null
                },
                {
                    "name": "muirGlacier",
                    "block": 7117117,
                    "consensus": "pow",
                    "finality": null
                }
            ],
            "bootstrapNodes": [
                {
                    "ip": "52.176.7.10",
                    "port": 30303,
                    "id": "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
                    "location": "",
                    "comment": "US-Azure geth"
                },
                {
                    "ip": "52.176.100.77",
                    "port": 30303,
                    "id": "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
                    "location": "",
                    "comment": "US-Azure parity"
                },
                {
                    "ip": "52.232.243.152",
                    "port": 30303,
                    "id": "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
                    "location": "",
                    "comment": "Parity"
                },
                {
                    "ip": "192.81.208.223",
                    "port": 30303,
                    "id": "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
                    "location": "",
                    "comment": "@gpip"
                }
            ]
        }

    }, {}],
    321: [function (require, module, exports) {
        module.exports = {
            "name": "byzantium",
            "comment": "Hardfork with new precompiles, instructions and other protocol changes",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-609",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {
                "modexpGquaddivisor": {
                    "v": 20,
                    "d": "Gquaddivisor from modexp precompile for gas calculation"
                },
                "ecAdd": {
                    "v": 500,
                    "d": "Gas costs for curve addition precompile"
                },
                "ecMul": {
                    "v": 40000,
                    "d": "Gas costs for curve multiplication precompile"
                },
                "ecPairing": {
                    "v": 100000,
                    "d": "Base gas costs for curve pairing precompile"
                },
                "ecPairingWord": {
                    "v": 80000,
                    "d": "Gas costs regarding curve pairing precompile input length"
                }
            },
            "vm": {},
            "pow": {
                "minerReward": {
                    "v": "3000000000000000000",
                    "d": "the amount a miner get rewarded for mining a block"
                }
            },
            "casper": {},
            "sharding": {}
        }

    }, {}],
    322: [function (require, module, exports) {
        module.exports = {
            "name": "chainstart",
            "comment": "Start of the Ethereum main chain",
            "eip": {
                "url": "",
                "status": ""
            },
            "status": "",
            "gasConfig": {
                "minGasLimit": {
                    "v": 5000,
                    "d": "Minimum the gas limit may ever be"
                },
                "gasLimitBoundDivisor": {
                    "v": 1024,
                    "d": "The bound divisor of the gas limit, used in update calculations"
                }
            },
            "gasPrices": {
                "base": {
                    "v": 2,
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
                },
                "tierStep": {
                    "v": [0, 2, 3, 5, 8, 10, 20],
                    "d": "Once per operation, for a selection of them"
                },
                "exp": {
                    "v": 10,
                    "d": "Once per EXP instuction"
                },
                "expByte": {
                    "v": 10,
                    "d": "Times ceil(log256(exponent)) for the EXP instruction"
                },
                "sha3": {
                    "v": 30,
                    "d": "Once per SHA3 operation"
                },
                "sha3Word": {
                    "v": 6,
                    "d": "Once per word of the SHA3 operation's data"
                },
                "sload": {
                    "v": 50,
                    "d": "Once per SLOAD operation"
                },
                "sstoreSet": {
                    "v": 20000,
                    "d": "Once per SSTORE operation if the zeroness changes from zero"
                },
                "sstoreReset": {
                    "v": 5000,
                    "d": "Once per SSTORE operation if the zeroness does not change from zero"
                },
                "sstoreRefund": {
                    "v": 15000,
                    "d": "Once per SSTORE operation if the zeroness changes to zero"
                },
                "jumpdest": {
                    "v": 1,
                    "d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero"
                },
                "log": {
                    "v": 375,
                    "d": "Per LOG* operation"
                },
                "logData": {
                    "v": 8,
                    "d": "Per byte in a LOG* operation's data"
                },
                "logTopic": {
                    "v": 375,
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
                },
                "create": {
                    "v": 32000,
                    "d": "Once per CREATE operation & contract-creation transaction"
                },
                "call": {
                    "v": 40,
                    "d": "Once per CALL operation & message call transaction"
                },
                "callStipend": {
                    "v": 2300,
                    "d": "Free gas given at beginning of call"
                },
                "callValueTransfer": {
                    "v": 9000,
                    "d": "Paid for CALL when the value transfor is non-zero"
                },
                "callNewAccount": {
                    "v": 25000,
                    "d": "Paid for CALL when the destination address didn't exist prior"
                },
                "selfdestructRefund": {
                    "v": 24000,
                    "d": "Refunded following a selfdestruct operation"
                },
                "memory": {
                    "v": 3,
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
                },
                "quadCoeffDiv": {
                    "v": 512,
                    "d": "Divisor for the quadratic particle of the memory cost equation"
                },
                "createData": {
                    "v": 200,
                    "d": ""
                },
                "tx": {
                    "v": 21000,
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
                },
                "txCreation": {
                    "v": 32000,
                    "d": "The cost of creating a contract via tx"
                },
                "txDataZero": {
                    "v": 4,
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
                },
                "txDataNonZero": {
                    "v": 68,
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
                },
                "copy": {
                    "v": 3,
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
                },
                "ecRecover": {
                    "v": 3000,
                    "d": ""
                },
                "sha256": {
                    "v": 60,
                    "d": ""
                },
                "sha256Word": {
                    "v": 12,
                    "d": ""
                },
                "ripemd160": {
                    "v": 600,
                    "d": ""
                },
                "ripemd160Word": {
                    "v": 120,
                    "d": ""
                },
                "identity": {
                    "v": 15,
                    "d": ""
                },
                "identityWord": {
                    "v": 3,
                    "d": ""
                }
            },
            "vm": {
                "stackLimit": {
                    "v": 1024,
                    "d": "Maximum size of VM stack allowed"
                },
                "callCreateDepth": {
                    "v": 1024,
                    "d": "Maximum depth of call/create stack"
                },
                "maxExtraDataSize": {
                    "v": 32,
                    "d": "Maximum size extra data may be after Genesis"
                }
            },
            "pow": {
                "minimumDifficulty": {
                    "v": 131072,
                    "d": "The minimum that the difficulty may ever be"
                },
                "difficultyBoundDivisor": {
                    "v": 2048,
                    "d": "The bound divisor of the difficulty, used in the update calculations"
                },
                "durationLimit": {
                    "v": 13,
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
                },
                "epochDuration": {
                    "v": 30000,
                    "d": "Duration between proof-of-work epochs"
                },
                "timebombPeriod": {
                    "v": 100000,
                    "d": "Exponential difficulty timebomb period"
                },
                "minerReward": {
                    "v": "5000000000000000000",
                    "d": "the amount a miner get rewarded for mining a block"
                }
            },
            "casper": {},
            "sharding": {}
        }

    }, {}],
    323: [function (require, module, exports) {
        module.exports = {
            "name": "constantinople",
            "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {
                "netSstoreNoopGas": {
                    "v": 200,
                    "d": "Once per SSTORE operation if the value doesn't change"
                },
                "netSstoreInitGas": {
                    "v": 20000,
                    "d": "Once per SSTORE operation from clean zero"
                },
                "netSstoreCleanGas": {
                    "v": 5000,
                    "d": "Once per SSTORE operation from clean non-zero"
                },
                "netSstoreDirtyGas": {
                    "v": 200,
                    "d": "Once per SSTORE operation from dirty"
                },
                "netSstoreClearRefund": {
                    "v": 15000,
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot"
                },
                "netSstoreResetRefund": {
                    "v": 4800,
                    "d": "Once per SSTORE operation for resetting to the original non-zero value"
                },
                "netSstoreResetClearRefund": {
                    "v": 19800,
                    "d": "Once per SSTORE operation for resetting to the original zero value"
                }
            },
            "vm": {},
            "pow": {
                "minerReward": {
                    "v": "2000000000000000000",
                    "d": "The amount a miner gets rewarded for mining a block"
                }
            },
            "casper": {},
            "sharding": {}
        }

    }, {}],
    324: [function (require, module, exports) {
        module.exports = {
            "name": "dao",
            "comment": "DAO rescue hardfork",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-779",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {},
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    325: [function (require, module, exports) {
        module.exports = {
            "name": "homestead",
            "comment": "Homestead hardfork with protocol and network changes",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-606",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {},
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    326: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        exports.hardforks = [
            ['chainstart', require('./chainstart.json')],
            ['homestead', require('./homestead.json')],
            ['dao', require('./dao.json')],
            ['tangerineWhistle', require('./tangerineWhistle.json')],
            ['spuriousDragon', require('./spuriousDragon.json')],
            ['byzantium', require('./byzantium.json')],
            ['constantinople', require('./constantinople.json')],
            ['petersburg', require('./petersburg.json')],
            ['istanbul', require('./istanbul.json')],
            ['muirGlacier', require('./muirGlacier.json')],
        ];

    }, {
        "./byzantium.json": 321,
        "./chainstart.json": 322,
        "./constantinople.json": 323,
        "./dao.json": 324,
        "./homestead.json": 325,
        "./istanbul.json": 327,
        "./muirGlacier.json": 328,
        "./petersburg.json": 329,
        "./spuriousDragon.json": 330,
        "./tangerineWhistle.json": 331
    }],
    327: [function (require, module, exports) {
        module.exports = {
            "name": "istanbul",
            "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
                "status": "Draft"
            },
            "gasConfig": {},
            "gasPrices": {
                "blake2Round": {
                    "v": 1,
                    "d": "Gas cost per round for the Blake2 F precompile"
                },
                "ecAdd": {
                    "v": 150,
                    "d": "Gas costs for curve addition precompile"
                },
                "ecMul": {
                    "v": 6000,
                    "d": "Gas costs for curve multiplication precompile"
                },
                "ecPairing": {
                    "v": 45000,
                    "d": "Base gas costs for curve pairing precompile"
                },
                "ecPairingWord": {
                    "v": 34000,
                    "d": "Gas costs regarding curve pairing precompile input length"
                },
                "txDataNonZero": {
                    "v": 16,
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
                },
                "sstoreSentryGasEIP2200": {
                    "v": 2300,
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed"
                },
                "sstoreNoopGasEIP2200": {
                    "v": 800,
                    "d": "Once per SSTORE operation if the value doesn't change"
                },
                "sstoreDirtyGasEIP2200": {
                    "v": 800,
                    "d": "Once per SSTORE operation if a dirty value is changed"
                },
                "sstoreInitGasEIP2200": {
                    "v": 20000,
                    "d": "Once per SSTORE operation from clean zero to non-zero"
                },
                "sstoreInitRefundEIP2200": {
                    "v": 19200,
                    "d": "Once per SSTORE operation for resetting to the original zero value"
                },
                "sstoreCleanGasEIP2200": {
                    "v": 5000,
                    "d": "Once per SSTORE operation from clean non-zero to something else"
                },
                "sstoreCleanRefundEIP2200": {
                    "v": 4200,
                    "d": "Once per SSTORE operation for resetting to the original non-zero value"
                },
                "sstoreClearRefundEIP2200": {
                    "v": 15000,
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot"
                }
            },
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    328: [function (require, module, exports) {
        module.exports = {
            "name": "muirGlacier",
            "comment": "HF to delay the difficulty bomb",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
                "status": "Last Call"
            },
            "gasConfig": {},
            "gasPrices": {},
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    329: [function (require, module, exports) {
        module.exports = {
            "name": "petersburg",
            "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
                "status": "Draft"
            },
            "gasConfig": {},
            "gasPrices": {
                "netSstoreNoopGas": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreInitGas": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreCleanGas": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreDirtyGas": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreClearRefund": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreResetRefund": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                },
                "netSstoreResetClearRefund": {
                    "v": null,
                    "d": "Removed along EIP-1283"
                }
            },
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    330: [function (require, module, exports) {
        module.exports = {
            "name": "spuriousDragon",
            "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {
                "expByte": {
                    "v": 50,
                    "d": "Times ceil(log256(exponent)) for the EXP instruction"
                }
            },
            "vm": {
                "maxCodeSize": {
                    "v": 24576,
                    "d": "Maximum length of contract code"
                }
            },
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    331: [function (require, module, exports) {
        module.exports = {
            "name": "tangerineWhistle",
            "comment": "Hardfork with gas cost changes for IO-heavy operations",
            "eip": {
                "url": "https://eips.ethereum.org/EIPS/eip-608",
                "status": "Final"
            },
            "gasConfig": {},
            "gasPrices": {
                "sload": {
                    "v": 200,
                    "d": "Once per SLOAD operation"
                },
                "call": {
                    "v": 700,
                    "d": "Once per CALL operation & message call transaction"
                }
            },
            "vm": {},
            "pow": {},
            "casper": {},
            "sharding": {}
        }

    }, {}],
    332: [function (require, module, exports) {
        "use strict";
        var __assign = (this && this.__assign) || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var chains_1 = require("./chains");
        var hardforks_1 = require("./hardforks");
        /**
         * Common class to access chain and hardfork parameters
         */
        var Common = /** @class */ (function () {
            /**
             * @constructor
             * @param chain String ('mainnet') or Number (1) chain
             * @param hardfork String identifier ('byzantium') for hardfork (optional)
             * @param supportedHardforks Limit parameter returns to the given hardforks (optional)
             */
            function Common(chain, hardfork, supportedHardforks) {
                this._chainParams = this.setChain(chain);
                this._hardfork = null;
                this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;
                if (hardfork) {
                    this.setHardfork(hardfork);
                }
            }

            /**
             * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]
             * params from [[baseChain]] except the ones overridden in [[customChainParams]].
             *
             * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom
             * chain params on.
             * @param customChainParams The custom parameters of the chain.
             * @param hardfork String identifier ('byzantium') for hardfork (optional)
             * @param supportedHardforks Limit parameter returns to the given hardforks (optional)
             */
            Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {
                var standardChainParams = Common._getChainParams(baseChain);
                return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);
            };
            Common._getChainParams = function (chain) {
                if (typeof chain === 'number') {
                    if (chains_1.chains['names'][chain]) {
                        return chains_1.chains[chains_1.chains['names'][chain]];
                    }
                    throw new Error("Chain with ID " + chain + " not supported");
                }
                if (chains_1.chains[chain]) {
                    return chains_1.chains[chain];
                }
                throw new Error("Chain with name " + chain + " not supported");
            };
            /**
             * Sets the chain
             * @param chain String ('mainnet') or Number (1) chain
             *     representation. Or, a Dictionary of chain parameters for a private network.
             * @returns The dictionary with parameters set as chain
             */
            Common.prototype.setChain = function (chain) {
                if (typeof chain === 'number' || typeof chain === 'string') {
                    this._chainParams = Common._getChainParams(chain);
                } else if (typeof chain === 'object') {
                    var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
                    for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {
                        var param = required_1[_i];
                        if (chain[param] === undefined) {
                            throw new Error("Missing required chain parameter: " + param);
                        }
                    }
                    this._chainParams = chain;
                } else {
                    throw new Error('Wrong input format');
                }
                return this._chainParams;
            };
            /**
             * Sets the hardfork to get params for
             * @param hardfork String identifier ('byzantium')
             */
            Common.prototype.setHardfork = function (hardfork) {
                if (!this._isSupportedHardfork(hardfork)) {
                    throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
                }
                var changed = false;
                for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {
                    var hfChanges = hardforkChanges_1[_i];
                    if (hfChanges[0] === hardfork) {
                        this._hardfork = hardfork;
                        changed = true;
                    }
                }
                if (!changed) {
                    throw new Error("Hardfork with name " + hardfork + " not supported");
                }
            };
            /**
             * Internal helper function to choose between hardfork set and hardfork provided as param
             * @param hardfork Hardfork given to function as a parameter
             * @returns Hardfork chosen to be used
             */
            Common.prototype._chooseHardfork = function (hardfork, onlySupported) {
                onlySupported = onlySupported === undefined ? true : onlySupported;
                if (!hardfork) {
                    if (!this._hardfork) {
                        throw new Error('Method called with neither a hardfork set nor provided by param');
                    } else {
                        hardfork = this._hardfork;
                    }
                } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {
                    throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
                }
                return hardfork;
            };
            /**
             * Internal helper function, returns the params for the given hardfork for the chain set
             * @param hardfork Hardfork name
             * @returns Dictionary with hardfork params
             */
            Common.prototype._getHardfork = function (hardfork) {
                var hfs = this.hardforks();
                for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {
                    var hf = hfs_1[_i];
                    if (hf['name'] === hardfork)
                        return hf;
                }
                throw new Error("Hardfork " + hardfork + " not defined for chain " + this.chainName());
            };
            /**
             * Internal helper function to check if a hardfork is set to be supported by the library
             * @param hardfork Hardfork name
             * @returns True if hardfork is supported
             */
            Common.prototype._isSupportedHardfork = function (hardfork) {
                if (this._supportedHardforks.length > 0) {
                    for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {
                        var supportedHf = _a[_i];
                        if (hardfork === supportedHf)
                            return true;
                    }
                } else {
                    return true;
                }
                return false;
            };
            /**
             * Returns the parameter corresponding to a hardfork
             * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')
             * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
             * @param hardfork Hardfork name, optional if hardfork set
             */
            Common.prototype.param = function (topic, name, hardfork) {
                hardfork = this._chooseHardfork(hardfork);
                var value;
                for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {
                    var hfChanges = hardforkChanges_2[_i];
                    if (!hfChanges[1][topic]) {
                        throw new Error("Topic " + topic + " not defined");
                    }
                    if (hfChanges[1][topic][name] !== undefined) {
                        value = hfChanges[1][topic][name].v;
                    }
                    if (hfChanges[0] === hardfork)
                        break;
                }
                if (value === undefined) {
                    throw new Error(topic + " value for " + name + " not found");
                }
                return value;
            };
            /**
             * Returns a parameter for the hardfork active on block number
             * @param topic Parameter topic
             * @param name Parameter name
             * @param blockNumber Block number
             */
            Common.prototype.paramByBlock = function (topic, name, blockNumber) {
                var activeHfs = this.activeHardforks(blockNumber);
                var hardfork = activeHfs[activeHfs.length - 1]['name'];
                return this.param(topic, name, hardfork);
            };
            /**
             * Checks if set or provided hardfork is active on block number
             * @param hardfork Hardfork name or null (for HF set)
             * @param blockNumber
             * @param opts Hardfork options (onlyActive unused)
             * @returns True if HF is active on block number
             */
            Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {
                opts = opts !== undefined ? opts : {};
                var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;
                hardfork = this._chooseHardfork(hardfork, onlySupported);
                var hfBlock = this.hardforkBlock(hardfork);
                if (hfBlock !== null && blockNumber >= hfBlock)
                    return true;
                return false;
            };
            /**
             * Alias to hardforkIsActiveOnBlock when hardfork is set
             * @param blockNumber
             * @param opts Hardfork options (onlyActive unused)
             * @returns True if HF is active on block number
             */
            Common.prototype.activeOnBlock = function (blockNumber, opts) {
                return this.hardforkIsActiveOnBlock(null, blockNumber, opts);
            };
            /**
             * Sequence based check if given or set HF1 is greater than or equal HF2
             * @param hardfork1 Hardfork name or null (if set)
             * @param hardfork2 Hardfork name
             * @param opts Hardfork options
             * @returns True if HF1 gte HF2
             */
            Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {
                opts = opts !== undefined ? opts : {};
                var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;
                hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);
                var hardforks;
                if (onlyActive) {
                    hardforks = this.activeHardforks(null, opts);
                } else {
                    hardforks = this.hardforks();
                }
                var posHf1 = -1, posHf2 = -1;
                var index = 0;
                for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {
                    var hf = hardforks_2[_i];
                    if (hf['name'] === hardfork1)
                        posHf1 = index;
                    if (hf['name'] === hardfork2)
                        posHf2 = index;
                    index += 1;
                }
                return posHf1 >= posHf2;
            };
            /**
             * Alias to hardforkGteHardfork when hardfork is set
             * @param hardfork Hardfork name
             * @param opts Hardfork options
             * @returns True if hardfork set is greater than hardfork provided
             */
            Common.prototype.gteHardfork = function (hardfork, opts) {
                return this.hardforkGteHardfork(null, hardfork, opts);
            };
            /**
             * Checks if given or set hardfork is active on the chain
             * @param hardfork Hardfork name, optional if HF set
             * @param opts Hardfork options (onlyActive unused)
             * @returns True if hardfork is active on the chain
             */
            Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {
                opts = opts !== undefined ? opts : {};
                var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;
                hardfork = this._chooseHardfork(hardfork, onlySupported);
                for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {
                    var hf = _a[_i];
                    if (hf['name'] === hardfork && hf['block'] !== null)
                        return true;
                }
                return false;
            };
            /**
             * Returns the active hardfork switches for the current chain
             * @param blockNumber up to block if provided, otherwise for the whole chain
             * @param opts Hardfork options (onlyActive unused)
             * @return Array with hardfork arrays
             */
            Common.prototype.activeHardforks = function (blockNumber, opts) {
                opts = opts !== undefined ? opts : {};
                var activeHardforks = [];
                var hfs = this.hardforks();
                for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {
                    var hf = hfs_2[_i];
                    if (hf['block'] === null)
                        continue;
                    if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])
                        break;
                    if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))
                        continue;
                    activeHardforks.push(hf);
                }
                return activeHardforks;
            };
            /**
             * Returns the latest active hardfork name for chain or block or throws if unavailable
             * @param blockNumber up to block if provided, otherwise for the whole chain
             * @param opts Hardfork options (onlyActive unused)
             * @return Hardfork name
             */
            Common.prototype.activeHardfork = function (blockNumber, opts) {
                opts = opts !== undefined ? opts : {};
                var activeHardforks = this.activeHardforks(blockNumber, opts);
                if (activeHardforks.length > 0) {
                    return activeHardforks[activeHardforks.length - 1]['name'];
                } else {
                    throw new Error("No (supported) active hardfork found");
                }
            };
            /**
             * Returns the hardfork change block for hardfork provided or set
             * @param hardfork Hardfork name, optional if HF set
             * @returns Block number
             */
            Common.prototype.hardforkBlock = function (hardfork) {
                hardfork = this._chooseHardfork(hardfork, false);
                return this._getHardfork(hardfork)['block'];
            };
            /**
             * True if block number provided is the hardfork (given or set) change block of the current chain
             * @param blockNumber Number of the block to check
             * @param hardfork Hardfork name, optional if HF set
             * @returns True if blockNumber is HF block
             */
            Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {
                hardfork = this._chooseHardfork(hardfork, false);
                if (this.hardforkBlock(hardfork) === blockNumber) {
                    return true;
                } else {
                    return false;
                }
            };
            /**
             * Provide the consensus type for the hardfork set or provided as param
             * @param hardfork Hardfork name, optional if hardfork set
             * @returns Consensus type (e.g. 'pow', 'poa')
             */
            Common.prototype.consensus = function (hardfork) {
                hardfork = this._chooseHardfork(hardfork);
                return this._getHardfork(hardfork)['consensus'];
            };
            /**
             * Provide the finality type for the hardfork set or provided as param
             * @param {String} hardfork Hardfork name, optional if hardfork set
             * @returns {String} Finality type (e.g. 'pos', null of no finality)
             */
            Common.prototype.finality = function (hardfork) {
                hardfork = this._chooseHardfork(hardfork);
                return this._getHardfork(hardfork)['finality'];
            };
            /**
             * Returns the Genesis parameters of current chain
             * @returns Genesis dictionary
             */
            Common.prototype.genesis = function () {
                return this._chainParams['genesis'];
            };
            /**
             * Returns the hardforks for current chain
             * @returns {Array} Array with arrays of hardforks
             */
            Common.prototype.hardforks = function () {
                return this._chainParams['hardforks'];
            };
            /**
             * Returns bootstrap nodes for the current chain
             * @returns {Dictionary} Dict with bootstrap nodes
             */
            Common.prototype.bootstrapNodes = function () {
                return this._chainParams['bootstrapNodes'];
            };
            /**
             * Returns the hardfork set
             * @returns Hardfork name
             */
            Common.prototype.hardfork = function () {
                return this._hardfork;
            };
            /**
             * Returns the Id of current chain
             * @returns chain Id
             */
            Common.prototype.chainId = function () {
                return this._chainParams['chainId'];
            };
            /**
             * Returns the name of current chain
             * @returns chain name (lower case)
             */
            Common.prototype.chainName = function () {
                return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];
            };
            /**
             * Returns the Id of current network
             * @returns network Id
             */
            Common.prototype.networkId = function () {
                return this._chainParams['networkId'];
            };
            return Common;
        }());
        exports.default = Common;

    }, {"./chains": 316, "./hardforks": 326}],
    333: [function (require, module, exports) {
        "use strict";
        var __extends = (this && this.__extends) || (function () {
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        Object.defineProperty(exports, "__esModule", {value: true});
        var ethereumjs_util_1 = require("ethereumjs-util");
        var buffer_1 = require("buffer");
        var transaction_1 = require("./transaction");
        /**
         * Creates a new transaction object that doesn't need to be signed.
         *
         * @param data - A transaction can be initialized with its rlp representation, an array containing
         * the value of its fields in order, or an object containing them by name.
         *
         * @param opts - The transaction's options, used to indicate the chain and hardfork the
         * transactions belongs to.
         *
         * @see Transaction
         */
        var FakeTransaction = /** @class */ (function (_super) {
            __extends(FakeTransaction, _super);

            function FakeTransaction(data, opts) {
                if (data === void 0) {
                    data = {};
                }
                if (opts === void 0) {
                    opts = {};
                }
                var _this = _super.call(this, data, opts) || this;
                Object.defineProperty(_this, 'from', {
                    enumerable: true,
                    configurable: true,
                    get: function () {
                        return _this.getSenderAddress();
                    },
                    set: function (val) {
                        if (val) {
                            _this._from = ethereumjs_util_1.toBuffer(val);
                        }
                    },
                });
                var txData = data;
                if (txData.from) {
                    _this.from = ethereumjs_util_1.toBuffer(txData.from);
                }
                return _this;
            }

            /**
             * Computes a sha3-256 hash of the serialized tx, using the sender address to generate a fake
             * signature.
             *
             * @param includeSignature - Whether or not to include the signature
             */
            FakeTransaction.prototype.hash = function (includeSignature) {
                if (includeSignature === void 0) {
                    includeSignature = true;
                }
                if (includeSignature && this._from && this._from.toString('hex') !== '') {
                    // include a fake signature using the from address as a private key
                    var fakeKey = buffer_1.Buffer.concat([this._from, this._from.slice(0, 12)]);
                    this.sign(fakeKey);
                }
                return _super.prototype.hash.call(this, includeSignature);
            };
            return FakeTransaction;
        }(transaction_1.default));
        exports.default = FakeTransaction;

    }, {"./transaction": 335, "buffer": 51, "ethereumjs-util": 340}],
    334: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        var transaction_1 = require("./transaction");
        exports.Transaction = transaction_1.default;
        var fake_1 = require("./fake");
        exports.FakeTransaction = fake_1.default;

    }, {"./fake": 333, "./transaction": 335}],
    335: [function (require, module, exports) {
        "use strict";
        var __assign = (this && this.__assign) || function () {
            __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var ethereumjs_util_1 = require("ethereumjs-util");
        var ethereumjs_common_1 = require("ethereumjs-common");
        var buffer_1 = require("buffer");
// secp256k1n/2
        var N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
        /**
         * An Ethereum transaction.
         */
        var Transaction = /** @class */ (function () {
            /**
             * Creates a new transaction from an object with its fields' values.
             *
             * @param data - A transaction can be initialized with its rlp representation, an array containing
             * the value of its fields in order, or an object containing them by name.
             *
             * @param opts - The transaction's options, used to indicate the chain and hardfork the
             * transactions belongs to.
             *
             * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's
             * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious
             * Dragon.)
             *
             * @example
             * ```js
             * const txData = {
             *   nonce: '0x00',
             *   gasPrice: '0x09184e72a000',
             *   gasLimit: '0x2710',
             *   to: '0x0000000000000000000000000000000000000000',
             *   value: '0x00',
             *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',
             *   v: '0x1c',
             *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
             *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
             * };
             * const tx = new Transaction(txData);
             * ```
             */
            function Transaction(data, opts) {
                if (data === void 0) {
                    data = {};
                }
                if (opts === void 0) {
                    opts = {};
                }
                // instantiate Common class instance based on passed options
                if (opts.common) {
                    if (opts.chain || opts.hardfork) {
                        throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');
                    }
                    this._common = opts.common;
                } else {
                    var chain = opts.chain ? opts.chain : 'mainnet';
                    var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';
                    this._common = new ethereumjs_common_1.default(chain, hardfork);
                }
                // Define Properties
                var fields = [
                    {
                        name: 'nonce',
                        length: 32,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'gasPrice',
                        length: 32,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'gasLimit',
                        alias: 'gas',
                        length: 32,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'to',
                        allowZero: true,
                        length: 20,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'value',
                        length: 32,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'data',
                        alias: 'input',
                        allowZero: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'v',
                        allowZero: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 'r',
                        length: 32,
                        allowZero: true,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                    {
                        name: 's',
                        length: 32,
                        allowZero: true,
                        allowLess: true,
                        default: new buffer_1.Buffer([]),
                    },
                ];
                // attached serialize
                ethereumjs_util_1.defineProperties(this, fields, data);
                /**
                 * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
                 * @name from
                 * @memberof Transaction
                 */
                Object.defineProperty(this, 'from', {
                    enumerable: true,
                    configurable: true,
                    get: this.getSenderAddress.bind(this),
                });
                this._validateV(this.v);
                this._overrideVSetterWithValidation();
            }

            /**
             * If the tx's `to` is to the creation address
             */
            Transaction.prototype.toCreationAddress = function () {
                return this.to.toString('hex') === '';
            };
            /**
             * Computes a sha3-256 hash of the serialized tx
             * @param includeSignature - Whether or not to include the signature
             */
            Transaction.prototype.hash = function (includeSignature) {
                if (includeSignature === void 0) {
                    includeSignature = true;
                }
                var items;
                if (includeSignature) {
                    items = this.raw;
                } else {
                    if (this._implementsEIP155()) {
                        items = this.raw.slice(0, 6).concat([
                            ethereumjs_util_1.toBuffer(this.getChainId()),
                            // TODO: stripping zeros should probably be a responsibility of the rlp module
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),
                        ]);
                    } else {
                        items = this.raw.slice(0, 6);
                    }
                }
                // create hash
                return ethereumjs_util_1.rlphash(items);
            };
            /**
             * returns chain ID
             */
            Transaction.prototype.getChainId = function () {
                return this._common.chainId();
            };
            /**
             * returns the sender's address
             */
            Transaction.prototype.getSenderAddress = function () {
                if (this._from) {
                    return this._from;
                }
                var pubkey = this.getSenderPublicKey();
                this._from = ethereumjs_util_1.publicToAddress(pubkey);
                return this._from;
            };
            /**
             * returns the public key of the sender
             */
            Transaction.prototype.getSenderPublicKey = function () {
                if (!this.verifySignature()) {
                    throw new Error('Invalid Signature');
                }
                // If the signature was verified successfully the _senderPubKey field is defined
                return this._senderPubKey;
            };
            /**
             * Determines if the signature is valid
             */
            Transaction.prototype.verifySignature = function () {
                var msgHash = this.hash(false);
                // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
                if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {
                    return false;
                }
                try {
                    var v = ethereumjs_util_1.bufferToInt(this.v);
                    var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');
                    this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);
                } catch (e) {
                    return false;
                }
                return !!this._senderPubKey;
            };
            /**
             * sign a transaction with a given private key
             * @param privateKey - Must be 32 bytes in length
             */
            Transaction.prototype.sign = function (privateKey) {
                // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give
                // different results if this tx was already signed.
                this.v = new buffer_1.Buffer([]);
                this.s = new buffer_1.Buffer([]);
                this.r = new buffer_1.Buffer([]);
                var msgHash = this.hash(false);
                var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);
                if (this._implementsEIP155()) {
                    sig.v += this.getChainId() * 2 + 8;
                }
                Object.assign(this, sig);
            };
            /**
             * The amount of gas paid for the data in this tx
             */
            Transaction.prototype.getDataFee = function () {
                var data = this.raw[5];
                var cost = new ethereumjs_util_1.BN(0);
                for (var i = 0; i < data.length; i++) {
                    data[i] === 0
                        ? cost.iaddn(this._common.param('gasPrices', 'txDataZero'))
                        : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));
                }
                return cost;
            };
            /**
             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
             */
            Transaction.prototype.getBaseFee = function () {
                var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));
                if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {
                    fee.iaddn(this._common.param('gasPrices', 'txCreation'));
                }
                return fee;
            };
            /**
             * the up front amount that an account must have for this transaction to be valid
             */
            Transaction.prototype.getUpfrontCost = function () {
                return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));
            };
            Transaction.prototype.validate = function (stringError) {
                if (stringError === void 0) {
                    stringError = false;
                }
                var errors = [];
                if (!this.verifySignature()) {
                    errors.push('Invalid Signature');
                }
                if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {
                    errors.push(["gas limit is too low. Need at least " + this.getBaseFee()]);
                }
                if (stringError === false) {
                    return errors.length === 0;
                } else {
                    return errors.join(' ');
                }
            };
            /**
             * Returns the rlp encoding of the transaction
             */
            Transaction.prototype.serialize = function () {
                // Note: This never gets executed, defineProperties overwrites it.
                return ethereumjs_util_1.rlp.encode(this.raw);
            };
            /**
             * Returns the transaction in JSON format
             * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}
             */
            Transaction.prototype.toJSON = function (labels) {
                if (labels === void 0) {
                    labels = false;
                }
                // Note: This never gets executed, defineProperties overwrites it.
                return {};
            };
            Transaction.prototype._validateV = function (v) {
                if (v === undefined || v.length === 0) {
                    return;
                }
                if (!this._common.gteHardfork('spuriousDragon')) {
                    return;
                }
                var vInt = ethereumjs_util_1.bufferToInt(v);
                if (vInt === 27 || vInt === 28) {
                    return;
                }
                var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;
                if (!isValidEIP155V) {
                    throw new Error("Incompatible EIP155-based V " + vInt + " and chain id " + this.getChainId() + ". See the second parameter of the Transaction constructor to set the chain id.");
                }
            };
            Transaction.prototype._isSigned = function () {
                return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;
            };
            Transaction.prototype._overrideVSetterWithValidation = function () {
                var _this = this;
                var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');
                Object.defineProperty(this, 'v', __assign({}, vDescriptor, {
                    set: function (v) {
                        if (v !== undefined) {
                            _this._validateV(ethereumjs_util_1.toBuffer(v));
                        }
                        vDescriptor.set(v);
                    }
                }));
            };
            Transaction.prototype._implementsEIP155 = function () {
                var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');
                if (!this._isSigned()) {
                    // We sign with EIP155 all unsigned transactions after spuriousDragon
                    return onEIP155BlockOrLater;
                }
                // EIP155 spec:
                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing
                // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six
                // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by
                // CHAIN_ID, r = 0 and s = 0.
                var v = ethereumjs_util_1.bufferToInt(this.v);
                var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;
                return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;
            };
            return Transaction;
        }());
        exports.default = Transaction;

    }, {"buffer": 51, "ethereumjs-common": 332, "ethereumjs-util": 340}],
    336: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var assert = require('assert');
            var ethjsUtil = require('ethjs-util');
            var secp256k1 = require('secp256k1');
            var BN = require("bn.js");
            var bytes_1 = require("./bytes");
            var hash_1 = require("./hash");
            /**
             * Returns a zero address.
             */
            exports.zeroAddress = function () {
                var addressLength = 20;
                var addr = bytes_1.zeros(addressLength);
                return bytes_1.bufferToHex(addr);
            };
            /**
             * Checks if the address is a valid. Accepts checksummed addresses too.
             */
            exports.isValidAddress = function (address) {
                return /^0x[0-9a-fA-F]{40}$/.test(address);
            };
            /**
             * Checks if a given address is a zero address.
             */
            exports.isZeroAddress = function (address) {
                var zeroAddr = exports.zeroAddress();
                return zeroAddr === bytes_1.addHexPrefix(address);
            };
            /**
             * Returns a checksummed address.
             *
             * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
             * has the effect of checksummed addresses for one chain having invalid checksums for others.
             * For more details, consult EIP-1191.
             *
             * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
             * used variation in Ethereum was without the chainId. This may change in the future.
             */
            exports.toChecksumAddress = function (address, eip1191ChainId) {
                address = ethjsUtil.stripHexPrefix(address).toLowerCase();
                var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
                var hash = hash_1.keccak(prefix + address).toString('hex');
                var ret = '0x';
                for (var i = 0; i < address.length; i++) {
                    if (parseInt(hash[i], 16) >= 8) {
                        ret += address[i].toUpperCase();
                    } else {
                        ret += address[i];
                    }
                }
                return ret;
            };
            /**
             * Checks if the address is a valid checksummed address.
             *
             * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
             */
            exports.isValidChecksumAddress = function (address, eip1191ChainId) {
                return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
            };
            /**
             * Generates an address of a newly created contract.
             * @param from The address which is creating this new address
             * @param nonce The nonce of the from account
             */
            exports.generateAddress = function (from, nonce) {
                from = bytes_1.toBuffer(from);
                var nonceBN = new BN(nonce);
                if (nonceBN.isZero()) {
                    // in RLP we want to encode null in the case of zero nonce
                    // read the RLP documentation for an answer if you dare
                    return hash_1.rlphash([from, null]).slice(-20);
                }
                // Only take the lower 160bits of the hash
                return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
            };
            /**
             * Generates an address for a contract created using CREATE2.
             * @param from The address which is creating this new address
             * @param salt A salt
             * @param initCode The init code of the contract being created
             */
            exports.generateAddress2 = function (from, salt, initCode) {
                var fromBuf = bytes_1.toBuffer(from);
                var saltBuf = bytes_1.toBuffer(salt);
                var initCodeBuf = bytes_1.toBuffer(initCode);
                assert(fromBuf.length === 20);
                assert(saltBuf.length === 32);
                var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
                return address.slice(-20);
            };
            /**
             * Returns true if the supplied address belongs to a precompiled account (Byzantium).
             */
            exports.isPrecompiled = function (address) {
                var a = bytes_1.unpad(address);
                return a.length === 1 && a[0] >= 1 && a[0] <= 8;
            };
            /**
             * Checks if the private key satisfies the rules of the curve secp256k1.
             */
            exports.isValidPrivate = function (privateKey) {
                return secp256k1.privateKeyVerify(privateKey);
            };
            /**
             * Checks if the public key satisfies the rules of the curve secp256k1
             * and the requirements of Ethereum.
             * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
             * @param sanitize Accept public keys in other formats
             */
            exports.isValidPublic = function (publicKey, sanitize) {
                if (sanitize === void 0) {
                    sanitize = false;
                }
                if (publicKey.length === 64) {
                    // Convert to SEC1 for secp256k1
                    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
                }
                if (!sanitize) {
                    return false;
                }
                return secp256k1.publicKeyVerify(publicKey);
            };
            /**
             * Returns the ethereum address of a given public key.
             * Accepts "Ethereum public keys" and SEC1 encoded keys.
             * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
             * @param sanitize Accept public keys in other formats
             */
            exports.pubToAddress = function (pubKey, sanitize) {
                if (sanitize === void 0) {
                    sanitize = false;
                }
                pubKey = bytes_1.toBuffer(pubKey);
                if (sanitize && pubKey.length !== 64) {
                    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
                }
                assert(pubKey.length === 64);
                // Only take the lower 160bits of the hash
                return hash_1.keccak(pubKey).slice(-20);
            };
            exports.publicToAddress = exports.pubToAddress;
            /**
             * Returns the ethereum address of a given private key.
             * @param privateKey A private key must be 256 bits wide
             */
            exports.privateToAddress = function (privateKey) {
                return exports.publicToAddress(exports.privateToPublic(privateKey));
            };
            /**
             * Returns the ethereum public key of a given private key.
             * @param privateKey A private key must be 256 bits wide
             */
            exports.privateToPublic = function (privateKey) {
                privateKey = bytes_1.toBuffer(privateKey);
                // skip the type flag and use the X, Y points
                return secp256k1.publicKeyCreate(privateKey, false).slice(1);
            };
            /**
             * Converts a public key to the Ethereum format.
             */
            exports.importPublic = function (publicKey) {
                publicKey = bytes_1.toBuffer(publicKey);
                if (publicKey.length !== 64) {
                    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
                }
                return publicKey;
            };

        }).call(this, require("buffer").Buffer)
    }, {"./bytes": 337, "./hash": 339, "assert": 15, "bn.js": 195, "buffer": 51, "ethjs-util": 373, "secp256k1": 430}],
    337: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var ethjsUtil = require('ethjs-util');
            var BN = require("bn.js");
            /**
             * Returns a buffer filled with 0s.
             * @param bytes the number of bytes the buffer should be
             */
            exports.zeros = function (bytes) {
                return Buffer.allocUnsafe(bytes).fill(0);
            };
            /**
             * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
             * Or it truncates the beginning if it exceeds.
             * @param msg the value to pad (Buffer|Array)
             * @param length the number of bytes the output should be
             * @param right whether to start padding form the left or right
             * @return (Buffer|Array)
             */
            exports.setLengthLeft = function (msg, length, right) {
                if (right === void 0) {
                    right = false;
                }
                var buf = exports.zeros(length);
                msg = exports.toBuffer(msg);
                if (right) {
                    if (msg.length < length) {
                        msg.copy(buf);
                        return buf;
                    }
                    return msg.slice(0, length);
                } else {
                    if (msg.length < length) {
                        msg.copy(buf, length - msg.length);
                        return buf;
                    }
                    return msg.slice(-length);
                }
            };
            exports.setLength = exports.setLengthLeft;
            /**
             * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
             * Or it truncates the beginning if it exceeds.
             * @param msg the value to pad (Buffer|Array)
             * @param length the number of bytes the output should be
             * @return (Buffer|Array)
             */
            exports.setLengthRight = function (msg, length) {
                return exports.setLength(msg, length, true);
            };
            /**
             * Trims leading zeros from a `Buffer` or an `Array`.
             * @param a (Buffer|Array|String)
             * @return (Buffer|Array|String)
             */
            exports.unpad = function (a) {
                a = ethjsUtil.stripHexPrefix(a);
                var first = a[0];
                while (a.length > 0 && first.toString() === '0') {
                    a = a.slice(1);
                    first = a[0];
                }
                return a;
            };
            exports.stripZeros = exports.unpad;
            /**
             * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
             * @param v the value
             */
            exports.toBuffer = function (v) {
                if (!Buffer.isBuffer(v)) {
                    if (Array.isArray(v)) {
                        v = Buffer.from(v);
                    } else if (typeof v === 'string') {
                        if (ethjsUtil.isHexString(v)) {
                            v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
                        } else {
                            throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
                        }
                    } else if (typeof v === 'number') {
                        v = ethjsUtil.intToBuffer(v);
                    } else if (v === null || v === undefined) {
                        v = Buffer.allocUnsafe(0);
                    } else if (BN.isBN(v)) {
                        v = v.toArrayLike(Buffer);
                    } else if (v.toArray) {
                        // converts a BN to a Buffer
                        v = Buffer.from(v.toArray());
                    } else {
                        throw new Error('invalid type');
                    }
                }
                return v;
            };
            /**
             * Converts a `Buffer` to a `Number`.
             * @param buf `Buffer` object to convert
             * @throws If the input number exceeds 53 bits.
             */
            exports.bufferToInt = function (buf) {
                return new BN(exports.toBuffer(buf)).toNumber();
            };
            /**
             * Converts a `Buffer` into a `0x`-prefixed hex `String`.
             * @param buf `Buffer` object to convert
             */
            exports.bufferToHex = function (buf) {
                buf = exports.toBuffer(buf);
                return '0x' + buf.toString('hex');
            };
            /**
             * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
             * @param num Signed integer value
             */
            exports.fromSigned = function (num) {
                return new BN(num).fromTwos(256);
            };
            /**
             * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
             * @param num
             */
            exports.toUnsigned = function (num) {
                return Buffer.from(num.toTwos(256).toArray());
            };
            /**
             * Adds "0x" to a given `String` if it does not already start with "0x".
             */
            exports.addHexPrefix = function (str) {
                if (typeof str !== 'string') {
                    return str;
                }
                return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
            };
            /**
             * Converts a `Buffer` or `Array` to JSON.
             * @param ba (Buffer|Array)
             * @return (Array|String|null)
             */
            exports.baToJSON = function (ba) {
                if (Buffer.isBuffer(ba)) {
                    return "0x" + ba.toString('hex');
                } else if (ba instanceof Array) {
                    var array = [];
                    for (var i = 0; i < ba.length; i++) {
                        array.push(exports.baToJSON(ba[i]));
                    }
                    return array;
                }
            };

        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 195, "buffer": 51, "ethjs-util": 373}],
    338: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var BN = require("bn.js");
            /**
             * The max integer that this VM can handle
             */
            exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
            /**
             * 2^256
             */
            exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
            /**
             * Keccak-256 hash of null
             */
            exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
            /**
             * Keccak-256 hash of null
             */
            exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
            /**
             * Keccak-256 of an RLP of an empty array
             */
            exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
            /**
             * Keccak-256 of an RLP of an empty array
             */
            exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
            /**
             * Keccak-256 hash of the RLP of null
             */
            exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
            /**
             * Keccak-256 hash of the RLP of null
             */
            exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 195, "buffer": 51}],
    339: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var createKeccakHash = require('keccak');
            var createHash = require('create-hash');
            var ethjsUtil = require('ethjs-util');
            var rlp = require("rlp");
            var bytes_1 = require("./bytes");
            /**
             * Creates Keccak hash of the input
             * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
             * it's interpreted as hexadecimal, otherwise as utf8.
             * @param bits The Keccak width
             */
            exports.keccak = function (a, bits) {
                if (bits === void 0) {
                    bits = 256;
                }
                if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
                    a = Buffer.from(a, 'utf8');
                } else {
                    a = bytes_1.toBuffer(a);
                }
                if (!bits)
                    bits = 256;
                return createKeccakHash("keccak" + bits)
                    .update(a)
                    .digest();
            };
            /**
             * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
             * @param a The input data (Buffer|Array|String|Number)
             */
            exports.keccak256 = function (a) {
                return exports.keccak(a);
            };
            /**
             * Creates SHA256 hash of the input.
             * @param a The input data (Buffer|Array|String|Number)
             */
            exports.sha256 = function (a) {
                a = bytes_1.toBuffer(a);
                return createHash('sha256')
                    .update(a)
                    .digest();
            };
            /**
             * Creates RIPEMD160 hash of the input.
             * @param a The input data (Buffer|Array|String|Number)
             * @param padded Whether it should be padded to 256 bits or not
             */
            exports.ripemd160 = function (a, padded) {
                a = bytes_1.toBuffer(a);
                var hash = createHash('rmd160')
                    .update(a)
                    .digest();
                if (padded === true) {
                    return bytes_1.setLength(hash, 32);
                } else {
                    return hash;
                }
            };
            /**
             * Creates SHA-3 hash of the RLP encoded version of the input.
             * @param a The input data
             */
            exports.rlphash = function (a) {
                return exports.keccak(rlp.encode(a));
            };

        }).call(this, require("buffer").Buffer)
    }, {"./bytes": 337, "buffer": 51, "create-hash": 253, "ethjs-util": 373, "keccak": 395, "rlp": 427}],
    340: [function (require, module, exports) {
        "use strict";

        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }

        Object.defineProperty(exports, "__esModule", {value: true});
        var secp256k1 = require('secp256k1');
        exports.secp256k1 = secp256k1;
        var ethjsUtil = require('ethjs-util');
        var BN = require("bn.js");
        exports.BN = BN;
        var rlp = require("rlp");
        exports.rlp = rlp;
        Object.assign(exports, ethjsUtil);
        /**
         * Constants
         */
        __export(require("./constants"));
        /**
         * Public-key cryptography (secp256k1) and addresses
         */
        __export(require("./account"));
        /**
         * Hash functions
         */
        __export(require("./hash"));
        /**
         * ECDSA signature
         */
        __export(require("./signature"));
        /**
         * Utilities for manipulating Buffers, byte arrays, etc.
         */
        __export(require("./bytes"));
        /**
         * Function for definining properties on an object
         */
        __export(require("./object"));

    }, {
        "./account": 336,
        "./bytes": 337,
        "./constants": 338,
        "./hash": 339,
        "./object": 341,
        "./signature": 342,
        "bn.js": 195,
        "ethjs-util": 373,
        "rlp": 427,
        "secp256k1": 430
    }],
    341: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var assert = require('assert');
            var ethjsUtil = require('ethjs-util');
            var rlp = require("rlp");
            var bytes_1 = require("./bytes");
            /**
             * Defines properties on a `Object`. It make the assumption that underlying data is binary.
             * @param self the `Object` to define properties on
             * @param fields an array fields to define. Fields can contain:
             * * `name` - the name of the properties
             * * `length` - the number of bytes the field can have
             * * `allowLess` - if the field can be less than the length
             * * `allowEmpty`
             * @param data data to be validated against the definitions
             * @deprecated
             */
            exports.defineProperties = function (self, fields, data) {
                self.raw = [];
                self._fields = [];
                // attach the `toJSON`
                self.toJSON = function (label) {
                    if (label === void 0) {
                        label = false;
                    }
                    if (label) {
                        var obj_1 = {};
                        self._fields.forEach(function (field) {
                            obj_1[field] = "0x" + self[field].toString('hex');
                        });
                        return obj_1;
                    }
                    return bytes_1.baToJSON(self.raw);
                };
                self.serialize = function serialize() {
                    return rlp.encode(self.raw);
                };
                fields.forEach(function (field, i) {
                    self._fields.push(field.name);

                    function getter() {
                        return self.raw[i];
                    }

                    function setter(v) {
                        v = bytes_1.toBuffer(v);
                        if (v.toString('hex') === '00' && !field.allowZero) {
                            v = Buffer.allocUnsafe(0);
                        }
                        if (field.allowLess && field.length) {
                            v = bytes_1.stripZeros(v);
                            assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
                        } else if (!(field.allowZero && v.length === 0) && field.length) {
                            assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
                        }
                        self.raw[i] = v;
                    }

                    Object.defineProperty(self, field.name, {
                        enumerable: true,
                        configurable: true,
                        get: getter,
                        set: setter,
                    });
                    if (field.default) {
                        self[field.name] = field.default;
                    }
                    // attach alias
                    if (field.alias) {
                        Object.defineProperty(self, field.alias, {
                            enumerable: false,
                            configurable: true,
                            set: setter,
                            get: getter,
                        });
                    }
                });
                // if the constuctor is passed data
                if (data) {
                    if (typeof data === 'string') {
                        data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
                    }
                    if (Buffer.isBuffer(data)) {
                        data = rlp.decode(data);
                    }
                    if (Array.isArray(data)) {
                        if (data.length > self._fields.length) {
                            throw new Error('wrong number of fields in data');
                        }
                        // make sure all the items are buffers
                        data.forEach(function (d, i) {
                            self[self._fields[i]] = bytes_1.toBuffer(d);
                        });
                    } else if (typeof data === 'object') {
                        var keys_1 = Object.keys(data);
                        fields.forEach(function (field) {
                            if (keys_1.indexOf(field.name) !== -1)
                                self[field.name] = data[field.name];
                            if (keys_1.indexOf(field.alias) !== -1)
                                self[field.alias] = data[field.alias];
                        });
                    } else {
                        throw new Error('invalid data');
                    }
                }
            };

        }).call(this, require("buffer").Buffer)
    }, {"./bytes": 337, "assert": 15, "buffer": 51, "ethjs-util": 373, "rlp": 427}],
    342: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var secp256k1 = require('secp256k1');
            var BN = require("bn.js");
            var bytes_1 = require("./bytes");
            var hash_1 = require("./hash");
            /**
             * Returns the ECDSA signature of a message hash.
             */
            exports.ecsign = function (msgHash, privateKey, chainId) {
                var sig = secp256k1.sign(msgHash, privateKey);
                var recovery = sig.recovery;
                var ret = {
                    r: sig.signature.slice(0, 32),
                    s: sig.signature.slice(32, 64),
                    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
                };
                return ret;
            };
            /**
             * ECDSA public key recovery from signature.
             * @returns Recovered public key
             */
            exports.ecrecover = function (msgHash, v, r, s, chainId) {
                var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
                var recovery = calculateSigRecovery(v, chainId);
                if (!isValidSigRecovery(recovery)) {
                    throw new Error('Invalid signature v value');
                }
                var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
                return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
            };
            /**
             * Convert signature parameters into the format of `eth_sign` RPC method.
             * @returns Signature
             */
            exports.toRpcSig = function (v, r, s, chainId) {
                var recovery = calculateSigRecovery(v, chainId);
                if (!isValidSigRecovery(recovery)) {
                    throw new Error('Invalid signature v value');
                }
                // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
                return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
            };
            /**
             * Convert signature format of the `eth_sign` RPC method to signature parameters
             * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
             */
            exports.fromRpcSig = function (sig) {
                var buf = bytes_1.toBuffer(sig);
                // NOTE: with potential introduction of chainId this might need to be updated
                if (buf.length !== 65) {
                    throw new Error('Invalid signature length');
                }
                var v = buf[64];
                // support both versions of `eth_sign` responses
                if (v < 27) {
                    v += 27;
                }
                return {
                    v: v,
                    r: buf.slice(0, 32),
                    s: buf.slice(32, 64),
                };
            };
            /**
             * Validate a ECDSA signature.
             * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
             */
            exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
                if (homesteadOrLater === void 0) {
                    homesteadOrLater = true;
                }
                var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
                var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
                if (r.length !== 32 || s.length !== 32) {
                    return false;
                }
                if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
                    return false;
                }
                var rBN = new BN(r);
                var sBN = new BN(s);
                if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
                    return false;
                }
                if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
                    return false;
                }
                return true;
            };
            /**
             * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
             * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
             * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
             * used to produce the signature.
             */
            exports.hashPersonalMessage = function (message) {
                var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
                return hash_1.keccak(Buffer.concat([prefix, message]));
            };

            function calculateSigRecovery(v, chainId) {
                return chainId ? v - (2 * chainId + 35) : v - 27;
            }

            function isValidSigRecovery(recovery) {
                return recovery === 0 || recovery === 1;
            }

        }).call(this, require("buffer").Buffer)
    }, {"./bytes": 337, "./hash": 339, "bn.js": 195, "buffer": 51, "secp256k1": 430}],
    343: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        exports.version = "4.0.47";

    }, {}],
    344: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        var properties_1 = require("./utils/properties");
        var Signer = /** @class */ (function () {
            function Signer() {
                properties_1.setType(this, 'Signer');
            }

            Signer.isSigner = function (value) {
                return properties_1.isType(value, 'Signer');
            };
            return Signer;
        }());
        exports.Signer = Signer;
//defineReadOnly(Signer, 'inherits', inheritable(Signer));

    }, {"./utils/properties": 368}],
    345: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        var bignumber_1 = require("./utils/bignumber");
        var AddressZero = '0x0000000000000000000000000000000000000000';
        exports.AddressZero = AddressZero;
        var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
        exports.HashZero = HashZero;
// NFKD (decomposed)
//const EtherSymbol = '\uD835\uDF63';
// NFKC (composed)
        var EtherSymbol = '\u039e';
        exports.EtherSymbol = EtherSymbol;
        var NegativeOne = bignumber_1.bigNumberify(-1);
        exports.NegativeOne = NegativeOne;
        var Zero = bignumber_1.bigNumberify(0);
        exports.Zero = Zero;
        var One = bignumber_1.bigNumberify(1);
        exports.One = One;
        var Two = bignumber_1.bigNumberify(2);
        exports.Two = Two;
        var WeiPerEther = bignumber_1.bigNumberify('1000000000000000000');
        exports.WeiPerEther = WeiPerEther;
        var MaxUint256 = bignumber_1.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
        exports.MaxUint256 = MaxUint256;

    }, {"./utils/bignumber": 363}],
    346: [function (require, module, exports) {
        'use strict';
        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array && function (d, b) {
                    d.__proto__ = b;
                }) ||
                function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var constants_1 = require("./constants");
        var errors = __importStar(require("./errors"));
        var abi_coder_1 = require("./utils/abi-coder");
        var address_1 = require("./utils/address");
        var bignumber_1 = require("./utils/bignumber");
        var bytes_1 = require("./utils/bytes");
        var interface_1 = require("./utils/interface");
        var properties_1 = require("./utils/properties");
///////////////////////////////
// Imported Abstracts
        var abstract_provider_1 = require("./providers/abstract-provider");
        var abstract_signer_1 = require("./abstract-signer");
///////////////////////////////
        var VoidSigner = /** @class */ (function (_super) {
            __extends(VoidSigner, _super);

            function VoidSigner(address, provider) {
                var _this = _super.call(this) || this;
                properties_1.defineReadOnly(_this, 'address', address);
                properties_1.defineReadOnly(_this, 'provider', provider);
                return _this;
            }

            VoidSigner.prototype.getAddress = function () {
                return Promise.resolve(this.address);
            };
            VoidSigner.prototype._fail = function (message, operation) {
                return Promise.resolve().then(function () {
                    errors.throwError(message, errors.UNSUPPORTED_OPERATION, {operation: operation});
                });
            };
            VoidSigner.prototype.signMessage = function (message) {
                return this._fail('VoidSigner cannot sign messages', 'signMessage');
            };
            VoidSigner.prototype.sendTransaction = function (transaction) {
                return this._fail('VoidSigner cannot sign transactions', 'sendTransaction');
            };
            VoidSigner.prototype.connect = function (provider) {
                return new VoidSigner(this.address, provider);
            };
            return VoidSigner;
        }(abstract_signer_1.Signer));
        exports.VoidSigner = VoidSigner;
        var allowedTransactionKeys = {
            chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
        };
// Recursively replaces ENS names with promises to resolve the name and
// stalls until all promises have returned
// @TODO: Expand this to resolve any promises too
        function resolveAddresses(provider, value, paramType) {
            if (Array.isArray(paramType)) {
                var promises_1 = [];
                paramType.forEach(function (paramType, index) {
                    var v = null;
                    if (Array.isArray(value)) {
                        v = value[index];
                    } else {
                        v = value[paramType.name];
                    }
                    promises_1.push(resolveAddresses(provider, v, paramType));
                });
                return Promise.all(promises_1);
            }
            if (paramType.type === 'address') {
                return provider.resolveName(value);
            }
            if (paramType.type === 'tuple') {
                return resolveAddresses(provider, value, paramType.components);
            }
            // Strips one level of array indexing off the end to recuse into
            var isArrayMatch = paramType.type.match(/(.*)(\[[0-9]*\]$)/);
            if (isArrayMatch) {
                if (!Array.isArray(value)) {
                    throw new Error('invalid value for array');
                }
                var promises = [];
                var subParamType = {
                    components: paramType.components,
                    type: isArrayMatch[1],
                };
                value.forEach(function (v) {
                    promises.push(resolveAddresses(provider, v, subParamType));
                });
                return Promise.all(promises);
            }
            return Promise.resolve(value);
        }

        function runMethod(contract, functionName, estimateOnly) {
            var method = contract.interface.functions[functionName];
            return function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var tx = {};
                var blockTag = null;
                // If 1 extra parameter was passed in, it contains overrides
                if (params.length === method.inputs.length + 1 && typeof (params[params.length - 1]) === 'object') {
                    tx = properties_1.shallowCopy(params.pop());
                    if (tx.blockTag != null) {
                        blockTag = tx.blockTag;
                    }
                    delete tx.blockTag;
                    // Check for unexpected keys (e.g. using "gas" instead of "gasLimit")
                    for (var key in tx) {
                        if (!allowedTransactionKeys[key]) {
                            throw new Error('unknown transaction override ' + key);
                        }
                    }
                }
                if (params.length != method.inputs.length) {
                    throw new Error('incorrect number of arguments');
                }
                // Check overrides make sense
                ['data', 'to'].forEach(function (key) {
                    if (tx[key] != null) {
                        errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {operation: key});
                    }
                });
                tx.to = contract._deployed(blockTag).then(function () {
                    return contract.addressPromise;
                });
                return resolveAddresses(contract.provider, params, method.inputs).then(function (params) {
                    tx.data = method.encode(params);
                    if (method.type === 'call') {
                        // Call (constant functions) always cost 0 ether
                        if (estimateOnly) {
                            return Promise.resolve(constants_1.Zero);
                        }
                        if (!contract.provider) {
                            errors.throwError('call (constant functions) require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {operation: 'call'});
                        }
                        // Check overrides make sense
                        ['gasLimit', 'gasPrice', 'value'].forEach(function (key) {
                            if (tx[key] != null) {
                                throw new Error('call cannot override ' + key);
                            }
                        });
                        if (tx.from == null && contract.signer) {
                            tx.from = contract.signer.getAddress();
                        }
                        return contract.provider.call(tx, blockTag).then(function (value) {
                            if ((bytes_1.hexDataLength(value) % 32) === 4 && bytes_1.hexDataSlice(value, 0, 4) === '0x08c379a0') {
                                var reason = abi_coder_1.defaultAbiCoder.decode(['string'], bytes_1.hexDataSlice(value, 4));
                                errors.throwError('call revert exception', errors.CALL_EXCEPTION, {
                                    address: contract.address,
                                    args: params,
                                    method: method.signature,
                                    errorSignature: 'Error(string)',
                                    errorArgs: [reason],
                                    reason: reason,
                                    transaction: tx
                                });
                            }
                            try {
                                var result = method.decode(value);
                                if (method.outputs.length === 1) {
                                    result = result[0];
                                }
                                return result;
                            } catch (error) {
                                if (value === '0x' && method.outputs.length > 0) {
                                    errors.throwError('call exception', errors.CALL_EXCEPTION, {
                                        address: contract.address,
                                        method: method.signature,
                                        args: params
                                    });
                                }
                                throw error;
                            }
                        });
                    } else if (method.type === 'transaction') {
                        // Only computing the transaction estimate
                        if (estimateOnly) {
                            if (!contract.provider) {
                                errors.throwError('estimate gas require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {operation: 'estimateGas'});
                            }
                            if (tx.from == null && contract.signer) {
                                tx.from = contract.signer.getAddress();
                            }
                            return contract.provider.estimateGas(tx);
                        }
                        if (tx.gasLimit == null && method.gas != null) {
                            tx.gasLimit = bignumber_1.bigNumberify(method.gas).add(21000);
                        }
                        if (!contract.signer) {
                            errors.throwError('sending a transaction requires a signer', errors.UNSUPPORTED_OPERATION, {operation: 'sendTransaction'});
                        }
                        // Make sure they aren't overriding something they shouldn't
                        if (tx.from != null) {
                            errors.throwError('cannot override from in a transaction', errors.UNSUPPORTED_OPERATION, {operation: 'sendTransaction'});
                        }
                        return contract.signer.sendTransaction(tx).then(function (tx) {
                            var wait = tx.wait.bind(tx);
                            tx.wait = function (confirmations) {
                                return wait(confirmations).then(function (receipt) {
                                    receipt.events = receipt.logs.map(function (log) {
                                        var event = properties_1.deepCopy(log);
                                        var parsed = contract.interface.parseLog(log);
                                        if (parsed) {
                                            event.args = parsed.values;
                                            event.decode = parsed.decode;
                                            event.event = parsed.name;
                                            event.eventSignature = parsed.signature;
                                        }
                                        event.removeListener = function () {
                                            return contract.provider;
                                        };
                                        event.getBlock = function () {
                                            return contract.provider.getBlock(receipt.blockHash);
                                        };
                                        event.getTransaction = function () {
                                            return contract.provider.getTransaction(receipt.transactionHash);
                                        };
                                        event.getTransactionReceipt = function () {
                                            return Promise.resolve(receipt);
                                        };
                                        return event;
                                    });
                                    return receipt;
                                });
                            };
                            return tx;
                        });
                    }
                    throw new Error('invalid type - ' + method.type);
                    return null;
                });
            };
        }

        function getEventTag(filter) {
            if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
                return '*';
            }
            return (filter.address || '*') + '@' + (filter.topics ? filter.topics.join(':') : '');
        }

        var Contract = /** @class */ (function () {
            // https://github.com/Microsoft/TypeScript/issues/5453
            // Once this issue is resolved (there are open PR) we can do this nicer
            // by making addressOrName default to null for 2 operand calls. :)
            // ParamType is not actually correct here, but for legacy reasons,
            // we need it. See #721.
            function Contract(addressOrName, contractInterface, signerOrProvider) {
                var _this = this;
                errors.checkNew(this, Contract);
                // @TODO: Maybe still check the addressOrName looks like a valid address or name?
                //address = getAddress(address);
                if (interface_1.Interface.isInterface(contractInterface)) {
                    properties_1.defineReadOnly(this, 'interface', contractInterface);
                } else {
                    properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));
                }
                if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {
                    properties_1.defineReadOnly(this, 'provider', signerOrProvider.provider);
                    properties_1.defineReadOnly(this, 'signer', signerOrProvider);
                } else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {
                    properties_1.defineReadOnly(this, 'provider', signerOrProvider);
                    properties_1.defineReadOnly(this, 'signer', null);
                } else {
                    errors.throwError('invalid signer or provider', errors.INVALID_ARGUMENT, {
                        arg: 'signerOrProvider',
                        value: signerOrProvider
                    });
                }
                properties_1.defineReadOnly(this, 'estimate', {});
                properties_1.defineReadOnly(this, 'functions', {});
                properties_1.defineReadOnly(this, 'filters', {});
                Object.keys(this.interface.events).forEach(function (eventName) {
                    var event = _this.interface.events[eventName];
                    properties_1.defineReadOnly(_this.filters, eventName, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return {
                            address: _this.address,
                            topics: event.encodeTopics(args)
                        };
                    });
                });
                this._events = [];
                properties_1.defineReadOnly(this, 'address', addressOrName);
                if (this.provider) {
                    properties_1.defineReadOnly(this, 'addressPromise', this.provider.resolveName(addressOrName).then(function (address) {
                        if (address == null) {
                            throw new Error('name not found');
                        }
                        return address;
                    }).catch(function (error) {
                        throw error;
                    }));
                } else {
                    try {
                        properties_1.defineReadOnly(this, 'addressPromise', Promise.resolve(address_1.getAddress(addressOrName)));
                    } catch (error) {
                        // Without a provider, we cannot use ENS names
                        errors.throwError('provider is required to use non-address contract address', errors.INVALID_ARGUMENT, {
                            argument: 'addressOrName',
                            value: addressOrName
                        });
                    }
                }
                Object.keys(this.interface.functions).forEach(function (name) {
                    var run = runMethod(_this, name, false);
                    if (_this[name] == null) {
                        properties_1.defineReadOnly(_this, name, run);
                    } else {
                        errors.warn('WARNING: Multiple definitions for ' + name);
                    }
                    if (_this.functions[name] == null) {
                        properties_1.defineReadOnly(_this.functions, name, run);
                        properties_1.defineReadOnly(_this.estimate, name, runMethod(_this, name, true));
                    }
                });
            }

            // @TODO: Allow timeout?
            Contract.prototype.deployed = function () {
                return this._deployed();
            };
            Contract.prototype._deployed = function (blockTag) {
                var _this = this;
                if (!this._deployedPromise) {
                    // If we were just deployed, we know the transaction we should occur in
                    if (this.deployTransaction) {
                        this._deployedPromise = this.deployTransaction.wait().then(function () {
                            return _this;
                        });
                    } else {
                        // @TODO: Once we allow a timeout to be passed in, we will wait
                        // up to that many blocks for getCode
                        // Otherwise, poll for our code to be deployed
                        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
                            if (code === '0x') {
                                errors.throwError('contract not deployed', errors.UNSUPPORTED_OPERATION, {
                                    contractAddress: _this.address,
                                    operation: 'getDeployed'
                                });
                            }
                            return _this;
                        });
                    }
                }
                return this._deployedPromise;
            };
            // @TODO:
            // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
            // @TODO:
            // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
            Contract.prototype.fallback = function (overrides) {
                var _this = this;
                if (!this.signer) {
                    errors.throwError('sending a transaction requires a signer', errors.UNSUPPORTED_OPERATION, {operation: 'sendTransaction(fallback)'});
                }
                var tx = properties_1.shallowCopy(overrides || {});
                ['from', 'to'].forEach(function (key) {
                    if (tx[key] == null) {
                        return;
                    }
                    errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {operation: key});
                });
                tx.to = this.addressPromise;
                return this.deployed().then(function () {
                    return _this.signer.sendTransaction(tx);
                });
            };
            // Reconnect to a different signer or provider
            Contract.prototype.connect = function (signerOrProvider) {
                if (typeof (signerOrProvider) === 'string') {
                    signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
                }
                var contract = new Contract(this.address, this.interface, signerOrProvider);
                if (this.deployTransaction) {
                    properties_1.defineReadOnly(contract, 'deployTransaction', this.deployTransaction);
                }
                return contract;
            };
            // Re-attach to a different on=chain instance of this contract
            Contract.prototype.attach = function (addressOrName) {
                return new Contract(addressOrName, this.interface, this.signer || this.provider);
            };
            Contract.isIndexed = function (value) {
                return interface_1.Interface.isIndexed(value);
            };
            Contract.prototype._getEventFilter = function (eventName) {
                var _this = this;
                if (typeof (eventName) === 'string') {
                    // Listen for any event
                    if (eventName === '*') {
                        return {
                            prepareEvent: function (e) {
                                var parsed = _this.interface.parseLog(e);
                                if (parsed) {
                                    e.args = parsed.values;
                                    e.decode = parsed.decode;
                                    e.event = parsed.name;
                                    e.eventSignature = parsed.signature;
                                }
                                return [e];
                            },
                            eventTag: '*',
                            filter: {address: this.address},
                        };
                    }
                    // Normalize the eventName
                    if (eventName.indexOf('(') !== -1) {
                        eventName = abi_coder_1.formatSignature(abi_coder_1.parseSignature('event ' + eventName));
                    }
                    var event_1 = this.interface.events[eventName];
                    if (!event_1) {
                        errors.throwError('unknown event - ' + eventName, errors.INVALID_ARGUMENT, {
                            argumnet: 'eventName',
                            value: eventName
                        });
                    }
                    var filter_1 = {
                        address: this.address,
                        topics: [event_1.topic]
                    };
                    return {
                        prepareEvent: function (e) {
                            var args = event_1.decode(e.data, e.topics);
                            e.args = args;
                            var result = Array.prototype.slice.call(args);
                            result.push(e);
                            return result;
                        },
                        event: event_1,
                        eventTag: getEventTag(filter_1),
                        filter: filter_1
                    };
                }
                var filter = {
                    address: this.address
                };
                // Find the matching event in the ABI; if none, we still allow filtering
                // since it may be a filter for an otherwise unknown event
                var event = null;
                if (eventName.topics && eventName.topics[0]) {
                    filter.topics = eventName.topics;
                    for (var name_1 in this.interface.events) {
                        if (name_1.indexOf('(') === -1) {
                            continue;
                        }
                        var e = this.interface.events[name_1];
                        if (e.topic === eventName.topics[0].toLowerCase()) {
                            event = e;
                            break;
                        }
                    }
                }
                return {
                    prepareEvent: function (e) {
                        if (!event) {
                            return [e];
                        }
                        var args = event.decode(e.data, e.topics);
                        e.args = args;
                        var result = Array.prototype.slice.call(args);
                        result.push(e);
                        return result;
                    },
                    event: event,
                    eventTag: getEventTag(filter),
                    filter: filter
                };
            };
            Contract.prototype._addEventListener = function (eventFilter, listener, once) {
                var _this = this;
                if (!this.provider) {
                    errors.throwError('events require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {operation: 'once'});
                }
                var wrappedListener = function (log) {
                    var event = properties_1.deepCopy(log);
                    var args = eventFilter.prepareEvent(event);
                    if (eventFilter.event) {
                        event.decode = eventFilter.event.decode;
                        event.event = eventFilter.event.name;
                        event.eventSignature = eventFilter.event.signature;
                    }
                    event.removeListener = function () {
                        _this.removeListener(eventFilter.filter, listener);
                    };
                    event.getBlock = function () {
                        return _this.provider.getBlock(log.blockHash);
                    };
                    event.getTransaction = function () {
                        return _this.provider.getTransaction(log.transactionHash);
                    };
                    event.getTransactionReceipt = function () {
                        return _this.provider.getTransactionReceipt(log.transactionHash);
                    };
                    _this.emit.apply(_this, [eventFilter.filter].concat(args));
                };
                this.provider.on(eventFilter.filter, wrappedListener);
                this._events.push({
                    eventFilter: eventFilter,
                    listener: listener,
                    wrappedListener: wrappedListener,
                    once: once
                });
            };
            Contract.prototype.on = function (event, listener) {
                this._addEventListener(this._getEventFilter(event), listener, false);
                return this;
            };
            Contract.prototype.once = function (event, listener) {
                this._addEventListener(this._getEventFilter(event), listener, true);
                return this;
            };
            Contract.prototype.addListener = function (eventName, listener) {
                return this.on(eventName, listener);
            };
            Contract.prototype.emit = function (eventName) {
                var _this = this;
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!this.provider) {
                    return false;
                }
                var result = false;
                var eventFilter = this._getEventFilter(eventName);
                this._events = this._events.filter(function (event) {
                    // Not this event (keep it for later)
                    if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                        return true;
                    }
                    // Call the callback in the next event loop
                    setTimeout(function () {
                        event.listener.apply(_this, args);
                    }, 0);
                    result = true;
                    // Reschedule it if it not "once"
                    return !(event.once);
                });
                return result;
            };
            Contract.prototype.listenerCount = function (eventName) {
                if (!this.provider) {
                    return 0;
                }
                var eventFilter = this._getEventFilter(eventName);
                return this._events.filter(function (event) {
                    return event.eventFilter.eventTag === eventFilter.eventTag;
                }).length;
            };
            Contract.prototype.listeners = function (eventName) {
                if (!this.provider) {
                    return [];
                }
                var eventFilter = this._getEventFilter(eventName);
                return this._events.filter(function (event) {
                    return event.eventFilter.eventTag === eventFilter.eventTag;
                }).map(function (event) {
                    return event.listener;
                });
            };
            Contract.prototype.removeAllListeners = function (eventName) {
                var _this = this;
                if (!this.provider) {
                    return this;
                }
                var eventFilter = this._getEventFilter(eventName);
                this._events = this._events.filter(function (event) {
                    // Keep all other events
                    if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                        return true;
                    }
                    // Deregister this event from the provider and filter it out
                    _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
                    return false;
                });
                return this;
            };
            Contract.prototype.removeListener = function (eventName, listener) {
                var _this = this;
                if (!this.provider) {
                    return this;
                }
                var found = false;
                var eventFilter = this._getEventFilter(eventName);
                this._events = this._events.filter(function (event) {
                    // Make sure this event and listener match
                    if (event.eventFilter.eventTag !== eventFilter.eventTag) {
                        return true;
                    }
                    if (event.listener !== listener) {
                        return true;
                    }
                    _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
                    // Already found a matching event in a previous loop
                    if (found) {
                        return true;
                    }
                    // REmove this event (returning false filters us out)
                    found = true;
                    return false;
                });
                return this;
            };
            return Contract;
        }());
        exports.Contract = Contract;
        var ContractFactory = /** @class */ (function () {
            // ParamType is not actually correct here, but for legacy reasons,
            // we need it. See #721.
            function ContractFactory(contractInterface, bytecode, signer) {
                var bytecodeHex = null;
                // Allow the bytecode object from the Solidity compiler
                if (typeof (bytecode) === 'string') {
                    bytecodeHex = bytecode;
                } else if (bytes_1.isArrayish(bytecode)) {
                    bytecodeHex = bytes_1.hexlify(bytecode);
                } else if (typeof (bytecode.object) === 'string') {
                    bytecodeHex = bytecode.object;
                } else {
                    errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, {
                        arg: 'bytecode',
                        value: bytecode
                    });
                }
                // Make sure it is 0x prefixed
                if (bytecodeHex.substring(0, 2) !== '0x') {
                    bytecodeHex = '0x' + bytecodeHex;
                }
                if (!bytes_1.isHexString(bytecodeHex)) {
                    errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, {
                        arg: 'bytecode',
                        value: bytecode
                    });
                }
                if ((bytecodeHex.length % 2) !== 0) {
                    errors.throwError('bytecode must be valid data (even length)', errors.INVALID_ARGUMENT, {
                        arg: 'bytecode',
                        value: bytecode
                    });
                }
                properties_1.defineReadOnly(this, 'bytecode', bytecodeHex);
                if (interface_1.Interface.isInterface(contractInterface)) {
                    properties_1.defineReadOnly(this, 'interface', contractInterface);
                } else {
                    properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));
                }
                if (signer && !abstract_signer_1.Signer.isSigner(signer)) {
                    errors.throwError('invalid signer', errors.INVALID_ARGUMENT, {arg: 'signer', value: null});
                }
                properties_1.defineReadOnly(this, 'signer', signer || null);
            }

            ContractFactory.prototype.getDeployTransaction = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var tx = {};
                // If we have 1 additional argument, we allow transaction overrides
                if (args.length === this.interface.deployFunction.inputs.length + 1) {
                    tx = properties_1.shallowCopy(args.pop());
                    for (var key in tx) {
                        if (!allowedTransactionKeys[key]) {
                            throw new Error('unknown transaction override ' + key);
                        }
                    }
                }
                // Do not allow these to be overridden in a deployment transaction
                ['data', 'from', 'to'].forEach(function (key) {
                    if (tx[key] == null) {
                        return;
                    }
                    errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {operation: key});
                });
                // Make sure the call matches the constructor signature
                errors.checkArgumentCount(args.length, this.interface.deployFunction.inputs.length, ' in Contract constructor');
                // Set the data to the bytecode + the encoded constructor arguments
                tx.data = this.interface.deployFunction.encode(this.bytecode, args);
                return tx;
            };
            ContractFactory.prototype.deploy = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // Get the deployment transaction (with optional overrides)
                var tx = this.getDeployTransaction.apply(this, args);
                // Send the deployment transaction
                return this.signer.sendTransaction(tx).then(function (tx) {
                    var contract = new Contract(address_1.getContractAddress(tx), _this.interface, _this.signer);
                    properties_1.defineReadOnly(contract, 'deployTransaction', tx);
                    return contract;
                });
            };
            ContractFactory.prototype.attach = function (address) {
                return new Contract(address, this.interface, this.signer);
            };
            ContractFactory.prototype.connect = function (signer) {
                return new ContractFactory(this.interface, this.bytecode, signer);
            };
            ContractFactory.fromSolidity = function (compilerOutput, signer) {
                if (compilerOutput == null) {
                    errors.throwError('missing compiler output', errors.MISSING_ARGUMENT, {argument: 'compilerOutput'});
                }
                if (typeof (compilerOutput) === 'string') {
                    compilerOutput = JSON.parse(compilerOutput);
                }
                var abi = compilerOutput.abi;
                var bytecode = null;
                if (compilerOutput.bytecode) {
                    bytecode = compilerOutput.bytecode;
                } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                    bytecode = compilerOutput.evm.bytecode;
                }
                return new ContractFactory(abi, bytecode, signer);
            };
            return ContractFactory;
        }());
        exports.ContractFactory = ContractFactory;

    }, {
        "./abstract-signer": 344,
        "./constants": 345,
        "./errors": 347,
        "./providers/abstract-provider": 360,
        "./utils/abi-coder": 361,
        "./utils/address": 362,
        "./utils/bignumber": 363,
        "./utils/bytes": 364,
        "./utils/interface": 366,
        "./utils/properties": 368
    }],
    347: [function (require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {value: true});
        var _version_1 = require("./_version");
// Unknown Error
        exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
// Not implemented
        exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
// Missing new operator to an object
//  - name: The name of the class
        exports.MISSING_NEW = 'MISSING_NEW';
// Call exception
//  - transaction: the transaction
//  - address?: the contract address
//  - args?: The arguments passed into the function
//  - method?: The Solidity method signature
//  - errorSignature?: The EIP848 error signature
//  - errorArgs?: The EIP848 error parameters
//  - reason: The reason (only for EIP848 "Error(string)")
        exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
// Invalid argument (e.g. value is incompatible with type) to a function:
//   - argument: The argument name that was invalid
//   - value: The value of the argument
        exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
// Missing argument to a function:
//   - count: The number of arguments received
//   - expectedCount: The number of arguments expected
        exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
// Too many arguments
//   - count: The number of arguments received
//   - expectedCount: The number of arguments expected
        exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
// Numeric Fault
//   - operation: the operation being executed
//   - fault: the reason this faulted
        exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
// Insufficien funds (< value + gasLimit * gasPrice)
//   - transaction: the transaction attempted
        exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
// Nonce has already been used
//   - transaction: the transaction attempted
        exports.NONCE_EXPIRED = 'NONCE_EXPIRED';
// The replacement fee for the transaction is too low
//   - transaction: the transaction attempted
        exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';
// Unsupported operation
//   - operation
        exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
        var _permanentCensorErrors = false;
        var _censorErrors = false;

// @TODO: Enum
        function throwError(message, code, params) {
            if (_censorErrors) {
                throw new Error('unknown error');
            }
            if (!code) {
                code = exports.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            var messageDetails = [];
            Object.keys(params).forEach(function (key) {
                try {
                    messageDetails.push(key + '=' + JSON.stringify(params[key]));
                } catch (error) {
                    messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push("version=" + _version_1.version);
            var reason = message;
            if (messageDetails.length) {
                message += ' (' + messageDetails.join(', ') + ')';
            }
            // @TODO: Any??
            var error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            throw error;
        }

        exports.throwError = throwError;

        function checkNew(self, kind) {
            if (!(self instanceof kind)) {
                throwError('missing new', exports.MISSING_NEW, {name: kind.name});
            }
        }

        exports.checkNew = checkNew;

        function checkArgumentCount(count, expectedCount, suffix) {
            if (!suffix) {
                suffix = '';
            }
            if (count < expectedCount) {
                throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }

        exports.checkArgumentCount = checkArgumentCount;

        function setCensorship(censorship, permanent) {
            if (_permanentCensorErrors) {
                throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {operation: 'setCensorship'});
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }

        exports.setCensorship = setCensorship;

        function checkNormalize() {
            try {
                // Make sure all forms of normalization are supported
                ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
                    try {
                        "test".normalize(form);
                    } catch (error) {
                        throw new Error('missing ' + form);
                    }
                });
                if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {
                    throw new Error('broken implementation');
                }
            } catch (error) {
                throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, {
                    operation: 'String.prototype.normalize',
                    form: error.message
                });
            }
        }

        exports.checkNormalize = checkNormalize;
        var LogLevels = {debug: 1, "default": 2, info: 2, warn: 3, error: 4, off: 5};
        var LogLevel = LogLevels["default"];

        function setLogLevel(logLevel) {
            var level = LogLevels[logLevel];
            if (level == null) {
                warn("invliad log level - " + logLevel);
                return;
            }
            LogLevel = level;
        }

        exports.setLogLevel = setLogLevel;

        function log(logLevel, args) {
            if (LogLevel > LogLevels[logLevel]) {
                return;
            }
            console.log.apply(console, args);
        }

        function warn() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            log("warn", args);
        }

        exports.warn = warn;

        function info() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            log("info", args);
        }

        exports.info = info;

    }, {"./_version": 343}],
    348: [function (require, module, exports) {
        arguments[4][89][0].apply(exports, arguments)
    }, {
        "./hash/common": 349,
        "./hash/hmac": 350,
        "./hash/ripemd": 351,
        "./hash/sha": 352,
        "./hash/utils": 359,
        "dup": 89
    }],
    349: [function (require, module, exports) {
        arguments[4][90][0].apply(exports, arguments)
    }, {"./utils": 359, "dup": 90, "minimalistic-assert": 409}],
    350: [function (require, module, exports) {
        arguments[4][91][0].apply(exports, arguments)
    }, {"./utils": 359, "dup": 91, "minimalistic-assert": 409}],
    351: [function (require, module, exports) {
        arguments[4][92][0].apply(exports, arguments)
    }, {"./common": 349, "./utils": 359, "dup": 92}],
    352: [function (require, module, exports) {
        arguments[4][93][0].apply(exports, arguments)
    }, {"./sha/1": 353, "./sha/224": 354, "./sha/256": 355, "./sha/384": 356, "./sha/512": 357, "dup": 93}],
    353: [function (require, module, exports) {
        arguments[4][94][0].apply(exports, arguments)
    }, {"../common": 349, "../utils": 359, "./common": 358, "dup": 94}],
    354: [function (require, module, exports) {
        arguments[4][95][0].apply(exports, arguments)
    }, {"../utils": 359, "./256": 355, "dup": 95}],
    355: [function (require, module, exports) {
        arguments[4][96][0].apply(exports, arguments)
    }, {"../common": 349, "../utils": 359, "./common": 358, "dup": 96, "minimalistic-assert": 409}],
    356: [function (require, module, exports) {
        arguments[4][97][0].apply(exports, arguments)
    }, {"../utils": 359, "./512": 357, "dup": 97}],
    357: [function (require, module, exports) {
        arguments[4][98][0].apply(exports, arguments)
    }, {"../common": 349, "../utils": 359, "dup": 98, "minimalistic-assert": 409}],
    358: [function (require, module, exports) {
        arguments[4][99][0].apply(exports, arguments)
    }, {"../utils": 359, "dup": 99}],
    359: [function (require, module, exports) {
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        exports.inherits = inherits;

        function toArray(msg, enc) {
            if (Array.isArray(msg))
                return msg.slice();
            if (!msg)
                return [];
            var res = [];
            if (typeof msg === 'string') {
                if (!enc) {
                    for (var i = 0; i < msg.length; i++) {
                        var c = msg.charCodeAt(i);
                        var hi = c >> 8;
                        var lo = c & 0xff;
                        if (hi)
                            res.push(hi, lo);
                        else
                            res.push(lo);
                    }
                } else if (enc === 'hex') {
                    msg = msg.replace(/[^a-z0-9]+/ig, '');
                    if (msg.length % 2 !== 0)
                        msg = '0' + msg;
                    for (i = 0; i < msg.length; i += 2)
                        res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
            } else {
                for (i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
            }
            return res;
        }

        exports.toArray = toArray;

        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
            return res;
        }

        exports.toHex = toHex;

        function htonl(w) {
            var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
            return res >>> 0;
        }

        exports.htonl = htonl;

        function toHex32(msg, endian) {
            var res = '';
            for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little')
                    w = htonl(w);
                res += zero8(w.toString(16));
            }
            return res;
        }

        exports.toHex32 = toHex32;

        function zero2(word) {
            if (word.length === 1)
                return '0' + word;
            else
                return word;
        }

        exports.zero2 = zero2;

        function zero8(word) {
            if (word.length === 7)
                return '0' + word;
            else if (word.length === 6)
                return '00' + word;
            else if (word.length === 5)
                return '000' + word;
            else if (word.length === 4)
                return '0000' + word;
            else if (word.length === 3)
                return '00000' + word;
            else if (word.length === 2)
                return '000000' + word;
            else if (word.length === 1)
                return '0000000' + word;
            else
                return word;
        }

        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
            var len = end - start;
            assert(len % 4 === 0);
            var res = new Array(len / 4);
            for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big')
                    w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                else
                    w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                res[i] = w >>> 0;
            }
            return res;
        }

        exports.join32 = join32;

        function split32(msg, endian) {
            var res = new Array(msg.length * 4);
            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];
                if (endian === 'big') {
                    res[k] = m >>> 24;
                    res[k + 1] = (m >>> 16) & 0xff;
                    res[k + 2] = (m >>> 8) & 0xff;
                    res[k + 3] = m & 0xff;
                } else {
                    res[k + 3] = m >>> 24;
                    res[k + 2] = (m >>> 16) & 0xff;
                    res[k + 1] = (m >>> 8) & 0xff;
                    res[k] = m & 0xff;
                }
            }
            return res;
        }

        exports.split32 = split32;

        function rotr32(w, b) {
            return (w >>> b) | (w << (32 - b));
        }

        exports.rotr32 = rotr32;

        function rotl32(w, b) {
            return (w << b) | (w >>> (32 - b));
        }

        exports.rotl32 = rotl32;

        function sum32(a, b) {
            return (a + b) >>> 0;
        }

        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
            return (a + b + c) >>> 0;
        }

        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
            return (a + b + c + d) >>> 0;
        }

        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
            return (a + b + c + d + e) >>> 0;
        }

        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];

            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
        }

        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
        }

        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
        }

        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;

            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
        }

        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
        }

        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = (lo + el) >>> 0;
            carry += lo < el ? 1 : 0;

            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
        }

        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;

            return lo >>> 0;
        }

        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
            var r = (al << (32 - num)) | (ah >>> num);
            return r >>> 0;
        }

        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }

        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
            return ah >>> num;
        }

        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }

        exports.shr64_lo = shr64_lo;

    }, {"inherits": 388, "minimalistic-assert": 409}],
    360: [function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {value: true});
        var properties_1 = require("../utils/properties");
        ;
        ;
///////////////////////////////
// Exported Abstracts
        var Provider = /** @class */ (function () {
            function Provider() {
                properties_1.setType(this, 'Provider');
            }

            Provider.isProvider = function (value) {
                return properties_1.isType(value, 'Provider');
            };
            return Provider;
        }());
        exports.Provider = Provider;
//defineReadOnly(Signer, 'inherits', inheritable(Abstract));

    }, {"../utils/properties": 368}],
    361: [function (require, module, exports) {
        'use strict';
        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array && function (d, b) {
                    d.__proto__ = b;
                }) ||
                function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
        var constants_1 = require("../constants");
        var errors = __importStar(require("../errors"));
        var address_1 = require("./address");
        var bignumber_1 = require("./bignumber");
        var bytes_1 = require("./bytes");
        var utf8_1 = require("./utf8");
        var properties_1 = require("./properties");
///////////////////////////////
        var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
        var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
        var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
        exports.defaultCoerceFunc = function (type, value) {
            var match = type.match(paramTypeNumber);
            if (match && parseInt(match[2]) <= 48) {
                return value.toNumber();
            }
            return value;
        };
///////////////////////////////////
// Parsing for Solidity Signatures
        var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
        var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");

        function verifyType(type) {
            // These need to be transformed to their full description
            if (type.match(/^uint($|[^1-9])/)) {
                type = 'uint256' + type.substring(4);
            } else if (type.match(/^int($|[^1-9])/)) {
                type = 'int256' + type.substring(3);
            }
            return type;
        }

        function parseParam(param, allowIndexed) {
            var originalParam = param;

            function throwError(i) {
                throw new Error('unexpected character "' + originalParam[i] + '" at position ' + i + ' in "' + originalParam + '"');
            }

            param = param.replace(/\s/g, ' ');
            var parent = {type: '', name: '', state: {allowType: true}};
            var node = parent;
            for (var i = 0; i < param.length; i++) {
                var c = param[i];
                switch (c) {
                    case '(':
                        if (!node.state.allowParams) {
                            throwError(i);
                        }
                        node.state.allowType = false;
                        node.type = verifyType(node.type);
                        node.components = [{type: '', name: '', parent: node, state: {allowType: true}}];
                        node = node.components[0];
                        break;
                    case ')':
                        delete node.state;
                        if (allowIndexed && node.name === 'indexed') {
                            node.indexed = true;
                            node.name = '';
                        }
                        node.type = verifyType(node.type);
                        var child = node;
                        node = node.parent;
                        if (!node) {
                            throwError(i);
                        }
                        delete child.parent;
                        node.state.allowParams = false;
                        node.state.allowName = true;
                        node.state.allowArray = true;
                        break;
                    case ',':
                        delete node.state;
                        if (allowIndexed && node.name === 'indexed') {
                            node.indexed = true;
                            node.name = '';
                        }
                        node.type = verifyType(node.type);
                        var sibling = {type: '', name: '', parent: node.parent, state: {allowType: true}};
                        node.parent.components.push(sibling);
                        delete node.parent;
                        node = sibling;
                        break;
                    // Hit a space...
                    case ' ':
                        // If reading type, the type is done and may read a param or name
                        if (node.state.allowType) {
                            if (node.type !== '') {
                                node.type = verifyType(node.type);
                                delete node.state.allowType;
                                node.state.allowName = true;
                                node.state.allowParams = true;
                            }
                        }
                        // If reading name, the name is done
                        if (node.state.allowName) {
                            if (node.name !== '') {
                                if (allowIndexed && node.name === 'indexed') {
                                    node.indexed = true;
                                    node.name = '';
                                } else {
                                    node.state.allowName = false;
                                }
                            }
                        }
                        break;
                    case '[':
                        if (!node.state.allowArray) {
                            throwError(i);
                        }
                        node.type += c;
                        node.state.allowArray = false;
                        node.state.allowName = false;
                        node.state.readArray = true;
                        break;
                    case ']':
                        if (!node.state.readArray) {
                            throwError(i);
                        }
                        node.type += c;
                        node.state.readArray = false;
                        node.state.allowArray = true;
                        node.state.allowName = true;
                        break;
                    default:
                        if (node.state.allowType) {
                            node.type += c;
                            node.state.allowParams = true;
                            node.state.allowArray = true;
                        } else if (node.state.allowName) {
                            node.name += c;
                            delete node.state.allowArray;
                        } else if (node.state.readArray) {
                            node.type += c;
                        } else {
                            throwError(i);
                        }
                }
            }
            if (node.parent) {
                throw new Error("unexpected eof");
            }
            delete parent.state;
            if (allowIndexed && node.name === 'indexed') {
                node.indexed = true;
                node.name = '';
            }
            parent.type = verifyType(parent.type);
            return parent;
        }

// @TODO: Better return type
        function parseSignatureEvent(fragment) {
            var abi = {
                anonymous: false,
                inputs: [],
                name: '',
                type: 'event'
            };
            var match = fragment.match(regexParen);
            if (!match) {
                throw new Error('invalid event: ' + fragment);
            }
            abi.name = match[1].trim();
            splitNesting(match[2]).forEach(function (param) {
                param = parseParam(param, true);
                param.indexed = !!param.indexed;
                abi.inputs.push(param);
            });
            match[3].split(' ').forEach(function (modifier) {
                switch (modifier) {
                    case 'anonymous':
                        abi.anonymous = true;
                        break;
                    case '':
                        break;
                    default:
                        errors.info('unknown modifier: ' + modifier);
                }
            });
            if (abi.name && !abi.name.match(regexIdentifier)) {
                throw new Error('invalid identifier: "' + abi.name + '"');
            }
            return abi;
        }

        function parseSignatureFunction(fragment) {
            var abi = {
                constant: false,
                gas: null,
                inputs: [],
                name: '',
                outputs: [],
                payable: false,
                stateMutability: null,
                type: 'function'
            };
            var comps = fragment.split('@');
            if (comps.length !== 1) {
                if (comps.length > 2) {
                    throw new Error('invalid signature');
                }
                if (!comps[1].match(/^[0-9]+$/)) {
                    throw new Error('invalid signature gas');
                }
                abi.gas = bignumber_1.bigNumberify(comps[1]);
                fragment = comps[0];
            }
            comps = fragment.split(' returns ');
            var left = comps[0].match(regexParen);
            if (!left) {
                throw new Error('invalid signature');
            }
            abi.name = left[1].trim();
            if (!abi.name.match(regexIdentifier)) {
                throw new Error('invalid identifier: "' + left[1] + '"');
            }
            splitNesting(left[2]).forEach(function (param) {
                abi.inputs.push(parseParam(param));
            });
            left[3].split(' ').forEach(function (modifier) {
                switch (modifier) {
                    case 'constant':
                        abi.constant = true;
                        break;
                    case 'payable':
                        abi.payable = true;
                        abi.stateMutability = 'payable';
                        break;
                    case 'pure':
                        abi.constant = true;
                        abi.stateMutability = 'pure';
                        break;
                    case 'view':
                        abi.constant = true;
                        abi.stateMutability = 'view';
                        break;
                    case 'external':
                    case 'public':
                    case '':
                        break;
                    default:
                        errors.info('unknown modifier: ' + modifier);
                }
            });
            // We have outputs
            if (comps.length > 1) {
                var right = comps[1].match(regexParen);
                if (right[1].trim() != '' || right[3].trim() != '') {
                    throw new Error('unexpected tokens');
                }
                splitNesting(right[2]).forEach(function (param) {
                    abi.outputs.push(parseParam(param));
                });
            }
            if (abi.name === 'constructor') {
                abi.type = "constructor";
                if (abi.outputs.length) {
                    throw new Error('constructor may not have outputs');
                }
                delete abi.name;
                delete abi.outputs;
            }
            return abi;
        }

        function parseParamType(type) {
            return parseParam(type, true);
        }

        exports.parseParamType = parseParamType;

// @TODO: Allow a second boolean to expose names
        function formatParamType(paramType) {
            return getParamCoder(exports.defaultCoerceFunc, paramType).type;
        }

        exports.formatParamType = formatParamType;

// @TODO: Allow a second boolean to expose names and modifiers
        function formatSignature(fragment) {
            return fragment.name + '(' + fragment.inputs.map(function (i) {
                return formatParamType(i);
            }).join(',') + ')';
        }

        exports.formatSignature = formatSignature;

        function parseSignature(fragment) {
            if (typeof (fragment) === 'string') {
                // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
                fragment = fragment.replace(/\s/g, ' ');
                fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
                fragment = fragment.trim();
                if (fragment.substring(0, 6) === 'event ') {
                    return parseSignatureEvent(fragment.substring(6).trim());
                } else {
                    if (fragment.substring(0, 9) === 'function ') {
                        fragment = fragment.substring(9);
                    }
                    return parseSignatureFunction(fragment.trim());
                }
            }
            throw new Error('unknown signature');
        }

        exports.parseSignature = parseSignature;
        var Coder = /** @class */ (function () {
            function Coder(coerceFunc, name, type, localName, dynamic) {
                this.coerceFunc = coerceFunc;
                this.name = name;
                this.type = type;
                this.localName = localName;
                this.dynamic = dynamic;
            }

            return Coder;
        }());
// Clones the functionality of an existing Coder, but without a localName
        var CoderAnonymous = /** @class */ (function (_super) {
            __extends(CoderAnonymous, _super);

            function CoderAnonymous(coder) {
                var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
                properties_1.defineReadOnly(_this, 'coder', coder);
                return _this;
            }

            CoderAnonymous.prototype.encode = function (value) {
                return this.coder.encode(value);
            };
            CoderAnonymous.prototype.decode = function (data, offset) {
                return this.coder.decode(data, offset);
            };
            return CoderAnonymous;
        }(Coder));
        var CoderNull = /** @class */ (function (_super) {
            __extends(CoderNull, _super);

            function CoderNull(coerceFunc, localName) {
                return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
            }

            CoderNull.prototype.encode = function (value) {
                return bytes_1.arrayify([]);
            };
            CoderNull.prototype.decode = function (data, offset) {
                if (offset > data.length) {
                    throw new Error('invalid null');
                }
                return {
                    consumed: 0,
                    value: this.coerceFunc('null', undefined)
                };
            };
            return CoderNull;
        }(Coder));
        var CoderNumber = /** @class */ (function (_super) {
            __extends(CoderNumber, _super);

            function CoderNumber(coerceFunc, size, signed, localName) {
                var _this = this;
                var name = ((signed ? 'int' : 'uint') + (size * 8));
                _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
                _this.size = size;
                _this.signed = signed;
                return _this;
            }

            CoderNumber.prototype.encode = function (value) {
                try {
                    var v = bignumber_1.bigNumberify(value);
                    if (this.signed) {
                        var bounds = constants_1.MaxUint256.maskn(this.size * 8 - 1);
                        if (v.gt(bounds)) {
                            throw new Error('out-of-bounds');
                        }
                        bounds = bounds.add(constants_1.One).mul(constants_1.NegativeOne);
                        if (v.lt(bounds)) {
                            throw new Error('out-of-bounds');
                        }
                    } else if (v.lt(constants_1.Zero) || v.gt(constants_1.MaxUint256.maskn(this.size * 8))) {
                        throw new Error('out-of-bounds');
                    }
                    v = v.toTwos(this.size * 8).maskn(this.size * 8);
                    if (this.signed) {
                        v = v.fromTwos(this.size * 8).toTwos(256);
                    }
                    return bytes_1.padZeros(bytes_1.arrayify(v), 32);
                } catch (error) {
                    errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: value
                    });
                }
                return null;
            };
            CoderNumber.prototype.decode = function (data, offset) {
                if (data.length < offset + 32) {
                    errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: bytes_1.hexlify(data.slice(offset, offset + 32))
                    });
                }
                var junkLength = 32 - this.size;
                var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
                if (this.signed) {
                    value = value.fromTwos(this.size * 8);
                } else {
                    value = value.maskn(this.size * 8);
                }
                return {
                    consumed: 32,
                    value: this.coerceFunc(this.name, value),
                };
            };
            return CoderNumber;
        }(Coder));
        var uint256Coder = new CoderNumber(function (type, value) {
            return value;
        }, 32, false, 'none');
        var CoderBoolean = /** @class */ (function (_super) {
            __extends(CoderBoolean, _super);

            function CoderBoolean(coerceFunc, localName) {
                return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
            }

            CoderBoolean.prototype.encode = function (value) {
                return uint256Coder.encode(!!value ? 1 : 0);
            };
            CoderBoolean.prototype.decode = function (data, offset) {
                try {
                    var result = uint256Coder.decode(data, offset);
                } catch (error) {
                    if (error.reason === 'insufficient data for uint256 type') {
                        errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: 'boolean',
                            value: error.value
                        });
                    }
                    throw error;
                }
                return {
                    consumed: result.consumed,
                    value: this.coerceFunc('bool', !result.value.isZero())
                };
            };
            return CoderBoolean;
        }(Coder));
        var CoderFixedBytes = /** @class */ (function (_super) {
            __extends(CoderFixedBytes, _super);

            function CoderFixedBytes(coerceFunc, length, localName) {
                var _this = this;
                var name = ('bytes' + length);
                _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
                _this.length = length;
                return _this;
            }

            CoderFixedBytes.prototype.encode = function (value) {
                var result = new Uint8Array(32);
                try {
                    var data = bytes_1.arrayify(value);
                    if (data.length !== this.length) {
                        throw new Error('incorrect data length');
                    }
                    result.set(data);
                } catch (error) {
                    errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: (error.value || value)
                    });
                }
                return result;
            };
            CoderFixedBytes.prototype.decode = function (data, offset) {
                if (data.length < offset + 32) {
                    errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: bytes_1.hexlify(data.slice(offset, offset + 32))
                    });
                }
                return {
                    consumed: 32,
                    value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
                };
            };
            return CoderFixedBytes;
        }(Coder));
        var CoderAddress = /** @class */ (function (_super) {
            __extends(CoderAddress, _super);

            function CoderAddress(coerceFunc, localName) {
                return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
            }

            CoderAddress.prototype.encode = function (value) {
                var result = new Uint8Array(32);
                try {
                    result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
                } catch (error) {
                    errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'address',
                        value: value
                    });
                }
                return result;
            };
            CoderAddress.prototype.decode = function (data, offset) {
                if (data.length < offset + 32) {
                    errors.throwError('insufficient data for address type', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'address',
                        value: bytes_1.hexlify(data.slice(offset, offset + 32))
                    });
                }
                return {
                    consumed: 32,
                    value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
                };
            };
            return CoderAddress;
        }(Coder));

        function _encodeDynamicBytes(value) {
            var dataLength = 32 * Math.ceil(value.length / 32);
            var padding = new Uint8Array(dataLength - value.length);
            return bytes_1.concat([
                uint256Coder.encode(value.length),
                value,
                padding
            ]);
        }

        function _decodeDynamicBytes(data, offset, localName) {
            if (data.length < offset + 32) {
                errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
                    arg: localName,
                    coderType: 'dynamicBytes',
                    value: bytes_1.hexlify(data.slice(offset, offset + 32))
                });
            }
            var length = uint256Coder.decode(data, offset).value;
            try {
                length = length.toNumber();
            } catch (error) {
                errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
                    arg: localName,
                    coderType: 'dynamicBytes',
                    value: length.toString()
                });
            }
            if (data.length < offset + 32 + length) {
                errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
                    arg: localName,
                    coderType: 'dynamicBytes',
                    value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
                });
            }
            return {
                consumed: 32 + 32 * Math.ceil(length / 32),
                value: data.slice(offset + 32, offset + 32 + length),
            };
        }

        var CoderDynamicBytes = /** @class */ (function (_super) {
            __extends(CoderDynamicBytes, _super);

            function CoderDynamicBytes(coerceFunc, localName) {
                return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
            }

            CoderDynamicBytes.prototype.encode = function (value) {
                try {
                    return _encodeDynamicBytes(bytes_1.arrayify(value));
                } catch (error) {
                    errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'bytes',
                        value: error.value
                    });
                }
                return null;
            };
            CoderDynamicBytes.prototype.decode = function (data, offset) {
                var result = _decodeDynamicBytes(data, offset, this.localName);
                result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));
                return result;
            };
            return CoderDynamicBytes;
        }(Coder));
        var CoderString = /** @class */ (function (_super) {
            __extends(CoderString, _super);

            function CoderString(coerceFunc, localName) {
                return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
            }

            CoderString.prototype.encode = function (value) {
                if (typeof (value) !== 'string') {
                    errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'string',
                        value: value
                    });
                }
                return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
            };
            CoderString.prototype.decode = function (data, offset) {
                var result = _decodeDynamicBytes(data, offset, this.localName);
                result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));
                return result;
            };
            return CoderString;
        }(Coder));

        function alignSize(size) {
            return 32 * Math.ceil(size / 32);
        }

        function pack(coders, values) {
            if (Array.isArray(values)) {
                // do nothing
            } else if (values && typeof (values) === 'object') {
                var arrayValues = [];
                coders.forEach(function (coder) {
                    arrayValues.push(values[coder.localName]);
                });
                values = arrayValues;
            } else {
                errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
                    coderType: 'tuple',
                    value: values
                });
            }
            if (coders.length !== values.length) {
                errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
                    coderType: 'tuple',
                    value: values
                });
            }
            var parts = [];
            coders.forEach(function (coder, index) {
                parts.push({dynamic: coder.dynamic, value: coder.encode(values[index])});
            });
            var staticSize = 0, dynamicSize = 0;
            parts.forEach(function (part) {
                if (part.dynamic) {
                    staticSize += 32;
                    dynamicSize += alignSize(part.value.length);
                } else {
                    staticSize += alignSize(part.value.length);
                }
            });
            var offset = 0, dynamicOffset = staticSize;
            var data = new Uint8Array(staticSize + dynamicSize);
            parts.forEach(function (part) {
                if (part.dynamic) {
                    //uint256Coder.encode(dynamicOffset).copy(data, offset);
                    data.set(uint256Coder.encode(dynamicOffset), offset);
                    offset += 32;
                    //part.value.copy(data, dynamicOffset);  @TODO
                    data.set(part.value, dynamicOffset);
                    dynamicOffset += alignSize(part.value.length);
                } else {
                    //part.value.copy(data, offset);  @TODO
                    data.set(part.value, offset);
                    offset += alignSize(part.value.length);
                }
            });
            return data;
        }

        function unpack(coders, data, offset) {
            var baseOffset = offset;
            var consumed = 0;
            var value = [];
            coders.forEach(function (coder) {
                if (coder.dynamic) {
                    var dynamicOffset = uint256Coder.decode(data, offset);
                    var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
                    // The dynamic part is leap-frogged somewhere else; doesn't count towards size
                    result.consumed = dynamicOffset.consumed;
                } else {
                    var result = coder.decode(data, offset);
                }
                if (result.value != undefined) {
                    value.push(result.value);
                }
                offset += result.consumed;
                consumed += result.consumed;
            });
            coders.forEach(function (coder, index) {
                var name = coder.localName;
                if (!name) {
                    return;
                }
                if (name === 'length') {
                    name = '_length';
                }
                if (value[name] != null) {
                    return;
                }
                value[name] = value[index];
            });
            return {
                value: value,
                consumed: consumed
            };
        }

        var CoderArray = /** @class */ (function (_super) {
            __extends(CoderArray, _super);

            function CoderArray(coerceFunc, coder, length, localName) {
                var _this = this;
                var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
                var dynamic = (length === -1 || coder.dynamic);
                _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
                _this.coder = coder;
                _this.length = length;
                return _this;
            }

            CoderArray.prototype.encode = function (value) {
                if (!Array.isArray(value)) {
                    errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: 'array',
                        value: value
                    });
                }
                var count = this.length;
                var result = new Uint8Array(0);
                if (count === -1) {
                    count = value.length;
                    result = uint256Coder.encode(count);
                }
                errors.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (" " + this.localName) : ""));
                var coders = [];
                for (var i = 0; i < value.length; i++) {
                    coders.push(this.coder);
                }
                return bytes_1.concat([result, pack(coders, value)]);
            };
            CoderArray.prototype.decode = function (data, offset) {
                // @TODO:
                //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
                var consumed = 0;
                var count = this.length;
                if (count === -1) {
                    try {
                        var decodedLength = uint256Coder.decode(data, offset);
                    } catch (error) {
                        errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: 'array',
                            value: error.value
                        });
                    }
                    try {
                        count = decodedLength.value.toNumber();
                    } catch (error) {
                        errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: 'array',
                            value: decodedLength.value.toString()
                        });
                    }
                    consumed += decodedLength.consumed;
                    offset += decodedLength.consumed;
                }
                var coders = [];
                for (var i = 0; i < count; i++) {
                    coders.push(new CoderAnonymous(this.coder));
                }
                var result = unpack(coders, data, offset);
                result.consumed += consumed;
                result.value = this.coerceFunc(this.type, result.value);
                return result;
            };
            return CoderArray;
        }(Coder));
        var CoderTuple = /** @class */ (function (_super) {
            __extends(CoderTuple, _super);

            function CoderTuple(coerceFunc, coders, localName) {
                var _this = this;
                var dynamic = false;
                var types = [];
                coders.forEach(function (coder) {
                    if (coder.dynamic) {
                        dynamic = true;
                    }
                    types.push(coder.type);
                });
                var type = ('tuple(' + types.join(',') + ')');
                _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
                _this.coders = coders;
                return _this;
            }

            CoderTuple.prototype.encode = function (value) {
                return pack(this.coders, value);
            };
            CoderTuple.prototype.decode = function (data, offset) {
                var result = unpack(this.coders, data, offset);
                result.value = this.coerceFunc(this.type, result.value);
                return result;
            };
            return CoderTuple;
        }(Coder));

        /*
function getTypes(coders) {
    var type = coderTuple(coders).type;
    return type.substring(6, type.length - 1);
}
*/
        function splitNesting(value) {
            value = value.trim();
            var result = [];
            var accum = '';
            var depth = 0;
            for (var offset = 0; offset < value.length; offset++) {
                var c = value[offset];
                if (c === ',' && depth === 0) {
                    result.push(accum);
                    accum = '';
                } else {
                    accum += c;
                    if (c === '(') {
                        depth++;
                    } else if (c === ')') {
                        depth--;
                        if (depth === -1) {
                            throw new Error('unbalanced parenthsis');
                        }
                    }
                }
            }
            if (accum) {
                result.push(accum);
            }
            return result;
        }

// @TODO: Is there a way to return "class"?
        var paramTypeSimple = {
            address: CoderAddress,
            bool: CoderBoolean,
            string: CoderString,
            bytes: CoderDynamicBytes,
        };

        function getTupleParamCoder(coerceFunc, components, localName) {
            if (!components) {
                components = [];
            }
            var coders = [];
            components.forEach(function (component) {
                coders.push(getParamCoder(coerceFunc, component));
            });
            return new CoderTuple(coerceFunc, coders, localName);
        }

        function getParamCoder(coerceFunc, param) {
            var coder = paramTypeSimple[param.type];
            if (coder) {
                return new coder(coerceFunc, param.name);
            }
            var match = param.type.match(paramTypeNumber);
            if (match) {
                var size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                        arg: 'param',
                        value: param
                    });
                }
                return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
            }
            var match = param.type.match(paramTypeBytes);
            if (match) {
                var size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                        arg: 'param',
                        value: param
                    });
                }
                return new CoderFixedBytes(coerceFunc, size, param.name);
            }
            var match = param.type.match(paramTypeArray);
            if (match) {
                var size = parseInt(match[2] || "-1");
                param = properties_1.shallowCopy(param);
                param.type = match[1];
                param = properties_1.deepCopy(param);
                return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
            }
            if (param.type.substring(0, 5) === 'tuple') {
                return getTupleParamCoder(coerceFunc, param.components, param.name);
            }
            if (param.type === '') {
                return new CoderNull(coerceFunc, param.name);
            }
            errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
                arg: 'type',
                value: param.type
            });
            return null;
        }

        var AbiCoder = /** @class */ (function () {
            function AbiCoder(coerceFunc) {
                errors.checkNew(this, AbiCoder);
                if (!coerceFunc) {
                    coerceFunc = exports.defaultCoerceFunc;
                }
                properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);
            }

            AbiCoder.prototype.encode = function (types, values) {
                if (types.length !== values.length) {
                    errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                        count: {types: types.length, values: values.length},
                        value: {types: types, values: values}
                    });
                }
                var coders = [];
                types.forEach(function (type) {
                    // Convert types to type objects
                    //   - "uint foo" => { type: "uint", name: "foo" }
                    //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
                    var typeObject = null;
                    if (typeof (type) === 'string') {
                        typeObject = parseParam(type);
                    } else {
                        typeObject = type;
                    }
                    coders.push(getParamCoder(this.coerceFunc, typeObject));
                }, this);
                return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
            };
            AbiCoder.prototype.decode = function (types, data) {
                var coders = [];
                types.forEach(function (type) {
                    // See encode for details
                    var typeObject = null;
                    if (typeof (type) === 'string') {
                        typeObject = parseParam(type);
                    } else {
                        typeObject = properties_1.deepCopy(type);
                    }
                    coders.push(getParamCoder(this.coerceFunc, typeObject));
                }, this);
                return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;
            };
            return AbiCoder;
        }());
        exports.AbiCoder = AbiCoder;
        exports.defaultAbiCoder = new AbiCoder();

    }, {
        "../constants": 345,
        "../errors": 347,
        "./address": 362,
        "./bignumber": 363,
        "./bytes": 364,
        "./properties": 368,
        "./utf8": 372
    }],
    362: [function (require, module, exports) {
        'use strict';
        var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : {"default": mod};
        };
        Object.defineProperty(exports, "__esModule", {value: true});
// We use this for base 36 maths
        var bn_js_1 = __importDefault(require("bn.js"));
        var bytes_1 = require("./bytes");
        var keccak256_1 = require("./keccak256");
        var rlp_1 = require("./rlp");
        var errors = require("../errors");

///////////////////////////////
        function getChecksumAddress(address) {
            if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
                errors.throwError('invalid address', errors.INVALID_ARGUMENT, {arg: 'address', value: address});
            }
            address = address.toLowerCase();
            var chars = address.substring(2).split('');
            var hashed = new Uint8Array(40);
            for (var i_1 = 0; i_1 < 40; i_1++) {
                hashed[i_1] = chars[i_1].charCodeAt(0);
            }
            hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
            for (var i = 0; i < 40; i += 2) {
                if ((hashed[i >> 1] >> 4) >= 8) {
                    chars[i] = chars[i].toUpperCase();
                }
                if ((hashed[i >> 1] & 0x0f) >= 8) {
                    chars[i + 1] = chars[i + 1].toUpperCase();
                }
            }
            return '0x' + chars.join('');
        }

// Shims for environments that are missing some required constants and functions
        var MAX_SAFE_INTEGER = 0x1fffffffffffff;

        function log10(x) {
            if (Math.log10) {
                return Math.log10(x);
            }
            return Math.log(x) / Math.LN10;
        }

// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
        var ibanLookup = {};
        for (var i = 0; i < 10; i++) {
            ibanLookup[String(i)] = String(i);
        }
        for (var i = 0; i < 26; i++) {
            ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
        }
// How many decimal digits can we process? (for 64-bit float, this is 15)
        var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));

        function ibanChecksum(address) {
            address = address.toUpperCase();
            address = address.substring(4) + address.substring(0, 2) + '00';
            var expanded = '';
            address.split('').forEach(function (c) {
                expanded += ibanLookup[c];
            });
            // Javascript can handle integers safely up to 15 (decimal) digits
            while (expanded.length >= safeDigits) {
                var block = expanded.substring(0, safeDigits);
                expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
            }
            var checksum = String(98 - (parseInt(expanded, 10) % 97));
            while (checksum.length < 2) {
                checksum = '0' + checksum;
            }
            return checksum;
        }
        ;

        function getAddress(address) {
            var result = null;
            if (typeof (address) !== 'string') {
                errors.throwError('invalid address', errors.INVALID_ARGUMENT, {arg: 'address', value: address});
            }
            if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
                // Missing the 0x prefix
                if (address.substring(0, 2) !== '0x') {
                    address = '0x' + address;
                }
                result = getChecksumAddress(address);
                // It is a checksummed address with a bad checksum
                if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                    errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, {
                        arg: 'address',
                        value: address
                    });
                }
                // Maybe ICAP? (we only support direct mode)
            } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                // It is an ICAP address with a bad checksum
                if (address.substring(2, 4) !== ibanChecksum(address)) {
                    errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, {arg: 'address', value: address});
                }
                result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
                while (result.length < 40) {
                    result = '0' + result;
                }
                result = getChecksumAddress('0x' + result);
            } else {
                errors.throwError('invalid address', errors.INVALID_ARGUMENT, {arg: 'address', value: address});
            }
            return result;
        }

        exports.getAddress = getAddress;

        function getIcapAddress(address) {
            var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
            while (base36.length < 30) {
                base36 = '0' + base36;
            }
            return 'XE' + ibanChecksum('XE00' + base36) + base36;
        }

        exports.getIcapAddress = getIcapAddress;

// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
        function getContractAddress(transaction) {
            if (!transaction.from) {
                throw new Error('missing from address');
            }
            var nonce = transaction.nonce;
            return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([
                getAddress(transaction.from),
                bytes_1.stripZeros(bytes_1.hexlify(nonce))
            ])).substring(26));
        }

        exports.getContractAddress = getContractAddress;

// See: https://eips.ethereum.org/EIPS/eip-1014
        function getCreate2Address(options) {
            var initCodeHash = options.initCodeHash;
            if (options.initCode) {
                if (initCodeHash) {
                    if (keccak256_1.keccak256(options.initCode) !== initCodeHash) {
                        errors.throwError("initCode/initCodeHash mismatch", errors.INVALID_ARGUMENT, {
                            arg: "options", value: options
                        });
                    }
                } else {
                    initCodeHash = keccak256_1.keccak256(options.initCode);
                }
            }
            if (!initCodeHash) {
                errors.throwError("missing initCode or initCodeHash", errors.INVALID_ARGUMENT, {
                    arg: "options", value: options
                });
            }
            var from = getAddress(options.from);
            var salt = bytes_1.arrayify(options.salt);
            if (salt.length !== 32) {
                errors.throwError("invalid salt", errors.INVALID_ARGUMENT, {
                    arg: "options", value: options
                });
            }
            return getAddress("0x" + keccak256_1.keccak256(bytes_1.concat([
                "0xff",
                from,
                salt,
                initCodeHash
            ])).substring(26));
        }

        exports.getCreate2Address = getCreate2Address;

    }, {"../errors": 347, "./bytes": 364, "./keccak256": 367, "./rlp": 369, "bn.js": 195}],
    363: [function (require, module, exports) {
        'use strict';
        var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : {"default": mod};
        };
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        /**
         *  BigNumber
         *
         *  A wrapper around the BN.js object. We use the BN.js library
         *  because it is used by elliptic, so it is required regardles.
         *
         */
        var bn_js_1 = __importDefault(require("bn.js"));
        var bytes_1 = require("./bytes");
        var properties_1 = require("./properties");
        var errors = __importStar(require("../errors"));
        var BN_1 = new bn_js_1.default.BN(-1);

        function toHex(bn) {
            var value = bn.toString(16);
            if (value[0] === '-') {
                if ((value.length % 2) === 0) {
                    return '-0x0' + value.substring(1);
                }
                return "-0x" + value.substring(1);
            }
            if ((value.length % 2) === 1) {
                return '0x0' + value;
            }
            return '0x' + value;
        }

        function toBN(value) {
            return _bnify(bigNumberify(value));
        }

        function toBigNumber(bn) {
            return new BigNumber(toHex(bn));
        }

        function _bnify(value) {
            var hex = value._hex;
            if (hex[0] === '-') {
                return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);
            }
            return new bn_js_1.default.BN(hex.substring(2), 16);
        }

        var BigNumber = /** @class */ (function () {
            function BigNumber(value) {
                errors.checkNew(this, BigNumber);
                properties_1.setType(this, 'BigNumber');
                if (typeof (value) === 'string') {
                    if (bytes_1.isHexString(value)) {
                        if (value == '0x') {
                            value = '0x0';
                        }
                        properties_1.defineReadOnly(this, '_hex', value);
                    } else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {
                        properties_1.defineReadOnly(this, '_hex', value);
                    } else if (value.match(/^-?[0-9]*$/)) {
                        if (value == '') {
                            value = '0';
                        }
                        properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
                    } else {
                        errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, {
                            arg: 'value',
                            value: value
                        });
                    }
                } else if (typeof (value) === 'number') {
                    if (parseInt(String(value)) !== value) {
                        errors.throwError('underflow', errors.NUMERIC_FAULT, {
                            operation: 'setValue',
                            fault: 'underflow',
                            value: value,
                            outputValue: parseInt(String(value))
                        });
                    }
                    try {
                        properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
                    } catch (error) {
                        errors.throwError('overflow', errors.NUMERIC_FAULT, {
                            operation: 'setValue',
                            fault: 'overflow',
                            details: error.message
                        });
                    }
                } else if (value instanceof BigNumber) {
                    properties_1.defineReadOnly(this, '_hex', value._hex);
                } else if (value.toHexString) {
                    properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));
                } else if (value._hex && bytes_1.isHexString(value._hex)) {
                    properties_1.defineReadOnly(this, '_hex', value._hex);
                } else if (bytes_1.isArrayish(value)) {
                    properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
                } else {
                    errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, {arg: 'value', value: value});
                }
            }

            BigNumber.prototype.fromTwos = function (value) {
                return toBigNumber(_bnify(this).fromTwos(value));
            };
            BigNumber.prototype.toTwos = function (value) {
                return toBigNumber(_bnify(this).toTwos(value));
            };
            BigNumber.prototype.abs = function () {
                if (this._hex[0] === '-') {
                    return toBigNumber(_bnify(this).mul(BN_1));
                }
                return this;
            };
            BigNumber.prototype.add = function (other) {
                return toBigNumber(_bnify(this).add(toBN(other)));
            };
            BigNumber.prototype.sub = function (other) {
                return toBigNumber(_bnify(this).sub(toBN(other)));
            };
            BigNumber.prototype.div = function (other) {
                var o = bigNumberify(other);
                if (o.isZero()) {
                    errors.throwError('division by zero', errors.NUMERIC_FAULT, {
                        operation: 'divide',
                        fault: 'division by zero'
                    });
                }
                return toBigNumber(_bnify(this).div(toBN(other)));
            };
            BigNumber.prototype.mul = function (other) {
                return toBigNumber(_bnify(this).mul(toBN(other)));
            };
            BigNumber.prototype.mod = function (other) {
                return toBigNumber(_bnify(this).mod(toBN(other)));
            };
            BigNumber.prototype.pow = function (other) {
                return toBigNumber(_bnify(this).pow(toBN(other)));
            };
            BigNumber.prototype.maskn = function (value) {
                return toBigNumber(_bnify(this).maskn(value));
            };
            BigNumber.prototype.eq = function (other) {
                return _bnify(this).eq(toBN(other));
            };
            BigNumber.prototype.lt = function (other) {
                return _bnify(this).lt(toBN(other));
            };
            BigNumber.prototype.lte = function (other) {
                return _bnify(this).lte(toBN(other));
            };
            BigNumber.prototype.gt = function (other) {
                return _bnify(this).gt(toBN(other));
            };
            BigNumber.prototype.gte = function (other) {
                return _bnify(this).gte(toBN(other));
            };
            BigNumber.prototype.isZero = function () {
                return _bnify(this).isZero();
            };
            BigNumber.prototype.toNumber = function () {
                try {
                    return _bnify(this).toNumber();
                } catch (error) {
                    errors.throwError('overflow', errors.NUMERIC_FAULT, {
                        operation: 'setValue',
                        fault: 'overflow',
                        details: error.message
                    });
                }
                return null;
            };
            BigNumber.prototype.toString = function () {
                return _bnify(this).toString(10);
            };
            BigNumber.prototype.toHexString = function () {
                return this._hex;
            };
            BigNumber.isBigNumber = function (value) {
                return properties_1.isType(value, 'BigNumber');
            };
            return BigNumber;
        }());
        exports.BigNumber = BigNumber;

        function bigNumberify(value) {
            if (BigNumber.isBigNumber(value)) {
                return value;
            }
            return new BigNumber(value);
        }

        exports.bigNumberify = bigNumberify;

    }, {"../errors": 347, "./bytes": 364, "./properties": 368, "bn.js": 195}],
    364: [function (require, module, exports) {
        "use strict";
        /**
         *  Conversion Utilities
         *
         */
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var errors = __importStar(require("../errors"));

///////////////////////////////
        function isHexable(value) {
            return !!(value.toHexString);
        }

        exports.isHexable = isHexable;

        function addSlice(array) {
            if (array.slice) {
                return array;
            }
            array.slice = function () {
                var args = Array.prototype.slice.call(arguments);
                return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
            };
            return array;
        }

        function isArrayish(value) {
            if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
                return false;
            }
            for (var i = 0; i < value.length; i++) {
                var v = value[i];
                if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
                    return false;
                }
            }
            return true;
        }

        exports.isArrayish = isArrayish;

        function arrayify(value) {
            if (value == null) {
                errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, {
                    arg: 'value',
                    value: value
                });
            }
            if (isHexable(value)) {
                value = value.toHexString();
            }
            if (typeof (value) === 'string') {
                var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
                if (!match) {
                    errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {
                        arg: 'value',
                        value: value
                    });
                }
                if (match[1] !== '0x') {
                    errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {
                        arg: 'value',
                        value: value
                    });
                }
                value = value.substring(2);
                if (value.length % 2) {
                    value = '0' + value;
                }
                var result = [];
                for (var i = 0; i < value.length; i += 2) {
                    result.push(parseInt(value.substr(i, 2), 16));
                }
                return addSlice(new Uint8Array(result));
            }
            if (isArrayish(value)) {
                return addSlice(new Uint8Array(value));
            }
            errors.throwError('invalid arrayify value', null, {arg: 'value', value: value, type: typeof (value)});
            return null;
        }

        exports.arrayify = arrayify;

        function concat(objects) {
            var arrays = [];
            var length = 0;
            for (var i = 0; i < objects.length; i++) {
                var object = arrayify(objects[i]);
                arrays.push(object);
                length += object.length;
            }
            var result = new Uint8Array(length);
            var offset = 0;
            for (var i = 0; i < arrays.length; i++) {
                result.set(arrays[i], offset);
                offset += arrays[i].length;
            }
            return addSlice(result);
        }

        exports.concat = concat;

        function stripZeros(value) {
            var result = arrayify(value);
            if (result.length === 0) {
                return result;
            }
            // Find the first non-zero entry
            var start = 0;
            while (result[start] === 0) {
                start++;
            }
            // If we started with zeros, strip them
            if (start) {
                result = result.slice(start);
            }
            return result;
        }

        exports.stripZeros = stripZeros;

        function padZeros(value, length) {
            value = arrayify(value);
            if (length < value.length) {
                throw new Error('cannot pad');
            }
            var result = new Uint8Array(length);
            result.set(value, length - value.length);
            return addSlice(result);
        }

        exports.padZeros = padZeros;

        function isHexString(value, length) {
            if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                return false;
            }
            if (length && value.length !== 2 + 2 * length) {
                return false;
            }
            return true;
        }

        exports.isHexString = isHexString;
        var HexCharacters = '0123456789abcdef';

        function hexlify(value) {
            if (isHexable(value)) {
                return value.toHexString();
            }
            if (typeof (value) === 'number') {
                if (value < 0) {
                    errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, {
                        arg: 'value',
                        value: value
                    });
                }
                // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible
                // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already
                if (value >= 9007199254740991) {
                    errors.throwError("out-of-range", errors.NUMERIC_FAULT, {
                        operartion: "hexlify",
                        fault: "out-of-safe-range"
                    });
                }
                var hex = '';
                while (value) {
                    hex = HexCharacters[value & 0x0f] + hex;
                    value = Math.floor(value / 16);
                }
                if (hex.length) {
                    if (hex.length % 2) {
                        hex = '0' + hex;
                    }
                    return '0x' + hex;
                }
                return '0x00';
            }
            if (typeof (value) === 'string') {
                var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
                if (!match) {
                    errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {
                        arg: 'value',
                        value: value
                    });
                }
                if (match[1] !== '0x') {
                    errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {
                        arg: 'value',
                        value: value
                    });
                }
                if (value.length % 2) {
                    value = '0x0' + value.substring(2);
                }
                return value;
            }
            if (isArrayish(value)) {
                var result = [];
                for (var i = 0; i < value.length; i++) {
                    var v = value[i];
                    result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
                }
                return '0x' + result.join('');
            }
            errors.throwError('invalid hexlify value', null, {arg: 'value', value: value});
            return 'never';
        }

        exports.hexlify = hexlify;

        function hexDataLength(data) {
            if (!isHexString(data) || (data.length % 2) !== 0) {
                return null;
            }
            return (data.length - 2) / 2;
        }

        exports.hexDataLength = hexDataLength;

        function hexDataSlice(data, offset, endOffset) {
            if (!isHexString(data)) {
                errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, {arg: 'value', value: data});
            }
            if ((data.length % 2) !== 0) {
                errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, {arg: 'value', value: data});
            }
            offset = 2 + 2 * offset;
            if (endOffset != null) {
                return '0x' + data.substring(offset, 2 + 2 * endOffset);
            }
            return '0x' + data.substring(offset);
        }

        exports.hexDataSlice = hexDataSlice;

        function hexStripZeros(value) {
            if (!isHexString(value)) {
                errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {arg: 'value', value: value});
            }
            while (value.length > 3 && value.substring(0, 3) === '0x0') {
                value = '0x' + value.substring(3);
            }
            return value;
        }

        exports.hexStripZeros = hexStripZeros;

        function hexZeroPad(value, length) {
            if (!isHexString(value)) {
                errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {arg: 'value', value: value});
            }
            while (value.length < 2 * length + 2) {
                value = '0x0' + value.substring(2);
            }
            return value;
        }

        exports.hexZeroPad = hexZeroPad;

        function isSignature(value) {
            return (value && value.r != null && value.s != null);
        }

        function splitSignature(signature) {
            var v = 0;
            var r = '0x', s = '0x';
            if (isSignature(signature)) {
                if (signature.v == null && signature.recoveryParam == null) {
                    errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, {
                        argument: 'signature',
                        value: signature
                    });
                }
                r = hexZeroPad(signature.r, 32);
                s = hexZeroPad(signature.s, 32);
                v = signature.v;
                if (typeof (v) === 'string') {
                    v = parseInt(v, 16);
                }
                var recoveryParam = signature.recoveryParam;
                if (recoveryParam == null && signature.v != null) {
                    recoveryParam = 1 - (v % 2);
                }
                v = 27 + recoveryParam;
            } else {
                var bytes = arrayify(signature);
                if (bytes.length !== 65) {
                    throw new Error('invalid signature');
                }
                r = hexlify(bytes.slice(0, 32));
                s = hexlify(bytes.slice(32, 64));
                v = bytes[64];
                if (v !== 27 && v !== 28) {
                    v = 27 + (v % 2);
                }
            }
            return {
                r: r,
                s: s,
                recoveryParam: (v - 27),
                v: v
            };
        }

        exports.splitSignature = splitSignature;

        function joinSignature(signature) {
            signature = splitSignature(signature);
            return hexlify(concat([
                signature.r,
                signature.s,
                (signature.recoveryParam ? '0x1c' : '0x1b')
            ]));
        }

        exports.joinSignature = joinSignature;

    }, {"../errors": 347}],
    365: [function (require, module, exports) {
        'use strict';
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var errors = __importStar(require("../errors"));
        var bytes_1 = require("./bytes");
        var utf8_1 = require("./utf8");
        var keccak256_1 = require("./keccak256");
///////////////////////////////
        var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
        var UseSTD3ASCIIRules = new RegExp("^[a-z0-9.-]*$");

        function namehash(name) {
            if (typeof (name) !== 'string') {
                errors.throwError('invalid address - ' + String(name), errors.INVALID_ARGUMENT, {
                    argument: 'name',
                    value: name
                });
            }
            name = name.toLowerCase();
            // Supporting the full UTF-8 space requires additional (and large)
            // libraries, so for now we simply do not support them.
            // It should be fairly easy in the future to support systems with
            // String.normalize, but that is future work.
            if (!name.match(UseSTD3ASCIIRules)) {
                errors.throwError('contains invalid UseSTD3ASCIIRules characters', errors.INVALID_ARGUMENT, {
                    argument: 'name',
                    value: name
                });
            }
            var result = Zeros;
            while (name.length) {
                var partition = name.match(Partition);
                var label = utf8_1.toUtf8Bytes(partition[3]);
                result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));
                name = partition[2] || '';
            }
            return bytes_1.hexlify(result);
        }

        exports.namehash = namehash;

        function id(text) {
            return keccak256_1.keccak256(utf8_1.toUtf8Bytes(text));
        }

        exports.id = id;

        function hashMessage(message) {
            return keccak256_1.keccak256(bytes_1.concat([
                utf8_1.toUtf8Bytes('\x19Ethereum Signed Message:\n'),
                utf8_1.toUtf8Bytes(String(message.length)),
                ((typeof (message) === 'string') ? utf8_1.toUtf8Bytes(message) : message)
            ]));
        }

        exports.hashMessage = hashMessage;

    }, {"../errors": 347, "./bytes": 364, "./keccak256": 367, "./utf8": 372}],
    366: [function (require, module, exports) {
        'use strict';
        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array && function (d, b) {
                    d.__proto__ = b;
                }) ||
                function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
        var address_1 = require("./address");
        var abi_coder_1 = require("./abi-coder");
        var bignumber_1 = require("./bignumber");
        var bytes_1 = require("./bytes");
        var hash_1 = require("./hash");
        var keccak256_1 = require("./keccak256");
        var properties_1 = require("./properties");
        var errors = __importStar(require("../errors"));
///////////////////////////////
        var _Indexed = /** @class */ (function () {
            function _Indexed(hash) {
                properties_1.setType(this, 'Indexed');
                properties_1.defineReadOnly(this, 'hash', hash);
            }

            return _Indexed;
        }());
        var Description = /** @class */ (function () {
            function Description(info) {
                properties_1.setType(this, 'Description');
                for (var key in info) {
                    properties_1.defineReadOnly(this, key, properties_1.deepCopy(info[key], true));
                }
                Object.freeze(this);
            }

            return Description;
        }());
        var _DeployDescription = /** @class */ (function (_super) {
            __extends(_DeployDescription, _super);

            function _DeployDescription() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            _DeployDescription.prototype.encode = function (bytecode, params) {
                if (!bytes_1.isHexString(bytecode)) {
                    errors.throwError('invalid contract bytecode', errors.INVALID_ARGUMENT, {
                        arg: 'bytecode',
                        value: bytecode
                    });
                }
                errors.checkArgumentCount(params.length, this.inputs.length, ' in Interface constructor');
                try {
                    return (bytecode + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2));
                } catch (error) {
                    errors.throwError('invalid constructor argument', errors.INVALID_ARGUMENT, {
                        arg: error.arg,
                        reason: error.reason,
                        value: error.value
                    });
                }
                return null;
            };
            return _DeployDescription;
        }(Description));
        var _FunctionDescription = /** @class */ (function (_super) {
            __extends(_FunctionDescription, _super);

            function _FunctionDescription() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            _FunctionDescription.prototype.encode = function (params) {
                errors.checkArgumentCount(params.length, this.inputs.length, ' in interface function ' + this.name);
                try {
                    return this.sighash + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);
                } catch (error) {
                    errors.throwError('invalid input argument', errors.INVALID_ARGUMENT, {
                        arg: error.arg,
                        reason: error.reason,
                        value: error.value
                    });
                }
                return null;
            };
            _FunctionDescription.prototype.decode = function (data) {
                try {
                    return abi_coder_1.defaultAbiCoder.decode(this.outputs, bytes_1.arrayify(data));
                } catch (error) {
                    errors.throwError('invalid data for function output', errors.INVALID_ARGUMENT, {
                        arg: 'data',
                        errorArg: error.arg,
                        errorValue: error.value,
                        value: data,
                        reason: error.reason
                    });
                }
            };
            return _FunctionDescription;
        }(Description));
        var Result = /** @class */ (function (_super) {
            __extends(Result, _super);

            function Result() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            return Result;
        }(Description));
        var _EventDescription = /** @class */ (function (_super) {
            __extends(_EventDescription, _super);

            function _EventDescription() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            _EventDescription.prototype.encodeTopics = function (params) {
                var _this = this;
                if (params.length > this.inputs.length) {
                    errors.throwError('too many arguments for ' + this.name, errors.UNEXPECTED_ARGUMENT, {
                        maxCount: params.length,
                        expectedCount: this.inputs.length
                    });
                }
                var topics = [];
                if (!this.anonymous) {
                    topics.push(this.topic);
                }
                params.forEach(function (arg, index) {
                    var param = _this.inputs[index];
                    if (!param.indexed) {
                        if (arg != null) {
                            errors.throwError('cannot filter non-indexed parameters; must be null', errors.INVALID_ARGUMENT, {
                                argument: (param.name || index),
                                value: arg
                            });
                        }
                        return;
                    }
                    if (arg == null) {
                        topics.push(null);
                    } else if (param.type === 'string') {
                        topics.push(hash_1.id(arg));
                    } else if (param.type === 'bytes') {
                        topics.push(keccak256_1.keccak256(arg));
                    } else if (param.type.indexOf('[') !== -1 || param.type.substring(0, 5) === 'tuple') {
                        errors.throwError('filtering with tuples or arrays not implemented yet; bug us on GitHub', errors.NOT_IMPLEMENTED, {operation: 'filter(array|tuple)'});
                    } else {
                        if (param.type === 'address') {
                            address_1.getAddress(arg);
                        }
                        topics.push(bytes_1.hexZeroPad(bytes_1.hexlify(arg), 32).toLowerCase());
                    }
                });
                // Trim off trailing nulls
                while (topics.length && topics[topics.length - 1] === null) {
                    topics.pop();
                }
                return topics;
            };
            _EventDescription.prototype.decode = function (data, topics) {
                // Strip the signature off of non-anonymous topics
                if (topics != null && !this.anonymous) {
                    topics = topics.slice(1);
                }
                var inputIndexed = [];
                var inputNonIndexed = [];
                var inputDynamic = [];
                this.inputs.forEach(function (param, index) {
                    if (param.indexed) {
                        if (param.type === 'string' || param.type === 'bytes' || param.type.indexOf('[') >= 0 || param.type.substring(0, 5) === 'tuple') {
                            inputIndexed.push({type: 'bytes32', name: (param.name || '')});
                            inputDynamic.push(true);
                        } else {
                            inputIndexed.push(param);
                            inputDynamic.push(false);
                        }
                    } else {
                        inputNonIndexed.push(param);
                        inputDynamic.push(false);
                    }
                });
                if (topics != null) {
                    var resultIndexed = abi_coder_1.defaultAbiCoder.decode(inputIndexed, bytes_1.concat(topics));
                }
                var resultNonIndexed = abi_coder_1.defaultAbiCoder.decode(inputNonIndexed, bytes_1.arrayify(data));
                var result = {};
                var nonIndexedIndex = 0, indexedIndex = 0;
                this.inputs.forEach(function (input, index) {
                    if (input.indexed) {
                        if (topics == null) {
                            result[index] = new _Indexed(null);
                        } else if (inputDynamic[index]) {
                            result[index] = new _Indexed(resultIndexed[indexedIndex++]);
                        } else {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                    } else {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    if (input.name) {
                        result[input.name] = result[index];
                    }
                });
                result.length = this.inputs.length;
                return new Result(result);
            };
            return _EventDescription;
        }(Description));
        var _TransactionDescription = /** @class */ (function (_super) {
            __extends(_TransactionDescription, _super);

            function _TransactionDescription() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            return _TransactionDescription;
        }(Description));
        var _LogDescription = /** @class */ (function (_super) {
            __extends(_LogDescription, _super);

            function _LogDescription() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            return _LogDescription;
        }(Description));

        function addMethod(method) {
            switch (method.type) {
                case 'constructor': {
                    var description = new _DeployDescription({
                        inputs: method.inputs,
                        payable: (method.payable == null || !!method.payable)
                    });
                    if (!this.deployFunction) {
                        this.deployFunction = description;
                    }
                    break;
                }
                case 'function': {
                    var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');
                    var sighash = hash_1.id(signature).substring(0, 10);
                    var isConst = false;
                    if (method.constant != null) {
                        isConst = method.constant;
                    } else if (method.stateMutability != null) {
                        isConst = (method.stateMutability == "view" || method.stateMutability == "pure");
                    }
                    var description = new _FunctionDescription({
                        inputs: method.inputs,
                        outputs: method.outputs,
                        gas: method.gas,
                        payable: (method.payable == null || !!method.payable),
                        type: (isConst ? 'call' : 'transaction'),
                        name: method.name,
                        signature: signature,
                        sighash: sighash,
                    });
                    // Expose the first (and hopefully unique named function)
                    if (method.name) {
                        if (this.functions[method.name] == null) {
                            properties_1.defineReadOnly(this.functions, method.name, description);
                        } else {
                            errors.warn('WARNING: Multiple definitions for ' + method.name);
                        }
                    }
                    // Expose all methods by their signature, for overloaded functions
                    if (this.functions[description.signature] == null) {
                        properties_1.defineReadOnly(this.functions, description.signature, description);
                    }
                    break;
                }
                case 'event': {
                    var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');
                    var description = new _EventDescription({
                        name: method.name,
                        signature: signature,
                        inputs: method.inputs,
                        topic: hash_1.id(signature),
                        anonymous: (!!method.anonymous)
                    });
                    // Expose the first (and hopefully unique) event name
                    if (method.name && this.events[method.name] == null) {
                        properties_1.defineReadOnly(this.events, method.name, description);
                    }
                    // Expose all events by their signature, for overloaded functions
                    if (this.events[description.signature] == null) {
                        properties_1.defineReadOnly(this.events, description.signature, description);
                    }
                    break;
                }
                case "receive":
                case 'fallback':
                    // Nothing to do for fallback
                    break;
                default:
                    errors.warn('WARNING: unsupported ABI type - ' + method.type);
                    break;
            }
        }

        var Interface = /** @class */ (function () {
            // ParamType is not actually correct here, but for legacy reasons,
            // we need it. See #721.
            function Interface(abi) {
                errors.checkNew(this, Interface);
                if (typeof (abi) === 'string') {
                    try {
                        abi = JSON.parse(abi);
                    } catch (error) {
                        errors.throwError('could not parse ABI JSON', errors.INVALID_ARGUMENT, {
                            arg: 'abi',
                            errorMessage: error.message,
                            value: abi
                        });
                    }
                    if (!Array.isArray(abi)) {
                        errors.throwError('invalid abi', errors.INVALID_ARGUMENT, {arg: 'abi', value: abi});
                        return null;
                    }
                }
                properties_1.defineReadOnly(this, 'functions', {});
                properties_1.defineReadOnly(this, 'events', {});
                // Convert any supported ABI format into a standard ABI format
                var _abi = [];
                abi.forEach(function (fragment) {
                    if (typeof (fragment) === 'string') {
                        fragment = abi_coder_1.parseSignature(fragment);
                    }
                    // @TODO: We should probable do some validation; create abiCoder.formatSignature for checking
                    _abi.push(fragment);
                });
                properties_1.defineReadOnly(this, 'abi', properties_1.deepCopy(_abi, true));
                _abi.forEach(addMethod, this);
                // If there wasn't a constructor, create the default constructor
                if (!this.deployFunction) {
                    addMethod.call(this, {type: 'constructor', inputs: []});
                }
                properties_1.setType(this, 'Interface');
            }

            Interface.prototype.parseTransaction = function (tx) {
                var sighash = tx.data.substring(0, 10).toLowerCase();
                for (var name in this.functions) {
                    if (name.indexOf('(') === -1) {
                        continue;
                    }
                    var func = this.functions[name];
                    if (func.sighash === sighash) {
                        var result = abi_coder_1.defaultAbiCoder.decode(func.inputs, '0x' + tx.data.substring(10));
                        return new _TransactionDescription({
                            args: result,
                            decode: func.decode,
                            name: func.name,
                            signature: func.signature,
                            sighash: func.sighash,
                            value: bignumber_1.bigNumberify(tx.value || '0'),
                        });
                    }
                }
                return null;
            };
            Interface.prototype.parseLog = function (log) {
                for (var name in this.events) {
                    if (name.indexOf('(') === -1) {
                        continue;
                    }
                    var event = this.events[name];
                    if (event.anonymous) {
                        continue;
                    }
                    if (event.topic !== log.topics[0]) {
                        continue;
                    }
                    // @TODO: If anonymous, and the only method, and the input count matches, should we parse and return it?
                    return new _LogDescription({
                        decode: event.decode,
                        name: event.name,
                        signature: event.signature,
                        topic: event.topic,
                        values: event.decode(log.data, log.topics)
                    });
                }
                return null;
            };
            Interface.isInterface = function (value) {
                return properties_1.isType(value, 'Interface');
            };
            Interface.isIndexed = function (value) {
                return properties_1.isType(value, 'Indexed');
            };
            return Interface;
        }());
        exports.Interface = Interface;

    }, {
        "../errors": 347,
        "./abi-coder": 361,
        "./address": 362,
        "./bignumber": 363,
        "./bytes": 364,
        "./hash": 365,
        "./keccak256": 367,
        "./properties": 368
    }],
    367: [function (require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {value: true});
        var sha3 = require("js-sha3");
        var bytes_1 = require("./bytes");

        function keccak256(data) {
            return '0x' + sha3.keccak_256(bytes_1.arrayify(data));
        }

        exports.keccak256 = keccak256;

    }, {"./bytes": 364, "js-sha3": 390}],
    368: [function (require, module, exports) {
        'use strict';
        var __importStar = (this && this.__importStar) || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            result["default"] = mod;
            return result;
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var errors = __importStar(require("../errors"));

        function defineReadOnly(object, name, value) {
            Object.defineProperty(object, name, {
                enumerable: true,
                value: value,
                writable: false,
            });
        }

        exports.defineReadOnly = defineReadOnly;
// There are some issues with instanceof with npm link, so we use this
// to ensure types are what we expect.
        function setType(object, type) {
            Object.defineProperty(object, '_ethersType', {configurable: false, value: type, writable: false});
        }

        exports.setType = setType;

        function isType(object, type) {
            return (object && object._ethersType === type);
        }

        exports.isType = isType;

        function resolveProperties(object) {
            var result = {};
            var promises = [];
            Object.keys(object).forEach(function (key) {
                var value = object[key];
                if (value instanceof Promise) {
                    promises.push(value.then(function (value) {
                        result[key] = value;
                        return null;
                    }));
                } else {
                    result[key] = value;
                }
            });
            return Promise.all(promises).then(function () {
                return result;
            });
        }

        exports.resolveProperties = resolveProperties;

        function checkProperties(object, properties) {
            if (!object || typeof (object) !== 'object') {
                errors.throwError('invalid object', errors.INVALID_ARGUMENT, {
                    argument: 'object',
                    value: object
                });
            }
            Object.keys(object).forEach(function (key) {
                if (!properties[key]) {
                    errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {
                        argument: 'transaction',
                        value: object,
                        key: key
                    });
                }
            });
        }

        exports.checkProperties = checkProperties;

        function shallowCopy(object) {
            var result = {};
            for (var key in object) {
                result[key] = object[key];
            }
            return result;
        }

        exports.shallowCopy = shallowCopy;
        var opaque = {boolean: true, number: true, string: true};

        function deepCopy(object, frozen) {
            // Opaque objects are not mutable, so safe to copy by assignment
            if (object === undefined || object === null || opaque[typeof (object)]) {
                return object;
            }
            // Arrays are mutable, so we need to create a copy
            if (Array.isArray(object)) {
                var result = object.map(function (item) {
                    return deepCopy(item, frozen);
                });
                if (frozen) {
                    Object.freeze(result);
                }
                return result;
            }
            if (typeof (object) === 'object') {
                // Some internal objects, which are already immutable
                if (isType(object, 'BigNumber')) {
                    return object;
                }
                if (isType(object, 'Description')) {
                    return object;
                }
                if (isType(object, 'Indexed')) {
                    return object;
                }
                var result = {};
                for (var key in object) {
                    var value = object[key];
                    if (value === undefined) {
                        continue;
                    }
                    defineReadOnly(result, key, deepCopy(value, frozen));
                }
                if (frozen) {
                    Object.freeze(result);
                }
                return result;
            }
            // The function type is also immutable, so safe to copy by assignment
            if (typeof (object) === 'function') {
                return object;
            }
            throw new Error('Cannot deepCopy ' + typeof (object));
        }

        exports.deepCopy = deepCopy;

// See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js
        function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        }

        function inheritable(parent) {
            return function (child) {
                inherits(child, parent);
                defineReadOnly(child, 'inherits', inheritable(child));
            };
        }

        exports.inheritable = inheritable;

    }, {"../errors": 347}],
    369: [function (require, module, exports) {
        "use strict";
//See: https://github.com/ethereum/wiki/wiki/RLP
        Object.defineProperty(exports, "__esModule", {value: true});
        var bytes_1 = require("./bytes");

        function arrayifyInteger(value) {
            var result = [];
            while (value) {
                result.unshift(value & 0xff);
                value >>= 8;
            }
            return result;
        }

        function unarrayifyInteger(data, offset, length) {
            var result = 0;
            for (var i = 0; i < length; i++) {
                result = (result * 256) + data[offset + i];
            }
            return result;
        }

        function _encode(object) {
            if (Array.isArray(object)) {
                var payload = [];
                object.forEach(function (child) {
                    payload = payload.concat(_encode(child));
                });
                if (payload.length <= 55) {
                    payload.unshift(0xc0 + payload.length);
                    return payload;
                }
                var length = arrayifyInteger(payload.length);
                length.unshift(0xf7 + length.length);
                return length.concat(payload);
            }
            var data = Array.prototype.slice.call(bytes_1.arrayify(object));
            if (data.length === 1 && data[0] <= 0x7f) {
                return data;
            } else if (data.length <= 55) {
                data.unshift(0x80 + data.length);
                return data;
            }
            var length = arrayifyInteger(data.length);
            length.unshift(0xb7 + length.length);
            return length.concat(data);
        }

        function encode(object) {
            return bytes_1.hexlify(_encode(object));
        }

        exports.encode = encode;

        function _decodeChildren(data, offset, childOffset, length) {
            var result = [];
            while (childOffset < offset + 1 + length) {
                var decoded = _decode(data, childOffset);
                result.push(decoded.result);
                childOffset += decoded.consumed;
                if (childOffset > offset + 1 + length) {
                    throw new Error('invalid rlp');
                }
            }
            return {consumed: (1 + length), result: result};
        }

// returns { consumed: number, result: Object }
        function _decode(data, offset) {
            if (data.length === 0) {
                throw new Error('invalid rlp data');
            }
            // Array with extra length prefix
            if (data[offset] >= 0xf8) {
                var lengthLength = data[offset] - 0xf7;
                if (offset + 1 + lengthLength > data.length) {
                    throw new Error('too short');
                }
                var length = unarrayifyInteger(data, offset + 1, lengthLength);
                if (offset + 1 + lengthLength + length > data.length) {
                    throw new Error('to short');
                }
                return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
            } else if (data[offset] >= 0xc0) {
                var length = data[offset] - 0xc0;
                if (offset + 1 + length > data.length) {
                    throw new Error('invalid rlp data');
                }
                return _decodeChildren(data, offset, offset + 1, length);
            } else if (data[offset] >= 0xb8) {
                var lengthLength = data[offset] - 0xb7;
                if (offset + 1 + lengthLength > data.length) {
                    throw new Error('invalid rlp data');
                }
                var length = unarrayifyInteger(data, offset + 1, lengthLength);
                if (offset + 1 + lengthLength + length > data.length) {
                    throw new Error('invalid rlp data');
                }
                var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
                return {consumed: (1 + lengthLength + length), result: result};
            } else if (data[offset] >= 0x80) {
                var length = data[offset] - 0x80;
                if (offset + 1 + length > data.length) {
                    throw new Error('invalid rlp data');
                }
                var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));
                return {consumed: (1 + length), result: result};
            }
            return {consumed: 1, result: bytes_1.hexlify(data[offset])};
        }

        function decode(data) {
            var bytes = bytes_1.arrayify(data);
            var decoded = _decode(bytes, 0);
            if (decoded.consumed !== bytes.length) {
                throw new Error('invalid rlp data');
            }
            return decoded.result;
        }

        exports.decode = decode;

    }, {"./bytes": 364}],
    370: [function (require, module, exports) {
        'use strict';
        var __importDefault = (this && this.__importDefault) || function (mod) {
            return (mod && mod.__esModule) ? mod : {"default": mod};
        };
        Object.defineProperty(exports, "__esModule", {value: true});
        var hash_js_1 = __importDefault(require("hash.js"));
        var bytes_1 = require("./bytes");

        function ripemd160(data) {
            return '0x' + (hash_js_1.default.ripemd160().update(bytes_1.arrayify(data)).digest('hex'));
        }

        exports.ripemd160 = ripemd160;

        function sha256(data) {
            return '0x' + (hash_js_1.default.sha256().update(bytes_1.arrayify(data)).digest('hex'));
        }

        exports.sha256 = sha256;

        function sha512(data) {
            return '0x' + (hash_js_1.default.sha512().update(bytes_1.arrayify(data)).digest('hex'));
        }

        exports.sha512 = sha512;

    }, {"./bytes": 364, "hash.js": 348}],
    371: [function (require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {value: true});
        var bignumber_1 = require("./bignumber");
        var bytes_1 = require("./bytes");
        var utf8_1 = require("./utf8");
        var keccak256_1 = require("./keccak256");
        var sha2_1 = require("./sha2");
        var regexBytes = new RegExp("^bytes([0-9]+)$");
        var regexNumber = new RegExp("^(u?int)([0-9]*)$");
        var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
        var Zeros = '0000000000000000000000000000000000000000000000000000000000000000';

        function _pack(type, value, isArray) {
            switch (type) {
                case 'address':
                    if (isArray) {
                        return bytes_1.padZeros(value, 32);
                    }
                    return bytes_1.arrayify(value);
                case 'string':
                    return utf8_1.toUtf8Bytes(value);
                case 'bytes':
                    return bytes_1.arrayify(value);
                case 'bool':
                    value = (value ? '0x01' : '0x00');
                    if (isArray) {
                        return bytes_1.padZeros(value, 32);
                    }
                    return bytes_1.arrayify(value);
            }
            var match = type.match(regexNumber);
            if (match) {
                //var signed = (match[1] === 'int')
                var size = parseInt(match[2] || "256");
                if ((size % 8 != 0) || size === 0 || size > 256) {
                    throw new Error('invalid number type - ' + type);
                }
                if (isArray) {
                    size = 256;
                }
                value = bignumber_1.bigNumberify(value).toTwos(size);
                return bytes_1.padZeros(value, size / 8);
            }
            match = type.match(regexBytes);
            if (match) {
                var size = parseInt(match[1]);
                if (String(size) != match[1] || size === 0 || size > 32) {
                    throw new Error('invalid number type - ' + type);
                }
                if (bytes_1.arrayify(value).byteLength !== size) {
                    throw new Error('invalid value for ' + type);
                }
                if (isArray) {
                    return bytes_1.arrayify((value + Zeros).substring(0, 66));
                }
                return value;
            }
            match = type.match(regexArray);
            if (match && Array.isArray(value)) {
                var baseType = match[1];
                var count = parseInt(match[2] || String(value.length));
                if (count != value.length) {
                    throw new Error('invalid value for ' + type);
                }
                var result = [];
                value.forEach(function (value) {
                    result.push(_pack(baseType, value, true));
                });
                return bytes_1.concat(result);
            }
            throw new Error('unknown type - ' + type);
        }

// @TODO: Array Enum
        function pack(types, values) {
            if (types.length != values.length) {
                throw new Error('type/value count mismatch');
            }
            var tight = [];
            types.forEach(function (type, index) {
                tight.push(_pack(type, values[index]));
            });
            return bytes_1.hexlify(bytes_1.concat(tight));
        }

        exports.pack = pack;

        function keccak256(types, values) {
            return keccak256_1.keccak256(pack(types, values));
        }

        exports.keccak256 = keccak256;

        function sha256(types, values) {
            return sha2_1.sha256(pack(types, values));
        }

        exports.sha256 = sha256;

    }, {"./bignumber": 363, "./bytes": 364, "./keccak256": 367, "./sha2": 370, "./utf8": 372}],
    372: [function (require, module, exports) {
        'use strict';
        Object.defineProperty(exports, "__esModule", {value: true});
        var constants_1 = require("../constants");
        var errors_1 = require("../errors");
        var bytes_1 = require("./bytes");
///////////////////////////////
        var UnicodeNormalizationForm;
        (function (UnicodeNormalizationForm) {
            UnicodeNormalizationForm["current"] = "";
            UnicodeNormalizationForm["NFC"] = "NFC";
            UnicodeNormalizationForm["NFD"] = "NFD";
            UnicodeNormalizationForm["NFKC"] = "NFKC";
            UnicodeNormalizationForm["NFKD"] = "NFKD";
        })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
        ;

// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
        function toUtf8Bytes(str, form) {
            if (form === void 0) {
                form = UnicodeNormalizationForm.current;
            }
            if (form != UnicodeNormalizationForm.current) {
                errors_1.checkNormalize();
                str = str.normalize(form);
            }
            var result = [];
            for (var i = 0; i < str.length; i++) {
                var c = str.charCodeAt(i);
                if (c < 0x80) {
                    result.push(c);
                } else if (c < 0x800) {
                    result.push((c >> 6) | 0xc0);
                    result.push((c & 0x3f) | 0x80);
                } else if ((c & 0xfc00) == 0xd800) {
                    i++;
                    var c2 = str.charCodeAt(i);
                    if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                        throw new Error('invalid utf-8 string');
                    }
                    // Surrogate Pair
                    c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                    result.push((c >> 18) | 0xf0);
                    result.push(((c >> 12) & 0x3f) | 0x80);
                    result.push(((c >> 6) & 0x3f) | 0x80);
                    result.push((c & 0x3f) | 0x80);
                } else {
                    result.push((c >> 12) | 0xe0);
                    result.push(((c >> 6) & 0x3f) | 0x80);
                    result.push((c & 0x3f) | 0x80);
                }
            }
            return bytes_1.arrayify(result);
        }

        exports.toUtf8Bytes = toUtf8Bytes;
        ;

// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
        function toUtf8String(bytes, ignoreErrors) {
            bytes = bytes_1.arrayify(bytes);
            var result = '';
            var i = 0;
            // Invalid bytes are ignored
            while (i < bytes.length) {
                var c = bytes[i++];
                // 0xxx xxxx
                if (c >> 7 === 0) {
                    result += String.fromCharCode(c);
                    continue;
                }
                // Multibyte; how many bytes left for this character?
                var extraLength = null;
                var overlongMask = null;
                // 110x xxxx 10xx xxxx
                if ((c & 0xe0) === 0xc0) {
                    extraLength = 1;
                    overlongMask = 0x7f;
                    // 1110 xxxx 10xx xxxx 10xx xxxx
                } else if ((c & 0xf0) === 0xe0) {
                    extraLength = 2;
                    overlongMask = 0x7ff;
                    // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
                } else if ((c & 0xf8) === 0xf0) {
                    extraLength = 3;
                    overlongMask = 0xffff;
                } else {
                    if (!ignoreErrors) {
                        if ((c & 0xc0) === 0x80) {
                            throw new Error('invalid utf8 byte sequence; unexpected continuation byte');
                        }
                        throw new Error('invalid utf8 byte sequence; invalid prefix');
                    }
                    continue;
                }
                // Do we have enough bytes in our data?
                if (i + extraLength > bytes.length) {
                    if (!ignoreErrors) {
                        throw new Error('invalid utf8 byte sequence; too short');
                    }
                    // If there is an invalid unprocessed byte, skip continuation bytes
                    for (; i < bytes.length; i++) {
                        if (bytes[i] >> 6 !== 0x02) {
                            break;
                        }
                    }
                    continue;
                }
                // Remove the length prefix from the char
                var res = c & ((1 << (8 - extraLength - 1)) - 1);
                for (var j = 0; j < extraLength; j++) {
                    var nextChar = bytes[i];
                    // Invalid continuation byte
                    if ((nextChar & 0xc0) != 0x80) {
                        res = null;
                        break;
                    }
                    ;
                    res = (res << 6) | (nextChar & 0x3f);
                    i++;
                }
                if (res === null) {
                    if (!ignoreErrors) {
                        throw new Error('invalid utf8 byte sequence; invalid continuation byte');
                    }
                    continue;
                }
                // Check for overlong seuences (more bytes than needed)
                if (res <= overlongMask) {
                    if (!ignoreErrors) {
                        throw new Error('invalid utf8 byte sequence; overlong');
                    }
                    continue;
                }
                // Maximum code point
                if (res > 0x10ffff) {
                    if (!ignoreErrors) {
                        throw new Error('invalid utf8 byte sequence; out-of-range');
                    }
                    continue;
                }
                // Reserved for UTF-16 surrogate halves
                if (res >= 0xd800 && res <= 0xdfff) {
                    if (!ignoreErrors) {
                        throw new Error('invalid utf8 byte sequence; utf-16 surrogate');
                    }
                    continue;
                }
                if (res <= 0xffff) {
                    result += String.fromCharCode(res);
                    continue;
                }
                res -= 0x10000;
                result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
            }
            return result;
        }

        exports.toUtf8String = toUtf8String;

        function formatBytes32String(text) {
            // Get the bytes
            var bytes = toUtf8Bytes(text);
            // Check we have room for null-termination
            if (bytes.length > 31) {
                throw new Error('bytes32 string must be less than 32 bytes');
            }
            // Zero-pad (implicitly null-terminates)
            return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));
        }

        exports.formatBytes32String = formatBytes32String;

        function parseBytes32String(bytes) {
            var data = bytes_1.arrayify(bytes);
            // Must be 32 bytes with a null-termination
            if (data.length !== 32) {
                throw new Error('invalid bytes32 - not 32 bytes long');
            }
            if (data[31] !== 0) {
                throw new Error('invalid bytes32 string - no null terminator');
            }
            // Find the null termination
            var length = 31;
            while (data[length - 1] === 0) {
                length--;
            }
            // Determine the string value
            return toUtf8String(data.slice(0, length));
        }

        exports.parseBytes32String = parseBytes32String;

    }, {"../constants": 345, "../errors": 347, "./bytes": 364}],
    373: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            var isHexPrefixed = require('is-hex-prefixed');
            var stripHexPrefix = require('strip-hex-prefix');

            /**
             * Pads a `String` to have an even length
             * @param {String} value
             * @return {String} output
             */
            function padToEven(value) {
                var a = value; // eslint-disable-line

                if (typeof a !== 'string') {
                    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
                }

                if (a.length % 2) {
                    a = '0' + a;
                }

                return a;
            }

            /**
             * Converts a `Number` into a hex `String`
             * @param {Number} i
             * @return {String}
             */
            function intToHex(i) {
                var hex = i.toString(16); // eslint-disable-line

                return '0x' + hex;
            }

            /**
             * Converts an `Number` to a `Buffer`
             * @param {Number} i
             * @return {Buffer}
             */
            function intToBuffer(i) {
                var hex = intToHex(i);

                return new Buffer(padToEven(hex.slice(2)), 'hex');
            }

            /**
             * Get the binary size of a string
             * @param {String} str
             * @return {Number}
             */
            function getBinarySize(str) {
                if (typeof str !== 'string') {
                    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
                }

                return Buffer.byteLength(str, 'utf8');
            }

            /**
             * Returns TRUE if the first specified array contains all elements
             * from the second one. FALSE otherwise.
             *
             * @param {array} superset
             * @param {array} subset
             *
             * @returns {boolean}
             */
            function arrayContainsArray(superset, subset, some) {
                if (Array.isArray(superset) !== true) {
                    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
                }
                if (Array.isArray(subset) !== true) {
                    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
                }

                return subset[Boolean(some) && 'some' || 'every'](function (value) {
                    return superset.indexOf(value) >= 0;
                });
            }

            /**
             * Should be called to get utf8 from it's hex representation
             *
             * @method toUtf8
             * @param {String} string in hex
             * @returns {String} ascii string representation of hex value
             */
            function toUtf8(hex) {
                var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

                return bufferValue.toString('utf8');
            }

            /**
             * Should be called to get ascii from it's hex representation
             *
             * @method toAscii
             * @param {String} string in hex
             * @returns {String} ascii string representation of hex value
             */
            function toAscii(hex) {
                var str = ''; // eslint-disable-line
                var i = 0,
                    l = hex.length; // eslint-disable-line

                if (hex.substring(0, 2) === '0x') {
                    i = 2;
                }

                for (; i < l; i += 2) {
                    var code = parseInt(hex.substr(i, 2), 16);
                    str += String.fromCharCode(code);
                }

                return str;
            }

            /**
             * Should be called to get hex representation (prefixed by 0x) of utf8 string
             *
             * @method fromUtf8
             * @param {String} string
             * @param {Number} optional padding
             * @returns {String} hex representation of input string
             */
            function fromUtf8(stringValue) {
                var str = new Buffer(stringValue, 'utf8');

                return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
            }

            /**
             * Should be called to get hex representation (prefixed by 0x) of ascii string
             *
             * @method fromAscii
             * @param {String} string
             * @param {Number} optional padding
             * @returns {String} hex representation of input string
             */
            function fromAscii(stringValue) {
                var hex = ''; // eslint-disable-line
                for (var i = 0; i < stringValue.length; i++) {
                    // eslint-disable-line
                    var code = stringValue.charCodeAt(i);
                    var n = code.toString(16);
                    hex += n.length < 2 ? '0' + n : n;
                }

                return '0x' + hex;
            }

            /**
             * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
             *
             * @method getKeys get specific key from inner object array of objects
             * @param {String} params
             * @param {String} key
             * @param {Boolean} allowEmpty
             * @returns {Array} output just a simple array of output keys
             */
            function getKeys(params, key, allowEmpty) {
                if (!Array.isArray(params)) {
                    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
                }
                if (typeof key !== 'string') {
                    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
                }

                var result = []; // eslint-disable-line

                for (var i = 0; i < params.length; i++) {
                    // eslint-disable-line
                    var value = params[i][key]; // eslint-disable-line
                    if (allowEmpty && !value) {
                        value = '';
                    } else if (typeof value !== 'string') {
                        throw new Error('invalid abi');
                    }
                    result.push(value);
                }

                return result;
            }

            /**
             * Is the string a hex string.
             *
             * @method check if string is hex string of specific length
             * @param {String} value
             * @param {Number} length
             * @returns {Boolean} output the string is a hex string
             */
            function isHexString(value, length) {
                if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                    return false;
                }

                if (length && value.length !== 2 + 2 * length) {
                    return false;
                }

                return true;
            }

            module.exports = {
                arrayContainsArray: arrayContainsArray,
                intToBuffer: intToBuffer,
                getBinarySize: getBinarySize,
                isHexPrefixed: isHexPrefixed,
                stripHexPrefix: stripHexPrefix,
                padToEven: padToEven,
                intToHex: intToHex,
                fromAscii: fromAscii,
                fromUtf8: fromUtf8,
                toAscii: toAscii,
                toUtf8: toUtf8,
                getKeys: getKeys,
                isHexString: isHexString
            };
        }).call(this, require("buffer").Buffer)
    }, {"buffer": 51, "is-hex-prefixed": 389, "strip-hex-prefix": 463}],
    374: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('readable-stream').Transform
        var inherits = require('inherits')

        function throwIfNotStringOrBuffer(val, prefix) {
            if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                throw new TypeError(prefix + ' must be a string or a buffer')
            }
        }

        function HashBase(blockSize) {
            Transform.call(this)

            this._block = Buffer.allocUnsafe(blockSize)
            this._blockSize = blockSize
            this._blockOffset = 0
            this._length = [0, 0, 0, 0]

            this._finalized = false
        }

        inherits(HashBase, Transform)

        HashBase.prototype._transform = function (chunk, encoding, callback) {
            var error = null
            try {
                this.update(chunk, encoding)
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype._flush = function (callback) {
            var error = null
            try {
                this.push(this.digest())
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype.update = function (data, encoding) {
            throwIfNotStringOrBuffer(data, 'Data')
            if (this._finalized) throw new Error('Digest already called')
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

            // consume data
            var block = this._block
            var offset = 0
            while (this._blockOffset + data.length - offset >= this._blockSize) {
                for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                this._update()
                this._blockOffset = 0
            }
            while (offset < data.length) block[this._blockOffset++] = data[offset++]

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                this._length[j] += carry
                carry = (this._length[j] / 0x0100000000) | 0
                if (carry > 0) this._length[j] -= 0x0100000000 * carry
            }

            return this
        }

        HashBase.prototype._update = function () {
            throw new Error('_update is not implemented')
        }

        HashBase.prototype.digest = function (encoding) {
            if (this._finalized) throw new Error('Digest already called')
            this._finalized = true

            var digest = this._digest()
            if (encoding !== undefined) digest = digest.toString(encoding)

            // reset state
            this._block.fill(0)
            this._blockOffset = 0
            for (var i = 0; i < 4; ++i) this._length[i] = 0

            return digest
        }

        HashBase.prototype._digest = function () {
            throw new Error('_digest is not implemented')
        }

        module.exports = HashBase

    }, {"inherits": 388, "readable-stream": 425, "safe-buffer": 428}],
    375: [function (require, module, exports) {
        arguments[4][89][0].apply(exports, arguments)
    }, {
        "./hash/common": 376,
        "./hash/hmac": 377,
        "./hash/ripemd": 378,
        "./hash/sha": 379,
        "./hash/utils": 386,
        "dup": 89
    }],
    376: [function (require, module, exports) {
        arguments[4][90][0].apply(exports, arguments)
    }, {"./utils": 386, "dup": 90, "minimalistic-assert": 409}],
    377: [function (require, module, exports) {
        arguments[4][91][0].apply(exports, arguments)
    }, {"./utils": 386, "dup": 91, "minimalistic-assert": 409}],
    378: [function (require, module, exports) {
        arguments[4][92][0].apply(exports, arguments)
    }, {"./common": 376, "./utils": 386, "dup": 92}],
    379: [function (require, module, exports) {
        arguments[4][93][0].apply(exports, arguments)
    }, {"./sha/1": 380, "./sha/224": 381, "./sha/256": 382, "./sha/384": 383, "./sha/512": 384, "dup": 93}],
    380: [function (require, module, exports) {
        arguments[4][94][0].apply(exports, arguments)
    }, {"../common": 376, "../utils": 386, "./common": 385, "dup": 94}],
    381: [function (require, module, exports) {
        arguments[4][95][0].apply(exports, arguments)
    }, {"../utils": 386, "./256": 382, "dup": 95}],
    382: [function (require, module, exports) {
        arguments[4][96][0].apply(exports, arguments)
    }, {"../common": 376, "../utils": 386, "./common": 385, "dup": 96, "minimalistic-assert": 409}],
    383: [function (require, module, exports) {
        arguments[4][97][0].apply(exports, arguments)
    }, {"../utils": 386, "./512": 384, "dup": 97}],
    384: [function (require, module, exports) {
        arguments[4][98][0].apply(exports, arguments)
    }, {"../common": 376, "../utils": 386, "dup": 98, "minimalistic-assert": 409}],
    385: [function (require, module, exports) {
        arguments[4][99][0].apply(exports, arguments)
    }, {"../utils": 386, "dup": 99}],
    386: [function (require, module, exports) {
        arguments[4][100][0].apply(exports, arguments)
    }, {"dup": 100, "inherits": 388, "minimalistic-assert": 409}],
    387: [function (require, module, exports) {
        arguments[4][101][0].apply(exports, arguments)
    }, {"dup": 101, "hash.js": 375, "minimalistic-assert": 409, "minimalistic-crypto-utils": 410}],
    388: [function (require, module, exports) {
        arguments[4][103][0].apply(exports, arguments)
    }, {"dup": 103}],
    389: [function (require, module, exports) {
        /**
         * Returns a `Boolean` on whether or not the a `String` starts with '0x'
         * @param {String} str the string input value
         * @return {Boolean} a boolean if it is or is not hex prefixed
         * @throws if the str input is not a string
         */
        module.exports = function isHexPrefixed(str) {
            if (typeof str !== 'string') {
                throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
            }

            return str.slice(0, 2) === '0x';
        }

    }, {}],
    390: [function (require, module, exports) {
        (function (process, global) {
            /**
             * [js-sha3]{@link https://github.com/emn178/js-sha3}
             *
             * @version 0.5.7
             * @author Chen, Yi-Cyuan [emn178@gmail.com]
             * @copyright Chen, Yi-Cyuan 2015-2016
             * @license MIT
             */
            /*jslint bitwise: true */
            (function () {
                'use strict';

                var root = typeof window === 'object' ? window : {};
                var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
                if (NODE_JS) {
                    root = global;
                }
                var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
                var HEX_CHARS = '0123456789abcdef'.split('');
                var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
                var KECCAK_PADDING = [1, 256, 65536, 16777216];
                var PADDING = [6, 1536, 393216, 100663296];
                var SHIFT = [0, 8, 16, 24];
                var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
                var BITS = [224, 256, 384, 512];
                var SHAKE_BITS = [128, 256];
                var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

                var createOutputMethod = function (bits, padding, outputType) {
                    return function (message) {
                        return new Keccak(bits, padding, bits).update(message)[outputType]();
                    };
                };

                var createShakeOutputMethod = function (bits, padding, outputType) {
                    return function (message, outputBits) {
                        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
                    };
                };

                var createMethod = function (bits, padding) {
                    var method = createOutputMethod(bits, padding, 'hex');
                    method.create = function () {
                        return new Keccak(bits, padding, bits);
                    };
                    method.update = function (message) {
                        return method.create().update(message);
                    };
                    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                        var type = OUTPUT_TYPES[i];
                        method[type] = createOutputMethod(bits, padding, type);
                    }
                    return method;
                };

                var createShakeMethod = function (bits, padding) {
                    var method = createShakeOutputMethod(bits, padding, 'hex');
                    method.create = function (outputBits) {
                        return new Keccak(bits, padding, outputBits);
                    };
                    method.update = function (message, outputBits) {
                        return method.create(outputBits).update(message);
                    };
                    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                        var type = OUTPUT_TYPES[i];
                        method[type] = createShakeOutputMethod(bits, padding, type);
                    }
                    return method;
                };

                var algorithms = [
                    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
                    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
                    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
                ];

                var methods = {}, methodNames = [];

                for (var i = 0; i < algorithms.length; ++i) {
                    var algorithm = algorithms[i];
                    var bits = algorithm.bits;
                    for (var j = 0; j < bits.length; ++j) {
                        var methodName = algorithm.name + '_' + bits[j];
                        methodNames.push(methodName);
                        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
                    }
                }

                function Keccak(bits, padding, outputBits) {
                    this.blocks = [];
                    this.s = [];
                    this.padding = padding;
                    this.outputBits = outputBits;
                    this.reset = true;
                    this.block = 0;
                    this.start = 0;
                    this.blockCount = (1600 - (bits << 1)) >> 5;
                    this.byteCount = this.blockCount << 2;
                    this.outputBlocks = outputBits >> 5;
                    this.extraBytes = (outputBits & 31) >> 3;

                    for (var i = 0; i < 50; ++i) {
                        this.s[i] = 0;
                    }
                }

                Keccak.prototype.update = function (message) {
                    var notString = typeof message !== 'string';
                    if (notString && message.constructor === ArrayBuffer) {
                        message = new Uint8Array(message);
                    }
                    var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
                        blockCount = this.blockCount, index = 0, s = this.s, i, code;

                    while (index < length) {
                        if (this.reset) {
                            this.reset = false;
                            blocks[0] = this.block;
                            for (i = 1; i < blockCount + 1; ++i) {
                                blocks[i] = 0;
                            }
                        }
                        if (notString) {
                            for (i = this.start; index < length && i < byteCount; ++index) {
                                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                            }
                        } else {
                            for (i = this.start; index < length && i < byteCount; ++index) {
                                code = message.charCodeAt(index);
                                if (code < 0x80) {
                                    blocks[i >> 2] |= code << SHIFT[i++ & 3];
                                } else if (code < 0x800) {
                                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                } else if (code < 0xd800 || code >= 0xe000) {
                                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                } else {
                                    code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                }
                            }
                        }
                        this.lastByteIndex = i;
                        if (i >= byteCount) {
                            this.start = i - byteCount;
                            this.block = blocks[blockCount];
                            for (i = 0; i < blockCount; ++i) {
                                s[i] ^= blocks[i];
                            }
                            f(s);
                            this.reset = true;
                        } else {
                            this.start = i;
                        }
                    }
                    return this;
                };

                Keccak.prototype.finalize = function () {
                    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
                    blocks[i >> 2] |= this.padding[i & 3];
                    if (this.lastByteIndex === this.byteCount) {
                        blocks[0] = blocks[blockCount];
                        for (i = 1; i < blockCount + 1; ++i) {
                            blocks[i] = 0;
                        }
                    }
                    blocks[blockCount - 1] |= 0x80000000;
                    for (i = 0; i < blockCount; ++i) {
                        s[i] ^= blocks[i];
                    }
                    f(s);
                };

                Keccak.prototype.toString = Keccak.prototype.hex = function () {
                    this.finalize();

                    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                        extraBytes = this.extraBytes, i = 0, j = 0;
                    var hex = '', block;
                    while (j < outputBlocks) {
                        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                            block = s[i];
                            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                                HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                                HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                                HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
                        }
                        if (j % blockCount === 0) {
                            f(s);
                            i = 0;
                        }
                    }
                    if (extraBytes) {
                        block = s[i];
                        if (extraBytes > 0) {
                            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
                        }
                        if (extraBytes > 1) {
                            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
                        }
                        if (extraBytes > 2) {
                            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
                        }
                    }
                    return hex;
                };

                Keccak.prototype.arrayBuffer = function () {
                    this.finalize();

                    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                        extraBytes = this.extraBytes, i = 0, j = 0;
                    var bytes = this.outputBits >> 3;
                    var buffer;
                    if (extraBytes) {
                        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
                    } else {
                        buffer = new ArrayBuffer(bytes);
                    }
                    var array = new Uint32Array(buffer);
                    while (j < outputBlocks) {
                        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                            array[j] = s[i];
                        }
                        if (j % blockCount === 0) {
                            f(s);
                        }
                    }
                    if (extraBytes) {
                        array[i] = s[i];
                        buffer = buffer.slice(0, bytes);
                    }
                    return buffer;
                };

                Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

                Keccak.prototype.digest = Keccak.prototype.array = function () {
                    this.finalize();

                    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                        extraBytes = this.extraBytes, i = 0, j = 0;
                    var array = [], offset, block;
                    while (j < outputBlocks) {
                        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                            offset = j << 2;
                            block = s[i];
                            array[offset] = block & 0xFF;
                            array[offset + 1] = (block >> 8) & 0xFF;
                            array[offset + 2] = (block >> 16) & 0xFF;
                            array[offset + 3] = (block >> 24) & 0xFF;
                        }
                        if (j % blockCount === 0) {
                            f(s);
                        }
                    }
                    if (extraBytes) {
                        offset = j << 2;
                        block = s[i];
                        if (extraBytes > 0) {
                            array[offset] = block & 0xFF;
                        }
                        if (extraBytes > 1) {
                            array[offset + 1] = (block >> 8) & 0xFF;
                        }
                        if (extraBytes > 2) {
                            array[offset + 2] = (block >> 16) & 0xFF;
                        }
                    }
                    return array;
                };

                var f = function (s) {
                    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
                        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
                        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
                        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
                    for (n = 0; n < 48; n += 2) {
                        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

                        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
                        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
                        s[0] ^= h;
                        s[1] ^= l;
                        s[10] ^= h;
                        s[11] ^= l;
                        s[20] ^= h;
                        s[21] ^= l;
                        s[30] ^= h;
                        s[31] ^= l;
                        s[40] ^= h;
                        s[41] ^= l;
                        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
                        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
                        s[2] ^= h;
                        s[3] ^= l;
                        s[12] ^= h;
                        s[13] ^= l;
                        s[22] ^= h;
                        s[23] ^= l;
                        s[32] ^= h;
                        s[33] ^= l;
                        s[42] ^= h;
                        s[43] ^= l;
                        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
                        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
                        s[4] ^= h;
                        s[5] ^= l;
                        s[14] ^= h;
                        s[15] ^= l;
                        s[24] ^= h;
                        s[25] ^= l;
                        s[34] ^= h;
                        s[35] ^= l;
                        s[44] ^= h;
                        s[45] ^= l;
                        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
                        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
                        s[6] ^= h;
                        s[7] ^= l;
                        s[16] ^= h;
                        s[17] ^= l;
                        s[26] ^= h;
                        s[27] ^= l;
                        s[36] ^= h;
                        s[37] ^= l;
                        s[46] ^= h;
                        s[47] ^= l;
                        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
                        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
                        s[8] ^= h;
                        s[9] ^= l;
                        s[18] ^= h;
                        s[19] ^= l;
                        s[28] ^= h;
                        s[29] ^= l;
                        s[38] ^= h;
                        s[39] ^= l;
                        s[48] ^= h;
                        s[49] ^= l;

                        b0 = s[0];
                        b1 = s[1];
                        b32 = (s[11] << 4) | (s[10] >>> 28);
                        b33 = (s[10] << 4) | (s[11] >>> 28);
                        b14 = (s[20] << 3) | (s[21] >>> 29);
                        b15 = (s[21] << 3) | (s[20] >>> 29);
                        b46 = (s[31] << 9) | (s[30] >>> 23);
                        b47 = (s[30] << 9) | (s[31] >>> 23);
                        b28 = (s[40] << 18) | (s[41] >>> 14);
                        b29 = (s[41] << 18) | (s[40] >>> 14);
                        b20 = (s[2] << 1) | (s[3] >>> 31);
                        b21 = (s[3] << 1) | (s[2] >>> 31);
                        b2 = (s[13] << 12) | (s[12] >>> 20);
                        b3 = (s[12] << 12) | (s[13] >>> 20);
                        b34 = (s[22] << 10) | (s[23] >>> 22);
                        b35 = (s[23] << 10) | (s[22] >>> 22);
                        b16 = (s[33] << 13) | (s[32] >>> 19);
                        b17 = (s[32] << 13) | (s[33] >>> 19);
                        b48 = (s[42] << 2) | (s[43] >>> 30);
                        b49 = (s[43] << 2) | (s[42] >>> 30);
                        b40 = (s[5] << 30) | (s[4] >>> 2);
                        b41 = (s[4] << 30) | (s[5] >>> 2);
                        b22 = (s[14] << 6) | (s[15] >>> 26);
                        b23 = (s[15] << 6) | (s[14] >>> 26);
                        b4 = (s[25] << 11) | (s[24] >>> 21);
                        b5 = (s[24] << 11) | (s[25] >>> 21);
                        b36 = (s[34] << 15) | (s[35] >>> 17);
                        b37 = (s[35] << 15) | (s[34] >>> 17);
                        b18 = (s[45] << 29) | (s[44] >>> 3);
                        b19 = (s[44] << 29) | (s[45] >>> 3);
                        b10 = (s[6] << 28) | (s[7] >>> 4);
                        b11 = (s[7] << 28) | (s[6] >>> 4);
                        b42 = (s[17] << 23) | (s[16] >>> 9);
                        b43 = (s[16] << 23) | (s[17] >>> 9);
                        b24 = (s[26] << 25) | (s[27] >>> 7);
                        b25 = (s[27] << 25) | (s[26] >>> 7);
                        b6 = (s[36] << 21) | (s[37] >>> 11);
                        b7 = (s[37] << 21) | (s[36] >>> 11);
                        b38 = (s[47] << 24) | (s[46] >>> 8);
                        b39 = (s[46] << 24) | (s[47] >>> 8);
                        b30 = (s[8] << 27) | (s[9] >>> 5);
                        b31 = (s[9] << 27) | (s[8] >>> 5);
                        b12 = (s[18] << 20) | (s[19] >>> 12);
                        b13 = (s[19] << 20) | (s[18] >>> 12);
                        b44 = (s[29] << 7) | (s[28] >>> 25);
                        b45 = (s[28] << 7) | (s[29] >>> 25);
                        b26 = (s[38] << 8) | (s[39] >>> 24);
                        b27 = (s[39] << 8) | (s[38] >>> 24);
                        b8 = (s[48] << 14) | (s[49] >>> 18);
                        b9 = (s[49] << 14) | (s[48] >>> 18);

                        s[0] = b0 ^ (~b2 & b4);
                        s[1] = b1 ^ (~b3 & b5);
                        s[10] = b10 ^ (~b12 & b14);
                        s[11] = b11 ^ (~b13 & b15);
                        s[20] = b20 ^ (~b22 & b24);
                        s[21] = b21 ^ (~b23 & b25);
                        s[30] = b30 ^ (~b32 & b34);
                        s[31] = b31 ^ (~b33 & b35);
                        s[40] = b40 ^ (~b42 & b44);
                        s[41] = b41 ^ (~b43 & b45);
                        s[2] = b2 ^ (~b4 & b6);
                        s[3] = b3 ^ (~b5 & b7);
                        s[12] = b12 ^ (~b14 & b16);
                        s[13] = b13 ^ (~b15 & b17);
                        s[22] = b22 ^ (~b24 & b26);
                        s[23] = b23 ^ (~b25 & b27);
                        s[32] = b32 ^ (~b34 & b36);
                        s[33] = b33 ^ (~b35 & b37);
                        s[42] = b42 ^ (~b44 & b46);
                        s[43] = b43 ^ (~b45 & b47);
                        s[4] = b4 ^ (~b6 & b8);
                        s[5] = b5 ^ (~b7 & b9);
                        s[14] = b14 ^ (~b16 & b18);
                        s[15] = b15 ^ (~b17 & b19);
                        s[24] = b24 ^ (~b26 & b28);
                        s[25] = b25 ^ (~b27 & b29);
                        s[34] = b34 ^ (~b36 & b38);
                        s[35] = b35 ^ (~b37 & b39);
                        s[44] = b44 ^ (~b46 & b48);
                        s[45] = b45 ^ (~b47 & b49);
                        s[6] = b6 ^ (~b8 & b0);
                        s[7] = b7 ^ (~b9 & b1);
                        s[16] = b16 ^ (~b18 & b10);
                        s[17] = b17 ^ (~b19 & b11);
                        s[26] = b26 ^ (~b28 & b20);
                        s[27] = b27 ^ (~b29 & b21);
                        s[36] = b36 ^ (~b38 & b30);
                        s[37] = b37 ^ (~b39 & b31);
                        s[46] = b46 ^ (~b48 & b40);
                        s[47] = b47 ^ (~b49 & b41);
                        s[8] = b8 ^ (~b0 & b2);
                        s[9] = b9 ^ (~b1 & b3);
                        s[18] = b18 ^ (~b10 & b12);
                        s[19] = b19 ^ (~b11 & b13);
                        s[28] = b28 ^ (~b20 & b22);
                        s[29] = b29 ^ (~b21 & b23);
                        s[38] = b38 ^ (~b30 & b32);
                        s[39] = b39 ^ (~b31 & b33);
                        s[48] = b48 ^ (~b40 & b42);
                        s[49] = b49 ^ (~b41 & b43);

                        s[0] ^= RC[n];
                        s[1] ^= RC[n + 1];
                    }
                };

                if (COMMON_JS) {
                    module.exports = methods;
                } else {
                    for (var i = 0; i < methodNames.length; ++i) {
                        root[methodNames[i]] = methods[methodNames[i]];
                    }
                }
            })();

        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {"_process": 122}],
    391: [function (require, module, exports) {
        var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

        module.exports = function (obj, opts) {
            if (!opts) opts = {};
            if (typeof opts === 'function') opts = {cmp: opts};
            var space = opts.space || '';
            if (typeof space === 'number') space = Array(space + 1).join(' ');
            var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
            var replacer = opts.replacer || function (key, value) {
                return value;
            };

            var cmp = opts.cmp && (function (f) {
                return function (node) {
                    return function (a, b) {
                        var aobj = {key: a, value: node[a]};
                        var bobj = {key: b, value: node[b]};
                        return f(aobj, bobj);
                    };
                };
            })(opts.cmp);

            var seen = [];
            return (function stringify(parent, key, node, level) {
                var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
                var colonSeparator = space ? ': ' : ':';

                if (node && node.toJSON && typeof node.toJSON === 'function') {
                    node = node.toJSON();
                }

                node = replacer.call(parent, key, node);

                if (node === undefined) {
                    return;
                }
                if (typeof node !== 'object' || node === null) {
                    return json.stringify(node);
                }
                if (isArray(node)) {
                    var out = [];
                    for (var i = 0; i < node.length; i++) {
                        var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
                        out.push(indent + space + item);
                    }
                    return '[' + out.join(',') + indent + ']';
                } else {
                    if (seen.indexOf(node) !== -1) {
                        if (cycles) return json.stringify('__cycle__');
                        throw new TypeError('Converting circular structure to JSON');
                    } else seen.push(node);

                    var keys = objectKeys(node).sort(cmp && cmp(node));
                    var out = [];
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var value = stringify(node, key, node[key], level + 1);

                        if (!value) continue;

                        var keyValue = json.stringify(key)
                            + colonSeparator
                            + value;
                        ;
                        out.push(indent + space + keyValue);
                    }
                    seen.splice(seen.indexOf(node), 1);
                    return '{' + out.join(',') + indent + '}';
                }
            })({'': obj}, '', obj, 0);
        };

        var isArray = Array.isArray || function (x) {
            return {}.toString.call(x) === '[object Array]';
        };

        var objectKeys = Object.keys || function (obj) {
            var has = Object.prototype.hasOwnProperty || function () {
                return true
            };
            var keys = [];
            for (var key in obj) {
                if (has.call(obj, key)) keys.push(key);
            }
            return keys;
        };

    }, {"jsonify": 392}],
    392: [function (require, module, exports) {
        exports.parse = require('./lib/parse');
        exports.stringify = require('./lib/stringify');

    }, {"./lib/parse": 393, "./lib/stringify": 394}],
    393: [function (require, module, exports) {
        var at, // The index of the current character
            ch, // The current character
            escapee = {
                '"': '"',
                '\\': '\\',
                '/': '/',
                b: '\b',
                f: '\f',
                n: '\n',
                r: '\r',
                t: '\t'
            },
            text,

            error = function (m) {
                // Call error when something is wrong.
                throw {
                    name: 'SyntaxError',
                    message: m,
                    at: at,
                    text: text
                };
            },

            next = function (c) {
                // If a c parameter is provided, verify that it matches the current character.
                if (c && c !== ch) {
                    error("Expected '" + c + "' instead of '" + ch + "'");
                }

                // Get the next character. When there are no more characters,
                // return the empty string.

                ch = text.charAt(at);
                at += 1;
                return ch;
            },

            number = function () {
                // Parse a number value.
                var number,
                    string = '';

                if (ch === '-') {
                    string = '-';
                    next('-');
                }
                while (ch >= '0' && ch <= '9') {
                    string += ch;
                    next();
                }
                if (ch === '.') {
                    string += '.';
                    while (next() && ch >= '0' && ch <= '9') {
                        string += ch;
                    }
                }
                if (ch === 'e' || ch === 'E') {
                    string += ch;
                    next();
                    if (ch === '-' || ch === '+') {
                        string += ch;
                        next();
                    }
                    while (ch >= '0' && ch <= '9') {
                        string += ch;
                        next();
                    }
                }
                number = +string;
                if (!isFinite(number)) {
                    error("Bad number");
                } else {
                    return number;
                }
            },

            string = function () {
                // Parse a string value.
                var hex,
                    i,
                    string = '',
                    uffff;

                // When parsing for string values, we must look for " and \ characters.
                if (ch === '"') {
                    while (next()) {
                        if (ch === '"') {
                            next();
                            return string;
                        } else if (ch === '\\') {
                            next();
                            if (ch === 'u') {
                                uffff = 0;
                                for (i = 0; i < 4; i += 1) {
                                    hex = parseInt(next(), 16);
                                    if (!isFinite(hex)) {
                                        break;
                                    }
                                    uffff = uffff * 16 + hex;
                                }
                                string += String.fromCharCode(uffff);
                            } else if (typeof escapee[ch] === 'string') {
                                string += escapee[ch];
                            } else {
                                break;
                            }
                        } else {
                            string += ch;
                        }
                    }
                }
                error("Bad string");
            },

            white = function () {

// Skip whitespace.

                while (ch && ch <= ' ') {
                    next();
                }
            },

            word = function () {

// true, false, or null.

                switch (ch) {
                    case 't':
                        next('t');
                        next('r');
                        next('u');
                        next('e');
                        return true;
                    case 'f':
                        next('f');
                        next('a');
                        next('l');
                        next('s');
                        next('e');
                        return false;
                    case 'n':
                        next('n');
                        next('u');
                        next('l');
                        next('l');
                        return null;
                }
                error("Unexpected '" + ch + "'");
            },

            value,  // Place holder for the value function.

            array = function () {

// Parse an array value.

                var array = [];

                if (ch === '[') {
                    next('[');
                    white();
                    if (ch === ']') {
                        next(']');
                        return array;   // empty array
                    }
                    while (ch) {
                        array.push(value());
                        white();
                        if (ch === ']') {
                            next(']');
                            return array;
                        }
                        next(',');
                        white();
                    }
                }
                error("Bad array");
            },

            object = function () {

// Parse an object value.

                var key,
                    object = {};

                if (ch === '{') {
                    next('{');
                    white();
                    if (ch === '}') {
                        next('}');
                        return object;   // empty object
                    }
                    while (ch) {
                        key = string();
                        white();
                        next(':');
                        if (Object.hasOwnProperty.call(object, key)) {
                            error('Duplicate key "' + key + '"');
                        }
                        object[key] = value();
                        white();
                        if (ch === '}') {
                            next('}');
                            return object;
                        }
                        next(',');
                        white();
                    }
                }
                error("Bad object");
            };

        value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

            white();
            switch (ch) {
                case '{':
                    return object();
                case '[':
                    return array();
                case '"':
                    return string();
                case '-':
                    return number();
                default:
                    return ch >= '0' && ch <= '9' ? number() : word();
            }
        };

// Return the json_parse function. It will have access to all of the above
// functions and variables.

        module.exports = function (source, reviver) {
            var result;

            text = source;
            at = 0;
            ch = ' ';
            result = value();
            white();
            if (ch) {
                error("Syntax error");
            }

            // If there is a reviver function, we recursively walk the new structure,
            // passing each name/value pair to the reviver function for possible
            // transformation, starting with a temporary root object that holds the result
            // in an empty key. If there is not a reviver function, we simply return the
            // result.

            return typeof reviver === 'function' ? (function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }({'': result}, '')) : result;
        };

    }, {}],
    394: [function (require, module, exports) {
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap,
            indent,
            meta = {    // table of character substitutions
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            },
            rep;

        function quote(string) {
            // If the string contains no control characters, no quote characters, and no
            // backslash characters, then we can safely slap some quotes around it.
            // Otherwise we must also replace the offending characters with safe escape
            // sequences.

            escapable.lastIndex = 0;
            return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c :
                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' : '"' + string + '"';
        }

        function str(key, holder) {
            // Produce a string from holder[key].
            var i,          // The loop counter.
                k,          // The member key.
                v,          // The member value.
                length,
                mind = gap,
                partial,
                value = holder[key];

            // If the value has a toJSON method, call it to obtain a replacement value.
            if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
                value = value.toJSON(key);
            }

            // If we were called with a replacer function, then call the replacer to
            // obtain a replacement value.
            if (typeof rep === 'function') {
                value = rep.call(holder, key, value);
            }

            // What happens next depends on the value's type.
            switch (typeof value) {
                case 'string':
                    return quote(value);

                case 'number':
                    // JSON numbers must be finite. Encode non-finite numbers as null.
                    return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                case 'null':
                    // If the value is a boolean or null, convert it to a string. Note:
                    // typeof null does not produce 'null'. The case is included here in
                    // the remote chance that this gets fixed someday.
                    return String(value);

                case 'object':
                    if (!value) return 'null';
                    gap += indent;
                    partial = [];

                    // Array.isArray
                    if (Object.prototype.toString.apply(value) === '[object Array]') {
                        length = value.length;
                        for (i = 0; i < length; i += 1) {
                            partial[i] = str(i, value) || 'null';
                        }

                        // Join all of the elements together, separated with commas, and
                        // wrap them in brackets.
                        v = partial.length === 0 ? '[]' : gap ?
                            '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                            '[' + partial.join(',') + ']';
                        gap = mind;
                        return v;
                    }

                    // If the replacer is an array, use it to select the members to be
                    // stringified.
                    if (rep && typeof rep === 'object') {
                        length = rep.length;
                        for (i = 0; i < length; i += 1) {
                            k = rep[i];
                            if (typeof k === 'string') {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                                }
                            }
                        }
                    } else {
                        // Otherwise, iterate through all of the keys in the object.
                        for (k in value) {
                            if (Object.prototype.hasOwnProperty.call(value, k)) {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                                }
                            }
                        }
                    }

                    // Join all of the member texts together, separated with commas,
                    // and wrap them in braces.

                    v = partial.length === 0 ? '{}' : gap ?
                        '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
                        '{' + partial.join(',') + '}';
                    gap = mind;
                    return v;
            }
        }

        module.exports = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';

            // If the space parameter is a number, make an indent string containing that
            // many spaces.
            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            }
            // If the space parameter is a string, it will be used as the indent string.
            else if (typeof space === 'string') {
                indent = space;
            }

            // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.
            rep = replacer;
            if (replacer && typeof replacer !== 'function'
                && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.
            return str('', {'': value});
        };

    }, {}],
    395: [function (require, module, exports) {
        'use strict'
        module.exports = require('./lib/api')(require('./lib/keccak'))

    }, {"./lib/api": 396, "./lib/keccak": 400}],
    396: [function (require, module, exports) {
        'use strict'
        const createKeccak = require('./keccak')
        const createShake = require('./shake')

        module.exports = function (KeccakState) {
            const Keccak = createKeccak(KeccakState)
            const Shake = createShake(KeccakState)

            return function (algorithm, options) {
                const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
                switch (hash) {
                    case 'keccak224':
                        return new Keccak(1152, 448, null, 224, options)
                    case 'keccak256':
                        return new Keccak(1088, 512, null, 256, options)
                    case 'keccak384':
                        return new Keccak(832, 768, null, 384, options)
                    case 'keccak512':
                        return new Keccak(576, 1024, null, 512, options)

                    case 'sha3-224':
                        return new Keccak(1152, 448, 0x06, 224, options)
                    case 'sha3-256':
                        return new Keccak(1088, 512, 0x06, 256, options)
                    case 'sha3-384':
                        return new Keccak(832, 768, 0x06, 384, options)
                    case 'sha3-512':
                        return new Keccak(576, 1024, 0x06, 512, options)

                    case 'shake128':
                        return new Shake(1344, 256, 0x1f, options)
                    case 'shake256':
                        return new Shake(1088, 512, 0x1f, options)

                    default:
                        throw new Error('Invald algorithm: ' + algorithm)
                }
            }
        }

    }, {"./keccak": 397, "./shake": 398}],
    397: [function (require, module, exports) {
        'use strict'
        const Buffer = require('safe-buffer').Buffer
        const Transform = require('stream').Transform
        const inherits = require('inherits')

        module.exports = function (KeccakState) {
            function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
                Transform.call(this, options)

                this._rate = rate
                this._capacity = capacity
                this._delimitedSuffix = delimitedSuffix
                this._hashBitLength = hashBitLength
                this._options = options

                this._state = new KeccakState()
                this._state.initialize(rate, capacity)
                this._finalized = false
            }

            inherits(Keccak, Transform)

            Keccak.prototype._transform = function (chunk, encoding, callback) {
                let error = null
                try {
                    this.update(chunk, encoding)
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Keccak.prototype._flush = function (callback) {
                let error = null
                try {
                    this.push(this.digest())
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Keccak.prototype.update = function (data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
                if (this._finalized) throw new Error('Digest already called')
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

                this._state.absorb(data)

                return this
            }

            Keccak.prototype.digest = function (encoding) {
                if (this._finalized) throw new Error('Digest already called')
                this._finalized = true

                if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
                let digest = this._state.squeeze(this._hashBitLength / 8)
                if (encoding !== undefined) digest = digest.toString(encoding)

                this._resetState()

                return digest
            }

            // remove result from memory
            Keccak.prototype._resetState = function () {
                this._state.initialize(this._rate, this._capacity)
                return this
            }

            // because sometimes we need hash right now and little later
            Keccak.prototype._clone = function () {
                const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
                this._state.copy(clone._state)
                clone._finalized = this._finalized

                return clone
            }

            return Keccak
        }

    }, {"inherits": 388, "safe-buffer": 428, "stream": 156}],
    398: [function (require, module, exports) {
        'use strict'
        const Buffer = require('safe-buffer').Buffer
        const Transform = require('stream').Transform
        const inherits = require('inherits')

        module.exports = function (KeccakState) {
            function Shake(rate, capacity, delimitedSuffix, options) {
                Transform.call(this, options)

                this._rate = rate
                this._capacity = capacity
                this._delimitedSuffix = delimitedSuffix
                this._options = options

                this._state = new KeccakState()
                this._state.initialize(rate, capacity)
                this._finalized = false
            }

            inherits(Shake, Transform)

            Shake.prototype._transform = function (chunk, encoding, callback) {
                let error = null
                try {
                    this.update(chunk, encoding)
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Shake.prototype._flush = function () {
            }

            Shake.prototype._read = function (size) {
                this.push(this.squeeze(size))
            }

            Shake.prototype.update = function (data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
                if (this._finalized) throw new Error('Squeeze already called')
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

                this._state.absorb(data)

                return this
            }

            Shake.prototype.squeeze = function (dataByteLength, encoding) {
                if (!this._finalized) {
                    this._finalized = true
                    this._state.absorbLastFewBits(this._delimitedSuffix)
                }

                let data = this._state.squeeze(dataByteLength)
                if (encoding !== undefined) data = data.toString(encoding)

                return data
            }

            Shake.prototype._resetState = function () {
                this._state.initialize(this._rate, this._capacity)
                return this
            }

            Shake.prototype._clone = function () {
                const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
                this._state.copy(clone._state)
                clone._finalized = this._finalized

                return clone
            }

            return Shake
        }

    }, {"inherits": 388, "safe-buffer": 428, "stream": 156}],
    399: [function (require, module, exports) {
        'use strict'
        const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

        exports.p1600 = function (s) {
            for (let round = 0; round < 24; ++round) {
                // theta
                const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
                const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
                const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
                const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
                const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
                const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
                const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
                const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
                const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
                const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

                let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
                let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
                const t1slo0 = s[0] ^ lo
                const t1shi0 = s[1] ^ hi
                const t1slo5 = s[10] ^ lo
                const t1shi5 = s[11] ^ hi
                const t1slo10 = s[20] ^ lo
                const t1shi10 = s[21] ^ hi
                const t1slo15 = s[30] ^ lo
                const t1shi15 = s[31] ^ hi
                const t1slo20 = s[40] ^ lo
                const t1shi20 = s[41] ^ hi
                lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
                hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
                const t1slo1 = s[2] ^ lo
                const t1shi1 = s[3] ^ hi
                const t1slo6 = s[12] ^ lo
                const t1shi6 = s[13] ^ hi
                const t1slo11 = s[22] ^ lo
                const t1shi11 = s[23] ^ hi
                const t1slo16 = s[32] ^ lo
                const t1shi16 = s[33] ^ hi
                const t1slo21 = s[42] ^ lo
                const t1shi21 = s[43] ^ hi
                lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
                hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
                const t1slo2 = s[4] ^ lo
                const t1shi2 = s[5] ^ hi
                const t1slo7 = s[14] ^ lo
                const t1shi7 = s[15] ^ hi
                const t1slo12 = s[24] ^ lo
                const t1shi12 = s[25] ^ hi
                const t1slo17 = s[34] ^ lo
                const t1shi17 = s[35] ^ hi
                const t1slo22 = s[44] ^ lo
                const t1shi22 = s[45] ^ hi
                lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
                hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
                const t1slo3 = s[6] ^ lo
                const t1shi3 = s[7] ^ hi
                const t1slo8 = s[16] ^ lo
                const t1shi8 = s[17] ^ hi
                const t1slo13 = s[26] ^ lo
                const t1shi13 = s[27] ^ hi
                const t1slo18 = s[36] ^ lo
                const t1shi18 = s[37] ^ hi
                const t1slo23 = s[46] ^ lo
                const t1shi23 = s[47] ^ hi
                lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
                hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
                const t1slo4 = s[8] ^ lo
                const t1shi4 = s[9] ^ hi
                const t1slo9 = s[18] ^ lo
                const t1shi9 = s[19] ^ hi
                const t1slo14 = s[28] ^ lo
                const t1shi14 = s[29] ^ hi
                const t1slo19 = s[38] ^ lo
                const t1shi19 = s[39] ^ hi
                const t1slo24 = s[48] ^ lo
                const t1shi24 = s[49] ^ hi

                // rho & pi
                const t2slo0 = t1slo0
                const t2shi0 = t1shi0
                const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
                const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
                const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
                const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
                const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
                const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
                const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
                const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
                const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
                const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
                const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
                const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
                const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
                const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
                const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
                const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
                const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
                const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
                const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
                const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
                const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
                const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
                const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
                const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
                const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
                const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
                const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
                const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
                const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
                const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
                const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
                const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
                const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
                const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
                const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
                const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
                const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
                const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
                const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
                const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
                const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
                const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
                const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
                const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
                const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
                const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
                const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
                const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

                // chi
                s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
                s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
                s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
                s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
                s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
                s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
                s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
                s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
                s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
                s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
                s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
                s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
                s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
                s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
                s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
                s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
                s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
                s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
                s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
                s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
                s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
                s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
                s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
                s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
                s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
                s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
                s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
                s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
                s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
                s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
                s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
                s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
                s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
                s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
                s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
                s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
                s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
                s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
                s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
                s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
                s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
                s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
                s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
                s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
                s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
                s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
                s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
                s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
                s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
                s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

                // iota
                s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
                s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
            }
        }

    }, {}],
    400: [function (require, module, exports) {
        'use strict'
        const Buffer = require('safe-buffer').Buffer
        const keccakState = require('./keccak-state-unroll')

        function Keccak() {
            // much faster than `new Array(50)`
            this.state = [
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0
            ]

            this.blockSize = null
            this.count = 0
            this.squeezing = false
        }

        Keccak.prototype.initialize = function (rate, capacity) {
            for (let i = 0; i < 50; ++i) this.state[i] = 0
            this.blockSize = rate / 8
            this.count = 0
            this.squeezing = false
        }

        Keccak.prototype.absorb = function (data) {
            for (let i = 0; i < data.length; ++i) {
                this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
                this.count += 1
                if (this.count === this.blockSize) {
                    keccakState.p1600(this.state)
                    this.count = 0
                }
            }
        }

        Keccak.prototype.absorbLastFewBits = function (bits) {
            this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
            if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
            this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
            keccakState.p1600(this.state)
            this.count = 0
            this.squeezing = true
        }

        Keccak.prototype.squeeze = function (length) {
            if (!this.squeezing) this.absorbLastFewBits(0x01)

            const output = Buffer.alloc(length)
            for (var i = 0; i < length; ++i) {
                output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
                this.count += 1
                if (this.count === this.blockSize) {
                    keccakState.p1600(this.state)
                    this.count = 0
                }
            }

            return output
        }

        Keccak.prototype.copy = function (dest) {
            for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
            dest.blockSize = this.blockSize
            dest.count = this.count
            dest.squeezing = this.squeezing
        }

        module.exports = Keccak

    }, {"./keccak-state-unroll": 399, "safe-buffer": 428}],
    401: [function (require, module, exports) {
        (function (Buffer) {
            'use strict';

            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };

            var createKeccakHash = require('keccak');
            var BN = require('bn.js');

            module.exports = function (a) {
                a = toBuffer(a);

                return createKeccakHash('keccak256').update(a).digest();
            };

            function toBuffer(v) {
                if (!Buffer.isBuffer(v)) {
                    if (Array.isArray(v)) {
                        v = Buffer.from(v);
                    } else if (typeof v === 'string') {
                        if (isHexString(v)) {
                            v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
                        } else {
                            v = Buffer.from(v);
                        }
                    } else if (typeof v === 'number') {
                        v = intToBuffer(v);
                    } else if (v === null || v === undefined) {
                        v = Buffer.allocUnsafe(0);
                    } else if (BN.isBN(v)) {
                        v = v.toArrayLike(Buffer);
                    } else if (v.toArray) {
                        // converts a BN to a Buffer
                        v = Buffer.from(v.toArray());
                    } else {
                        throw new Error('invalid type');
                    }
                }
                return v;
            }

            function isHexString(value, length) {
                if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                    return false;
                }

                if (length && value.length !== 2 + 2 * length) {
                    return false;
                }

                return true;
            }

            function padToEven(value) {
                var a = value; // eslint-disable-line

                if (typeof a !== 'string') {
                    throw new Error('while padding to even, value must be string, is currently ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + ', while padToEven.');
                }

                if (a.length % 2) {
                    a = '0' + a;
                }

                return a;
            }

            function stripHexPrefix(str) {
                if (typeof str !== 'string') {
                    return str;
                }

                return isHexPrefixed(str) ? str.slice(2) : str;
            }

            function isHexPrefixed(str) {
                if (typeof str !== 'string') {
                    throw new Error("value must be type 'string', is currently type " + (typeof str === 'undefined' ? 'undefined' : _typeof(str)) + ', while checking isHexPrefixed.');
                }

                return str.slice(0, 2) === '0x';
            }

            function intToBuffer(i) {
                var hex = intToHex(i);

                return Buffer.from(padToEven(hex.slice(2)), 'hex');
            }

            function intToHex(i) {
                var hex = i.toString(16); // eslint-disable-line

                return '0x' + hex;
            }
        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 195, "buffer": 51, "keccak": 402}],
    402: [function (require, module, exports) {
        arguments[4][395][0].apply(exports, arguments)
    }, {"./lib/api": 403, "./lib/keccak": 407, "dup": 395}],
    403: [function (require, module, exports) {
        'use strict'
        var createKeccak = require('./keccak')
        var createShake = require('./shake')

        module.exports = function (KeccakState) {
            var Keccak = createKeccak(KeccakState)
            var Shake = createShake(KeccakState)

            return function (algorithm, options) {
                var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
                switch (hash) {
                    case 'keccak224':
                        return new Keccak(1152, 448, null, 224, options)
                    case 'keccak256':
                        return new Keccak(1088, 512, null, 256, options)
                    case 'keccak384':
                        return new Keccak(832, 768, null, 384, options)
                    case 'keccak512':
                        return new Keccak(576, 1024, null, 512, options)

                    case 'sha3-224':
                        return new Keccak(1152, 448, 0x06, 224, options)
                    case 'sha3-256':
                        return new Keccak(1088, 512, 0x06, 256, options)
                    case 'sha3-384':
                        return new Keccak(832, 768, 0x06, 384, options)
                    case 'sha3-512':
                        return new Keccak(576, 1024, 0x06, 512, options)

                    case 'shake128':
                        return new Shake(1344, 256, 0x1f, options)
                    case 'shake256':
                        return new Shake(1088, 512, 0x1f, options)

                    default:
                        throw new Error('Invald algorithm: ' + algorithm)
                }
            }
        }

    }, {"./keccak": 404, "./shake": 405}],
    404: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var inherits = require('inherits')

        module.exports = function (KeccakState) {
            function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
                Transform.call(this, options)

                this._rate = rate
                this._capacity = capacity
                this._delimitedSuffix = delimitedSuffix
                this._hashBitLength = hashBitLength
                this._options = options

                this._state = new KeccakState()
                this._state.initialize(rate, capacity)
                this._finalized = false
            }

            inherits(Keccak, Transform)

            Keccak.prototype._transform = function (chunk, encoding, callback) {
                var error = null
                try {
                    this.update(chunk, encoding)
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Keccak.prototype._flush = function (callback) {
                var error = null
                try {
                    this.push(this.digest())
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Keccak.prototype.update = function (data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
                if (this._finalized) throw new Error('Digest already called')
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

                this._state.absorb(data)

                return this
            }

            Keccak.prototype.digest = function (encoding) {
                if (this._finalized) throw new Error('Digest already called')
                this._finalized = true

                if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
                var digest = this._state.squeeze(this._hashBitLength / 8)
                if (encoding !== undefined) digest = digest.toString(encoding)

                this._resetState()

                return digest
            }

            // remove result from memory
            Keccak.prototype._resetState = function () {
                this._state.initialize(this._rate, this._capacity)
                return this
            }

            // because sometimes we need hash right now and little later
            Keccak.prototype._clone = function () {
                var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
                this._state.copy(clone._state)
                clone._finalized = this._finalized

                return clone
            }

            return Keccak
        }

    }, {"inherits": 388, "safe-buffer": 428, "stream": 156}],
    405: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var inherits = require('inherits')

        module.exports = function (KeccakState) {
            function Shake(rate, capacity, delimitedSuffix, options) {
                Transform.call(this, options)

                this._rate = rate
                this._capacity = capacity
                this._delimitedSuffix = delimitedSuffix
                this._options = options

                this._state = new KeccakState()
                this._state.initialize(rate, capacity)
                this._finalized = false
            }

            inherits(Shake, Transform)

            Shake.prototype._transform = function (chunk, encoding, callback) {
                var error = null
                try {
                    this.update(chunk, encoding)
                } catch (err) {
                    error = err
                }

                callback(error)
            }

            Shake.prototype._flush = function () {
            }

            Shake.prototype._read = function (size) {
                this.push(this.squeeze(size))
            }

            Shake.prototype.update = function (data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
                if (this._finalized) throw new Error('Squeeze already called')
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

                this._state.absorb(data)

                return this
            }

            Shake.prototype.squeeze = function (dataByteLength, encoding) {
                if (!this._finalized) {
                    this._finalized = true
                    this._state.absorbLastFewBits(this._delimitedSuffix)
                }

                var data = this._state.squeeze(dataByteLength)
                if (encoding !== undefined) data = data.toString(encoding)

                return data
            }

            Shake.prototype._resetState = function () {
                this._state.initialize(this._rate, this._capacity)
                return this
            }

            Shake.prototype._clone = function () {
                var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
                this._state.copy(clone._state)
                clone._finalized = this._finalized

                return clone
            }

            return Shake
        }

    }, {"inherits": 388, "safe-buffer": 428, "stream": 156}],
    406: [function (require, module, exports) {
        'use strict'
        var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]

        exports.p1600 = function (s) {
            for (var round = 0; round < 24; ++round) {
                // theta
                var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
                var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
                var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
                var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
                var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
                var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
                var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
                var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
                var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
                var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]

                var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
                var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
                var t1slo0 = s[0] ^ lo
                var t1shi0 = s[1] ^ hi
                var t1slo5 = s[10] ^ lo
                var t1shi5 = s[11] ^ hi
                var t1slo10 = s[20] ^ lo
                var t1shi10 = s[21] ^ hi
                var t1slo15 = s[30] ^ lo
                var t1shi15 = s[31] ^ hi
                var t1slo20 = s[40] ^ lo
                var t1shi20 = s[41] ^ hi
                lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
                hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
                var t1slo1 = s[2] ^ lo
                var t1shi1 = s[3] ^ hi
                var t1slo6 = s[12] ^ lo
                var t1shi6 = s[13] ^ hi
                var t1slo11 = s[22] ^ lo
                var t1shi11 = s[23] ^ hi
                var t1slo16 = s[32] ^ lo
                var t1shi16 = s[33] ^ hi
                var t1slo21 = s[42] ^ lo
                var t1shi21 = s[43] ^ hi
                lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
                hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
                var t1slo2 = s[4] ^ lo
                var t1shi2 = s[5] ^ hi
                var t1slo7 = s[14] ^ lo
                var t1shi7 = s[15] ^ hi
                var t1slo12 = s[24] ^ lo
                var t1shi12 = s[25] ^ hi
                var t1slo17 = s[34] ^ lo
                var t1shi17 = s[35] ^ hi
                var t1slo22 = s[44] ^ lo
                var t1shi22 = s[45] ^ hi
                lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
                hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
                var t1slo3 = s[6] ^ lo
                var t1shi3 = s[7] ^ hi
                var t1slo8 = s[16] ^ lo
                var t1shi8 = s[17] ^ hi
                var t1slo13 = s[26] ^ lo
                var t1shi13 = s[27] ^ hi
                var t1slo18 = s[36] ^ lo
                var t1shi18 = s[37] ^ hi
                var t1slo23 = s[46] ^ lo
                var t1shi23 = s[47] ^ hi
                lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
                hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
                var t1slo4 = s[8] ^ lo
                var t1shi4 = s[9] ^ hi
                var t1slo9 = s[18] ^ lo
                var t1shi9 = s[19] ^ hi
                var t1slo14 = s[28] ^ lo
                var t1shi14 = s[29] ^ hi
                var t1slo19 = s[38] ^ lo
                var t1shi19 = s[39] ^ hi
                var t1slo24 = s[48] ^ lo
                var t1shi24 = s[49] ^ hi

                // rho & pi
                var t2slo0 = t1slo0
                var t2shi0 = t1shi0
                var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
                var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
                var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
                var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
                var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
                var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
                var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
                var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
                var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
                var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
                var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
                var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
                var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
                var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
                var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
                var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
                var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
                var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
                var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
                var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
                var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
                var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
                var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
                var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
                var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
                var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
                var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
                var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
                var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
                var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
                var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
                var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
                var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
                var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
                var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
                var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
                var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
                var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
                var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
                var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
                var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
                var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
                var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
                var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
                var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
                var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
                var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
                var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)

                // chi
                s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
                s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
                s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
                s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
                s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
                s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
                s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
                s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
                s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
                s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
                s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
                s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
                s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
                s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
                s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
                s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
                s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
                s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
                s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
                s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
                s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
                s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
                s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
                s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
                s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
                s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
                s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
                s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
                s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
                s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
                s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
                s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
                s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
                s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
                s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
                s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
                s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
                s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
                s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
                s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
                s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
                s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
                s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
                s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
                s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
                s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
                s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
                s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
                s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
                s[49] = t2shi24 ^ (~t2shi20 & t2shi21)

                // iota
                s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
                s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
            }
        }

    }, {}],
    407: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var keccakState = require('./keccak-state-unroll')

        function Keccak() {
            // much faster than `new Array(50)`
            this.state = [
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0
            ]

            this.blockSize = null
            this.count = 0
            this.squeezing = false
        }

        Keccak.prototype.initialize = function (rate, capacity) {
            for (var i = 0; i < 50; ++i) this.state[i] = 0
            this.blockSize = rate / 8
            this.count = 0
            this.squeezing = false
        }

        Keccak.prototype.absorb = function (data) {
            for (var i = 0; i < data.length; ++i) {
                this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
                this.count += 1
                if (this.count === this.blockSize) {
                    keccakState.p1600(this.state)
                    this.count = 0
                }
            }
        }

        Keccak.prototype.absorbLastFewBits = function (bits) {
            this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
            if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
            this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
            keccakState.p1600(this.state)
            this.count = 0
            this.squeezing = true
        }

        Keccak.prototype.squeeze = function (length) {
            if (!this.squeezing) this.absorbLastFewBits(0x01)

            var output = Buffer.alloc(length)
            for (var i = 0; i < length; ++i) {
                output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
                this.count += 1
                if (this.count === this.blockSize) {
                    keccakState.p1600(this.state)
                    this.count = 0
                }
            }

            return output
        }

        Keccak.prototype.copy = function (dest) {
            for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i]
            dest.blockSize = this.blockSize
            dest.count = this.count
            dest.squeezing = this.squeezing
        }

        module.exports = Keccak

    }, {"./keccak-state-unroll": 406, "safe-buffer": 428}],
    408: [function (require, module, exports) {
        arguments[4][106][0].apply(exports, arguments)
    }, {"dup": 106, "hash-base": 374, "inherits": 388, "safe-buffer": 428}],
    409: [function (require, module, exports) {
        arguments[4][108][0].apply(exports, arguments)
    }, {"dup": 108}],
    410: [function (require, module, exports) {
        arguments[4][109][0].apply(exports, arguments)
    }, {"dup": 109}],
    411: [function (require, module, exports) {
        'use strict';

        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }

        var codes = {};

        function createErrorType(code, message, Base) {
            if (!Base) {
                Base = Error;
            }

            function getMessage(arg1, arg2, arg3) {
                if (typeof message === 'string') {
                    return message;
                } else {
                    return message(arg1, arg2, arg3);
                }
            }

            var NodeError =
                /*#__PURE__*/
                function (_Base) {
                    _inheritsLoose(NodeError, _Base);

                    function NodeError(arg1, arg2, arg3) {
                        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                    }

                    return NodeError;
                }(Base);

            NodeError.prototype.name = Base.name;
            NodeError.prototype.code = code;
            codes[code] = NodeError;
        } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


        function oneOf(expected, thing) {
            if (Array.isArray(expected)) {
                var len = expected.length;
                expected = expected.map(function (i) {
                    return String(i);
                });

                if (len > 2) {
                    return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
                } else if (len === 2) {
                    return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                } else {
                    return "of ".concat(thing, " ").concat(expected[0]);
                }
            } else {
                return "of ".concat(thing, " ").concat(String(expected));
            }
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


        function startsWith(str, search, pos) {
            return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


        function endsWith(str, search, this_len) {
            if (this_len === undefined || this_len > str.length) {
                this_len = str.length;
            }

            return str.substring(this_len - search.length, this_len) === search;
        } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


        function includes(str, search, start) {
            if (typeof start !== 'number') {
                start = 0;
            }

            if (start + search.length > str.length) {
                return false;
            } else {
                return str.indexOf(search, start) !== -1;
            }
        }

        createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
            return 'The value "' + value + '" is invalid for option "' + name + '"';
        }, TypeError);
        createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
            // determiner: 'must be' or 'must not be'
            var determiner;

            if (typeof expected === 'string' && startsWith(expected, 'not ')) {
                determiner = 'must not be';
                expected = expected.replace(/^not /, '');
            } else {
                determiner = 'must be';
            }

            var msg;

            if (endsWith(name, ' argument')) {
                // For cases like 'first argument'
                msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
            } else {
                var type = includes(name, '.') ? 'property' : 'argument';
                msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
            }

            msg += ". Received type ".concat(typeof actual);
            return msg;
        }, TypeError);
        createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
        createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
            return 'The ' + name + ' method is not implemented';
        });
        createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
        createErrorType('ERR_STREAM_DESTROYED', function (name) {
            return 'Cannot call ' + name + ' after a stream was destroyed';
        });
        createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
        createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
        createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
        createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
        createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
            return 'Unknown encoding: ' + arg;
        }, TypeError);
        createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
        module.exports.codes = codes;

    }, {}],
    412: [function (require, module, exports) {
        (function (process) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
            'use strict';
            /*<replacement>*/

            var objectKeys = Object.keys || function (obj) {
                var keys = [];

                for (var key in obj) {
                    keys.push(key);
                }

                return keys;
            };
            /*</replacement>*/


            module.exports = Duplex;

            var Readable = require('./_stream_readable');

            var Writable = require('./_stream_writable');

            require('inherits')(Duplex, Readable);

            {
                // Allow the keys array to be GC'ed.
                var keys = objectKeys(Writable.prototype);

                for (var v = 0; v < keys.length; v++) {
                    var method = keys[v];
                    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                }
            }

            function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);
                Readable.call(this, options);
                Writable.call(this, options);
                this.allowHalfOpen = true;

                if (options) {
                    if (options.readable === false) this.readable = false;
                    if (options.writable === false) this.writable = false;

                    if (options.allowHalfOpen === false) {
                        this.allowHalfOpen = false;
                        this.once('end', onend);
                    }
                }
            }

            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState.highWaterMark;
                }
            });
            Object.defineProperty(Duplex.prototype, 'writableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState && this._writableState.getBuffer();
                }
            });
            Object.defineProperty(Duplex.prototype, 'writableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState.length;
                }
            }); // the no-half-open enforcer

            function onend() {
                // If the writable side ended, then we're ok.
                if (this._writableState.ended) return; // no more data can be written.
                // But allow more writes to happen in this tick.

                process.nextTick(onEndNT, this);
            }

            function onEndNT(self) {
                self.end();
            }

            Object.defineProperty(Duplex.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return false;
                    }

                    return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function set(value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return;
                    } // backward compatibility, the user is explicitly
                    // managing destroyed


                    this._readableState.destroyed = value;
                    this._writableState.destroyed = value;
                }
            });
        }).call(this, require('_process'))
    }, {"./_stream_readable": 414, "./_stream_writable": 416, "_process": 122, "inherits": 388}],
    413: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
        'use strict';

        module.exports = PassThrough;

        var Transform = require('./_stream_transform');

        require('inherits')(PassThrough, Transform);

        function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);
            Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
        };
    }, {"./_stream_transform": 415, "inherits": 388}],
    414: [function (require, module, exports) {
        (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
            'use strict';

            module.exports = Readable;
            /*<replacement>*/

            var Duplex;
            /*</replacement>*/

            Readable.ReadableState = ReadableState;
            /*<replacement>*/

            var EE = require('events').EventEmitter;

            var EElistenerCount = function EElistenerCount(emitter, type) {
                return emitter.listeners(type).length;
            };
            /*</replacement>*/

            /*<replacement>*/


            var Stream = require('./internal/streams/stream');
            /*</replacement>*/


            var Buffer = require('buffer').Buffer;

            var OurUint8Array = global.Uint8Array || function () {
            };

            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }

            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*<replacement>*/


            var debugUtil = require('util');

            var debug;

            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
            } else {
                debug = function debug() {
                };
            }
            /*</replacement>*/


            var BufferList = require('./internal/streams/buffer_list');

            var destroyImpl = require('./internal/streams/destroy');

            var _require = require('./internal/streams/state'),
                getHighWaterMark = _require.getHighWaterMark;

            var _require$codes = require('../errors').codes,
                ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
                ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
                ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
                ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;

            require('inherits')(Readable, Stream);

            var errorOrDestroy = destroyImpl.errorOrDestroy;
            var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

            function prependListener(emitter, event, fn) {
                // Sadly this is not cacheable as some libraries bundle their own
                // event emitter implementation with them.
                if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.

                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
            }

            function ReadableState(options, stream, isDuplex) {
                Duplex = Duplex || require('./_stream_duplex');
                options = options || {}; // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.

                if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
                // make all the buffer merging and length checks go away

                this.objectMode = !!options.objectMode;
                if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
                // Note: 0 is a valid value, means "don't call _read preemptively ever"

                this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
                // linked list can remove elements from the beginning faster than
                // array.shift()

                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
                // immediately, or on a later tick.  We set this to true at first, because
                // any actions that shouldn't happen until "later" should generally also
                // not happen before the first read call.

                this.sync = true; // whenever we return null, then we set a flag to say
                // that we're awaiting a 'readable' event emission.

                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.paused = true; // Should close be emitted on destroy. Defaults to true.

                this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

                this.autoDestroy = !!options.autoDestroy; // has it been destroyed

                this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.

                this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

                this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;

                if (options.encoding) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                }
            }

            function Readable(options) {
                Duplex = Duplex || require('./_stream_duplex');
                if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
                // the ReadableState constructor, at least with V8 6.5

                var isDuplex = this instanceof Duplex;
                this._readableState = new ReadableState(options, this, isDuplex); // legacy

                this.readable = true;

                if (options) {
                    if (typeof options.read === 'function') this._read = options.read;
                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                }

                Stream.call(this);
            }

            Object.defineProperty(Readable.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    if (this._readableState === undefined) {
                        return false;
                    }

                    return this._readableState.destroyed;
                },
                set: function set(value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._readableState) {
                        return;
                    } // backward compatibility, the user is explicitly
                    // managing destroyed


                    this._readableState.destroyed = value;
                }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;

            Readable.prototype._destroy = function (err, cb) {
                cb(err);
            }; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


            Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;

                if (!state.objectMode) {
                    if (typeof chunk === 'string') {
                        encoding = encoding || state.defaultEncoding;

                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = '';
                        }

                        skipChunkCheck = true;
                    }
                } else {
                    skipChunkCheck = true;
                }

                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            }; // Unshift should *always* be something directly out of read()


            Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
            };

            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                debug('readableAddChunk', chunk);
                var state = stream._readableState;

                if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

                    if (er) {
                        errorOrDestroy(stream, er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }

                        if (addToFront) {
                            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()); else addChunk(stream, state, chunk, true);
                        } else if (state.ended) {
                            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                        } else if (state.destroyed) {
                            return false;
                        } else {
                            state.reading = false;

                            if (state.decoder && !encoding) {
                                chunk = state.decoder.write(chunk);
                                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                            } else {
                                addChunk(stream, state, chunk, false);
                            }
                        }
                    } else if (!addToFront) {
                        state.reading = false;
                        maybeReadMore(stream, state);
                    }
                } // We can push more data if we are below the highWaterMark.
                // Also, if we have no data yet, we can stand some more bytes.
                // This is to work around cases where hwm=0, such as the repl.


                return !state.ended && (state.length < state.highWaterMark || state.length === 0);
            }

            function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                    state.awaitDrain = 0;
                    stream.emit('data', chunk);
                } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
                    if (state.needReadable) emitReadable(stream);
                }

                maybeReadMore(stream, state);
            }

            function chunkInvalid(state, chunk) {
                var er;

                if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
                }

                return er;
            }

            Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
            }; // backwards compatibility.


            Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                var decoder = new StringDecoder(enc);
                this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

                this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

                var p = this._readableState.buffer.head;
                var content = '';

                while (p !== null) {
                    content += decoder.write(p.data);
                    p = p.next;
                }

                this._readableState.buffer.clear();

                if (content !== '') this._readableState.buffer.push(content);
                this._readableState.length = content.length;
                return this;
            }; // Don't raise the hwm > 1GB


            var MAX_HWM = 0x40000000;

            function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
                    n = MAX_HWM;
                } else {
                    // Get the next highest power of 2 to prevent increasing hwm excessively in
                    // tiny amounts
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                }

                return n;
            } // This function is designed to be inlinable, so please take care when making
// changes to the function body.


            function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended) return 0;
                if (state.objectMode) return 1;

                if (n !== n) {
                    // Only flow one buffer at a time
                    if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                } // If we're asking for more than the current hwm, then raise the hwm.


                if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n; // Don't have enough

                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                }

                return state.length;
            } // you can override either this method, or the async _read(n) below.


            Readable.prototype.read = function (n) {
                debug('read', n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;
                if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
                // already have a bunch of data in the buffer, then just trigger
                // the 'readable' event and move on.

                if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                    debug('read: emitReadable', state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                    return null;
                }

                n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

                if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                } // All the actual chunk generation logic needs to be
                // *below* the call to _read.  The reason is that in certain
                // synthetic stream cases, such as passthrough streams, _read
                // may be a completely synchronous operation which may change
                // the state of the read buffer, providing enough data when
                // before there was *not* enough.
                //
                // So, the steps are:
                // 1. Figure out what the state of things will be after we do
                // a read from the buffer.
                //
                // 2. If that resulting state will trigger a _read, then call _read.
                // Note that this may be asynchronous, or synchronous.  Yes, it is
                // deeply ugly to write APIs this way, but that still doesn't mean
                // that the Readable class should behave improperly, as streams are
                // designed to be sync/async agnostic.
                // Take note if the _read call is sync or async (ie, if the read call
                // has returned yet), so that we know whether or not it's safe to emit
                // 'readable' etc.
                //
                // 3. Actually pull the requested chunks out of the buffer and return.
                // if we need a readable event, then we need to do some reading.


                var doRead = state.needReadable;
                debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

                if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug('length less than watermark', doRead);
                } // however, if we've ended, then there's no point, and if we're already
                // reading, then it's unnecessary.


                if (state.ended || state.reading) {
                    doRead = false;
                    debug('reading or ended', doRead);
                } else if (doRead) {
                    debug('do read');
                    state.reading = true;
                    state.sync = true; // if the length is currently zero, then we *need* a readable event.

                    if (state.length === 0) state.needReadable = true; // call internal read method

                    this._read(state.highWaterMark);

                    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                    // and we need to re-evaluate how much data we can return to the user.

                    if (!state.reading) n = howMuchToRead(nOrig, state);
                }

                var ret;
                if (n > 0) ret = fromList(n, state); else ret = null;

                if (ret === null) {
                    state.needReadable = state.length <= state.highWaterMark;
                    n = 0;
                } else {
                    state.length -= n;
                    state.awaitDrain = 0;
                }

                if (state.length === 0) {
                    // If we have nothing in the buffer, then we want to know
                    // as soon as we *do* get something into the buffer.
                    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

                    if (nOrig !== n && state.ended) endReadable(this);
                }

                if (ret !== null) this.emit('data', ret);
                return ret;
            };

            function onEofChunk(stream, state) {
                debug('onEofChunk');
                if (state.ended) return;

                if (state.decoder) {
                    var chunk = state.decoder.end();

                    if (chunk && chunk.length) {
                        state.buffer.push(chunk);
                        state.length += state.objectMode ? 1 : chunk.length;
                    }
                }

                state.ended = true;

                if (state.sync) {
                    // if we are sync, wait until next tick to emit the data.
                    // Otherwise we risk emitting data in the flow()
                    // the readable code triggers during a read() call
                    emitReadable(stream);
                } else {
                    // emit 'readable' now to make sure it gets picked up.
                    state.needReadable = false;

                    if (!state.emittedReadable) {
                        state.emittedReadable = true;
                        emitReadable_(stream);
                    }
                }
            } // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


            function emitReadable(stream) {
                var state = stream._readableState;
                debug('emitReadable', state.needReadable, state.emittedReadable);
                state.needReadable = false;

                if (!state.emittedReadable) {
                    debug('emitReadable', state.flowing);
                    state.emittedReadable = true;
                    process.nextTick(emitReadable_, stream);
                }
            }

            function emitReadable_(stream) {
                var state = stream._readableState;
                debug('emitReadable_', state.destroyed, state.length, state.ended);

                if (!state.destroyed && (state.length || state.ended)) {
                    stream.emit('readable');
                    state.emittedReadable = false;
                } // The stream needs another readable event if
                // 1. It is not flowing, as the flow mechanism will take
                //    care of it.
                // 2. It is not ended.
                // 3. It is below the highWaterMark, so we can schedule
                //    another readable later.


                state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
                flow(stream);
            } // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


            function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                    state.readingMore = true;
                    process.nextTick(maybeReadMore_, stream, state);
                }
            }

            function maybeReadMore_(stream, state) {
                // Attempt to read more data if we should.
                //
                // The conditions for reading more data are (one of):
                // - Not enough data buffered (state.length < state.highWaterMark). The loop
                //   is responsible for filling the buffer with enough data if such data
                //   is available. If highWaterMark is 0 and we are not in the flowing mode
                //   we should _not_ attempt to buffer any extra data. We'll get more data
                //   when the stream consumer calls read() instead.
                // - No data in the buffer, and the stream is in flowing mode. In this mode
                //   the loop below is responsible for ensuring read() is called. Failing to
                //   call read here would abort the flow and there's no other mechanism for
                //   continuing the flow if the stream consumer has just subscribed to the
                //   'data' event.
                //
                // In addition to the above conditions to keep reading data, the following
                // conditions prevent the data from being read:
                // - The stream has ended (state.ended).
                // - There is already a pending 'read' operation (state.reading). This is a
                //   case where the the stream has called the implementation defined _read()
                //   method, but they are processing the call asynchronously and have _not_
                //   called push() with new data. In this case we skip performing more
                //   read()s. The execution ends in this method again after the _read() ends
                //   up calling push() with more data.
                while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                    var len = state.length;
                    debug('maybeReadMore read 0');
                    stream.read(0);
                    if (len === state.length) // didn't get any data, stop spinning.
                        break;
                }

                state.readingMore = false;
            } // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


            Readable.prototype._read = function (n) {
                errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;

                switch (state.pipesCount) {
                    case 0:
                        state.pipes = dest;
                        break;

                    case 1:
                        state.pipes = [state.pipes, dest];
                        break;

                    default:
                        state.pipes.push(dest);
                        break;
                }

                state.pipesCount += 1;
                debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) process.nextTick(endFn); else src.once('end', endFn);
                dest.on('unpipe', onunpipe);

                function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe');

                    if (readable === src) {
                        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                            unpipeInfo.hasUnpiped = true;
                            cleanup();
                        }
                    }
                }

                function onend() {
                    debug('onend');
                    dest.end();
                } // when the dest drains, it reduces the awaitDrain counter
                // on the source.  This would be more elegant with a .once()
                // handler in flow(), but adding and removing repeatedly is
                // too slow.


                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);
                var cleanedUp = false;

                function cleanup() {
                    debug('cleanup'); // cleanup event handlers once the pipe is broken

                    dest.removeListener('close', onclose);
                    dest.removeListener('finish', onfinish);
                    dest.removeListener('drain', ondrain);
                    dest.removeListener('error', onerror);
                    dest.removeListener('unpipe', onunpipe);
                    src.removeListener('end', onend);
                    src.removeListener('end', unpipe);
                    src.removeListener('data', ondata);
                    cleanedUp = true; // if the reader is waiting for a drain event from this
                    // specific writer, then it would cause it to never start
                    // flowing again.
                    // So, if this is awaiting a drain, then we just call it now.
                    // If we don't know, then assume that we are waiting for one.

                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                }

                src.on('data', ondata);

                function ondata(chunk) {
                    debug('ondata');
                    var ret = dest.write(chunk);
                    debug('dest.write', ret);

                    if (ret === false) {
                        // If the user unpiped during `dest.write()`, it is possible
                        // to get stuck in a permanently paused state if that write
                        // also returned false.
                        // => Check whether `dest` is still a piping destination.
                        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                            debug('false write response, pause', state.awaitDrain);
                            state.awaitDrain++;
                        }

                        src.pause();
                    }
                } // if the dest has an error, then stop piping into it.
                // however, don't suppress the throwing behavior for this.


                function onerror(er) {
                    debug('onerror', er);
                    unpipe();
                    dest.removeListener('error', onerror);
                    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
                } // Make sure our error handler is attached before userland ones.


                prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

                function onclose() {
                    dest.removeListener('finish', onfinish);
                    unpipe();
                }

                dest.once('close', onclose);

                function onfinish() {
                    debug('onfinish');
                    dest.removeListener('close', onclose);
                    unpipe();
                }

                dest.once('finish', onfinish);

                function unpipe() {
                    debug('unpipe');
                    src.unpipe(dest);
                } // tell the dest that it's being piped to


                dest.emit('pipe', src); // start the flow if it hasn't been started already.

                if (!state.flowing) {
                    debug('pipe resume');
                    src.resume();
                }

                return dest;
            };

            function pipeOnDrain(src) {
                return function pipeOnDrainFunctionResult() {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;

                    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                        state.flowing = true;
                        flow(src);
                    }
                };
            }

            Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = {
                    hasUnpiped: false
                }; // if we're not piping anywhere, then do nothing.

                if (state.pipesCount === 0) return this; // just one destination.  most common case.

                if (state.pipesCount === 1) {
                    // passed in one, but it's not the right one.
                    if (dest && dest !== state.pipes) return this;
                    if (!dest) dest = state.pipes; // got a match.

                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit('unpipe', this, unpipeInfo);
                    return this;
                } // slow case. multiple pipe destinations.


                if (!dest) {
                    // remove all.
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;

                    for (var i = 0; i < len; i++) {
                        dests[i].emit('unpipe', this, {
                            hasUnpiped: false
                        });
                    }

                    return this;
                } // try to find the right one.


                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;
                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];
                dest.emit('unpipe', this, unpipeInfo);
                return this;
            }; // set up data events if they are asked for
// Ensure readable listeners eventually get something


            Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);
                var state = this._readableState;

                if (ev === 'data') {
                    // update readableListening so that resume() may be a no-op
                    // a few lines down. This is needed to support once('readable').
                    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

                    if (state.flowing !== false) this.resume();
                } else if (ev === 'readable') {
                    if (!state.endEmitted && !state.readableListening) {
                        state.readableListening = state.needReadable = true;
                        state.flowing = false;
                        state.emittedReadable = false;
                        debug('on readable', state.length, state.reading);

                        if (state.length) {
                            emitReadable(this);
                        } else if (!state.reading) {
                            process.nextTick(nReadingNextTick, this);
                        }
                    }
                }

                return res;
            };

            Readable.prototype.addListener = Readable.prototype.on;

            Readable.prototype.removeListener = function (ev, fn) {
                var res = Stream.prototype.removeListener.call(this, ev, fn);

                if (ev === 'readable') {
                    // We need to check if there is someone still listening to
                    // readable and reset the state. However this needs to happen
                    // after readable has been emitted but before I/O (nextTick) to
                    // support once('readable', fn) cycles. This means that calling
                    // resume within the same tick will have no
                    // effect.
                    process.nextTick(updateReadableListening, this);
                }

                return res;
            };

            Readable.prototype.removeAllListeners = function (ev) {
                var res = Stream.prototype.removeAllListeners.apply(this, arguments);

                if (ev === 'readable' || ev === undefined) {
                    // We need to check if there is someone still listening to
                    // readable and reset the state. However this needs to happen
                    // after readable has been emitted but before I/O (nextTick) to
                    // support once('readable', fn) cycles. This means that calling
                    // resume within the same tick will have no
                    // effect.
                    process.nextTick(updateReadableListening, this);
                }

                return res;
            };

            function updateReadableListening(self) {
                var state = self._readableState;
                state.readableListening = self.listenerCount('readable') > 0;

                if (state.resumeScheduled && !state.paused) {
                    // flowing needs to be set to true now, otherwise
                    // the upcoming resume will not flow.
                    state.flowing = true; // crude way to check if we should resume
                } else if (self.listenerCount('data') > 0) {
                    self.resume();
                }
            }

            function nReadingNextTick(self) {
                debug('readable nexttick read 0');
                self.read(0);
            } // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


            Readable.prototype.resume = function () {
                var state = this._readableState;

                if (!state.flowing) {
                    debug('resume'); // we flow only if there is no one listening
                    // for readable, but we still have to call
                    // resume()

                    state.flowing = !state.readableListening;
                    resume(this, state);
                }

                state.paused = false;
                return this;
            };

            function resume(stream, state) {
                if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    process.nextTick(resume_, stream, state);
                }
            }

            function resume_(stream, state) {
                debug('resume', state.reading);

                if (!state.reading) {
                    stream.read(0);
                }

                state.resumeScheduled = false;
                stream.emit('resume');
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
                debug('call pause flowing=%j', this._readableState.flowing);

                if (this._readableState.flowing !== false) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                }

                this._readableState.paused = true;
                return this;
            };

            function flow(stream) {
                var state = stream._readableState;
                debug('flow', state.flowing);

                while (state.flowing && stream.read() !== null) {
                    ;
                }
            } // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


            Readable.prototype.wrap = function (stream) {
                var _this = this;

                var state = this._readableState;
                var paused = false;
                stream.on('end', function () {
                    debug('wrapped end');

                    if (state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) _this.push(chunk);
                    }

                    _this.push(null);
                });
                stream.on('data', function (chunk) {
                    debug('wrapped data');
                    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

                    if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

                    var ret = _this.push(chunk);

                    if (!ret) {
                        paused = true;
                        stream.pause();
                    }
                }); // proxy all the other methods.
                // important when wrapping filters and duplexes.

                for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === 'function') {
                        this[i] = function methodWrap(method) {
                            return function methodWrapReturnFunction() {
                                return stream[method].apply(stream, arguments);
                            };
                        }(i);
                    }
                } // proxy certain important events.


                for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                } // when we try to consume some more bytes, simply unpause the
                // underlying stream.


                this._read = function (n) {
                    debug('wrapped _read', n);

                    if (paused) {
                        paused = false;
                        stream.resume();
                    }
                };

                return this;
            };

            if (typeof Symbol === 'function') {
                Readable.prototype[Symbol.asyncIterator] = function () {
                    if (createReadableStreamAsyncIterator === undefined) {
                        createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
                    }

                    return createReadableStreamAsyncIterator(this);
                };
            }

            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._readableState.highWaterMark;
                }
            });
            Object.defineProperty(Readable.prototype, 'readableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._readableState && this._readableState.buffer;
                }
            });
            Object.defineProperty(Readable.prototype, 'readableFlowing', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._readableState.flowing;
                },
                set: function set(state) {
                    if (this._readableState) {
                        this._readableState.flowing = state;
                    }
                }
            }); // exposed for testing purposes only.

            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, 'readableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._readableState.length;
                }
            }); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

            function fromList(n, state) {
                // nothing buffered
                if (state.length === 0) return null;
                var ret;
                if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                    // read it all, truncate the list
                    if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.first(); else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                } else {
                    // read part of list
                    ret = state.buffer.consume(n, state.decoder);
                }
                return ret;
            }

            function endReadable(stream) {
                var state = stream._readableState;
                debug('endReadable', state.endEmitted);

                if (!state.endEmitted) {
                    state.ended = true;
                    process.nextTick(endReadableNT, state, stream);
                }
            }

            function endReadableNT(state, stream) {
                debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

                if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit('end');

                    if (state.autoDestroy) {
                        // In case of duplex streams we need a way to detect
                        // if the writable side is ready for autoDestroy as well
                        var wState = stream._writableState;

                        if (!wState || wState.autoDestroy && wState.finished) {
                            stream.destroy();
                        }
                    }
                }
            }

            if (typeof Symbol === 'function') {
                Readable.from = function (iterable, opts) {
                    if (from === undefined) {
                        from = require('./internal/streams/from');
                    }

                    return from(Readable, iterable, opts);
                };
            }

            function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                }

                return -1;
            }
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "../errors": 411,
        "./_stream_duplex": 412,
        "./internal/streams/async_iterator": 417,
        "./internal/streams/buffer_list": 418,
        "./internal/streams/destroy": 419,
        "./internal/streams/from": 421,
        "./internal/streams/state": 423,
        "./internal/streams/stream": 424,
        "_process": 122,
        "buffer": 51,
        "events": 86,
        "inherits": 388,
        "string_decoder/": 462,
        "util": 22
    }],
    415: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
        'use strict';

        module.exports = Transform;

        var _require$codes = require('../errors').codes,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
            ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
            ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

        var Duplex = require('./_stream_duplex');

        require('inherits')(Transform, Duplex);

        function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;
            var cb = ts.writecb;

            if (cb === null) {
                return this.emit('error', new ERR_MULTIPLE_CALLBACK());
            }

            ts.writechunk = null;
            ts.writecb = null;
            if (data != null) // single equals check for both `null` and `undefined`
                this.push(data);
            cb(er);
            var rs = this._readableState;
            rs.reading = false;

            if (rs.needReadable || rs.length < rs.highWaterMark) {
                this._read(rs.highWaterMark);
            }
        }

        function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);
            Duplex.call(this, options);
            this._transformState = {
                afterTransform: afterTransform.bind(this),
                needTransform: false,
                transforming: false,
                writecb: null,
                writechunk: null,
                writeencoding: null
            }; // start out asking for a readable event once data is transformed.

            this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.

            this._readableState.sync = false;

            if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;
                if (typeof options.flush === 'function') this._flush = options.flush;
            } // When the writable side finishes, then flush out anything remaining.


            this.on('prefinish', prefinish);
        }

        function prefinish() {
            var _this = this;

            if (typeof this._flush === 'function' && !this._readableState.destroyed) {
                this._flush(function (er, data) {
                    done(_this, er, data);
                });
            } else {
                done(this, null, null);
            }
        }

        Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
        }; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


        Transform.prototype._transform = function (chunk, encoding, cb) {
            cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;

            if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
        }; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


        Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && !ts.transforming) {
                ts.transforming = true;

                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
            }
        };

        Transform.prototype._destroy = function (err, cb) {
            Duplex.prototype._destroy.call(this, err, function (err2) {
                cb(err2);
            });
        };

        function done(stream, er, data) {
            if (er) return stream.emit('error', er);
            if (data != null) // single equals check for both `null` and `undefined`
                stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided

            if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
            if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
            return stream.push(null);
        }
    }, {"../errors": 411, "./_stream_duplex": 412, "inherits": 388}],
    416: [function (require, module, exports) {
        (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
            'use strict';

            module.exports = Writable;

            /* <replacement> */

            function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
            } // It seems a linked list but it is not
// there will be only 2 of these for each stream


            function CorkedRequest(state) {
                var _this = this;

                this.next = null;
                this.entry = null;

                this.finish = function () {
                    onCorkedFinish(_this, state);
                };
            }

            /* </replacement> */

            /*<replacement>*/


            var Duplex;
            /*</replacement>*/

            Writable.WritableState = WritableState;
            /*<replacement>*/

            var internalUtil = {
                deprecate: require('util-deprecate')
            };
            /*</replacement>*/

            /*<replacement>*/

            var Stream = require('./internal/streams/stream');
            /*</replacement>*/


            var Buffer = require('buffer').Buffer;

            var OurUint8Array = global.Uint8Array || function () {
            };

            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }

            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            var destroyImpl = require('./internal/streams/destroy');

            var _require = require('./internal/streams/state'),
                getHighWaterMark = _require.getHighWaterMark;

            var _require$codes = require('../errors').codes,
                ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
                ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
                ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
                ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
                ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
                ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
                ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
                ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

            var errorOrDestroy = destroyImpl.errorOrDestroy;

            require('inherits')(Writable, Stream);

            function nop() {
            }

            function WritableState(options, stream, isDuplex) {
                Duplex = Duplex || require('./_stream_duplex');
                options = options || {}; // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream,
                // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

                if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
                // contains buffers or objects.

                this.objectMode = !!options.objectMode;
                if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
                // Note: 0 is a valid value, means that we always return false if
                // the entire buffer is not flushed immediately on write()

                this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

                this.finalCalled = false; // drain event flag.

                this.needDrain = false; // at the start of calling end()

                this.ending = false; // when end() has been called, and returned

                this.ended = false; // when 'finish' is emitted

                this.finished = false; // has it been destroyed

                this.destroyed = false; // should we decode strings into buffers before passing to _write?
                // this is here so that some node-core streams can optimize string
                // handling at a lower level.

                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.

                this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
                // of how much we're waiting to get pushed to some underlying
                // socket or file.

                this.length = 0; // a flag to see when we're in the middle of a write.

                this.writing = false; // when true all writes will be buffered until .uncork() call

                this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
                // or on a later tick.  We set this to true at first, because any
                // actions that shouldn't happen until "later" should generally also
                // not happen before the first write call.

                this.sync = true; // a flag to know if we're processing previously buffered items, which
                // may call the _write() callback in the same tick, so that we don't
                // end up in an overlapped onwrite situation.

                this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

                this.onwrite = function (er) {
                    onwrite(stream, er);
                }; // the callback that the user supplies to write(chunk,encoding,cb)


                this.writecb = null; // the amount that is being written when _write is called.

                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
                // this must be 0 before 'finish' can be emitted

                this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
                // This is relevant for synchronous Transform streams

                this.prefinished = false; // True if the error was already emitted and should not be thrown again

                this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

                this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

                this.autoDestroy = !!options.autoDestroy; // count buffered requests

                this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
                // one allocated and free to use, and we maintain at most two

                this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];

                while (current) {
                    out.push(current);
                    current = current.next;
                }

                return out;
            };

            (function () {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function writableStateBufferGetter() {
                            return this.getBuffer();
                        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                } catch (_) {
                }
            })(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


            var realHasInstance;

            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function value(object) {
                        if (realHasInstance.call(this, object)) return true;
                        if (this !== Writable) return false;
                        return object && object._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function realHasInstance(object) {
                    return object instanceof this;
                };
            }

            function Writable(options) {
                Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
                // `realHasInstance` is necessary because using plain `instanceof`
                // would return false, as no `_writableState` property is attached.
                // Trying to use the custom `instanceof` for Writable here will also break the
                // Node.js LazyTransform implementation, which has a non-trivial getter for
                // `_writableState` that would lead to infinite recursion.
                // Checking for a Stream.Duplex instance is faster here instead of inside
                // the WritableState constructor, at least with V8 6.5

                var isDuplex = this instanceof Duplex;
                if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
                this._writableState = new WritableState(options, this, isDuplex); // legacy.

                this.writable = true;

                if (options) {
                    if (typeof options.write === 'function') this._write = options.write;
                    if (typeof options.writev === 'function') this._writev = options.writev;
                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                    if (typeof options.final === 'function') this._final = options.final;
                }

                Stream.call(this);
            } // Otherwise people can pipe Writable streams, which is just wrong.


            Writable.prototype.pipe = function () {
                errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };

            function writeAfterEnd(stream, cb) {
                var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
            } // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


            function validChunk(stream, state, chunk, cb) {
                var er;

                if (chunk === null) {
                    er = new ERR_STREAM_NULL_VALUES();
                } else if (typeof chunk !== 'string' && !state.objectMode) {
                    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
                }

                if (er) {
                    errorOrDestroy(stream, er);
                    process.nextTick(cb, er);
                    return false;
                }

                return true;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;

                var isBuf = !state.objectMode && _isUint8Array(chunk);

                if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                }

                if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
                if (typeof cb !== 'function') cb = nop;
                if (state.ending) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }
                return ret;
            };

            Writable.prototype.cork = function () {
                this._writableState.corked++;
            };

            Writable.prototype.uncork = function () {
                var state = this._writableState;

                if (state.corked) {
                    state.corked--;
                    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                // node::ParseEncoding() requires lower case.
                if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
            };

            Object.defineProperty(Writable.prototype, 'writableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState && this._writableState.getBuffer();
                }
            });

            function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                    chunk = Buffer.from(chunk, encoding);
                }

                return chunk;
            }

            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState.highWaterMark;
                }
            }); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);

                    if (chunk !== newChunk) {
                        isBuf = true;
                        encoding = 'buffer';
                        chunk = newChunk;
                    }
                }

                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

                if (!ret) state.needDrain = true;

                if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    };

                    if (last) {
                        last.next = state.lastBufferedRequest;
                    } else {
                        state.bufferedRequest = state.lastBufferedRequest;
                    }

                    state.bufferedRequestCount += 1;
                } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                }

                return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write')); else if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;

                if (sync) {
                    // defer the callback if we are being called synchronously
                    // to avoid piling up things on the stack
                    process.nextTick(cb, er); // this can emit finish, and it will always happen
                    // after error

                    process.nextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    errorOrDestroy(stream, er);
                } else {
                    // the caller expect this to happen before if
                    // it is async
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    errorOrDestroy(stream, er); // this can emit finish, but finish must
                    // always follow error

                    finishMaybe(stream, state);
                }
            }

            function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
            }

            function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;
                if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
                onwriteStateUpdate(state);
                if (er) onwriteError(stream, state, sync, er, cb); else {
                    // Check if we're actually ready to finish, but don't emit yet
                    var finished = needFinish(state) || stream.destroyed;

                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                        clearBuffer(stream, state);
                    }

                    if (sync) {
                        process.nextTick(afterWrite, stream, state, finished, cb);
                    } else {
                        afterWrite(stream, state, finished, cb);
                    }
                }
            }

            function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
            } // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


            function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit('drain');
                }
            } // if there's something in the buffer waiting, then process it


            function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;

                if (stream._writev && entry && entry.next) {
                    // Fast case, write everything using _writev()
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;
                    var count = 0;
                    var allBuffers = true;

                    while (entry) {
                        buffer[count] = entry;
                        if (!entry.isBuf) allBuffers = false;
                        entry = entry.next;
                        count += 1;
                    }

                    buffer.allBuffers = allBuffers;
                    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
                    // as the hot path ends with doWrite

                    state.pendingcb++;
                    state.lastBufferedRequest = null;

                    if (holder.next) {
                        state.corkedRequestsFree = holder.next;
                        holder.next = null;
                    } else {
                        state.corkedRequestsFree = new CorkedRequest(state);
                    }

                    state.bufferedRequestCount = 0;
                } else {
                    // Slow case, write chunks one-by-one
                    while (entry) {
                        var chunk = entry.chunk;
                        var encoding = entry.encoding;
                        var cb = entry.callback;
                        var len = state.objectMode ? 1 : chunk.length;
                        doWrite(stream, state, false, len, chunk, encoding, cb);
                        entry = entry.next;
                        state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
                        // it means that we need to wait until it does.
                        // also, that means that the chunk and cb are currently
                        // being processed, so move the buffer counter past them.

                        if (state.writing) {
                            break;
                        }
                    }

                    if (entry === null) state.lastBufferedRequest = null;
                }

                state.bufferedRequest = entry;
                state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;

                if (typeof chunk === 'function') {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                } else if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

                if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                } // ignore unnecessary end() calls.


                if (!state.ending) endWritable(this, state, cb);
                return this;
            };

            Object.defineProperty(Writable.prototype, 'writableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    return this._writableState.length;
                }
            });

            function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function callFinal(stream, state) {
                stream._final(function (err) {
                    state.pendingcb--;

                    if (err) {
                        errorOrDestroy(stream, err);
                    }

                    state.prefinished = true;
                    stream.emit('prefinish');
                    finishMaybe(stream, state);
                });
            }

            function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === 'function' && !state.destroyed) {
                        state.pendingcb++;
                        state.finalCalled = true;
                        process.nextTick(callFinal, stream, state);
                    } else {
                        state.prefinished = true;
                        stream.emit('prefinish');
                    }
                }
            }

            function finishMaybe(stream, state) {
                var need = needFinish(state);

                if (need) {
                    prefinish(stream, state);

                    if (state.pendingcb === 0) {
                        state.finished = true;
                        stream.emit('finish');

                        if (state.autoDestroy) {
                            // In case of duplex streams we need a way to detect
                            // if the readable side is ready for autoDestroy as well
                            var rState = stream._readableState;

                            if (!rState || rState.autoDestroy && rState.endEmitted) {
                                stream.destroy();
                            }
                        }
                    }
                }

                return need;
            }

            function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);

                if (cb) {
                    if (state.finished) process.nextTick(cb); else stream.once('finish', cb);
                }

                state.ended = true;
                stream.writable = false;
            }

            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;

                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                } // reuse the free corkReq.


                state.corkedRequestsFree.next = corkReq;
            }

            Object.defineProperty(Writable.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                    if (this._writableState === undefined) {
                        return false;
                    }

                    return this._writableState.destroyed;
                },
                set: function set(value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._writableState) {
                        return;
                    } // backward compatibility, the user is explicitly
                    // managing destroyed


                    this._writableState.destroyed = value;
                }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;

            Writable.prototype._destroy = function (err, cb) {
                cb(err);
            };
        }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "../errors": 411,
        "./_stream_duplex": 412,
        "./internal/streams/destroy": 419,
        "./internal/streams/state": 423,
        "./internal/streams/stream": 424,
        "_process": 122,
        "buffer": 51,
        "inherits": 388,
        "util-deprecate": 466
    }],
    417: [function (require, module, exports) {
        (function (process) {
            'use strict';

            var _Object$setPrototypeO;

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }

            var finished = require('./end-of-stream');

            var kLastResolve = Symbol('lastResolve');
            var kLastReject = Symbol('lastReject');
            var kError = Symbol('error');
            var kEnded = Symbol('ended');
            var kLastPromise = Symbol('lastPromise');
            var kHandlePromise = Symbol('handlePromise');
            var kStream = Symbol('stream');

            function createIterResult(value, done) {
                return {
                    value: value,
                    done: done
                };
            }

            function readAndResolve(iter) {
                var resolve = iter[kLastResolve];

                if (resolve !== null) {
                    var data = iter[kStream].read(); // we defer if data is null
                    // we can be expecting either 'end' or
                    // 'error'

                    if (data !== null) {
                        iter[kLastPromise] = null;
                        iter[kLastResolve] = null;
                        iter[kLastReject] = null;
                        resolve(createIterResult(data, false));
                    }
                }
            }

            function onReadable(iter) {
                // we wait for the next tick, because it might
                // emit an error with process.nextTick
                process.nextTick(readAndResolve, iter);
            }

            function wrapForNext(lastPromise, iter) {
                return function (resolve, reject) {
                    lastPromise.then(function () {
                        if (iter[kEnded]) {
                            resolve(createIterResult(undefined, true));
                            return;
                        }

                        iter[kHandlePromise](resolve, reject);
                    }, reject);
                };
            }

            var AsyncIteratorPrototype = Object.getPrototypeOf(function () {
            });
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
                get stream() {
                    return this[kStream];
                },

                next: function next() {
                    var _this = this;

                    // if we have detected an error in the meanwhile
                    // reject straight away
                    var error = this[kError];

                    if (error !== null) {
                        return Promise.reject(error);
                    }

                    if (this[kEnded]) {
                        return Promise.resolve(createIterResult(undefined, true));
                    }

                    if (this[kStream].destroyed) {
                        // We need to defer via nextTick because if .destroy(err) is
                        // called, the error will be emitted via nextTick, and
                        // we cannot guarantee that there is no error lingering around
                        // waiting to be emitted.
                        return new Promise(function (resolve, reject) {
                            process.nextTick(function () {
                                if (_this[kError]) {
                                    reject(_this[kError]);
                                } else {
                                    resolve(createIterResult(undefined, true));
                                }
                            });
                        });
                    } // if we have multiple next() calls
                    // we will wait for the previous Promise to finish
                    // this logic is optimized to support for await loops,
                    // where next() is only called once at a time


                    var lastPromise = this[kLastPromise];
                    var promise;

                    if (lastPromise) {
                        promise = new Promise(wrapForNext(lastPromise, this));
                    } else {
                        // fast path needed to support multiple this.push()
                        // without triggering the next() queue
                        var data = this[kStream].read();

                        if (data !== null) {
                            return Promise.resolve(createIterResult(data, false));
                        }

                        promise = new Promise(this[kHandlePromise]);
                    }

                    this[kLastPromise] = promise;
                    return promise;
                }
            }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
                return this;
            }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
                var _this2 = this;

                // destroy(err, cb) is a private API
                // we can guarantee we have that here, because we control the
                // Readable class this is attached to
                return new Promise(function (resolve, reject) {
                    _this2[kStream].destroy(null, function (err) {
                        if (err) {
                            reject(err);
                            return;
                        }

                        resolve(createIterResult(undefined, true));
                    });
                });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);

            var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
                var _Object$create;

                var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                    value: stream,
                    writable: true
                }), _defineProperty(_Object$create, kLastResolve, {
                    value: null,
                    writable: true
                }), _defineProperty(_Object$create, kLastReject, {
                    value: null,
                    writable: true
                }), _defineProperty(_Object$create, kError, {
                    value: null,
                    writable: true
                }), _defineProperty(_Object$create, kEnded, {
                    value: stream._readableState.endEmitted,
                    writable: true
                }), _defineProperty(_Object$create, kHandlePromise, {
                    value: function value(resolve, reject) {
                        var data = iterator[kStream].read();

                        if (data) {
                            iterator[kLastPromise] = null;
                            iterator[kLastResolve] = null;
                            iterator[kLastReject] = null;
                            resolve(createIterResult(data, false));
                        } else {
                            iterator[kLastResolve] = resolve;
                            iterator[kLastReject] = reject;
                        }
                    },
                    writable: true
                }), _Object$create));
                iterator[kLastPromise] = null;
                finished(stream, function (err) {
                    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                        var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
                        // returned by next() and store the error

                        if (reject !== null) {
                            iterator[kLastPromise] = null;
                            iterator[kLastResolve] = null;
                            iterator[kLastReject] = null;
                            reject(err);
                        }

                        iterator[kError] = err;
                        return;
                    }

                    var resolve = iterator[kLastResolve];

                    if (resolve !== null) {
                        iterator[kLastPromise] = null;
                        iterator[kLastResolve] = null;
                        iterator[kLastReject] = null;
                        resolve(createIterResult(undefined, true));
                    }

                    iterator[kEnded] = true;
                });
                stream.on('readable', onReadable.bind(null, iterator));
                return iterator;
            };

            module.exports = createReadableStreamAsyncIterator;
        }).call(this, require('_process'))
    }, {"./end-of-stream": 420, "_process": 122}],
    418: [function (require, module, exports) {
        'use strict';

        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) symbols = symbols.filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                });
                keys.push.apply(keys, symbols);
            }
            return keys;
        }

        function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                    ownKeys(Object(source), true).forEach(function (key) {
                        _defineProperty(target, key, source[key]);
                    });
                } else if (Object.getOwnPropertyDescriptors) {
                    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                    ownKeys(Object(source)).forEach(function (key) {
                        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                }
            }
            return target;
        }

        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {value: value, enumerable: true, configurable: true, writable: true});
            } else {
                obj[key] = value;
            }
            return obj;
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }

        var _require = require('buffer'),
            Buffer = _require.Buffer;

        var _require2 = require('util'),
            inspect = _require2.inspect;

        var custom = inspect && inspect.custom || 'inspect';

        function copyBuffer(src, target, offset) {
            Buffer.prototype.copy.call(src, target, offset);
        }

        module.exports =
            /*#__PURE__*/
            function () {
                function BufferList() {
                    _classCallCheck(this, BufferList);

                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }

                _createClass(BufferList, [{
                    key: "push",
                    value: function push(v) {
                        var entry = {
                            data: v,
                            next: null
                        };
                        if (this.length > 0) this.tail.next = entry; else this.head = entry;
                        this.tail = entry;
                        ++this.length;
                    }
                }, {
                    key: "unshift",
                    value: function unshift(v) {
                        var entry = {
                            data: v,
                            next: this.head
                        };
                        if (this.length === 0) this.tail = entry;
                        this.head = entry;
                        ++this.length;
                    }
                }, {
                    key: "shift",
                    value: function shift() {
                        if (this.length === 0) return;
                        var ret = this.head.data;
                        if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                        --this.length;
                        return ret;
                    }
                }, {
                    key: "clear",
                    value: function clear() {
                        this.head = this.tail = null;
                        this.length = 0;
                    }
                }, {
                    key: "join",
                    value: function join(s) {
                        if (this.length === 0) return '';
                        var p = this.head;
                        var ret = '' + p.data;

                        while (p = p.next) {
                            ret += s + p.data;
                        }

                        return ret;
                    }
                }, {
                    key: "concat",
                    value: function concat(n) {
                        if (this.length === 0) return Buffer.alloc(0);
                        var ret = Buffer.allocUnsafe(n >>> 0);
                        var p = this.head;
                        var i = 0;

                        while (p) {
                            copyBuffer(p.data, ret, i);
                            i += p.data.length;
                            p = p.next;
                        }

                        return ret;
                    } // Consumes a specified amount of bytes or characters from the buffered data.

                }, {
                    key: "consume",
                    value: function consume(n, hasStrings) {
                        var ret;

                        if (n < this.head.data.length) {
                            // `slice` is the same for buffers and strings.
                            ret = this.head.data.slice(0, n);
                            this.head.data = this.head.data.slice(n);
                        } else if (n === this.head.data.length) {
                            // First chunk is a perfect match.
                            ret = this.shift();
                        } else {
                            // Result spans more than one buffer.
                            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                        }

                        return ret;
                    }
                }, {
                    key: "first",
                    value: function first() {
                        return this.head.data;
                    } // Consumes a specified amount of characters from the buffered data.

                }, {
                    key: "_getString",
                    value: function _getString(n) {
                        var p = this.head;
                        var c = 1;
                        var ret = p.data;
                        n -= ret.length;

                        while (p = p.next) {
                            var str = p.data;
                            var nb = n > str.length ? str.length : n;
                            if (nb === str.length) ret += str; else ret += str.slice(0, n);
                            n -= nb;

                            if (n === 0) {
                                if (nb === str.length) {
                                    ++c;
                                    if (p.next) this.head = p.next; else this.head = this.tail = null;
                                } else {
                                    this.head = p;
                                    p.data = str.slice(nb);
                                }

                                break;
                            }

                            ++c;
                        }

                        this.length -= c;
                        return ret;
                    } // Consumes a specified amount of bytes from the buffered data.

                }, {
                    key: "_getBuffer",
                    value: function _getBuffer(n) {
                        var ret = Buffer.allocUnsafe(n);
                        var p = this.head;
                        var c = 1;
                        p.data.copy(ret);
                        n -= p.data.length;

                        while (p = p.next) {
                            var buf = p.data;
                            var nb = n > buf.length ? buf.length : n;
                            buf.copy(ret, ret.length - n, 0, nb);
                            n -= nb;

                            if (n === 0) {
                                if (nb === buf.length) {
                                    ++c;
                                    if (p.next) this.head = p.next; else this.head = this.tail = null;
                                } else {
                                    this.head = p;
                                    p.data = buf.slice(nb);
                                }

                                break;
                            }

                            ++c;
                        }

                        this.length -= c;
                        return ret;
                    } // Make sure the linked list only shows the minimal necessary information.

                }, {
                    key: custom,
                    value: function value(_, options) {
                        return inspect(this, _objectSpread({}, options, {
                            // Only inspect one level.
                            depth: 0,
                            // It should not recurse.
                            customInspect: false
                        }));
                    }
                }]);

                return BufferList;
            }();
    }, {"buffer": 51, "util": 22}],
    419: [function (require, module, exports) {
        (function (process) {
            'use strict'; // undocumented cb() API, needed for core, not for public API

            function destroy(err, cb) {
                var _this = this;

                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                    if (cb) {
                        cb(err);
                    } else if (err) {
                        if (!this._writableState) {
                            process.nextTick(emitErrorNT, this, err);
                        } else if (!this._writableState.errorEmitted) {
                            this._writableState.errorEmitted = true;
                            process.nextTick(emitErrorNT, this, err);
                        }
                    }

                    return this;
                } // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks


                if (this._readableState) {
                    this._readableState.destroyed = true;
                } // if this is a duplex stream mark the writable part as destroyed as well


                if (this._writableState) {
                    this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                    if (!cb && err) {
                        if (!_this._writableState) {
                            process.nextTick(emitErrorAndCloseNT, _this, err);
                        } else if (!_this._writableState.errorEmitted) {
                            _this._writableState.errorEmitted = true;
                            process.nextTick(emitErrorAndCloseNT, _this, err);
                        } else {
                            process.nextTick(emitCloseNT, _this);
                        }
                    } else if (cb) {
                        process.nextTick(emitCloseNT, _this);
                        cb(err);
                    } else {
                        process.nextTick(emitCloseNT, _this);
                    }
                });

                return this;
            }

            function emitErrorAndCloseNT(self, err) {
                emitErrorNT(self, err);
                emitCloseNT(self);
            }

            function emitCloseNT(self) {
                if (self._writableState && !self._writableState.emitClose) return;
                if (self._readableState && !self._readableState.emitClose) return;
                self.emit('close');
            }

            function undestroy() {
                if (this._readableState) {
                    this._readableState.destroyed = false;
                    this._readableState.reading = false;
                    this._readableState.ended = false;
                    this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                    this._writableState.destroyed = false;
                    this._writableState.ended = false;
                    this._writableState.ending = false;
                    this._writableState.finalCalled = false;
                    this._writableState.prefinished = false;
                    this._writableState.finished = false;
                    this._writableState.errorEmitted = false;
                }
            }

            function emitErrorNT(self, err) {
                self.emit('error', err);
            }

            function errorOrDestroy(stream, err) {
                // We have tests that rely on errors being emitted
                // in the same tick, so changing this is semver major.
                // For now when you opt-in to autoDestroy we allow
                // the error to be emitted nextTick. In a future
                // semver major update we should change the default to this.
                var rState = stream._readableState;
                var wState = stream._writableState;
                if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err); else stream.emit('error', err);
            }

            module.exports = {
                destroy: destroy,
                undestroy: undestroy,
                errorOrDestroy: errorOrDestroy
            };
        }).call(this, require('_process'))
    }, {"_process": 122}],
    420: [function (require, module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
        'use strict';

        var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

        function once(callback) {
            var called = false;
            return function () {
                if (called) return;
                called = true;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                callback.apply(this, args);
            };
        }

        function noop() {
        }

        function isRequest(stream) {
            return stream.setHeader && typeof stream.abort === 'function';
        }

        function eos(stream, opts, callback) {
            if (typeof opts === 'function') return eos(stream, null, opts);
            if (!opts) opts = {};
            callback = once(callback || noop);
            var readable = opts.readable || opts.readable !== false && stream.readable;
            var writable = opts.writable || opts.writable !== false && stream.writable;

            var onlegacyfinish = function onlegacyfinish() {
                if (!stream.writable) onfinish();
            };

            var writableEnded = stream._writableState && stream._writableState.finished;

            var onfinish = function onfinish() {
                writable = false;
                writableEnded = true;
                if (!readable) callback.call(stream);
            };

            var readableEnded = stream._readableState && stream._readableState.endEmitted;

            var onend = function onend() {
                readable = false;
                readableEnded = true;
                if (!writable) callback.call(stream);
            };

            var onerror = function onerror(err) {
                callback.call(stream, err);
            };

            var onclose = function onclose() {
                var err;

                if (readable && !readableEnded) {
                    if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                    return callback.call(stream, err);
                }

                if (writable && !writableEnded) {
                    if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                    return callback.call(stream, err);
                }
            };

            var onrequest = function onrequest() {
                stream.req.on('finish', onfinish);
            };

            if (isRequest(stream)) {
                stream.on('complete', onfinish);
                stream.on('abort', onclose);
                if (stream.req) onrequest(); else stream.on('request', onrequest);
            } else if (writable && !stream._writableState) {
                // legacy streams
                stream.on('end', onlegacyfinish);
                stream.on('close', onlegacyfinish);
            }

            stream.on('end', onend);
            stream.on('finish', onfinish);
            if (opts.error !== false) stream.on('error', onerror);
            stream.on('close', onclose);
            return function () {
                stream.removeListener('complete', onfinish);
                stream.removeListener('abort', onclose);
                stream.removeListener('request', onrequest);
                if (stream.req) stream.req.removeListener('finish', onfinish);
                stream.removeListener('end', onlegacyfinish);
                stream.removeListener('close', onlegacyfinish);
                stream.removeListener('finish', onfinish);
                stream.removeListener('end', onend);
                stream.removeListener('error', onerror);
                stream.removeListener('close', onclose);
            };
        }

        module.exports = eos;
    }, {"../../../errors": 411}],
    421: [function (require, module, exports) {
        module.exports = function () {
            throw new Error('Readable.from is not available in the browser')
        };

    }, {}],
    422: [function (require, module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
        'use strict';

        var eos;

        function once(callback) {
            var called = false;
            return function () {
                if (called) return;
                called = true;
                callback.apply(void 0, arguments);
            };
        }

        var _require$codes = require('../../../errors').codes,
            ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
            ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

        function noop(err) {
            // Rethrow the error if it exists to avoid swallowing it
            if (err) throw err;
        }

        function isRequest(stream) {
            return stream.setHeader && typeof stream.abort === 'function';
        }

        function destroyer(stream, reading, writing, callback) {
            callback = once(callback);
            var closed = false;
            stream.on('close', function () {
                closed = true;
            });
            if (eos === undefined) eos = require('./end-of-stream');
            eos(stream, {
                readable: reading,
                writable: writing
            }, function (err) {
                if (err) return callback(err);
                closed = true;
                callback();
            });
            var destroyed = false;
            return function (err) {
                if (closed) return;
                if (destroyed) return;
                destroyed = true; // request.destroy just do .end - .abort is what we want

                if (isRequest(stream)) return stream.abort();
                if (typeof stream.destroy === 'function') return stream.destroy();
                callback(err || new ERR_STREAM_DESTROYED('pipe'));
            };
        }

        function call(fn) {
            fn();
        }

        function pipe(from, to) {
            return from.pipe(to);
        }

        function popCallback(streams) {
            if (!streams.length) return noop;
            if (typeof streams[streams.length - 1] !== 'function') return noop;
            return streams.pop();
        }

        function pipeline() {
            for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
                streams[_key] = arguments[_key];
            }

            var callback = popCallback(streams);
            if (Array.isArray(streams[0])) streams = streams[0];

            if (streams.length < 2) {
                throw new ERR_MISSING_ARGS('streams');
            }

            var error;
            var destroys = streams.map(function (stream, i) {
                var reading = i < streams.length - 1;
                var writing = i > 0;
                return destroyer(stream, reading, writing, function (err) {
                    if (!error) error = err;
                    if (err) destroys.forEach(call);
                    if (reading) return;
                    destroys.forEach(call);
                    callback(error);
                });
            });
            return streams.reduce(pipe);
        }

        module.exports = pipeline;
    }, {"../../../errors": 411, "./end-of-stream": 420}],
    423: [function (require, module, exports) {
        'use strict';

        var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

        function highWaterMarkFrom(options, isDuplex, duplexKey) {
            return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }

        function getHighWaterMark(state, options, duplexKey, isDuplex) {
            var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

            if (hwm != null) {
                if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
                    var name = isDuplex ? duplexKey : 'highWaterMark';
                    throw new ERR_INVALID_OPT_VALUE(name, hwm);
                }

                return Math.floor(hwm);
            } // Default value


            return state.objectMode ? 16 : 16 * 1024;
        }

        module.exports = {
            getHighWaterMark: getHighWaterMark
        };
    }, {"../../../errors": 411}],
    424: [function (require, module, exports) {
        arguments[4][139][0].apply(exports, arguments)
    }, {"dup": 139, "events": 86}],
    425: [function (require, module, exports) {
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');
        exports.finished = require('./lib/internal/streams/end-of-stream.js');
        exports.pipeline = require('./lib/internal/streams/pipeline.js');

    }, {
        "./lib/_stream_duplex.js": 412,
        "./lib/_stream_passthrough.js": 413,
        "./lib/_stream_readable.js": 414,
        "./lib/_stream_transform.js": 415,
        "./lib/_stream_writable.js": 416,
        "./lib/internal/streams/end-of-stream.js": 420,
        "./lib/internal/streams/pipeline.js": 422
    }],
    426: [function (require, module, exports) {
        arguments[4][146][0].apply(exports, arguments)
    }, {"buffer": 51, "dup": 146, "hash-base": 374, "inherits": 388}],
    427: [function (require, module, exports) {
        (function (Buffer) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var BN = require("bn.js");

            /**
             * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
             * This function takes in a data, convert it to buffer if not, and a length for recursion
             * @param input - will be converted to buffer
             * @returns returns buffer of encoded data
             **/
            function encode(input) {
                if (Array.isArray(input)) {
                    var output = [];
                    for (var i = 0; i < input.length; i++) {
                        output.push(encode(input[i]));
                    }
                    var buf = Buffer.concat(output);
                    return Buffer.concat([encodeLength(buf.length, 192), buf]);
                } else {
                    var inputBuf = toBuffer(input);
                    return inputBuf.length === 1 && inputBuf[0] < 128
                        ? inputBuf
                        : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
                }
            }

            exports.encode = encode;

            /**
             * Parse integers. Check if there is no leading zeros
             * @param v The value to parse
             * @param base The base to parse the integer into
             */
            function safeParseInt(v, base) {
                if (v.slice(0, 2) === '00') {
                    throw new Error('invalid RLP: extra zeros');
                }
                return parseInt(v, base);
            }

            function encodeLength(len, offset) {
                if (len < 56) {
                    return Buffer.from([len + offset]);
                } else {
                    var hexLength = intToHex(len);
                    var lLength = hexLength.length / 2;
                    var firstByte = intToHex(offset + 55 + lLength);
                    return Buffer.from(firstByte + hexLength, 'hex');
                }
            }

            function decode(input, stream) {
                if (stream === void 0) {
                    stream = false;
                }
                if (!input || input.length === 0) {
                    return Buffer.from([]);
                }
                var inputBuffer = toBuffer(input);
                var decoded = _decode(inputBuffer);
                if (stream) {
                    return decoded;
                }
                if (decoded.remainder.length !== 0) {
                    throw new Error('invalid remainder');
                }
                return decoded.data;
            }

            exports.decode = decode;

            /**
             * Get the length of the RLP input
             * @param input
             * @returns The length of the input or an empty Buffer if no input
             */
            function getLength(input) {
                if (!input || input.length === 0) {
                    return Buffer.from([]);
                }
                var inputBuffer = toBuffer(input);
                var firstByte = inputBuffer[0];
                if (firstByte <= 0x7f) {
                    return inputBuffer.length;
                } else if (firstByte <= 0xb7) {
                    return firstByte - 0x7f;
                } else if (firstByte <= 0xbf) {
                    return firstByte - 0xb6;
                } else if (firstByte <= 0xf7) {
                    // a list between  0-55 bytes long
                    return firstByte - 0xbf;
                } else {
                    // a list  over 55 bytes long
                    var llength = firstByte - 0xf6;
                    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
                    return llength + length;
                }
            }

            exports.getLength = getLength;

            /** Decode an input with RLP */
            function _decode(input) {
                var length, llength, data, innerRemainder, d;
                var decoded = [];
                var firstByte = input[0];
                if (firstByte <= 0x7f) {
                    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
                    return {
                        data: input.slice(0, 1),
                        remainder: input.slice(1),
                    };
                } else if (firstByte <= 0xb7) {
                    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
                    // The range of the first byte is [0x80, 0xb7]
                    length = firstByte - 0x7f;
                    // set 0x80 null to 0
                    if (firstByte === 0x80) {
                        data = Buffer.from([]);
                    } else {
                        data = input.slice(1, length);
                    }
                    if (length === 2 && data[0] < 0x80) {
                        throw new Error('invalid rlp encoding: byte must be less 0x80');
                    }
                    return {
                        data: data,
                        remainder: input.slice(length),
                    };
                } else if (firstByte <= 0xbf) {
                    llength = firstByte - 0xb6;
                    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
                    data = input.slice(llength, length + llength);
                    if (data.length < length) {
                        throw new Error('invalid RLP');
                    }
                    return {
                        data: data,
                        remainder: input.slice(length + llength),
                    };
                } else if (firstByte <= 0xf7) {
                    // a list between  0-55 bytes long
                    length = firstByte - 0xbf;
                    innerRemainder = input.slice(1, length);
                    while (innerRemainder.length) {
                        d = _decode(innerRemainder);
                        decoded.push(d.data);
                        innerRemainder = d.remainder;
                    }
                    return {
                        data: decoded,
                        remainder: input.slice(length),
                    };
                } else {
                    // a list  over 55 bytes long
                    llength = firstByte - 0xf6;
                    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
                    var totalLength = llength + length;
                    if (totalLength > input.length) {
                        throw new Error('invalid rlp: total length is larger than the data');
                    }
                    innerRemainder = input.slice(llength, totalLength);
                    if (innerRemainder.length === 0) {
                        throw new Error('invalid rlp, List has a invalid length');
                    }
                    while (innerRemainder.length) {
                        d = _decode(innerRemainder);
                        decoded.push(d.data);
                        innerRemainder = d.remainder;
                    }
                    return {
                        data: decoded,
                        remainder: input.slice(totalLength),
                    };
                }
            }

            /** Check if a string is prefixed by 0x */
            function isHexPrefixed(str) {
                return str.slice(0, 2) === '0x';
            }

            /** Removes 0x from a given String */
            function stripHexPrefix(str) {
                if (typeof str !== 'string') {
                    return str;
                }
                return isHexPrefixed(str) ? str.slice(2) : str;
            }

            /** Transform an integer into its hexadecimal value */
            function intToHex(integer) {
                if (integer < 0) {
                    throw new Error('Invalid integer as argument, must be unsigned!');
                }
                var hex = integer.toString(16);
                return hex.length % 2 ? "0" + hex : hex;
            }

            /** Pad a string to be even */
            function padToEven(a) {
                return a.length % 2 ? "0" + a : a;
            }

            /** Transform an integer into a Buffer */
            function intToBuffer(integer) {
                var hex = intToHex(integer);
                return Buffer.from(hex, 'hex');
            }

            /** Transform anything into a Buffer */
            function toBuffer(v) {
                if (!Buffer.isBuffer(v)) {
                    if (typeof v === 'string') {
                        if (isHexPrefixed(v)) {
                            return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
                        } else {
                            return Buffer.from(v);
                        }
                    } else if (typeof v === 'number') {
                        if (!v) {
                            return Buffer.from([]);
                        } else {
                            return intToBuffer(v);
                        }
                    } else if (v === null || v === undefined) {
                        return Buffer.from([]);
                    } else if (v instanceof Uint8Array) {
                        return Buffer.from(v);
                    } else if (BN.isBN(v)) {
                        // converts a BN to a Buffer
                        return Buffer.from(v.toArray());
                    } else {
                        throw new Error('invalid type');
                    }
                }
                return v;
            }

        }).call(this, require("buffer").Buffer)
    }, {"bn.js": 195, "buffer": 51}],
    428: [function (require, module, exports) {
        /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer')
        var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
            for (var key in src) {
                dst[key] = src[key]
            }
        }

        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
        } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
                throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
                if (typeof encoding === 'string') {
                    buf.fill(fill, encoding)
                } else {
                    buf.fill(fill)
                }
            } else {
                buf.fill(0)
            }
            return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
        }

    }, {"buffer": 51}],
    429: [function (require, module, exports) {
        (function (setImmediate) {
            /*!
 * Fast "async" scrypt implementation in JavaScript.
 * Copyright (c) 2013-2016 Dmitry Chestnykh | BSD License
 * https://github.com/dchest/scrypt-async-js
 */

            /**
             * scrypt(password, salt, options, callback)
             *
             * where
             *
             * password and salt are strings or arrays of bytes (Array of Uint8Array)
             * options is
             *
             * {
             *    N:      // CPU/memory cost parameter, must be power of two
             *            // (alternatively, you can specify logN)
             *    r:      // block size
             *    p:      // parallelization parameter
             *    dkLen:  // length of derived key, default = 32
             *    encoding: // optional encoding:
             *                    "base64" - standard Base64 encoding
             *                    "hex" — hex encoding,
             *                    "binary" — Uint8Array,
             *                    undefined/null - Array of bytes
             *    interruptStep: // optional, steps to split calculations (default is 0)
             * }
             *
             * Derives a key from password and salt and calls callback
             * with derived key as the only argument.
             *
             * Calculations are interrupted with setImmediate (or zero setTimeout) at the
             * given interruptSteps to avoid freezing the browser. If it's undefined or zero,
             * the callback is called immediately after the calculation, avoiding setImmediate.
             *
             * Legacy way (only supports p = 1) to call this function is:
             *
             * scrypt(password, salt, logN, r, dkLen, [interruptStep], callback, [encoding])
             *
             * In legacy API, if interruptStep is not given, it defaults to 1000.
             * Pass 0 to have callback called immediately.
             *
             */
            function scrypt(password, salt, logN, r, dkLen, interruptStep, callback, encoding) {
                'use strict';

                function SHA256(m) {
                    /** @const */ var K = [
                        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
                        0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
                        0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
                        0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
                        0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
                        0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
                        0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
                        0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
                        0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
                        0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
                    ];

                    var h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a,
                        h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19,
                        w = new Array(64);

                    function blocks(p) {
                        var off = 0, len = p.length;
                        while (len >= 64) {
                            var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7,
                                u, i, j, t1, t2;

                            for (i = 0; i < 16; i++) {
                                j = off + i * 4;
                                w[i] = ((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |
                                    ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff);
                            }

                            for (i = 16; i < 64; i++) {
                                u = w[i - 2];
                                t1 = ((u >>> 17) | (u << (32 - 17))) ^ ((u >>> 19) | (u << (32 - 19))) ^ (u >>> 10);

                                u = w[i - 15];
                                t2 = ((u >>> 7) | (u << (32 - 7))) ^ ((u >>> 18) | (u << (32 - 18))) ^ (u >>> 3);

                                w[i] = (((t1 + w[i - 7]) | 0) + ((t2 + w[i - 16]) | 0)) | 0;
                            }

                            for (i = 0; i < 64; i++) {
                                t1 = ((((((e >>> 6) | (e << (32 - 6))) ^ ((e >>> 11) | (e << (32 - 11))) ^
                                    ((e >>> 25) | (e << (32 - 25)))) + ((e & f) ^ (~e & g))) | 0) +
                                    ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                                t2 = ((((a >>> 2) | (a << (32 - 2))) ^ ((a >>> 13) | (a << (32 - 13))) ^
                                    ((a >>> 22) | (a << (32 - 22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                                h = g;
                                g = f;
                                f = e;
                                e = (d + t1) | 0;
                                d = c;
                                c = b;
                                b = a;
                                a = (t1 + t2) | 0;
                            }

                            h0 = (h0 + a) | 0;
                            h1 = (h1 + b) | 0;
                            h2 = (h2 + c) | 0;
                            h3 = (h3 + d) | 0;
                            h4 = (h4 + e) | 0;
                            h5 = (h5 + f) | 0;
                            h6 = (h6 + g) | 0;
                            h7 = (h7 + h) | 0;

                            off += 64;
                            len -= 64;
                        }
                    }

                    blocks(m);

                    var i, bytesLeft = m.length % 64,
                        bitLenHi = (m.length / 0x20000000) | 0,
                        bitLenLo = m.length << 3,
                        numZeros = (bytesLeft < 56) ? 56 : 120,
                        p = m.slice(m.length - bytesLeft, m.length);

                    p.push(0x80);
                    for (i = bytesLeft + 1; i < numZeros; i++) p.push(0);
                    p.push((bitLenHi >>> 24) & 0xff);
                    p.push((bitLenHi >>> 16) & 0xff);
                    p.push((bitLenHi >>> 8) & 0xff);
                    p.push((bitLenHi >>> 0) & 0xff);
                    p.push((bitLenLo >>> 24) & 0xff);
                    p.push((bitLenLo >>> 16) & 0xff);
                    p.push((bitLenLo >>> 8) & 0xff);
                    p.push((bitLenLo >>> 0) & 0xff);

                    blocks(p);

                    return [
                        (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                        (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                        (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                        (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                        (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                        (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                        (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                        (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
                    ];
                }

                function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
                    // compress password if it's longer than hash block length
                    password = password.length <= 64 ? password : SHA256(password);

                    var i, innerLen = 64 + salt.length + 4,
                        inner = new Array(innerLen),
                        outerKey = new Array(64),
                        dk = [];

                    // inner = (password ^ ipad) || salt || counter
                    for (i = 0; i < 64; i++) inner[i] = 0x36;
                    for (i = 0; i < password.length; i++) inner[i] ^= password[i];
                    for (i = 0; i < salt.length; i++) inner[64 + i] = salt[i];
                    for (i = innerLen - 4; i < innerLen; i++) inner[i] = 0;

                    // outerKey = password ^ opad
                    for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
                    for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

                    // increments counter inside inner
                    function incrementCounter() {
                        for (var i = innerLen - 1; i >= innerLen - 4; i--) {
                            inner[i]++;
                            if (inner[i] <= 0xff) return;
                            inner[i] = 0;
                        }
                    }

                    // output blocks = SHA256(outerKey || SHA256(inner)) ...
                    while (dkLen >= 32) {
                        incrementCounter();
                        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                        dkLen -= 32;
                    }
                    if (dkLen > 0) {
                        incrementCounter();
                        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
                    }
                    return dk;
                }

                function salsaXOR(tmp, B, bin, bout) {
                    var j0 = tmp[0] ^ B[bin++],
                        j1 = tmp[1] ^ B[bin++],
                        j2 = tmp[2] ^ B[bin++],
                        j3 = tmp[3] ^ B[bin++],
                        j4 = tmp[4] ^ B[bin++],
                        j5 = tmp[5] ^ B[bin++],
                        j6 = tmp[6] ^ B[bin++],
                        j7 = tmp[7] ^ B[bin++],
                        j8 = tmp[8] ^ B[bin++],
                        j9 = tmp[9] ^ B[bin++],
                        j10 = tmp[10] ^ B[bin++],
                        j11 = tmp[11] ^ B[bin++],
                        j12 = tmp[12] ^ B[bin++],
                        j13 = tmp[13] ^ B[bin++],
                        j14 = tmp[14] ^ B[bin++],
                        j15 = tmp[15] ^ B[bin++],
                        u, i;

                    var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                        x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                        x15 = j15;

                    for (i = 0; i < 8; i += 2) {
                        u = x0 + x12;
                        x4 ^= u << 7 | u >>> (32 - 7);
                        u = x4 + x0;
                        x8 ^= u << 9 | u >>> (32 - 9);
                        u = x8 + x4;
                        x12 ^= u << 13 | u >>> (32 - 13);
                        u = x12 + x8;
                        x0 ^= u << 18 | u >>> (32 - 18);

                        u = x5 + x1;
                        x9 ^= u << 7 | u >>> (32 - 7);
                        u = x9 + x5;
                        x13 ^= u << 9 | u >>> (32 - 9);
                        u = x13 + x9;
                        x1 ^= u << 13 | u >>> (32 - 13);
                        u = x1 + x13;
                        x5 ^= u << 18 | u >>> (32 - 18);

                        u = x10 + x6;
                        x14 ^= u << 7 | u >>> (32 - 7);
                        u = x14 + x10;
                        x2 ^= u << 9 | u >>> (32 - 9);
                        u = x2 + x14;
                        x6 ^= u << 13 | u >>> (32 - 13);
                        u = x6 + x2;
                        x10 ^= u << 18 | u >>> (32 - 18);

                        u = x15 + x11;
                        x3 ^= u << 7 | u >>> (32 - 7);
                        u = x3 + x15;
                        x7 ^= u << 9 | u >>> (32 - 9);
                        u = x7 + x3;
                        x11 ^= u << 13 | u >>> (32 - 13);
                        u = x11 + x7;
                        x15 ^= u << 18 | u >>> (32 - 18);

                        u = x0 + x3;
                        x1 ^= u << 7 | u >>> (32 - 7);
                        u = x1 + x0;
                        x2 ^= u << 9 | u >>> (32 - 9);
                        u = x2 + x1;
                        x3 ^= u << 13 | u >>> (32 - 13);
                        u = x3 + x2;
                        x0 ^= u << 18 | u >>> (32 - 18);

                        u = x5 + x4;
                        x6 ^= u << 7 | u >>> (32 - 7);
                        u = x6 + x5;
                        x7 ^= u << 9 | u >>> (32 - 9);
                        u = x7 + x6;
                        x4 ^= u << 13 | u >>> (32 - 13);
                        u = x4 + x7;
                        x5 ^= u << 18 | u >>> (32 - 18);

                        u = x10 + x9;
                        x11 ^= u << 7 | u >>> (32 - 7);
                        u = x11 + x10;
                        x8 ^= u << 9 | u >>> (32 - 9);
                        u = x8 + x11;
                        x9 ^= u << 13 | u >>> (32 - 13);
                        u = x9 + x8;
                        x10 ^= u << 18 | u >>> (32 - 18);

                        u = x15 + x14;
                        x12 ^= u << 7 | u >>> (32 - 7);
                        u = x12 + x15;
                        x13 ^= u << 9 | u >>> (32 - 9);
                        u = x13 + x12;
                        x14 ^= u << 13 | u >>> (32 - 13);
                        u = x14 + x13;
                        x15 ^= u << 18 | u >>> (32 - 18);
                    }

                    B[bout++] = tmp[0] = (x0 + j0) | 0;
                    B[bout++] = tmp[1] = (x1 + j1) | 0;
                    B[bout++] = tmp[2] = (x2 + j2) | 0;
                    B[bout++] = tmp[3] = (x3 + j3) | 0;
                    B[bout++] = tmp[4] = (x4 + j4) | 0;
                    B[bout++] = tmp[5] = (x5 + j5) | 0;
                    B[bout++] = tmp[6] = (x6 + j6) | 0;
                    B[bout++] = tmp[7] = (x7 + j7) | 0;
                    B[bout++] = tmp[8] = (x8 + j8) | 0;
                    B[bout++] = tmp[9] = (x9 + j9) | 0;
                    B[bout++] = tmp[10] = (x10 + j10) | 0;
                    B[bout++] = tmp[11] = (x11 + j11) | 0;
                    B[bout++] = tmp[12] = (x12 + j12) | 0;
                    B[bout++] = tmp[13] = (x13 + j13) | 0;
                    B[bout++] = tmp[14] = (x14 + j14) | 0;
                    B[bout++] = tmp[15] = (x15 + j15) | 0;
                }

                function blockCopy(dst, di, src, si, len) {
                    while (len--) dst[di++] = src[si++];
                }

                function blockXOR(dst, di, src, si, len) {
                    while (len--) dst[di++] ^= src[si++];
                }

                function blockMix(tmp, B, bin, bout, r) {
                    blockCopy(tmp, 0, B, bin + (2 * r - 1) * 16, 16);
                    for (var i = 0; i < 2 * r; i += 2) {
                        salsaXOR(tmp, B, bin + i * 16, bout + i * 8);
                        salsaXOR(tmp, B, bin + i * 16 + 16, bout + i * 8 + r * 16);
                    }
                }

                function integerify(B, bi, r) {
                    return B[bi + (2 * r - 1) * 16];
                }

                function stringToUTF8Bytes(s) {
                    var arr = [];
                    for (var i = 0; i < s.length; i++) {
                        var c = s.charCodeAt(i);
                        if (c < 128) {
                            arr.push(c);
                        } else if (c > 127 && c < 2048) {
                            arr.push((c >> 6) | 192);
                            arr.push((c & 63) | 128);
                        } else {
                            arr.push((c >> 12) | 224);
                            arr.push(((c >> 6) & 63) | 128);
                            arr.push((c & 63) | 128);
                        }
                    }
                    return arr;
                }

                function bytesToHex(p) {
                    /** @const */
                    var enc = '0123456789abcdef'.split('');

                    var len = p.length,
                        arr = [],
                        i = 0;

                    for (; i < len; i++) {
                        arr.push(enc[(p[i] >>> 4) & 15]);
                        arr.push(enc[(p[i] >>> 0) & 15]);
                    }
                    return arr.join('');
                }

                function bytesToBase64(p) {
                    /** @const */
                    var enc = ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' +
                        '0123456789+/').split('');

                    var len = p.length,
                        arr = [],
                        i = 0,
                        a, b, c, t;

                    while (i < len) {
                        a = i < len ? p[i++] : 0;
                        b = i < len ? p[i++] : 0;
                        c = i < len ? p[i++] : 0;
                        t = (a << 16) + (b << 8) + c;
                        arr.push(enc[(t >>> 3 * 6) & 63]);
                        arr.push(enc[(t >>> 2 * 6) & 63]);
                        arr.push(enc[(t >>> 1 * 6) & 63]);
                        arr.push(enc[(t >>> 0 * 6) & 63]);
                    }
                    if (len % 3 > 0) {
                        arr[arr.length - 1] = '=';
                        if (len % 3 === 1) arr[arr.length - 2] = '=';
                    }
                    return arr.join('');
                }


                // Generate key.

                var MAX_UINT = (-1) >>> 0,
                    p = 1;

                if (typeof logN === "object") {
                    // Called as: scrypt(password, salt, opts, callback)
                    if (arguments.length > 4) {
                        throw new Error('scrypt: incorrect number of arguments');
                    }

                    var opts = logN;

                    callback = r;
                    logN = opts.logN;
                    if (typeof logN === 'undefined') {
                        if (typeof opts.N !== 'undefined') {
                            if (opts.N < 2 || opts.N > MAX_UINT)
                                throw new Error('scrypt: N is out of range');

                            if ((opts.N & (opts.N - 1)) !== 0)
                                throw new Error('scrypt: N is not a power of 2');

                            logN = Math.log(opts.N) / Math.LN2;
                        } else {
                            throw new Error('scrypt: missing N parameter');
                        }
                    }
                    p = opts.p || 1;
                    r = opts.r;
                    dkLen = opts.dkLen || 32;
                    interruptStep = opts.interruptStep || 0;
                    encoding = opts.encoding;
                }

                if (p < 1)
                    throw new Error('scrypt: invalid p');

                if (r <= 0)
                    throw new Error('scrypt: invalid r');

                if (logN < 1 || logN > 31)
                    throw new Error('scrypt: logN must be between 1 and 31');


                var N = (1 << logN) >>> 0,
                    XY, V, B, tmp;

                if (r * p >= 1 << 30 || r > MAX_UINT / 128 / p || r > MAX_UINT / 256 || N > MAX_UINT / 128 / r)
                    throw new Error('scrypt: parameters are too large');

                // Decode strings.
                if (typeof password === 'string')
                    password = stringToUTF8Bytes(password);
                if (typeof salt === 'string')
                    salt = stringToUTF8Bytes(salt);

                if (typeof Int32Array !== 'undefined') {
                    //XXX We can use Uint32Array, but Int32Array is faster in Safari.
                    XY = new Int32Array(64 * r);
                    V = new Int32Array(32 * N * r);
                    tmp = new Int32Array(16);
                } else {
                    XY = [];
                    V = [];
                    tmp = new Array(16);
                }
                B = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);

                var xi = 0, yi = 32 * r;

                function smixStart(pos) {
                    for (var i = 0; i < 32 * r; i++) {
                        var j = pos + i * 4;
                        XY[xi + i] = ((B[j + 3] & 0xff) << 24) | ((B[j + 2] & 0xff) << 16) |
                            ((B[j + 1] & 0xff) << 8) | ((B[j + 0] & 0xff) << 0);
                    }
                }

                function smixStep1(start, end) {
                    for (var i = start; i < end; i += 2) {
                        blockCopy(V, i * (32 * r), XY, xi, 32 * r);
                        blockMix(tmp, XY, xi, yi, r);

                        blockCopy(V, (i + 1) * (32 * r), XY, yi, 32 * r);
                        blockMix(tmp, XY, yi, xi, r);
                    }
                }

                function smixStep2(start, end) {
                    for (var i = start; i < end; i += 2) {
                        var j = integerify(XY, xi, r) & (N - 1);
                        blockXOR(XY, xi, V, j * (32 * r), 32 * r);
                        blockMix(tmp, XY, xi, yi, r);

                        j = integerify(XY, yi, r) & (N - 1);
                        blockXOR(XY, yi, V, j * (32 * r), 32 * r);
                        blockMix(tmp, XY, yi, xi, r);
                    }
                }

                function smixFinish(pos) {
                    for (var i = 0; i < 32 * r; i++) {
                        var j = XY[xi + i];
                        B[pos + i * 4 + 0] = (j >>> 0) & 0xff;
                        B[pos + i * 4 + 1] = (j >>> 8) & 0xff;
                        B[pos + i * 4 + 2] = (j >>> 16) & 0xff;
                        B[pos + i * 4 + 3] = (j >>> 24) & 0xff;
                    }
                }

                var nextTick = (typeof setImmediate !== 'undefined') ? setImmediate : setTimeout;

                function interruptedFor(start, end, step, fn, donefn) {
                    (function performStep() {
                        nextTick(function () {
                            fn(start, start + step < end ? start + step : end);
                            start += step;
                            if (start < end)
                                performStep();
                            else
                                donefn();
                        });
                    })();
                }

                function getResult(enc) {
                    var result = PBKDF2_HMAC_SHA256_OneIter(password, B, dkLen);
                    if (enc === 'base64')
                        return bytesToBase64(result);
                    else if (enc === 'hex')
                        return bytesToHex(result);
                    else if (enc === 'binary')
                        return new Uint8Array(result);
                    else
                        return result;
                }

                // Blocking variant.
                function calculateSync() {
                    for (var i = 0; i < p; i++) {
                        smixStart(i * 128 * r);
                        smixStep1(0, N);
                        smixStep2(0, N);
                        smixFinish(i * 128 * r);
                    }
                    callback(getResult(encoding));
                }

                // Async variant.
                function calculateAsync(i) {
                    smixStart(i * 128 * r);
                    interruptedFor(0, N, interruptStep * 2, smixStep1, function () {
                        interruptedFor(0, N, interruptStep * 2, smixStep2, function () {
                            smixFinish(i * 128 * r);
                            if (i + 1 < p) {
                                nextTick(function () {
                                    calculateAsync(i + 1);
                                });
                            } else {
                                callback(getResult(encoding));
                            }
                        });
                    });
                }

                if (typeof interruptStep === 'function') {
                    // Called as: scrypt(...,      callback, [encoding])
                    //  shifting: scrypt(..., interruptStep,  callback, [encoding])
                    encoding = callback;
                    callback = interruptStep;
                    interruptStep = 1000;
                }

                if (interruptStep <= 0) {
                    calculateSync();
                } else {
                    calculateAsync(0);
                }
            }

            if (typeof module !== 'undefined') module.exports = scrypt;

        }).call(this, require("timers").setImmediate)
    }, {"timers": 158}],
    430: [function (require, module, exports) {
        'use strict'
        module.exports = require('./lib')(require('./lib/elliptic'))

    }, {"./lib": 434, "./lib/elliptic": 433}],
    431: [function (require, module, exports) {
        (function (Buffer) {
            'use strict'
            var toString = Object.prototype.toString

// TypeError
            exports.isArray = function (value, message) {
                if (!Array.isArray(value)) throw TypeError(message)
            }

            exports.isBoolean = function (value, message) {
                if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
            }

            exports.isBuffer = function (value, message) {
                if (!Buffer.isBuffer(value)) throw TypeError(message)
            }

            exports.isFunction = function (value, message) {
                if (toString.call(value) !== '[object Function]') throw TypeError(message)
            }

            exports.isNumber = function (value, message) {
                if (toString.call(value) !== '[object Number]') throw TypeError(message)
            }

            exports.isObject = function (value, message) {
                if (toString.call(value) !== '[object Object]') throw TypeError(message)
            }

// RangeError
            exports.isBufferLength = function (buffer, length, message) {
                if (buffer.length !== length) throw RangeError(message)
            }

            exports.isBufferLength2 = function (buffer, length1, length2, message) {
                if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
            }

            exports.isLengthGTZero = function (value, message) {
                if (value.length === 0) throw RangeError(message)
            }

            exports.isNumberInInterval = function (number, x, y, message) {
                if (number <= x || number >= y) throw RangeError(message)
            }

        }).call(this, {"isBuffer": require("../../../../../../.nvm/versions/node/v8.15.1/lib/node_modules/browserify/node_modules/is-buffer/index.js")})
    }, {"../../../../../../.nvm/versions/node/v8.15.1/lib/node_modules/browserify/node_modules/is-buffer/index.js": 104}],
    432: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var bip66 = require('bip66')

        var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
            // begin
            0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
            // private key
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            // middle
            0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
            0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
            0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
            0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
            0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
            0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
            // public key
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00
        ])

        var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
            // begin
            0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
            // private key
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            // middle
            0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
            0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
            0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
            0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
            0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
            0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
            0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
            0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
            // public key
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00
        ])

        exports.privateKeyExport = function (privateKey, publicKey, compressed) {
            var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
            privateKey.copy(result, compressed ? 8 : 9)
            publicKey.copy(result, compressed ? 181 : 214)
            return result
        }

        exports.privateKeyImport = function (privateKey) {
            var length = privateKey.length

            // sequence header
            var index = 0
            if (length < index + 1 || privateKey[index] !== 0x30) return
            index += 1

            // sequence length constructor
            if (length < index + 1 || !(privateKey[index] & 0x80)) return

            var lenb = privateKey[index] & 0x7f
            index += 1
            if (lenb < 1 || lenb > 2) return
            if (length < index + lenb) return

            // sequence length
            var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
            index += lenb
            if (length < index + len) return

            // sequence element 0: version number (=1)
            if (length < index + 3 ||
                privateKey[index] !== 0x02 ||
                privateKey[index + 1] !== 0x01 ||
                privateKey[index + 2] !== 0x01) {
                return
            }
            index += 3

            // sequence element 1: octet string, up to 32 bytes
            if (length < index + 2 ||
                privateKey[index] !== 0x04 ||
                privateKey[index + 1] > 0x20 ||
                length < index + 2 + privateKey[index + 1]) {
                return
            }

            return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
        }

        exports.signatureExport = function (sigObj) {
            var r = Buffer.concat([Buffer.from([0]), sigObj.r])
            for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) ;

            var s = Buffer.concat([Buffer.from([0]), sigObj.s])
            for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) ;

            return bip66.encode(r.slice(posR), s.slice(posS))
        }

        exports.signatureImport = function (sig) {
            var r = Buffer.alloc(32, 0)
            var s = Buffer.alloc(32, 0)

            try {
                var sigObj = bip66.decode(sig)
                if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
                if (sigObj.r.length > 32) throw new Error('R length is too long')
                if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
                if (sigObj.s.length > 32) throw new Error('S length is too long')
            } catch (err) {
                return
            }

            sigObj.r.copy(r, 32 - sigObj.r.length)
            sigObj.s.copy(s, 32 - sigObj.s.length)

            return {r: r, s: s}
        }

        exports.signatureImportLax = function (sig) {
            var r = Buffer.alloc(32, 0)
            var s = Buffer.alloc(32, 0)

            var length = sig.length
            var index = 0

            // sequence tag byte
            if (sig[index++] !== 0x30) return

            // sequence length byte
            var lenbyte = sig[index++]
            if (lenbyte & 0x80) {
                index += lenbyte - 0x80
                if (index > length) return
            }

            // sequence tag byte for r
            if (sig[index++] !== 0x02) return

            // length for r
            var rlen = sig[index++]
            if (rlen & 0x80) {
                lenbyte = rlen - 0x80
                if (index + lenbyte > length) return
                for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1) ;
                for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
            }
            if (rlen > length - index) return
            var rindex = index
            index += rlen

            // sequence tag byte for s
            if (sig[index++] !== 0x02) return

            // length for s
            var slen = sig[index++]
            if (slen & 0x80) {
                lenbyte = slen - 0x80
                if (index + lenbyte > length) return
                for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1) ;
                for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
            }
            if (slen > length - index) return
            var sindex = index
            index += slen

            // ignore leading zeros in r
            for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1) ;
            // copy r value
            if (rlen > 32) return
            var rvalue = sig.slice(rindex, rindex + rlen)
            rvalue.copy(r, 32 - rvalue.length)

            // ignore leading zeros in s
            for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1) ;
            // copy s value
            if (slen > 32) return
            var svalue = sig.slice(sindex, sindex + slen)
            svalue.copy(s, 32 - svalue.length)

            return {r: r, s: s}
        }

    }, {"bip66": 193, "safe-buffer": 428}],
    433: [function (require, module, exports) {
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var createHash = require('create-hash')
        var BN = require('bn.js')
        var EC = require('elliptic').ec

        var messages = require('../messages.json')

        var ec = new EC('secp256k1')
        var ecparams = ec.curve

        function loadCompressedPublicKey(first, xBuffer) {
            var x = new BN(xBuffer)

            // overflow
            if (x.cmp(ecparams.p) >= 0) return null
            x = x.toRed(ecparams.red)

            // compute corresponding Y
            var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
            if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

            return ec.keyPair({pub: {x: x, y: y}})
        }

        function loadUncompressedPublicKey(first, xBuffer, yBuffer) {
            var x = new BN(xBuffer)
            var y = new BN(yBuffer)

            // overflow
            if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

            x = x.toRed(ecparams.red)
            y = y.toRed(ecparams.red)

            // is odd flag
            if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

            // x*x*x + b = y*y
            var x3 = x.redSqr().redIMul(x)
            if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

            return ec.keyPair({pub: {x: x, y: y}})
        }

        function loadPublicKey(publicKey) {
            var first = publicKey[0]
            switch (first) {
                case 0x02:
                case 0x03:
                    if (publicKey.length !== 33) return null
                    return loadCompressedPublicKey(first, publicKey.slice(1, 33))
                case 0x04:
                case 0x06:
                case 0x07:
                    if (publicKey.length !== 65) return null
                    return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
                default:
                    return null
            }
        }

        exports.privateKeyVerify = function (privateKey) {
            var bn = new BN(privateKey)
            return bn.cmp(ecparams.n) < 0 && !bn.isZero()
        }

        exports.privateKeyExport = function (privateKey, compressed) {
            var d = new BN(privateKey)
            if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

            return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
        }

        exports.privateKeyNegate = function (privateKey) {
            var bn = new BN(privateKey)
            return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyModInverse = function (privateKey) {
            var bn = new BN(privateKey)
            if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)

            return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyTweakAdd = function (privateKey, tweak) {
            var bn = new BN(tweak)
            if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

            bn.iadd(new BN(privateKey))
            if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
            if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

            return bn.toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyTweakMul = function (privateKey, tweak) {
            var bn = new BN(tweak)
            if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

            bn.imul(new BN(privateKey))
            if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)

            return bn.toArrayLike(Buffer, 'be', 32)
        }

        exports.publicKeyCreate = function (privateKey, compressed) {
            var d = new BN(privateKey)
            if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)

            return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
        }

        exports.publicKeyConvert = function (publicKey, compressed) {
            var pair = loadPublicKey(publicKey)
            if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

            return Buffer.from(pair.getPublic(compressed, true))
        }

        exports.publicKeyVerify = function (publicKey) {
            return loadPublicKey(publicKey) !== null
        }

        exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
            var pair = loadPublicKey(publicKey)
            if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

            tweak = new BN(tweak)
            if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

            var point = ecparams.g.mul(tweak).add(pair.pub)
            if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

            return Buffer.from(point.encode(true, compressed))
        }

        exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
            var pair = loadPublicKey(publicKey)
            if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

            tweak = new BN(tweak)
            if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

            return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
        }

        exports.publicKeyCombine = function (publicKeys, compressed) {
            var pairs = new Array(publicKeys.length)
            for (var i = 0; i < publicKeys.length; ++i) {
                pairs[i] = loadPublicKey(publicKeys[i])
                if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
            }

            var point = pairs[0].pub
            for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
            if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)

            return Buffer.from(point.encode(true, compressed))
        }

        exports.signatureNormalize = function (signature) {
            var r = new BN(signature.slice(0, 32))
            var s = new BN(signature.slice(32, 64))
            if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

            var result = Buffer.from(signature)
            if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)

            return result
        }

        exports.signatureExport = function (signature) {
            var r = signature.slice(0, 32)
            var s = signature.slice(32, 64)
            if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

            return {r: r, s: s}
        }

        exports.signatureImport = function (sigObj) {
            var r = new BN(sigObj.r)
            if (r.cmp(ecparams.n) >= 0) r = new BN(0)

            var s = new BN(sigObj.s)
            if (s.cmp(ecparams.n) >= 0) s = new BN(0)

            return Buffer.concat([
                r.toArrayLike(Buffer, 'be', 32),
                s.toArrayLike(Buffer, 'be', 32)
            ])
        }

        exports.sign = function (message, privateKey, noncefn, data) {
            if (typeof noncefn === 'function') {
                var getNonce = noncefn
                noncefn = function (counter) {
                    var nonce = getNonce(message, privateKey, null, data, counter)
                    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)

                    return new BN(nonce)
                }
            }

            var d = new BN(privateKey)
            if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)

            var result = ec.sign(message, privateKey, {canonical: true, k: noncefn, pers: data})
            return {
                signature: Buffer.concat([
                    result.r.toArrayLike(Buffer, 'be', 32),
                    result.s.toArrayLike(Buffer, 'be', 32)
                ]),
                recovery: result.recoveryParam
            }
        }

        exports.verify = function (message, signature, publicKey) {
            var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}

            var sigr = new BN(sigObj.r)
            var sigs = new BN(sigObj.s)
            if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
            if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

            var pair = loadPublicKey(publicKey)
            if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

            return ec.verify(message, sigObj, {x: pair.pub.x, y: pair.pub.y})
        }

        exports.recover = function (message, signature, recovery, compressed) {
            var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}

            var sigr = new BN(sigObj.r)
            var sigs = new BN(sigObj.s)
            if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

            try {
                if (sigr.isZero() || sigs.isZero()) throw new Error()

                var point = ec.recoverPubKey(message, sigObj, recovery)
                return Buffer.from(point.encode(true, compressed))
            } catch (err) {
                throw new Error(messages.ECDSA_RECOVER_FAIL)
            }
        }

        exports.ecdh = function (publicKey, privateKey) {
            var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
            return createHash('sha256').update(shared).digest()
        }

        exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
            var pair = loadPublicKey(publicKey)
            if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

            var scalar = new BN(privateKey)
            if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)

            return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
        }

    }, {"../messages.json": 435, "bn.js": 195, "create-hash": 253, "elliptic": 436, "safe-buffer": 428}],
    434: [function (require, module, exports) {
        'use strict'
        var assert = require('./assert')
        var der = require('./der')
        var messages = require('./messages.json')

        function initCompressedValue(value, defaultValue) {
            if (value === undefined) return defaultValue

            assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
            return value
        }

        module.exports = function (secp256k1) {
            return {
                privateKeyVerify: function (privateKey) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
                },

                privateKeyExport: function (privateKey, compressed) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)
                    var publicKey = secp256k1.privateKeyExport(privateKey, compressed)

                    return der.privateKeyExport(privateKey, publicKey, compressed)
                },

                privateKeyImport: function (privateKey) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)

                    privateKey = der.privateKeyImport(privateKey)
                    if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

                    throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
                },

                privateKeyNegate: function (privateKey) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    return secp256k1.privateKeyNegate(privateKey)
                },

                privateKeyModInverse: function (privateKey) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    return secp256k1.privateKeyModInverse(privateKey)
                },

                privateKeyTweakAdd: function (privateKey, tweak) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
                    assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

                    return secp256k1.privateKeyTweakAdd(privateKey, tweak)
                },

                privateKeyTweakMul: function (privateKey, tweak) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
                    assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

                    return secp256k1.privateKeyTweakMul(privateKey, tweak)
                },

                publicKeyCreate: function (privateKey, compressed) {
                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.publicKeyCreate(privateKey, compressed)
                },

                publicKeyConvert: function (publicKey, compressed) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.publicKeyConvert(publicKey, compressed)
                },

                publicKeyVerify: function (publicKey) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    return secp256k1.publicKeyVerify(publicKey)
                },

                publicKeyTweakAdd: function (publicKey, tweak, compressed) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
                    assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
                },

                publicKeyTweakMul: function (publicKey, tweak, compressed) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
                    assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
                },

                publicKeyCombine: function (publicKeys, compressed) {
                    assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
                    assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
                    for (var i = 0; i < publicKeys.length; ++i) {
                        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
                        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
                    }

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.publicKeyCombine(publicKeys, compressed)
                },

                signatureNormalize: function (signature) {
                    assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    return secp256k1.signatureNormalize(signature)
                },

                signatureExport: function (signature) {
                    assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    var sigObj = secp256k1.signatureExport(signature)
                    return der.signatureExport(sigObj)
                },

                signatureImport: function (sig) {
                    assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    var sigObj = der.signatureImport(sig)
                    if (sigObj) return secp256k1.signatureImport(sigObj)

                    throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
                },

                signatureImportLax: function (sig) {
                    assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    var sigObj = der.signatureImportLax(sig)
                    if (sigObj) return secp256k1.signatureImport(sigObj)

                    throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
                },

                sign: function (message, privateKey, options) {
                    assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
                    assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    var data = null
                    var noncefn = null
                    if (options !== undefined) {
                        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)

                        if (options.data !== undefined) {
                            assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
                            assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
                            data = options.data
                        }

                        if (options.noncefn !== undefined) {
                            assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
                            noncefn = options.noncefn
                        }
                    }

                    return secp256k1.sign(message, privateKey, noncefn, data)
                },

                verify: function (message, signature, publicKey) {
                    assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
                    assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

                    assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    return secp256k1.verify(message, signature, publicKey)
                },

                recover: function (message, signature, recovery, compressed) {
                    assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
                    assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

                    assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
                    assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

                    assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
                    assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.recover(message, signature, recovery, compressed)
                },

                ecdh: function (publicKey, privateKey) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    return secp256k1.ecdh(publicKey, privateKey)
                },

                ecdhUnsafe: function (publicKey, privateKey, compressed) {
                    assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
                    assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

                    assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
                    assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

                    compressed = initCompressedValue(compressed, true)

                    return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
                }
            }
        }

    }, {"./assert": 431, "./der": 432, "./messages.json": 435}],
    435: [function (require, module, exports) {
        module.exports = {
            "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
            "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
            "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
            "EC_PRIVATE_KEY_RANGE_INVALID": "private key range is invalid",
            "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
            "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
            "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
            "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
            "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
            "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
            "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
            "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
            "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
            "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
            "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
            "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
            "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
            "ECDH_FAIL": "scalar was invalid (zero or overflow)",
            "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
            "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
            "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
            "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
            "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
            "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
            "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
            "MSG32_TYPE_INVALID": "message should be a Buffer",
            "MSG32_LENGTH_INVALID": "message length is invalid",
            "OPTIONS_TYPE_INVALID": "options should be an Object",
            "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
            "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
            "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
            "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
            "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
            "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
            "TWEAK_LENGTH_INVALID": "tweak length is invalid"
        }

    }, {}],
    436: [function (require, module, exports) {
        arguments[4][70][0].apply(exports, arguments)
    }, {
        "../package.json": 451,
        "./elliptic/curve": 439,
        "./elliptic/curves": 442,
        "./elliptic/ec": 443,
        "./elliptic/eddsa": 446,
        "./elliptic/utils": 450,
        "brorand": 196,
        "dup": 70
    }],
    437: [function (require, module, exports) {
        arguments[4][291][0].apply(exports, arguments)
    }, {"../utils": 450, "bn.js": 195, "dup": 291}],
    438: [function (require, module, exports) {
        arguments[4][72][0].apply(exports, arguments)
    }, {"../utils": 450, "./base": 437, "bn.js": 195, "dup": 72, "inherits": 388}],
    439: [function (require, module, exports) {
        arguments[4][73][0].apply(exports, arguments)
    }, {"./base": 437, "./edwards": 438, "./mont": 440, "./short": 441, "dup": 73}],
    440: [function (require, module, exports) {
        arguments[4][74][0].apply(exports, arguments)
    }, {"../utils": 450, "./base": 437, "bn.js": 195, "dup": 74, "inherits": 388}],
    441: [function (require, module, exports) {
        arguments[4][75][0].apply(exports, arguments)
    }, {"../utils": 450, "./base": 437, "bn.js": 195, "dup": 75, "inherits": 388}],
    442: [function (require, module, exports) {
        arguments[4][76][0].apply(exports, arguments)
    }, {"./curve": 439, "./precomputed/secp256k1": 449, "./utils": 450, "dup": 76, "hash.js": 375}],
    443: [function (require, module, exports) {
        arguments[4][77][0].apply(exports, arguments)
    }, {
        "../curves": 442,
        "../utils": 450,
        "./key": 444,
        "./signature": 445,
        "bn.js": 195,
        "brorand": 196,
        "dup": 77,
        "hmac-drbg": 387
    }],
    444: [function (require, module, exports) {
        arguments[4][78][0].apply(exports, arguments)
    }, {"../utils": 450, "bn.js": 195, "dup": 78}],
    445: [function (require, module, exports) {
        arguments[4][79][0].apply(exports, arguments)
    }, {"../utils": 450, "bn.js": 195, "dup": 79}],
    446: [function (require, module, exports) {
        arguments[4][80][0].apply(exports, arguments)
    }, {"../curves": 442, "../utils": 450, "./key": 447, "./signature": 448, "dup": 80, "hash.js": 375}],
    447: [function (require, module, exports) {
        arguments[4][81][0].apply(exports, arguments)
    }, {"../utils": 450, "dup": 81}],
    448: [function (require, module, exports) {
        arguments[4][82][0].apply(exports, arguments)
    }, {"../utils": 450, "bn.js": 195, "dup": 82}],
    449: [function (require, module, exports) {
        arguments[4][83][0].apply(exports, arguments)
    }, {"dup": 83}],
    450: [function (require, module, exports) {
        arguments[4][304][0].apply(exports, arguments)
    }, {"bn.js": 195, "dup": 304, "minimalistic-assert": 409, "minimalistic-crypto-utils": 410}],
    451: [function (require, module, exports) {
        module.exports = {
            "_from": "elliptic@^6.5.2",
            "_id": "elliptic@6.5.2",
            "_inBundle": false,
            "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
            "_location": "/secp256k1/elliptic",
            "_phantomChildren": {},
            "_requested": {
                "type": "range",
                "registry": true,
                "raw": "elliptic@^6.5.2",
                "name": "elliptic",
                "escapedName": "elliptic",
                "rawSpec": "^6.5.2",
                "saveSpec": null,
                "fetchSpec": "^6.5.2"
            },
            "_requiredBy": [
                "/secp256k1"
            ],
            "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
            "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762",
            "_spec": "elliptic@^6.5.2",
            "_where": "/home/deso/Documents/recheck/recheck-clientjs-library/node_modules/secp256k1",
            "author": {
                "name": "Fedor Indutny",
                "email": "fedor@indutny.com"
            },
            "bugs": {
                "url": "https://github.com/indutny/elliptic/issues"
            },
            "bundleDependencies": false,
            "dependencies": {
                "bn.js": "^4.4.0",
                "brorand": "^1.0.1",
                "hash.js": "^1.0.0",
                "hmac-drbg": "^1.0.0",
                "inherits": "^2.0.1",
                "minimalistic-assert": "^1.0.0",
                "minimalistic-crypto-utils": "^1.0.0"
            },
            "deprecated": false,
            "description": "EC cryptography",
            "devDependencies": {
                "brfs": "^1.4.3",
                "coveralls": "^3.0.8",
                "grunt": "^1.0.4",
                "grunt-browserify": "^5.0.0",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-connect": "^1.0.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^1.0.1",
                "grunt-mocha-istanbul": "^3.0.1",
                "grunt-saucelabs": "^9.0.1",
                "istanbul": "^0.4.2",
                "jscs": "^3.0.7",
                "jshint": "^2.10.3",
                "mocha": "^6.2.2"
            },
            "files": [
                "lib"
            ],
            "homepage": "https://github.com/indutny/elliptic",
            "keywords": [
                "EC",
                "Elliptic",
                "curve",
                "Cryptography"
            ],
            "license": "MIT",
            "main": "lib/elliptic.js",
            "name": "elliptic",
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/indutny/elliptic.git"
            },
            "scripts": {
                "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "lint": "npm run jscs && npm run jshint",
                "test": "npm run lint && npm run unit",
                "unit": "istanbul test _mocha --reporter=spec test/index.js",
                "version": "grunt dist && git add dist/"
            },
            "version": "6.5.2"
        }

    }, {}],
    452: [function (require, module, exports) {
        var BLAKE2s = require('blake2s-js')
        var scrypt = require('scrypt-async')
        var nacl = require('tweetnacl')
        var base64 = require('base64-js')

// Code inspired by:
// https://github.com/kaepora/miniLock/blob/master/src/js/miniLock.js

// Extracted from tweetnacl-util-js
// https://github.com/dchest/tweetnacl-util-js/blob/master/nacl-util.js#L16
        function decodeUTF8(s) {
            var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length)
            for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i)
            return b
        }

// Input:
//   key                      // User key hash (Uint8Array)
//   salt                     // Salt (email or username) (Uint8Array)
//   logN              = 17   // CPU/memory cost parameter (Integer 1 to 31)
//   r                 = 8    // Block size parameter
//   dkLen             = 64   // Length of derived key in Bytes
//   interruptStep     = 1000 // Steps to split calculation with timeouts
//   callback function
//
// Result:
//   Returns 64 bytes of scrypt derived key material in an Array,
//   which is then passed to the callback.
//
        function getScryptKey(key, salt, logN, r, dkLen, interruptStep, callback) {
            'use strict'

            scrypt(key, salt, logN, r, dkLen, interruptStep, function (keyBytes) {
                return callback(keyBytes)
            }, null)
        }

// Input:
//  email       // A UTF-8 username or email
//  password    // A UTF-8 passphrase
//  callback    // A callback function
//
// Result:
//   An object literal with keys
//
        module.exports = function session(email, password, callback) {
            'use strict'

            // A 32 Byte BLAKE2s hash of the password bytes
            var keyHash = new BLAKE2s()
            keyHash.update(decodeUTF8(password))
            var scryptKey = keyHash.digest()

            getScryptKey(scryptKey, email, 17, 8, 64, 1000, function (scryptByteArray) {
                try {
                    var keys, seedBytesUint8Array, boxKeyPairSeed,
                        signKeyPairSeed, signKeyPair

                    // Convert scrypt Array of Bytes to Uint8Array
                    seedBytesUint8Array = new Uint8Array(scryptByteArray)

                    // First 32 Bytes of scrypt seed for encryption keys
                    // Note : first 32 Bytes are the same for dkLen 32 (old way) and 64!
                    boxKeyPairSeed = seedBytesUint8Array.subarray(0, 32)
                    keys = nacl.box.keyPair.fromSecretKey(boxKeyPairSeed)
                    keys.publicKeyBase64 = base64.fromByteArray(keys.publicKey)
                    keys.secretKeyBase64 = base64.fromByteArray(keys.secretKey)

                    // Last 32 Bytes of scrypt seed for signing keys
                    signKeyPairSeed = seedBytesUint8Array.subarray(32, 64)
                    signKeyPair = nacl.sign.keyPair.fromSeed(signKeyPairSeed)
                    keys.publicSignKey = signKeyPair.publicKey
                    keys.publicSignKeyBase64 = base64.fromByteArray(signKeyPair.publicKey)
                    keys.secretSignKey = signKeyPair.secretKey
                    keys.secretSignKeyBase64 = base64.fromByteArray(signKeyPair.secretKey)

                    return callback(null, keys)
                } catch (err) {
                    return callback(err)
                }
            })
        }

    }, {"base64-js": 192, "blake2s-js": 194, "scrypt-async": 429, "tweetnacl": 453}],
    453: [function (require, module, exports) {
        (function (nacl) {
            'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

            var gf = function (init) {
                var i, r = new Float64Array(16);
                if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
                return r;
            };

//  Pluggable, initialized in high-level API below.
            var randombytes = function (/* x, n */) {
                throw new Error('no PRNG');
            };

            var _0 = new Uint8Array(16);
            var _9 = new Uint8Array(32);
            _9[0] = 9;

            var gf0 = gf(),
                gf1 = gf([1]),
                _121665 = gf([0xdb41, 1]),
                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
                X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
                Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

            function ts64(x, i, h, l) {
                x[i] = (h >> 24) & 0xff;
                x[i + 1] = (h >> 16) & 0xff;
                x[i + 2] = (h >> 8) & 0xff;
                x[i + 3] = h & 0xff;
                x[i + 4] = (l >> 24) & 0xff;
                x[i + 5] = (l >> 16) & 0xff;
                x[i + 6] = (l >> 8) & 0xff;
                x[i + 7] = l & 0xff;
            }

            function vn(x, xi, y, yi, n) {
                var i, d = 0;
                for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
                return (1 & ((d - 1) >>> 8)) - 1;
            }

            function crypto_verify_16(x, xi, y, yi) {
                return vn(x, xi, y, yi, 16);
            }

            function crypto_verify_32(x, xi, y, yi) {
                return vn(x, xi, y, yi, 32);
            }

            function core_salsa20(o, p, k, c) {
                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                    j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                    j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                    j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                    j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                    j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                    j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                    j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                    j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                    j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                    j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                    j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                    j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                    j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                    j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                    j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u << 7 | u >>> (32 - 7);
                    u = x4 + x0 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x4 | 0;
                    x12 ^= u << 13 | u >>> (32 - 13);
                    u = x12 + x8 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x1 | 0;
                    x9 ^= u << 7 | u >>> (32 - 7);
                    u = x9 + x5 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x9 | 0;
                    x1 ^= u << 13 | u >>> (32 - 13);
                    u = x1 + x13 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x6 | 0;
                    x14 ^= u << 7 | u >>> (32 - 7);
                    u = x14 + x10 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x14 | 0;
                    x6 ^= u << 13 | u >>> (32 - 13);
                    u = x6 + x2 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x11 | 0;
                    x3 ^= u << 7 | u >>> (32 - 7);
                    u = x3 + x15 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x3 | 0;
                    x11 ^= u << 13 | u >>> (32 - 13);
                    u = x11 + x7 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);

                    u = x0 + x3 | 0;
                    x1 ^= u << 7 | u >>> (32 - 7);
                    u = x1 + x0 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x1 | 0;
                    x3 ^= u << 13 | u >>> (32 - 13);
                    u = x3 + x2 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x4 | 0;
                    x6 ^= u << 7 | u >>> (32 - 7);
                    u = x6 + x5 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x6 | 0;
                    x4 ^= u << 13 | u >>> (32 - 13);
                    u = x4 + x7 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x9 | 0;
                    x11 ^= u << 7 | u >>> (32 - 7);
                    u = x11 + x10 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x11 | 0;
                    x9 ^= u << 13 | u >>> (32 - 13);
                    u = x9 + x8 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x14 | 0;
                    x12 ^= u << 7 | u >>> (32 - 7);
                    u = x12 + x15 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x12 | 0;
                    x14 ^= u << 13 | u >>> (32 - 13);
                    u = x14 + x13 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);
                }
                x0 = x0 + j0 | 0;
                x1 = x1 + j1 | 0;
                x2 = x2 + j2 | 0;
                x3 = x3 + j3 | 0;
                x4 = x4 + j4 | 0;
                x5 = x5 + j5 | 0;
                x6 = x6 + j6 | 0;
                x7 = x7 + j7 | 0;
                x8 = x8 + j8 | 0;
                x9 = x9 + j9 | 0;
                x10 = x10 + j10 | 0;
                x11 = x11 + j11 | 0;
                x12 = x12 + j12 | 0;
                x13 = x13 + j13 | 0;
                x14 = x14 + j14 | 0;
                x15 = x15 + j15 | 0;

                o[0] = x0 >>> 0 & 0xff;
                o[1] = x0 >>> 8 & 0xff;
                o[2] = x0 >>> 16 & 0xff;
                o[3] = x0 >>> 24 & 0xff;

                o[4] = x1 >>> 0 & 0xff;
                o[5] = x1 >>> 8 & 0xff;
                o[6] = x1 >>> 16 & 0xff;
                o[7] = x1 >>> 24 & 0xff;

                o[8] = x2 >>> 0 & 0xff;
                o[9] = x2 >>> 8 & 0xff;
                o[10] = x2 >>> 16 & 0xff;
                o[11] = x2 >>> 24 & 0xff;

                o[12] = x3 >>> 0 & 0xff;
                o[13] = x3 >>> 8 & 0xff;
                o[14] = x3 >>> 16 & 0xff;
                o[15] = x3 >>> 24 & 0xff;

                o[16] = x4 >>> 0 & 0xff;
                o[17] = x4 >>> 8 & 0xff;
                o[18] = x4 >>> 16 & 0xff;
                o[19] = x4 >>> 24 & 0xff;

                o[20] = x5 >>> 0 & 0xff;
                o[21] = x5 >>> 8 & 0xff;
                o[22] = x5 >>> 16 & 0xff;
                o[23] = x5 >>> 24 & 0xff;

                o[24] = x6 >>> 0 & 0xff;
                o[25] = x6 >>> 8 & 0xff;
                o[26] = x6 >>> 16 & 0xff;
                o[27] = x6 >>> 24 & 0xff;

                o[28] = x7 >>> 0 & 0xff;
                o[29] = x7 >>> 8 & 0xff;
                o[30] = x7 >>> 16 & 0xff;
                o[31] = x7 >>> 24 & 0xff;

                o[32] = x8 >>> 0 & 0xff;
                o[33] = x8 >>> 8 & 0xff;
                o[34] = x8 >>> 16 & 0xff;
                o[35] = x8 >>> 24 & 0xff;

                o[36] = x9 >>> 0 & 0xff;
                o[37] = x9 >>> 8 & 0xff;
                o[38] = x9 >>> 16 & 0xff;
                o[39] = x9 >>> 24 & 0xff;

                o[40] = x10 >>> 0 & 0xff;
                o[41] = x10 >>> 8 & 0xff;
                o[42] = x10 >>> 16 & 0xff;
                o[43] = x10 >>> 24 & 0xff;

                o[44] = x11 >>> 0 & 0xff;
                o[45] = x11 >>> 8 & 0xff;
                o[46] = x11 >>> 16 & 0xff;
                o[47] = x11 >>> 24 & 0xff;

                o[48] = x12 >>> 0 & 0xff;
                o[49] = x12 >>> 8 & 0xff;
                o[50] = x12 >>> 16 & 0xff;
                o[51] = x12 >>> 24 & 0xff;

                o[52] = x13 >>> 0 & 0xff;
                o[53] = x13 >>> 8 & 0xff;
                o[54] = x13 >>> 16 & 0xff;
                o[55] = x13 >>> 24 & 0xff;

                o[56] = x14 >>> 0 & 0xff;
                o[57] = x14 >>> 8 & 0xff;
                o[58] = x14 >>> 16 & 0xff;
                o[59] = x14 >>> 24 & 0xff;

                o[60] = x15 >>> 0 & 0xff;
                o[61] = x15 >>> 8 & 0xff;
                o[62] = x15 >>> 16 & 0xff;
                o[63] = x15 >>> 24 & 0xff;
            }

            function core_hsalsa20(o, p, k, c) {
                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                    j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                    j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                    j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                    j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                    j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                    j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                    j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                    j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                    j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                    j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                    j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                    j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                    j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                    j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                    j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u << 7 | u >>> (32 - 7);
                    u = x4 + x0 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x4 | 0;
                    x12 ^= u << 13 | u >>> (32 - 13);
                    u = x12 + x8 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x1 | 0;
                    x9 ^= u << 7 | u >>> (32 - 7);
                    u = x9 + x5 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x9 | 0;
                    x1 ^= u << 13 | u >>> (32 - 13);
                    u = x1 + x13 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x6 | 0;
                    x14 ^= u << 7 | u >>> (32 - 7);
                    u = x14 + x10 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x14 | 0;
                    x6 ^= u << 13 | u >>> (32 - 13);
                    u = x6 + x2 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x11 | 0;
                    x3 ^= u << 7 | u >>> (32 - 7);
                    u = x3 + x15 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x3 | 0;
                    x11 ^= u << 13 | u >>> (32 - 13);
                    u = x11 + x7 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);

                    u = x0 + x3 | 0;
                    x1 ^= u << 7 | u >>> (32 - 7);
                    u = x1 + x0 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x1 | 0;
                    x3 ^= u << 13 | u >>> (32 - 13);
                    u = x3 + x2 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x4 | 0;
                    x6 ^= u << 7 | u >>> (32 - 7);
                    u = x6 + x5 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x6 | 0;
                    x4 ^= u << 13 | u >>> (32 - 13);
                    u = x4 + x7 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x9 | 0;
                    x11 ^= u << 7 | u >>> (32 - 7);
                    u = x11 + x10 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x11 | 0;
                    x9 ^= u << 13 | u >>> (32 - 13);
                    u = x9 + x8 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x14 | 0;
                    x12 ^= u << 7 | u >>> (32 - 7);
                    u = x12 + x15 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x12 | 0;
                    x14 ^= u << 13 | u >>> (32 - 13);
                    u = x14 + x13 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);
                }

                o[0] = x0 >>> 0 & 0xff;
                o[1] = x0 >>> 8 & 0xff;
                o[2] = x0 >>> 16 & 0xff;
                o[3] = x0 >>> 24 & 0xff;

                o[4] = x5 >>> 0 & 0xff;
                o[5] = x5 >>> 8 & 0xff;
                o[6] = x5 >>> 16 & 0xff;
                o[7] = x5 >>> 24 & 0xff;

                o[8] = x10 >>> 0 & 0xff;
                o[9] = x10 >>> 8 & 0xff;
                o[10] = x10 >>> 16 & 0xff;
                o[11] = x10 >>> 24 & 0xff;

                o[12] = x15 >>> 0 & 0xff;
                o[13] = x15 >>> 8 & 0xff;
                o[14] = x15 >>> 16 & 0xff;
                o[15] = x15 >>> 24 & 0xff;

                o[16] = x6 >>> 0 & 0xff;
                o[17] = x6 >>> 8 & 0xff;
                o[18] = x6 >>> 16 & 0xff;
                o[19] = x6 >>> 24 & 0xff;

                o[20] = x7 >>> 0 & 0xff;
                o[21] = x7 >>> 8 & 0xff;
                o[22] = x7 >>> 16 & 0xff;
                o[23] = x7 >>> 24 & 0xff;

                o[24] = x8 >>> 0 & 0xff;
                o[25] = x8 >>> 8 & 0xff;
                o[26] = x8 >>> 16 & 0xff;
                o[27] = x8 >>> 24 & 0xff;

                o[28] = x9 >>> 0 & 0xff;
                o[29] = x9 >>> 8 & 0xff;
                o[30] = x9 >>> 16 & 0xff;
                o[31] = x9 >>> 24 & 0xff;
            }

            function crypto_core_salsa20(out, inp, k, c) {
                core_salsa20(out, inp, k, c);
            }

            function crypto_core_hsalsa20(out, inp, k, c) {
                core_hsalsa20(out, inp, k, c);
            }

            var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

            function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                    mpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
                }
                return 0;
            }

            function crypto_stream_salsa20(c, cpos, b, n, k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < 64; i++) c[cpos + i] = x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < b; i++) c[cpos + i] = x[i];
                }
                return 0;
            }

            function crypto_stream(c, cpos, d, n, k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s, n, k, sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
                return crypto_stream_salsa20(c, cpos, d, sn, s);
            }

            function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s, n, k, sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
                return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
            }

            /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

            var poly1305 = function (key) {
                this.buffer = new Uint8Array(16);
                this.r = new Uint16Array(10);
                this.h = new Uint16Array(10);
                this.pad = new Uint16Array(8);
                this.leftover = 0;
                this.fin = 0;

                var t0, t1, t2, t3, t4, t5, t6, t7;

                t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
                this.r[0] = (t0) & 0x1fff;
                t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
                this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
                this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
                t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
                this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
                this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
                this.r[5] = ((t4 >>> 1)) & 0x1ffe;
                t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
                this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
                this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
                t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
                this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                this.r[9] = ((t7 >>> 5)) & 0x007f;

                this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
                this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
                this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
                this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
                this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
                this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
                this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
                this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
            };

            poly1305.prototype.blocks = function (m, mpos, bytes) {
                var hibit = this.fin ? 0 : (1 << 11);
                var t0, t1, t2, t3, t4, t5, t6, t7, c;
                var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

                var h0 = this.h[0],
                    h1 = this.h[1],
                    h2 = this.h[2],
                    h3 = this.h[3],
                    h4 = this.h[4],
                    h5 = this.h[5],
                    h6 = this.h[6],
                    h7 = this.h[7],
                    h8 = this.h[8],
                    h9 = this.h[9];

                var r0 = this.r[0],
                    r1 = this.r[1],
                    r2 = this.r[2],
                    r3 = this.r[3],
                    r4 = this.r[4],
                    r5 = this.r[5],
                    r6 = this.r[6],
                    r7 = this.r[7],
                    r8 = this.r[8],
                    r9 = this.r[9];

                while (bytes >= 16) {
                    t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
                    h0 += (t0) & 0x1fff;
                    t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
                    h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                    t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
                    h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
                    t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
                    h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                    t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
                    h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
                    h5 += ((t4 >>> 1)) & 0x1fff;
                    t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
                    h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                    t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
                    h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
                    t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
                    h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                    h9 += ((t7 >>> 5)) | hibit;

                    c = 0;

                    d0 = c;
                    d0 += h0 * r0;
                    d0 += h1 * (5 * r9);
                    d0 += h2 * (5 * r8);
                    d0 += h3 * (5 * r7);
                    d0 += h4 * (5 * r6);
                    c = (d0 >>> 13);
                    d0 &= 0x1fff;
                    d0 += h5 * (5 * r5);
                    d0 += h6 * (5 * r4);
                    d0 += h7 * (5 * r3);
                    d0 += h8 * (5 * r2);
                    d0 += h9 * (5 * r1);
                    c += (d0 >>> 13);
                    d0 &= 0x1fff;

                    d1 = c;
                    d1 += h0 * r1;
                    d1 += h1 * r0;
                    d1 += h2 * (5 * r9);
                    d1 += h3 * (5 * r8);
                    d1 += h4 * (5 * r7);
                    c = (d1 >>> 13);
                    d1 &= 0x1fff;
                    d1 += h5 * (5 * r6);
                    d1 += h6 * (5 * r5);
                    d1 += h7 * (5 * r4);
                    d1 += h8 * (5 * r3);
                    d1 += h9 * (5 * r2);
                    c += (d1 >>> 13);
                    d1 &= 0x1fff;

                    d2 = c;
                    d2 += h0 * r2;
                    d2 += h1 * r1;
                    d2 += h2 * r0;
                    d2 += h3 * (5 * r9);
                    d2 += h4 * (5 * r8);
                    c = (d2 >>> 13);
                    d2 &= 0x1fff;
                    d2 += h5 * (5 * r7);
                    d2 += h6 * (5 * r6);
                    d2 += h7 * (5 * r5);
                    d2 += h8 * (5 * r4);
                    d2 += h9 * (5 * r3);
                    c += (d2 >>> 13);
                    d2 &= 0x1fff;

                    d3 = c;
                    d3 += h0 * r3;
                    d3 += h1 * r2;
                    d3 += h2 * r1;
                    d3 += h3 * r0;
                    d3 += h4 * (5 * r9);
                    c = (d3 >>> 13);
                    d3 &= 0x1fff;
                    d3 += h5 * (5 * r8);
                    d3 += h6 * (5 * r7);
                    d3 += h7 * (5 * r6);
                    d3 += h8 * (5 * r5);
                    d3 += h9 * (5 * r4);
                    c += (d3 >>> 13);
                    d3 &= 0x1fff;

                    d4 = c;
                    d4 += h0 * r4;
                    d4 += h1 * r3;
                    d4 += h2 * r2;
                    d4 += h3 * r1;
                    d4 += h4 * r0;
                    c = (d4 >>> 13);
                    d4 &= 0x1fff;
                    d4 += h5 * (5 * r9);
                    d4 += h6 * (5 * r8);
                    d4 += h7 * (5 * r7);
                    d4 += h8 * (5 * r6);
                    d4 += h9 * (5 * r5);
                    c += (d4 >>> 13);
                    d4 &= 0x1fff;

                    d5 = c;
                    d5 += h0 * r5;
                    d5 += h1 * r4;
                    d5 += h2 * r3;
                    d5 += h3 * r2;
                    d5 += h4 * r1;
                    c = (d5 >>> 13);
                    d5 &= 0x1fff;
                    d5 += h5 * r0;
                    d5 += h6 * (5 * r9);
                    d5 += h7 * (5 * r8);
                    d5 += h8 * (5 * r7);
                    d5 += h9 * (5 * r6);
                    c += (d5 >>> 13);
                    d5 &= 0x1fff;

                    d6 = c;
                    d6 += h0 * r6;
                    d6 += h1 * r5;
                    d6 += h2 * r4;
                    d6 += h3 * r3;
                    d6 += h4 * r2;
                    c = (d6 >>> 13);
                    d6 &= 0x1fff;
                    d6 += h5 * r1;
                    d6 += h6 * r0;
                    d6 += h7 * (5 * r9);
                    d6 += h8 * (5 * r8);
                    d6 += h9 * (5 * r7);
                    c += (d6 >>> 13);
                    d6 &= 0x1fff;

                    d7 = c;
                    d7 += h0 * r7;
                    d7 += h1 * r6;
                    d7 += h2 * r5;
                    d7 += h3 * r4;
                    d7 += h4 * r3;
                    c = (d7 >>> 13);
                    d7 &= 0x1fff;
                    d7 += h5 * r2;
                    d7 += h6 * r1;
                    d7 += h7 * r0;
                    d7 += h8 * (5 * r9);
                    d7 += h9 * (5 * r8);
                    c += (d7 >>> 13);
                    d7 &= 0x1fff;

                    d8 = c;
                    d8 += h0 * r8;
                    d8 += h1 * r7;
                    d8 += h2 * r6;
                    d8 += h3 * r5;
                    d8 += h4 * r4;
                    c = (d8 >>> 13);
                    d8 &= 0x1fff;
                    d8 += h5 * r3;
                    d8 += h6 * r2;
                    d8 += h7 * r1;
                    d8 += h8 * r0;
                    d8 += h9 * (5 * r9);
                    c += (d8 >>> 13);
                    d8 &= 0x1fff;

                    d9 = c;
                    d9 += h0 * r9;
                    d9 += h1 * r8;
                    d9 += h2 * r7;
                    d9 += h3 * r6;
                    d9 += h4 * r5;
                    c = (d9 >>> 13);
                    d9 &= 0x1fff;
                    d9 += h5 * r4;
                    d9 += h6 * r3;
                    d9 += h7 * r2;
                    d9 += h8 * r1;
                    d9 += h9 * r0;
                    c += (d9 >>> 13);
                    d9 &= 0x1fff;

                    c = (((c << 2) + c)) | 0;
                    c = (c + d0) | 0;
                    d0 = c & 0x1fff;
                    c = (c >>> 13);
                    d1 += c;

                    h0 = d0;
                    h1 = d1;
                    h2 = d2;
                    h3 = d3;
                    h4 = d4;
                    h5 = d5;
                    h6 = d6;
                    h7 = d7;
                    h8 = d8;
                    h9 = d9;

                    mpos += 16;
                    bytes -= 16;
                }
                this.h[0] = h0;
                this.h[1] = h1;
                this.h[2] = h2;
                this.h[3] = h3;
                this.h[4] = h4;
                this.h[5] = h5;
                this.h[6] = h6;
                this.h[7] = h7;
                this.h[8] = h8;
                this.h[9] = h9;
            };

            poly1305.prototype.finish = function (mac, macpos) {
                var g = new Uint16Array(10);
                var c, mask, f, i;

                if (this.leftover) {
                    i = this.leftover;
                    this.buffer[i++] = 1;
                    for (; i < 16; i++) this.buffer[i] = 0;
                    this.fin = 1;
                    this.blocks(this.buffer, 0, 16);
                }

                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                for (i = 2; i < 10; i++) {
                    this.h[i] += c;
                    c = this.h[i] >>> 13;
                    this.h[i] &= 0x1fff;
                }
                this.h[0] += (c * 5);
                c = this.h[0] >>> 13;
                this.h[0] &= 0x1fff;
                this.h[1] += c;
                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                this.h[2] += c;

                g[0] = this.h[0] + 5;
                c = g[0] >>> 13;
                g[0] &= 0x1fff;
                for (i = 1; i < 10; i++) {
                    g[i] = this.h[i] + c;
                    c = g[i] >>> 13;
                    g[i] &= 0x1fff;
                }
                g[9] -= (1 << 13);

                mask = (c ^ 1) - 1;
                for (i = 0; i < 10; i++) g[i] &= mask;
                mask = ~mask;
                for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

                this.h[0] = ((this.h[0]) | (this.h[1] << 13)) & 0xffff;
                this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
                this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
                this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
                this.h[4] = ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 0xffff;
                this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
                this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
                this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;

                f = this.h[0] + this.pad[0];
                this.h[0] = f & 0xffff;
                for (i = 1; i < 8; i++) {
                    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
                    this.h[i] = f & 0xffff;
                }

                mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
                mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
                mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
                mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
                mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
                mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
                mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
                mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
                mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
                mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
                mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
                mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
                mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
                mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
                mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
                mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
            };

            poly1305.prototype.update = function (m, mpos, bytes) {
                var i, want;

                if (this.leftover) {
                    want = (16 - this.leftover);
                    if (want > bytes)
                        want = bytes;
                    for (i = 0; i < want; i++)
                        this.buffer[this.leftover + i] = m[mpos + i];
                    bytes -= want;
                    mpos += want;
                    this.leftover += want;
                    if (this.leftover < 16)
                        return;
                    this.blocks(this.buffer, 0, 16);
                    this.leftover = 0;
                }

                if (bytes >= 16) {
                    want = bytes - (bytes % 16);
                    this.blocks(m, mpos, want);
                    mpos += want;
                    bytes -= want;
                }

                if (bytes) {
                    for (i = 0; i < bytes; i++)
                        this.buffer[this.leftover + i] = m[mpos + i];
                    this.leftover += bytes;
                }
            };

            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
                var s = new poly1305(k);
                s.update(m, mpos, n);
                s.finish(out, outpos);
                return 0;
            }

            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
                var x = new Uint8Array(16);
                crypto_onetimeauth(x, 0, m, mpos, n, k);
                return crypto_verify_16(h, hpos, x, 0);
            }

            function crypto_secretbox(c, m, d, n, k) {
                var i;
                if (d < 32) return -1;
                crypto_stream_xor(c, 0, m, 0, d, n, k);
                crypto_onetimeauth(c, 16, c, 32, d - 32, c);
                for (i = 0; i < 16; i++) c[i] = 0;
                return 0;
            }

            function crypto_secretbox_open(m, c, d, n, k) {
                var i;
                var x = new Uint8Array(32);
                if (d < 32) return -1;
                crypto_stream(x, 0, 32, n, k);
                if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
                crypto_stream_xor(m, 0, c, 0, d, n, k);
                for (i = 0; i < 32; i++) m[i] = 0;
                return 0;
            }

            function set25519(r, a) {
                var i;
                for (i = 0; i < 16; i++) r[i] = a[i] | 0;
            }

            function car25519(o) {
                var i, v, c = 1;
                for (i = 0; i < 16; i++) {
                    v = o[i] + c + 65535;
                    c = Math.floor(v / 65536);
                    o[i] = v - c * 65536;
                }
                o[0] += c - 1 + 37 * (c - 1);
            }

            function sel25519(p, q, b) {
                var t, c = ~(b - 1);
                for (var i = 0; i < 16; i++) {
                    t = c & (p[i] ^ q[i]);
                    p[i] ^= t;
                    q[i] ^= t;
                }
            }

            function pack25519(o, n) {
                var i, j, b;
                var m = gf(), t = gf();
                for (i = 0; i < 16; i++) t[i] = n[i];
                car25519(t);
                car25519(t);
                car25519(t);
                for (j = 0; j < 2; j++) {
                    m[0] = t[0] - 0xffed;
                    for (i = 1; i < 15; i++) {
                        m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                        m[i - 1] &= 0xffff;
                    }
                    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
                    b = (m[15] >> 16) & 1;
                    m[14] &= 0xffff;
                    sel25519(t, m, 1 - b);
                }
                for (i = 0; i < 16; i++) {
                    o[2 * i] = t[i] & 0xff;
                    o[2 * i + 1] = t[i] >> 8;
                }
            }

            function neq25519(a, b) {
                var c = new Uint8Array(32), d = new Uint8Array(32);
                pack25519(c, a);
                pack25519(d, b);
                return crypto_verify_32(c, 0, d, 0);
            }

            function par25519(a) {
                var d = new Uint8Array(32);
                pack25519(d, a);
                return d[0] & 1;
            }

            function unpack25519(o, n) {
                var i;
                for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
                o[15] &= 0x7fff;
            }

            function A(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
            }

            function Z(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
            }

            function M(o, a, b) {
                var v, c,
                    t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,
                    t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
                    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
                    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
                    b0 = b[0],
                    b1 = b[1],
                    b2 = b[2],
                    b3 = b[3],
                    b4 = b[4],
                    b5 = b[5],
                    b6 = b[6],
                    b7 = b[7],
                    b8 = b[8],
                    b9 = b[9],
                    b10 = b[10],
                    b11 = b[11],
                    b12 = b[12],
                    b13 = b[13],
                    b14 = b[14],
                    b15 = b[15];

                v = a[0];
                t0 += v * b0;
                t1 += v * b1;
                t2 += v * b2;
                t3 += v * b3;
                t4 += v * b4;
                t5 += v * b5;
                t6 += v * b6;
                t7 += v * b7;
                t8 += v * b8;
                t9 += v * b9;
                t10 += v * b10;
                t11 += v * b11;
                t12 += v * b12;
                t13 += v * b13;
                t14 += v * b14;
                t15 += v * b15;
                v = a[1];
                t1 += v * b0;
                t2 += v * b1;
                t3 += v * b2;
                t4 += v * b3;
                t5 += v * b4;
                t6 += v * b5;
                t7 += v * b6;
                t8 += v * b7;
                t9 += v * b8;
                t10 += v * b9;
                t11 += v * b10;
                t12 += v * b11;
                t13 += v * b12;
                t14 += v * b13;
                t15 += v * b14;
                t16 += v * b15;
                v = a[2];
                t2 += v * b0;
                t3 += v * b1;
                t4 += v * b2;
                t5 += v * b3;
                t6 += v * b4;
                t7 += v * b5;
                t8 += v * b6;
                t9 += v * b7;
                t10 += v * b8;
                t11 += v * b9;
                t12 += v * b10;
                t13 += v * b11;
                t14 += v * b12;
                t15 += v * b13;
                t16 += v * b14;
                t17 += v * b15;
                v = a[3];
                t3 += v * b0;
                t4 += v * b1;
                t5 += v * b2;
                t6 += v * b3;
                t7 += v * b4;
                t8 += v * b5;
                t9 += v * b6;
                t10 += v * b7;
                t11 += v * b8;
                t12 += v * b9;
                t13 += v * b10;
                t14 += v * b11;
                t15 += v * b12;
                t16 += v * b13;
                t17 += v * b14;
                t18 += v * b15;
                v = a[4];
                t4 += v * b0;
                t5 += v * b1;
                t6 += v * b2;
                t7 += v * b3;
                t8 += v * b4;
                t9 += v * b5;
                t10 += v * b6;
                t11 += v * b7;
                t12 += v * b8;
                t13 += v * b9;
                t14 += v * b10;
                t15 += v * b11;
                t16 += v * b12;
                t17 += v * b13;
                t18 += v * b14;
                t19 += v * b15;
                v = a[5];
                t5 += v * b0;
                t6 += v * b1;
                t7 += v * b2;
                t8 += v * b3;
                t9 += v * b4;
                t10 += v * b5;
                t11 += v * b6;
                t12 += v * b7;
                t13 += v * b8;
                t14 += v * b9;
                t15 += v * b10;
                t16 += v * b11;
                t17 += v * b12;
                t18 += v * b13;
                t19 += v * b14;
                t20 += v * b15;
                v = a[6];
                t6 += v * b0;
                t7 += v * b1;
                t8 += v * b2;
                t9 += v * b3;
                t10 += v * b4;
                t11 += v * b5;
                t12 += v * b6;
                t13 += v * b7;
                t14 += v * b8;
                t15 += v * b9;
                t16 += v * b10;
                t17 += v * b11;
                t18 += v * b12;
                t19 += v * b13;
                t20 += v * b14;
                t21 += v * b15;
                v = a[7];
                t7 += v * b0;
                t8 += v * b1;
                t9 += v * b2;
                t10 += v * b3;
                t11 += v * b4;
                t12 += v * b5;
                t13 += v * b6;
                t14 += v * b7;
                t15 += v * b8;
                t16 += v * b9;
                t17 += v * b10;
                t18 += v * b11;
                t19 += v * b12;
                t20 += v * b13;
                t21 += v * b14;
                t22 += v * b15;
                v = a[8];
                t8 += v * b0;
                t9 += v * b1;
                t10 += v * b2;
                t11 += v * b3;
                t12 += v * b4;
                t13 += v * b5;
                t14 += v * b6;
                t15 += v * b7;
                t16 += v * b8;
                t17 += v * b9;
                t18 += v * b10;
                t19 += v * b11;
                t20 += v * b12;
                t21 += v * b13;
                t22 += v * b14;
                t23 += v * b15;
                v = a[9];
                t9 += v * b0;
                t10 += v * b1;
                t11 += v * b2;
                t12 += v * b3;
                t13 += v * b4;
                t14 += v * b5;
                t15 += v * b6;
                t16 += v * b7;
                t17 += v * b8;
                t18 += v * b9;
                t19 += v * b10;
                t20 += v * b11;
                t21 += v * b12;
                t22 += v * b13;
                t23 += v * b14;
                t24 += v * b15;
                v = a[10];
                t10 += v * b0;
                t11 += v * b1;
                t12 += v * b2;
                t13 += v * b3;
                t14 += v * b4;
                t15 += v * b5;
                t16 += v * b6;
                t17 += v * b7;
                t18 += v * b8;
                t19 += v * b9;
                t20 += v * b10;
                t21 += v * b11;
                t22 += v * b12;
                t23 += v * b13;
                t24 += v * b14;
                t25 += v * b15;
                v = a[11];
                t11 += v * b0;
                t12 += v * b1;
                t13 += v * b2;
                t14 += v * b3;
                t15 += v * b4;
                t16 += v * b5;
                t17 += v * b6;
                t18 += v * b7;
                t19 += v * b8;
                t20 += v * b9;
                t21 += v * b10;
                t22 += v * b11;
                t23 += v * b12;
                t24 += v * b13;
                t25 += v * b14;
                t26 += v * b15;
                v = a[12];
                t12 += v * b0;
                t13 += v * b1;
                t14 += v * b2;
                t15 += v * b3;
                t16 += v * b4;
                t17 += v * b5;
                t18 += v * b6;
                t19 += v * b7;
                t20 += v * b8;
                t21 += v * b9;
                t22 += v * b10;
                t23 += v * b11;
                t24 += v * b12;
                t25 += v * b13;
                t26 += v * b14;
                t27 += v * b15;
                v = a[13];
                t13 += v * b0;
                t14 += v * b1;
                t15 += v * b2;
                t16 += v * b3;
                t17 += v * b4;
                t18 += v * b5;
                t19 += v * b6;
                t20 += v * b7;
                t21 += v * b8;
                t22 += v * b9;
                t23 += v * b10;
                t24 += v * b11;
                t25 += v * b12;
                t26 += v * b13;
                t27 += v * b14;
                t28 += v * b15;
                v = a[14];
                t14 += v * b0;
                t15 += v * b1;
                t16 += v * b2;
                t17 += v * b3;
                t18 += v * b4;
                t19 += v * b5;
                t20 += v * b6;
                t21 += v * b7;
                t22 += v * b8;
                t23 += v * b9;
                t24 += v * b10;
                t25 += v * b11;
                t26 += v * b12;
                t27 += v * b13;
                t28 += v * b14;
                t29 += v * b15;
                v = a[15];
                t15 += v * b0;
                t16 += v * b1;
                t17 += v * b2;
                t18 += v * b3;
                t19 += v * b4;
                t20 += v * b5;
                t21 += v * b6;
                t22 += v * b7;
                t23 += v * b8;
                t24 += v * b9;
                t25 += v * b10;
                t26 += v * b11;
                t27 += v * b12;
                t28 += v * b13;
                t29 += v * b14;
                t30 += v * b15;

                t0 += 38 * t16;
                t1 += 38 * t17;
                t2 += 38 * t18;
                t3 += 38 * t19;
                t4 += 38 * t20;
                t5 += 38 * t21;
                t6 += 38 * t22;
                t7 += 38 * t23;
                t8 += 38 * t24;
                t9 += 38 * t25;
                t10 += 38 * t26;
                t11 += 38 * t27;
                t12 += 38 * t28;
                t13 += 38 * t29;
                t14 += 38 * t30;
                // t15 left as is

                // first car
                c = 1;
                v = t0 + c + 65535;
                c = Math.floor(v / 65536);
                t0 = v - c * 65536;
                v = t1 + c + 65535;
                c = Math.floor(v / 65536);
                t1 = v - c * 65536;
                v = t2 + c + 65535;
                c = Math.floor(v / 65536);
                t2 = v - c * 65536;
                v = t3 + c + 65535;
                c = Math.floor(v / 65536);
                t3 = v - c * 65536;
                v = t4 + c + 65535;
                c = Math.floor(v / 65536);
                t4 = v - c * 65536;
                v = t5 + c + 65535;
                c = Math.floor(v / 65536);
                t5 = v - c * 65536;
                v = t6 + c + 65535;
                c = Math.floor(v / 65536);
                t6 = v - c * 65536;
                v = t7 + c + 65535;
                c = Math.floor(v / 65536);
                t7 = v - c * 65536;
                v = t8 + c + 65535;
                c = Math.floor(v / 65536);
                t8 = v - c * 65536;
                v = t9 + c + 65535;
                c = Math.floor(v / 65536);
                t9 = v - c * 65536;
                v = t10 + c + 65535;
                c = Math.floor(v / 65536);
                t10 = v - c * 65536;
                v = t11 + c + 65535;
                c = Math.floor(v / 65536);
                t11 = v - c * 65536;
                v = t12 + c + 65535;
                c = Math.floor(v / 65536);
                t12 = v - c * 65536;
                v = t13 + c + 65535;
                c = Math.floor(v / 65536);
                t13 = v - c * 65536;
                v = t14 + c + 65535;
                c = Math.floor(v / 65536);
                t14 = v - c * 65536;
                v = t15 + c + 65535;
                c = Math.floor(v / 65536);
                t15 = v - c * 65536;
                t0 += c - 1 + 37 * (c - 1);

                // second car
                c = 1;
                v = t0 + c + 65535;
                c = Math.floor(v / 65536);
                t0 = v - c * 65536;
                v = t1 + c + 65535;
                c = Math.floor(v / 65536);
                t1 = v - c * 65536;
                v = t2 + c + 65535;
                c = Math.floor(v / 65536);
                t2 = v - c * 65536;
                v = t3 + c + 65535;
                c = Math.floor(v / 65536);
                t3 = v - c * 65536;
                v = t4 + c + 65535;
                c = Math.floor(v / 65536);
                t4 = v - c * 65536;
                v = t5 + c + 65535;
                c = Math.floor(v / 65536);
                t5 = v - c * 65536;
                v = t6 + c + 65535;
                c = Math.floor(v / 65536);
                t6 = v - c * 65536;
                v = t7 + c + 65535;
                c = Math.floor(v / 65536);
                t7 = v - c * 65536;
                v = t8 + c + 65535;
                c = Math.floor(v / 65536);
                t8 = v - c * 65536;
                v = t9 + c + 65535;
                c = Math.floor(v / 65536);
                t9 = v - c * 65536;
                v = t10 + c + 65535;
                c = Math.floor(v / 65536);
                t10 = v - c * 65536;
                v = t11 + c + 65535;
                c = Math.floor(v / 65536);
                t11 = v - c * 65536;
                v = t12 + c + 65535;
                c = Math.floor(v / 65536);
                t12 = v - c * 65536;
                v = t13 + c + 65535;
                c = Math.floor(v / 65536);
                t13 = v - c * 65536;
                v = t14 + c + 65535;
                c = Math.floor(v / 65536);
                t14 = v - c * 65536;
                v = t15 + c + 65535;
                c = Math.floor(v / 65536);
                t15 = v - c * 65536;
                t0 += c - 1 + 37 * (c - 1);

                o[0] = t0;
                o[1] = t1;
                o[2] = t2;
                o[3] = t3;
                o[4] = t4;
                o[5] = t5;
                o[6] = t6;
                o[7] = t7;
                o[8] = t8;
                o[9] = t9;
                o[10] = t10;
                o[11] = t11;
                o[12] = t12;
                o[13] = t13;
                o[14] = t14;
                o[15] = t15;
            }

            function S(o, a) {
                M(o, a, a);
            }

            function inv25519(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 253; a >= 0; a--) {
                    S(c, c);
                    if (a !== 2 && a !== 4) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function pow2523(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 250; a >= 0; a--) {
                    S(c, c);
                    if (a !== 1) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function crypto_scalarmult(q, n, p) {
                var z = new Uint8Array(32);
                var x = new Float64Array(80), r, i;
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf();
                for (i = 0; i < 31; i++) z[i] = n[i];
                z[31] = (n[31] & 127) | 64;
                z[0] &= 248;
                unpack25519(x, p);
                for (i = 0; i < 16; i++) {
                    b[i] = x[i];
                    d[i] = a[i] = c[i] = 0;
                }
                a[0] = d[0] = 1;
                for (i = 254; i >= 0; --i) {
                    r = (z[i >>> 3] >>> (i & 7)) & 1;
                    sel25519(a, b, r);
                    sel25519(c, d, r);
                    A(e, a, c);
                    Z(a, a, c);
                    A(c, b, d);
                    Z(b, b, d);
                    S(d, e);
                    S(f, a);
                    M(a, c, a);
                    M(c, b, e);
                    A(e, a, c);
                    Z(a, a, c);
                    S(b, a);
                    Z(c, d, f);
                    M(a, c, _121665);
                    A(a, a, d);
                    M(c, c, a);
                    M(a, d, f);
                    M(d, b, x);
                    S(b, e);
                    sel25519(a, b, r);
                    sel25519(c, d, r);
                }
                for (i = 0; i < 16; i++) {
                    x[i + 16] = a[i];
                    x[i + 32] = c[i];
                    x[i + 48] = b[i];
                    x[i + 64] = d[i];
                }
                var x32 = x.subarray(32);
                var x16 = x.subarray(16);
                inv25519(x32, x32);
                M(x16, x16, x32);
                pack25519(q, x16);
                return 0;
            }

            function crypto_scalarmult_base(q, n) {
                return crypto_scalarmult(q, n, _9);
            }

            function crypto_box_keypair(y, x) {
                randombytes(x, 32);
                return crypto_scalarmult_base(y, x);
            }

            function crypto_box_beforenm(k, y, x) {
                var s = new Uint8Array(32);
                crypto_scalarmult(s, x, y);
                return crypto_core_hsalsa20(k, _0, s, sigma);
            }

            var crypto_box_afternm = crypto_secretbox;
            var crypto_box_open_afternm = crypto_secretbox_open;

            function crypto_box(c, m, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_afternm(c, m, d, n, k);
            }

            function crypto_box_open(m, c, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_open_afternm(m, c, d, n, k);
            }

            var K = [
                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function crypto_hashblocks_hl(hh, hl, m, n) {
                var wh = new Int32Array(16), wl = new Int32Array(16),
                    bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
                    bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
                    th, tl, i, j, h, l, a, b, c, d;

                var ah0 = hh[0],
                    ah1 = hh[1],
                    ah2 = hh[2],
                    ah3 = hh[3],
                    ah4 = hh[4],
                    ah5 = hh[5],
                    ah6 = hh[6],
                    ah7 = hh[7],

                    al0 = hl[0],
                    al1 = hl[1],
                    al2 = hl[2],
                    al3 = hl[3],
                    al4 = hl[4],
                    al5 = hl[5],
                    al6 = hl[6],
                    al7 = hl[7];

                var pos = 0;
                while (n >= 128) {
                    for (i = 0; i < 16; i++) {
                        j = 8 * i + pos;
                        wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
                        wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
                    }
                    for (i = 0; i < 80; i++) {
                        bh0 = ah0;
                        bh1 = ah1;
                        bh2 = ah2;
                        bh3 = ah3;
                        bh4 = ah4;
                        bh5 = ah5;
                        bh6 = ah6;
                        bh7 = ah7;

                        bl0 = al0;
                        bl1 = al1;
                        bl2 = al2;
                        bl3 = al3;
                        bl4 = al4;
                        bl5 = al5;
                        bl6 = al6;
                        bl7 = al7;

                        // add
                        h = ah7;
                        l = al7;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        // Sigma1
                        h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                        l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // Ch
                        h = (ah4 & ah5) ^ (~ah4 & ah6);
                        l = (al4 & al5) ^ (~al4 & al6);

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // K
                        h = K[i * 2];
                        l = K[i * 2 + 1];

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // w
                        h = wh[i % 16];
                        l = wl[i % 16];

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        th = c & 0xffff | d << 16;
                        tl = a & 0xffff | b << 16;

                        // add
                        h = th;
                        l = tl;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        // Sigma0
                        h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                        l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // Maj
                        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh7 = (c & 0xffff) | (d << 16);
                        bl7 = (a & 0xffff) | (b << 16);

                        // add
                        h = bh3;
                        l = bl3;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        h = th;
                        l = tl;

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh3 = (c & 0xffff) | (d << 16);
                        bl3 = (a & 0xffff) | (b << 16);

                        ah1 = bh0;
                        ah2 = bh1;
                        ah3 = bh2;
                        ah4 = bh3;
                        ah5 = bh4;
                        ah6 = bh5;
                        ah7 = bh6;
                        ah0 = bh7;

                        al1 = bl0;
                        al2 = bl1;
                        al3 = bl2;
                        al4 = bl3;
                        al5 = bl4;
                        al6 = bl5;
                        al7 = bl6;
                        al0 = bl7;

                        if (i % 16 === 15) {
                            for (j = 0; j < 16; j++) {
                                // add
                                h = wh[j];
                                l = wl[j];

                                a = l & 0xffff;
                                b = l >>> 16;
                                c = h & 0xffff;
                                d = h >>> 16;

                                h = wh[(j + 9) % 16];
                                l = wl[(j + 9) % 16];

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                // sigma0
                                th = wh[(j + 1) % 16];
                                tl = wl[(j + 1) % 16];
                                h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
                                l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                // sigma1
                                th = wh[(j + 14) % 16];
                                tl = wl[(j + 14) % 16];
                                h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
                                l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                b += a >>> 16;
                                c += b >>> 16;
                                d += c >>> 16;

                                wh[j] = (c & 0xffff) | (d << 16);
                                wl[j] = (a & 0xffff) | (b << 16);
                            }
                        }
                    }

                    // add
                    h = ah0;
                    l = al0;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[0];
                    l = hl[0];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[0] = ah0 = (c & 0xffff) | (d << 16);
                    hl[0] = al0 = (a & 0xffff) | (b << 16);

                    h = ah1;
                    l = al1;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[1];
                    l = hl[1];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[1] = ah1 = (c & 0xffff) | (d << 16);
                    hl[1] = al1 = (a & 0xffff) | (b << 16);

                    h = ah2;
                    l = al2;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[2];
                    l = hl[2];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[2] = ah2 = (c & 0xffff) | (d << 16);
                    hl[2] = al2 = (a & 0xffff) | (b << 16);

                    h = ah3;
                    l = al3;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[3];
                    l = hl[3];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[3] = ah3 = (c & 0xffff) | (d << 16);
                    hl[3] = al3 = (a & 0xffff) | (b << 16);

                    h = ah4;
                    l = al4;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[4];
                    l = hl[4];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[4] = ah4 = (c & 0xffff) | (d << 16);
                    hl[4] = al4 = (a & 0xffff) | (b << 16);

                    h = ah5;
                    l = al5;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[5];
                    l = hl[5];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[5] = ah5 = (c & 0xffff) | (d << 16);
                    hl[5] = al5 = (a & 0xffff) | (b << 16);

                    h = ah6;
                    l = al6;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[6];
                    l = hl[6];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[6] = ah6 = (c & 0xffff) | (d << 16);
                    hl[6] = al6 = (a & 0xffff) | (b << 16);

                    h = ah7;
                    l = al7;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[7];
                    l = hl[7];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[7] = ah7 = (c & 0xffff) | (d << 16);
                    hl[7] = al7 = (a & 0xffff) | (b << 16);

                    pos += 128;
                    n -= 128;
                }

                return n;
            }

            function crypto_hash(out, m, n) {
                var hh = new Int32Array(8),
                    hl = new Int32Array(8),
                    x = new Uint8Array(256),
                    i, b = n;

                hh[0] = 0x6a09e667;
                hh[1] = 0xbb67ae85;
                hh[2] = 0x3c6ef372;
                hh[3] = 0xa54ff53a;
                hh[4] = 0x510e527f;
                hh[5] = 0x9b05688c;
                hh[6] = 0x1f83d9ab;
                hh[7] = 0x5be0cd19;

                hl[0] = 0xf3bcc908;
                hl[1] = 0x84caa73b;
                hl[2] = 0xfe94f82b;
                hl[3] = 0x5f1d36f1;
                hl[4] = 0xade682d1;
                hl[5] = 0x2b3e6c1f;
                hl[6] = 0xfb41bd6b;
                hl[7] = 0x137e2179;

                crypto_hashblocks_hl(hh, hl, m, n);
                n %= 128;

                for (i = 0; i < n; i++) x[i] = m[b - n + i];
                x[n] = 128;

                n = 256 - 128 * (n < 112 ? 1 : 0);
                x[n - 9] = 0;
                ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
                crypto_hashblocks_hl(hh, hl, x, n);

                for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

                return 0;
            }

            function add(p, q) {
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf(),
                    g = gf(), h = gf(), t = gf();

                Z(a, p[1], p[0]);
                Z(t, q[1], q[0]);
                M(a, a, t);
                A(b, p[0], p[1]);
                A(t, q[0], q[1]);
                M(b, b, t);
                M(c, p[3], q[3]);
                M(c, c, D2);
                M(d, p[2], q[2]);
                A(d, d, d);
                Z(e, b, a);
                Z(f, d, c);
                A(g, d, c);
                A(h, b, a);

                M(p[0], e, f);
                M(p[1], h, g);
                M(p[2], g, f);
                M(p[3], e, h);
            }

            function cswap(p, q, b) {
                var i;
                for (i = 0; i < 4; i++) {
                    sel25519(p[i], q[i], b);
                }
            }

            function pack(r, p) {
                var tx = gf(), ty = gf(), zi = gf();
                inv25519(zi, p[2]);
                M(tx, p[0], zi);
                M(ty, p[1], zi);
                pack25519(r, ty);
                r[31] ^= par25519(tx) << 7;
            }

            function scalarmult(p, q, s) {
                var b, i;
                set25519(p[0], gf0);
                set25519(p[1], gf1);
                set25519(p[2], gf1);
                set25519(p[3], gf0);
                for (i = 255; i >= 0; --i) {
                    b = (s[(i / 8) | 0] >> (i & 7)) & 1;
                    cswap(p, q, b);
                    add(q, p);
                    add(p, p);
                    cswap(p, q, b);
                }
            }

            function scalarbase(p, s) {
                var q = [gf(), gf(), gf(), gf()];
                set25519(q[0], X);
                set25519(q[1], Y);
                set25519(q[2], gf1);
                M(q[3], X, Y);
                scalarmult(p, q, s);
            }

            function crypto_sign_keypair(pk, sk, seeded) {
                var d = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()];
                var i;

                if (!seeded) randombytes(sk, 32);
                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                scalarbase(p, d);
                pack(pk, p);

                for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
                return 0;
            }

            var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

            function modL(r, x) {
                var carry, i, j, k;
                for (i = 63; i >= 32; --i) {
                    carry = 0;
                    for (j = i - 32, k = i - 12; j < k; ++j) {
                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                        carry = (x[j] + 128) >> 8;
                        x[j] -= carry * 256;
                    }
                    x[j] += carry;
                    x[i] = 0;
                }
                carry = 0;
                for (j = 0; j < 32; j++) {
                    x[j] += carry - (x[31] >> 4) * L[j];
                    carry = x[j] >> 8;
                    x[j] &= 255;
                }
                for (j = 0; j < 32; j++) x[j] -= carry * L[j];
                for (i = 0; i < 32; i++) {
                    x[i + 1] += x[i] >> 8;
                    r[i] = x[i] & 255;
                }
            }

            function reduce(r) {
                var x = new Float64Array(64), i;
                for (i = 0; i < 64; i++) x[i] = r[i];
                for (i = 0; i < 64; i++) r[i] = 0;
                modL(r, x);
            }

// Note: difference from C - smlen returned, not passed as argument.
            function crypto_sign(sm, m, n, sk) {
                var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                var i, j, x = new Float64Array(64);
                var p = [gf(), gf(), gf(), gf()];

                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                var smlen = n + 64;
                for (i = 0; i < n; i++) sm[64 + i] = m[i];
                for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

                crypto_hash(r, sm.subarray(32), n + 32);
                reduce(r);
                scalarbase(p, r);
                pack(sm, p);

                for (i = 32; i < 64; i++) sm[i] = sk[i];
                crypto_hash(h, sm, n + 64);
                reduce(h);

                for (i = 0; i < 64; i++) x[i] = 0;
                for (i = 0; i < 32; i++) x[i] = r[i];
                for (i = 0; i < 32; i++) {
                    for (j = 0; j < 32; j++) {
                        x[i + j] += h[i] * d[j];
                    }
                }

                modL(sm.subarray(32), x);
                return smlen;
            }

            function unpackneg(r, p) {
                var t = gf(), chk = gf(), num = gf(),
                    den = gf(), den2 = gf(), den4 = gf(),
                    den6 = gf();

                set25519(r[2], gf1);
                unpack25519(r[1], p);
                S(num, r[1]);
                M(den, num, D);
                Z(num, num, r[2]);
                A(den, r[2], den);

                S(den2, den);
                S(den4, den2);
                M(den6, den4, den2);
                M(t, den6, num);
                M(t, t, den);

                pow2523(t, t);
                M(t, t, num);
                M(t, t, den);
                M(t, t, den);
                M(r[0], t, den);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) M(r[0], r[0], I);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) return -1;

                if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

                M(r[3], r[0], r[1]);
                return 0;
            }

            function crypto_sign_open(m, sm, n, pk) {
                var i, mlen;
                var t = new Uint8Array(32), h = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()],
                    q = [gf(), gf(), gf(), gf()];

                mlen = -1;
                if (n < 64) return -1;

                if (unpackneg(q, pk)) return -1;

                for (i = 0; i < n; i++) m[i] = sm[i];
                for (i = 0; i < 32; i++) m[i + 32] = pk[i];
                crypto_hash(h, m, n);
                reduce(h);
                scalarmult(p, q, h);

                scalarbase(q, sm.subarray(32));
                add(p, q);
                pack(t, p);

                n -= 64;
                if (crypto_verify_32(sm, 0, t, 0)) {
                    for (i = 0; i < n; i++) m[i] = 0;
                    return -1;
                }

                for (i = 0; i < n; i++) m[i] = sm[i + 64];
                mlen = n;
                return mlen;
            }

            var crypto_secretbox_KEYBYTES = 32,
                crypto_secretbox_NONCEBYTES = 24,
                crypto_secretbox_ZEROBYTES = 32,
                crypto_secretbox_BOXZEROBYTES = 16,
                crypto_scalarmult_BYTES = 32,
                crypto_scalarmult_SCALARBYTES = 32,
                crypto_box_PUBLICKEYBYTES = 32,
                crypto_box_SECRETKEYBYTES = 32,
                crypto_box_BEFORENMBYTES = 32,
                crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
                crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
                crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
                crypto_sign_BYTES = 64,
                crypto_sign_PUBLICKEYBYTES = 32,
                crypto_sign_SECRETKEYBYTES = 64,
                crypto_sign_SEEDBYTES = 32,
                crypto_hash_BYTES = 64;

            nacl.lowlevel = {
                crypto_core_hsalsa20: crypto_core_hsalsa20,
                crypto_stream_xor: crypto_stream_xor,
                crypto_stream: crypto_stream,
                crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
                crypto_stream_salsa20: crypto_stream_salsa20,
                crypto_onetimeauth: crypto_onetimeauth,
                crypto_onetimeauth_verify: crypto_onetimeauth_verify,
                crypto_verify_16: crypto_verify_16,
                crypto_verify_32: crypto_verify_32,
                crypto_secretbox: crypto_secretbox,
                crypto_secretbox_open: crypto_secretbox_open,
                crypto_scalarmult: crypto_scalarmult,
                crypto_scalarmult_base: crypto_scalarmult_base,
                crypto_box_beforenm: crypto_box_beforenm,
                crypto_box_afternm: crypto_box_afternm,
                crypto_box: crypto_box,
                crypto_box_open: crypto_box_open,
                crypto_box_keypair: crypto_box_keypair,
                crypto_hash: crypto_hash,
                crypto_sign: crypto_sign,
                crypto_sign_keypair: crypto_sign_keypair,
                crypto_sign_open: crypto_sign_open,

                crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
                crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
                crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
                crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
                crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
                crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
                crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
                crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
                crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
                crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
                crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
                crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
                crypto_sign_BYTES: crypto_sign_BYTES,
                crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
                crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
                crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
                crypto_hash_BYTES: crypto_hash_BYTES
            };

            /* High-level API */

            function checkLengths(k, n) {
                if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
                if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
            }

            function checkBoxLengths(pk, sk) {
                if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
                if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            }

            function checkArrayTypes() {
                var t, i;
                for (i = 0; i < arguments.length; i++) {
                    if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
                        throw new TypeError('unexpected type ' + t + ', use Uint8Array');
                }
            }

            function cleanup(arr) {
                for (var i = 0; i < arr.length; i++) arr[i] = 0;
            }

// TODO: Completely remove this in v0.15.
            if (!nacl.util) {
                nacl.util = {};
                nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function () {
                    throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
                };
            }

            nacl.randomBytes = function (n) {
                var b = new Uint8Array(n);
                randombytes(b, n);
                return b;
            };

            nacl.secretbox = function (msg, nonce, key) {
                checkArrayTypes(msg, nonce, key);
                checkLengths(key, nonce);
                var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
                var c = new Uint8Array(m.length);
                for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
                crypto_secretbox(c, m, m.length, nonce, key);
                return c.subarray(crypto_secretbox_BOXZEROBYTES);
            };

            nacl.secretbox.open = function (box, nonce, key) {
                checkArrayTypes(box, nonce, key);
                checkLengths(key, nonce);
                var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
                var m = new Uint8Array(c.length);
                for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
                if (c.length < 32) return false;
                if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
                return m.subarray(crypto_secretbox_ZEROBYTES);
            };

            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

            nacl.scalarMult = function (n, p) {
                checkArrayTypes(n, p);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult(q, n, p);
                return q;
            };

            nacl.scalarMult.base = function (n) {
                checkArrayTypes(n);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult_base(q, n);
                return q;
            };

            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

            nacl.box = function (msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox(msg, nonce, k);
            };

            nacl.box.before = function (publicKey, secretKey) {
                checkArrayTypes(publicKey, secretKey);
                checkBoxLengths(publicKey, secretKey);
                var k = new Uint8Array(crypto_box_BEFORENMBYTES);
                crypto_box_beforenm(k, publicKey, secretKey);
                return k;
            };

            nacl.box.after = nacl.secretbox;

            nacl.box.open = function (msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox.open(msg, nonce, k);
            };

            nacl.box.open.after = nacl.secretbox.open;

            nacl.box.keyPair = function () {
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
                crypto_box_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.box.keyPair.fromSecretKey = function (secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_box_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                crypto_scalarmult_base(pk, secretKey);
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
            nacl.box.nonceLength = crypto_box_NONCEBYTES;
            nacl.box.overheadLength = nacl.secretbox.overheadLength;

            nacl.sign = function (msg, secretKey) {
                checkArrayTypes(msg, secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
                crypto_sign(signedMsg, msg, msg.length, secretKey);
                return signedMsg;
            };

            nacl.sign.open = function (signedMsg, publicKey) {
                if (arguments.length !== 2)
                    throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
                checkArrayTypes(signedMsg, publicKey);
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var tmp = new Uint8Array(signedMsg.length);
                var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
                if (mlen < 0) return null;
                var m = new Uint8Array(mlen);
                for (var i = 0; i < m.length; i++) m[i] = tmp[i];
                return m;
            };

            nacl.sign.detached = function (msg, secretKey) {
                var signedMsg = nacl.sign(msg, secretKey);
                var sig = new Uint8Array(crypto_sign_BYTES);
                for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
                return sig;
            };

            nacl.sign.detached.verify = function (msg, sig, publicKey) {
                checkArrayTypes(msg, sig, publicKey);
                if (sig.length !== crypto_sign_BYTES)
                    throw new Error('bad signature size');
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
                var m = new Uint8Array(crypto_sign_BYTES + msg.length);
                var i;
                for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
                for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
                return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
            };

            nacl.sign.keyPair = function () {
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                crypto_sign_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.keyPair.fromSecretKey = function (secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.sign.keyPair.fromSeed = function (seed) {
                checkArrayTypes(seed);
                if (seed.length !== crypto_sign_SEEDBYTES)
                    throw new Error('bad seed size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                for (var i = 0; i < 32; i++) sk[i] = seed[i];
                crypto_sign_keypair(pk, sk, true);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
            nacl.sign.seedLength = crypto_sign_SEEDBYTES;
            nacl.sign.signatureLength = crypto_sign_BYTES;

            nacl.hash = function (msg) {
                checkArrayTypes(msg);
                var h = new Uint8Array(crypto_hash_BYTES);
                crypto_hash(h, msg, msg.length);
                return h;
            };

            nacl.hash.hashLength = crypto_hash_BYTES;

            nacl.verify = function (x, y) {
                checkArrayTypes(x, y);
                // Zero length arguments are considered not equal.
                if (x.length === 0 || y.length === 0) return false;
                if (x.length !== y.length) return false;
                return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
            };

            nacl.setPRNG = function (fn) {
                randombytes = fn;
            };

            (function () {
                // Initialize PRNG if environment provides CSPRNG.
                // If not, methods calling randombytes will throw.
                var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
                if (crypto && crypto.getRandomValues) {
                    // Browsers.
                    var QUOTA = 65536;
                    nacl.setPRNG(function (x, n) {
                        var i, v = new Uint8Array(n);
                        for (i = 0; i < n; i += QUOTA) {
                            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                        }
                        for (i = 0; i < n; i++) x[i] = v[i];
                        cleanup(v);
                    });
                } else if (typeof require !== 'undefined') {
                    // Node.js.
                    crypto = require('crypto');
                    if (crypto && crypto.randomBytes) {
                        nacl.setPRNG(function (x, n) {
                            var i, v = crypto.randomBytes(n);
                            for (i = 0; i < n; i++) x[i] = v[i];
                            cleanup(v);
                        });
                    }
                }
            })();

        })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

    }, {"crypto": 22}],
    454: [function (require, module, exports) {
        arguments[4][148][0].apply(exports, arguments)
    }, {"dup": 148, "safe-buffer": 428}],
    455: [function (require, module, exports) {
        arguments[4][149][0].apply(exports, arguments)
    }, {"./sha": 456, "./sha1": 457, "./sha224": 458, "./sha256": 459, "./sha384": 460, "./sha512": 461, "dup": 149}],
    456: [function (require, module, exports) {
        arguments[4][150][0].apply(exports, arguments)
    }, {"./hash": 454, "dup": 150, "inherits": 388, "safe-buffer": 428}],
    457: [function (require, module, exports) {
        arguments[4][151][0].apply(exports, arguments)
    }, {"./hash": 454, "dup": 151, "inherits": 388, "safe-buffer": 428}],
    458: [function (require, module, exports) {
        arguments[4][152][0].apply(exports, arguments)
    }, {"./hash": 454, "./sha256": 459, "dup": 152, "inherits": 388, "safe-buffer": 428}],
    459: [function (require, module, exports) {
        arguments[4][153][0].apply(exports, arguments)
    }, {"./hash": 454, "dup": 153, "inherits": 388, "safe-buffer": 428}],
    460: [function (require, module, exports) {
        arguments[4][154][0].apply(exports, arguments)
    }, {"./hash": 454, "./sha512": 461, "dup": 154, "inherits": 388, "safe-buffer": 428}],
    461: [function (require, module, exports) {
        arguments[4][155][0].apply(exports, arguments)
    }, {"./hash": 454, "dup": 155, "inherits": 388, "safe-buffer": 428}],
    462: [function (require, module, exports) {
        arguments[4][141][0].apply(exports, arguments)
    }, {"dup": 141, "safe-buffer": 428}],
    463: [function (require, module, exports) {
        var isHexPrefixed = require('is-hex-prefixed');

        /**
         * Removes '0x' from a given `String` is present
         * @param {String} str the string value
         * @return {String|Optional} a string by pass if necessary
         */
        module.exports = function stripHexPrefix(str) {
            if (typeof str !== 'string') {
                return str;
            }

            return isHexPrefixed(str) ? str.slice(2) : str;
        }

    }, {"is-hex-prefixed": 389}],
    464: [function (require, module, exports) {
        (function (Buffer) {
// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
            (function (root, f) {
                'use strict';
                if (typeof module !== 'undefined' && module.exports) module.exports = f();
                else if (root.nacl) root.nacl.util = f();
                else {
                    root.nacl = {};
                    root.nacl.util = f();
                }
            }(this, function () {
                'use strict';

                var util = {};

                function validateBase64(s) {
                    if (!(/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s))) {
                        throw new TypeError('invalid encoding');
                    }
                }

                util.decodeUTF8 = function (s) {
                    if (typeof s !== 'string') throw new TypeError('expected string');
                    var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
                    for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
                    return b;
                };

                util.encodeUTF8 = function (arr) {
                    var i, s = [];
                    for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
                    return decodeURIComponent(escape(s.join('')));
                };

                if (typeof atob === 'undefined') {
                    // Node.js

                    if (typeof Buffer.from !== 'undefined') {
                        // Node v6 and later
                        util.encodeBase64 = function (arr) { // v6 and later
                            return Buffer.from(arr).toString('base64');
                        };

                        util.decodeBase64 = function (s) {
                            validateBase64(s);
                            return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));
                        };

                    } else {
                        // Node earlier than v6
                        util.encodeBase64 = function (arr) { // v6 and later
                            return (new Buffer(arr)).toString('base64');
                        };

                        util.decodeBase64 = function (s) {
                            validateBase64(s);
                            return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));
                        };
                    }

                } else {
                    // Browsers

                    util.encodeBase64 = function (arr) {
                        var i, s = [], len = arr.length;
                        for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
                        return btoa(s.join(''));
                    };

                    util.decodeBase64 = function (s) {
                        validateBase64(s);
                        var i, d = atob(s), b = new Uint8Array(d.length);
                        for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
                        return b;
                    };

                }

                return util;

            }));

        }).call(this, require("buffer").Buffer)
    }, {"buffer": 22}],
    465: [function (require, module, exports) {
        (function (nacl) {
            'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

            var gf = function (init) {
                var i, r = new Float64Array(16);
                if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
                return r;
            };

//  Pluggable, initialized in high-level API below.
            var randombytes = function (/* x, n */) {
                throw new Error('no PRNG');
            };

            var _0 = new Uint8Array(16);
            var _9 = new Uint8Array(32);
            _9[0] = 9;

            var gf0 = gf(),
                gf1 = gf([1]),
                _121665 = gf([0xdb41, 1]),
                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
                X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
                Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

            function ts64(x, i, h, l) {
                x[i] = (h >> 24) & 0xff;
                x[i + 1] = (h >> 16) & 0xff;
                x[i + 2] = (h >> 8) & 0xff;
                x[i + 3] = h & 0xff;
                x[i + 4] = (l >> 24) & 0xff;
                x[i + 5] = (l >> 16) & 0xff;
                x[i + 6] = (l >> 8) & 0xff;
                x[i + 7] = l & 0xff;
            }

            function vn(x, xi, y, yi, n) {
                var i, d = 0;
                for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
                return (1 & ((d - 1) >>> 8)) - 1;
            }

            function crypto_verify_16(x, xi, y, yi) {
                return vn(x, xi, y, yi, 16);
            }

            function crypto_verify_32(x, xi, y, yi) {
                return vn(x, xi, y, yi, 32);
            }

            function core_salsa20(o, p, k, c) {
                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                    j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                    j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                    j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                    j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                    j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                    j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                    j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                    j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                    j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                    j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                    j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                    j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                    j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                    j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                    j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u << 7 | u >>> (32 - 7);
                    u = x4 + x0 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x4 | 0;
                    x12 ^= u << 13 | u >>> (32 - 13);
                    u = x12 + x8 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x1 | 0;
                    x9 ^= u << 7 | u >>> (32 - 7);
                    u = x9 + x5 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x9 | 0;
                    x1 ^= u << 13 | u >>> (32 - 13);
                    u = x1 + x13 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x6 | 0;
                    x14 ^= u << 7 | u >>> (32 - 7);
                    u = x14 + x10 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x14 | 0;
                    x6 ^= u << 13 | u >>> (32 - 13);
                    u = x6 + x2 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x11 | 0;
                    x3 ^= u << 7 | u >>> (32 - 7);
                    u = x3 + x15 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x3 | 0;
                    x11 ^= u << 13 | u >>> (32 - 13);
                    u = x11 + x7 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);

                    u = x0 + x3 | 0;
                    x1 ^= u << 7 | u >>> (32 - 7);
                    u = x1 + x0 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x1 | 0;
                    x3 ^= u << 13 | u >>> (32 - 13);
                    u = x3 + x2 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x4 | 0;
                    x6 ^= u << 7 | u >>> (32 - 7);
                    u = x6 + x5 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x6 | 0;
                    x4 ^= u << 13 | u >>> (32 - 13);
                    u = x4 + x7 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x9 | 0;
                    x11 ^= u << 7 | u >>> (32 - 7);
                    u = x11 + x10 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x11 | 0;
                    x9 ^= u << 13 | u >>> (32 - 13);
                    u = x9 + x8 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x14 | 0;
                    x12 ^= u << 7 | u >>> (32 - 7);
                    u = x12 + x15 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x12 | 0;
                    x14 ^= u << 13 | u >>> (32 - 13);
                    u = x14 + x13 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);
                }
                x0 = x0 + j0 | 0;
                x1 = x1 + j1 | 0;
                x2 = x2 + j2 | 0;
                x3 = x3 + j3 | 0;
                x4 = x4 + j4 | 0;
                x5 = x5 + j5 | 0;
                x6 = x6 + j6 | 0;
                x7 = x7 + j7 | 0;
                x8 = x8 + j8 | 0;
                x9 = x9 + j9 | 0;
                x10 = x10 + j10 | 0;
                x11 = x11 + j11 | 0;
                x12 = x12 + j12 | 0;
                x13 = x13 + j13 | 0;
                x14 = x14 + j14 | 0;
                x15 = x15 + j15 | 0;

                o[0] = x0 >>> 0 & 0xff;
                o[1] = x0 >>> 8 & 0xff;
                o[2] = x0 >>> 16 & 0xff;
                o[3] = x0 >>> 24 & 0xff;

                o[4] = x1 >>> 0 & 0xff;
                o[5] = x1 >>> 8 & 0xff;
                o[6] = x1 >>> 16 & 0xff;
                o[7] = x1 >>> 24 & 0xff;

                o[8] = x2 >>> 0 & 0xff;
                o[9] = x2 >>> 8 & 0xff;
                o[10] = x2 >>> 16 & 0xff;
                o[11] = x2 >>> 24 & 0xff;

                o[12] = x3 >>> 0 & 0xff;
                o[13] = x3 >>> 8 & 0xff;
                o[14] = x3 >>> 16 & 0xff;
                o[15] = x3 >>> 24 & 0xff;

                o[16] = x4 >>> 0 & 0xff;
                o[17] = x4 >>> 8 & 0xff;
                o[18] = x4 >>> 16 & 0xff;
                o[19] = x4 >>> 24 & 0xff;

                o[20] = x5 >>> 0 & 0xff;
                o[21] = x5 >>> 8 & 0xff;
                o[22] = x5 >>> 16 & 0xff;
                o[23] = x5 >>> 24 & 0xff;

                o[24] = x6 >>> 0 & 0xff;
                o[25] = x6 >>> 8 & 0xff;
                o[26] = x6 >>> 16 & 0xff;
                o[27] = x6 >>> 24 & 0xff;

                o[28] = x7 >>> 0 & 0xff;
                o[29] = x7 >>> 8 & 0xff;
                o[30] = x7 >>> 16 & 0xff;
                o[31] = x7 >>> 24 & 0xff;

                o[32] = x8 >>> 0 & 0xff;
                o[33] = x8 >>> 8 & 0xff;
                o[34] = x8 >>> 16 & 0xff;
                o[35] = x8 >>> 24 & 0xff;

                o[36] = x9 >>> 0 & 0xff;
                o[37] = x9 >>> 8 & 0xff;
                o[38] = x9 >>> 16 & 0xff;
                o[39] = x9 >>> 24 & 0xff;

                o[40] = x10 >>> 0 & 0xff;
                o[41] = x10 >>> 8 & 0xff;
                o[42] = x10 >>> 16 & 0xff;
                o[43] = x10 >>> 24 & 0xff;

                o[44] = x11 >>> 0 & 0xff;
                o[45] = x11 >>> 8 & 0xff;
                o[46] = x11 >>> 16 & 0xff;
                o[47] = x11 >>> 24 & 0xff;

                o[48] = x12 >>> 0 & 0xff;
                o[49] = x12 >>> 8 & 0xff;
                o[50] = x12 >>> 16 & 0xff;
                o[51] = x12 >>> 24 & 0xff;

                o[52] = x13 >>> 0 & 0xff;
                o[53] = x13 >>> 8 & 0xff;
                o[54] = x13 >>> 16 & 0xff;
                o[55] = x13 >>> 24 & 0xff;

                o[56] = x14 >>> 0 & 0xff;
                o[57] = x14 >>> 8 & 0xff;
                o[58] = x14 >>> 16 & 0xff;
                o[59] = x14 >>> 24 & 0xff;

                o[60] = x15 >>> 0 & 0xff;
                o[61] = x15 >>> 8 & 0xff;
                o[62] = x15 >>> 16 & 0xff;
                o[63] = x15 >>> 24 & 0xff;
            }

            function core_hsalsa20(o, p, k, c) {
                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
                    j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
                    j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
                    j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
                    j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
                    j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
                    j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
                    j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
                    j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
                    j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
                    j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
                    j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
                    j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
                    j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
                    j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
                    j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u << 7 | u >>> (32 - 7);
                    u = x4 + x0 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x4 | 0;
                    x12 ^= u << 13 | u >>> (32 - 13);
                    u = x12 + x8 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x1 | 0;
                    x9 ^= u << 7 | u >>> (32 - 7);
                    u = x9 + x5 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x9 | 0;
                    x1 ^= u << 13 | u >>> (32 - 13);
                    u = x1 + x13 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x6 | 0;
                    x14 ^= u << 7 | u >>> (32 - 7);
                    u = x14 + x10 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x14 | 0;
                    x6 ^= u << 13 | u >>> (32 - 13);
                    u = x6 + x2 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x11 | 0;
                    x3 ^= u << 7 | u >>> (32 - 7);
                    u = x3 + x15 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x3 | 0;
                    x11 ^= u << 13 | u >>> (32 - 13);
                    u = x11 + x7 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);

                    u = x0 + x3 | 0;
                    x1 ^= u << 7 | u >>> (32 - 7);
                    u = x1 + x0 | 0;
                    x2 ^= u << 9 | u >>> (32 - 9);
                    u = x2 + x1 | 0;
                    x3 ^= u << 13 | u >>> (32 - 13);
                    u = x3 + x2 | 0;
                    x0 ^= u << 18 | u >>> (32 - 18);

                    u = x5 + x4 | 0;
                    x6 ^= u << 7 | u >>> (32 - 7);
                    u = x6 + x5 | 0;
                    x7 ^= u << 9 | u >>> (32 - 9);
                    u = x7 + x6 | 0;
                    x4 ^= u << 13 | u >>> (32 - 13);
                    u = x4 + x7 | 0;
                    x5 ^= u << 18 | u >>> (32 - 18);

                    u = x10 + x9 | 0;
                    x11 ^= u << 7 | u >>> (32 - 7);
                    u = x11 + x10 | 0;
                    x8 ^= u << 9 | u >>> (32 - 9);
                    u = x8 + x11 | 0;
                    x9 ^= u << 13 | u >>> (32 - 13);
                    u = x9 + x8 | 0;
                    x10 ^= u << 18 | u >>> (32 - 18);

                    u = x15 + x14 | 0;
                    x12 ^= u << 7 | u >>> (32 - 7);
                    u = x12 + x15 | 0;
                    x13 ^= u << 9 | u >>> (32 - 9);
                    u = x13 + x12 | 0;
                    x14 ^= u << 13 | u >>> (32 - 13);
                    u = x14 + x13 | 0;
                    x15 ^= u << 18 | u >>> (32 - 18);
                }

                o[0] = x0 >>> 0 & 0xff;
                o[1] = x0 >>> 8 & 0xff;
                o[2] = x0 >>> 16 & 0xff;
                o[3] = x0 >>> 24 & 0xff;

                o[4] = x5 >>> 0 & 0xff;
                o[5] = x5 >>> 8 & 0xff;
                o[6] = x5 >>> 16 & 0xff;
                o[7] = x5 >>> 24 & 0xff;

                o[8] = x10 >>> 0 & 0xff;
                o[9] = x10 >>> 8 & 0xff;
                o[10] = x10 >>> 16 & 0xff;
                o[11] = x10 >>> 24 & 0xff;

                o[12] = x15 >>> 0 & 0xff;
                o[13] = x15 >>> 8 & 0xff;
                o[14] = x15 >>> 16 & 0xff;
                o[15] = x15 >>> 24 & 0xff;

                o[16] = x6 >>> 0 & 0xff;
                o[17] = x6 >>> 8 & 0xff;
                o[18] = x6 >>> 16 & 0xff;
                o[19] = x6 >>> 24 & 0xff;

                o[20] = x7 >>> 0 & 0xff;
                o[21] = x7 >>> 8 & 0xff;
                o[22] = x7 >>> 16 & 0xff;
                o[23] = x7 >>> 24 & 0xff;

                o[24] = x8 >>> 0 & 0xff;
                o[25] = x8 >>> 8 & 0xff;
                o[26] = x8 >>> 16 & 0xff;
                o[27] = x8 >>> 24 & 0xff;

                o[28] = x9 >>> 0 & 0xff;
                o[29] = x9 >>> 8 & 0xff;
                o[30] = x9 >>> 16 & 0xff;
                o[31] = x9 >>> 24 & 0xff;
            }

            function crypto_core_salsa20(out, inp, k, c) {
                core_salsa20(out, inp, k, c);
            }

            function crypto_core_hsalsa20(out, inp, k, c) {
                core_hsalsa20(out, inp, k, c);
            }

            var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

            function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                    mpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
                }
                return 0;
            }

            function crypto_stream_salsa20(c, cpos, b, n, k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < 64; i++) c[cpos + i] = x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x, z, k, sigma);
                    for (i = 0; i < b; i++) c[cpos + i] = x[i];
                }
                return 0;
            }

            function crypto_stream(c, cpos, d, n, k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s, n, k, sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
                return crypto_stream_salsa20(c, cpos, d, sn, s);
            }

            function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s, n, k, sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
                return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
            }

            /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

            var poly1305 = function (key) {
                this.buffer = new Uint8Array(16);
                this.r = new Uint16Array(10);
                this.h = new Uint16Array(10);
                this.pad = new Uint16Array(8);
                this.leftover = 0;
                this.fin = 0;

                var t0, t1, t2, t3, t4, t5, t6, t7;

                t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
                this.r[0] = (t0) & 0x1fff;
                t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
                this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
                this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
                t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
                this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
                this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
                this.r[5] = ((t4 >>> 1)) & 0x1ffe;
                t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
                this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
                this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
                t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
                this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                this.r[9] = ((t7 >>> 5)) & 0x007f;

                this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
                this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
                this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
                this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
                this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
                this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
                this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
                this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
            };

            poly1305.prototype.blocks = function (m, mpos, bytes) {
                var hibit = this.fin ? 0 : (1 << 11);
                var t0, t1, t2, t3, t4, t5, t6, t7, c;
                var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

                var h0 = this.h[0],
                    h1 = this.h[1],
                    h2 = this.h[2],
                    h3 = this.h[3],
                    h4 = this.h[4],
                    h5 = this.h[5],
                    h6 = this.h[6],
                    h7 = this.h[7],
                    h8 = this.h[8],
                    h9 = this.h[9];

                var r0 = this.r[0],
                    r1 = this.r[1],
                    r2 = this.r[2],
                    r3 = this.r[3],
                    r4 = this.r[4],
                    r5 = this.r[5],
                    r6 = this.r[6],
                    r7 = this.r[7],
                    r8 = this.r[8],
                    r9 = this.r[9];

                while (bytes >= 16) {
                    t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
                    h0 += (t0) & 0x1fff;
                    t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
                    h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                    t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
                    h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
                    t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
                    h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                    t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
                    h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
                    h5 += ((t4 >>> 1)) & 0x1fff;
                    t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
                    h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                    t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
                    h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
                    t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
                    h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                    h9 += ((t7 >>> 5)) | hibit;

                    c = 0;

                    d0 = c;
                    d0 += h0 * r0;
                    d0 += h1 * (5 * r9);
                    d0 += h2 * (5 * r8);
                    d0 += h3 * (5 * r7);
                    d0 += h4 * (5 * r6);
                    c = (d0 >>> 13);
                    d0 &= 0x1fff;
                    d0 += h5 * (5 * r5);
                    d0 += h6 * (5 * r4);
                    d0 += h7 * (5 * r3);
                    d0 += h8 * (5 * r2);
                    d0 += h9 * (5 * r1);
                    c += (d0 >>> 13);
                    d0 &= 0x1fff;

                    d1 = c;
                    d1 += h0 * r1;
                    d1 += h1 * r0;
                    d1 += h2 * (5 * r9);
                    d1 += h3 * (5 * r8);
                    d1 += h4 * (5 * r7);
                    c = (d1 >>> 13);
                    d1 &= 0x1fff;
                    d1 += h5 * (5 * r6);
                    d1 += h6 * (5 * r5);
                    d1 += h7 * (5 * r4);
                    d1 += h8 * (5 * r3);
                    d1 += h9 * (5 * r2);
                    c += (d1 >>> 13);
                    d1 &= 0x1fff;

                    d2 = c;
                    d2 += h0 * r2;
                    d2 += h1 * r1;
                    d2 += h2 * r0;
                    d2 += h3 * (5 * r9);
                    d2 += h4 * (5 * r8);
                    c = (d2 >>> 13);
                    d2 &= 0x1fff;
                    d2 += h5 * (5 * r7);
                    d2 += h6 * (5 * r6);
                    d2 += h7 * (5 * r5);
                    d2 += h8 * (5 * r4);
                    d2 += h9 * (5 * r3);
                    c += (d2 >>> 13);
                    d2 &= 0x1fff;

                    d3 = c;
                    d3 += h0 * r3;
                    d3 += h1 * r2;
                    d3 += h2 * r1;
                    d3 += h3 * r0;
                    d3 += h4 * (5 * r9);
                    c = (d3 >>> 13);
                    d3 &= 0x1fff;
                    d3 += h5 * (5 * r8);
                    d3 += h6 * (5 * r7);
                    d3 += h7 * (5 * r6);
                    d3 += h8 * (5 * r5);
                    d3 += h9 * (5 * r4);
                    c += (d3 >>> 13);
                    d3 &= 0x1fff;

                    d4 = c;
                    d4 += h0 * r4;
                    d4 += h1 * r3;
                    d4 += h2 * r2;
                    d4 += h3 * r1;
                    d4 += h4 * r0;
                    c = (d4 >>> 13);
                    d4 &= 0x1fff;
                    d4 += h5 * (5 * r9);
                    d4 += h6 * (5 * r8);
                    d4 += h7 * (5 * r7);
                    d4 += h8 * (5 * r6);
                    d4 += h9 * (5 * r5);
                    c += (d4 >>> 13);
                    d4 &= 0x1fff;

                    d5 = c;
                    d5 += h0 * r5;
                    d5 += h1 * r4;
                    d5 += h2 * r3;
                    d5 += h3 * r2;
                    d5 += h4 * r1;
                    c = (d5 >>> 13);
                    d5 &= 0x1fff;
                    d5 += h5 * r0;
                    d5 += h6 * (5 * r9);
                    d5 += h7 * (5 * r8);
                    d5 += h8 * (5 * r7);
                    d5 += h9 * (5 * r6);
                    c += (d5 >>> 13);
                    d5 &= 0x1fff;

                    d6 = c;
                    d6 += h0 * r6;
                    d6 += h1 * r5;
                    d6 += h2 * r4;
                    d6 += h3 * r3;
                    d6 += h4 * r2;
                    c = (d6 >>> 13);
                    d6 &= 0x1fff;
                    d6 += h5 * r1;
                    d6 += h6 * r0;
                    d6 += h7 * (5 * r9);
                    d6 += h8 * (5 * r8);
                    d6 += h9 * (5 * r7);
                    c += (d6 >>> 13);
                    d6 &= 0x1fff;

                    d7 = c;
                    d7 += h0 * r7;
                    d7 += h1 * r6;
                    d7 += h2 * r5;
                    d7 += h3 * r4;
                    d7 += h4 * r3;
                    c = (d7 >>> 13);
                    d7 &= 0x1fff;
                    d7 += h5 * r2;
                    d7 += h6 * r1;
                    d7 += h7 * r0;
                    d7 += h8 * (5 * r9);
                    d7 += h9 * (5 * r8);
                    c += (d7 >>> 13);
                    d7 &= 0x1fff;

                    d8 = c;
                    d8 += h0 * r8;
                    d8 += h1 * r7;
                    d8 += h2 * r6;
                    d8 += h3 * r5;
                    d8 += h4 * r4;
                    c = (d8 >>> 13);
                    d8 &= 0x1fff;
                    d8 += h5 * r3;
                    d8 += h6 * r2;
                    d8 += h7 * r1;
                    d8 += h8 * r0;
                    d8 += h9 * (5 * r9);
                    c += (d8 >>> 13);
                    d8 &= 0x1fff;

                    d9 = c;
                    d9 += h0 * r9;
                    d9 += h1 * r8;
                    d9 += h2 * r7;
                    d9 += h3 * r6;
                    d9 += h4 * r5;
                    c = (d9 >>> 13);
                    d9 &= 0x1fff;
                    d9 += h5 * r4;
                    d9 += h6 * r3;
                    d9 += h7 * r2;
                    d9 += h8 * r1;
                    d9 += h9 * r0;
                    c += (d9 >>> 13);
                    d9 &= 0x1fff;

                    c = (((c << 2) + c)) | 0;
                    c = (c + d0) | 0;
                    d0 = c & 0x1fff;
                    c = (c >>> 13);
                    d1 += c;

                    h0 = d0;
                    h1 = d1;
                    h2 = d2;
                    h3 = d3;
                    h4 = d4;
                    h5 = d5;
                    h6 = d6;
                    h7 = d7;
                    h8 = d8;
                    h9 = d9;

                    mpos += 16;
                    bytes -= 16;
                }
                this.h[0] = h0;
                this.h[1] = h1;
                this.h[2] = h2;
                this.h[3] = h3;
                this.h[4] = h4;
                this.h[5] = h5;
                this.h[6] = h6;
                this.h[7] = h7;
                this.h[8] = h8;
                this.h[9] = h9;
            };

            poly1305.prototype.finish = function (mac, macpos) {
                var g = new Uint16Array(10);
                var c, mask, f, i;

                if (this.leftover) {
                    i = this.leftover;
                    this.buffer[i++] = 1;
                    for (; i < 16; i++) this.buffer[i] = 0;
                    this.fin = 1;
                    this.blocks(this.buffer, 0, 16);
                }

                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                for (i = 2; i < 10; i++) {
                    this.h[i] += c;
                    c = this.h[i] >>> 13;
                    this.h[i] &= 0x1fff;
                }
                this.h[0] += (c * 5);
                c = this.h[0] >>> 13;
                this.h[0] &= 0x1fff;
                this.h[1] += c;
                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                this.h[2] += c;

                g[0] = this.h[0] + 5;
                c = g[0] >>> 13;
                g[0] &= 0x1fff;
                for (i = 1; i < 10; i++) {
                    g[i] = this.h[i] + c;
                    c = g[i] >>> 13;
                    g[i] &= 0x1fff;
                }
                g[9] -= (1 << 13);

                mask = (c ^ 1) - 1;
                for (i = 0; i < 10; i++) g[i] &= mask;
                mask = ~mask;
                for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

                this.h[0] = ((this.h[0]) | (this.h[1] << 13)) & 0xffff;
                this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
                this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
                this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
                this.h[4] = ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 0xffff;
                this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
                this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
                this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;

                f = this.h[0] + this.pad[0];
                this.h[0] = f & 0xffff;
                for (i = 1; i < 8; i++) {
                    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
                    this.h[i] = f & 0xffff;
                }

                mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
                mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
                mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
                mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
                mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
                mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
                mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
                mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
                mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
                mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
                mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
                mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
                mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
                mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
                mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
                mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
            };

            poly1305.prototype.update = function (m, mpos, bytes) {
                var i, want;

                if (this.leftover) {
                    want = (16 - this.leftover);
                    if (want > bytes)
                        want = bytes;
                    for (i = 0; i < want; i++)
                        this.buffer[this.leftover + i] = m[mpos + i];
                    bytes -= want;
                    mpos += want;
                    this.leftover += want;
                    if (this.leftover < 16)
                        return;
                    this.blocks(this.buffer, 0, 16);
                    this.leftover = 0;
                }

                if (bytes >= 16) {
                    want = bytes - (bytes % 16);
                    this.blocks(m, mpos, want);
                    mpos += want;
                    bytes -= want;
                }

                if (bytes) {
                    for (i = 0; i < bytes; i++)
                        this.buffer[this.leftover + i] = m[mpos + i];
                    this.leftover += bytes;
                }
            };

            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
                var s = new poly1305(k);
                s.update(m, mpos, n);
                s.finish(out, outpos);
                return 0;
            }

            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
                var x = new Uint8Array(16);
                crypto_onetimeauth(x, 0, m, mpos, n, k);
                return crypto_verify_16(h, hpos, x, 0);
            }

            function crypto_secretbox(c, m, d, n, k) {
                var i;
                if (d < 32) return -1;
                crypto_stream_xor(c, 0, m, 0, d, n, k);
                crypto_onetimeauth(c, 16, c, 32, d - 32, c);
                for (i = 0; i < 16; i++) c[i] = 0;
                return 0;
            }

            function crypto_secretbox_open(m, c, d, n, k) {
                var i;
                var x = new Uint8Array(32);
                if (d < 32) return -1;
                crypto_stream(x, 0, 32, n, k);
                if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
                crypto_stream_xor(m, 0, c, 0, d, n, k);
                for (i = 0; i < 32; i++) m[i] = 0;
                return 0;
            }

            function set25519(r, a) {
                var i;
                for (i = 0; i < 16; i++) r[i] = a[i] | 0;
            }

            function car25519(o) {
                var i, v, c = 1;
                for (i = 0; i < 16; i++) {
                    v = o[i] + c + 65535;
                    c = Math.floor(v / 65536);
                    o[i] = v - c * 65536;
                }
                o[0] += c - 1 + 37 * (c - 1);
            }

            function sel25519(p, q, b) {
                var t, c = ~(b - 1);
                for (var i = 0; i < 16; i++) {
                    t = c & (p[i] ^ q[i]);
                    p[i] ^= t;
                    q[i] ^= t;
                }
            }

            function pack25519(o, n) {
                var i, j, b;
                var m = gf(), t = gf();
                for (i = 0; i < 16; i++) t[i] = n[i];
                car25519(t);
                car25519(t);
                car25519(t);
                for (j = 0; j < 2; j++) {
                    m[0] = t[0] - 0xffed;
                    for (i = 1; i < 15; i++) {
                        m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                        m[i - 1] &= 0xffff;
                    }
                    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
                    b = (m[15] >> 16) & 1;
                    m[14] &= 0xffff;
                    sel25519(t, m, 1 - b);
                }
                for (i = 0; i < 16; i++) {
                    o[2 * i] = t[i] & 0xff;
                    o[2 * i + 1] = t[i] >> 8;
                }
            }

            function neq25519(a, b) {
                var c = new Uint8Array(32), d = new Uint8Array(32);
                pack25519(c, a);
                pack25519(d, b);
                return crypto_verify_32(c, 0, d, 0);
            }

            function par25519(a) {
                var d = new Uint8Array(32);
                pack25519(d, a);
                return d[0] & 1;
            }

            function unpack25519(o, n) {
                var i;
                for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
                o[15] &= 0x7fff;
            }

            function A(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
            }

            function Z(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
            }

            function M(o, a, b) {
                var v, c,
                    t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,
                    t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
                    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
                    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
                    b0 = b[0],
                    b1 = b[1],
                    b2 = b[2],
                    b3 = b[3],
                    b4 = b[4],
                    b5 = b[5],
                    b6 = b[6],
                    b7 = b[7],
                    b8 = b[8],
                    b9 = b[9],
                    b10 = b[10],
                    b11 = b[11],
                    b12 = b[12],
                    b13 = b[13],
                    b14 = b[14],
                    b15 = b[15];

                v = a[0];
                t0 += v * b0;
                t1 += v * b1;
                t2 += v * b2;
                t3 += v * b3;
                t4 += v * b4;
                t5 += v * b5;
                t6 += v * b6;
                t7 += v * b7;
                t8 += v * b8;
                t9 += v * b9;
                t10 += v * b10;
                t11 += v * b11;
                t12 += v * b12;
                t13 += v * b13;
                t14 += v * b14;
                t15 += v * b15;
                v = a[1];
                t1 += v * b0;
                t2 += v * b1;
                t3 += v * b2;
                t4 += v * b3;
                t5 += v * b4;
                t6 += v * b5;
                t7 += v * b6;
                t8 += v * b7;
                t9 += v * b8;
                t10 += v * b9;
                t11 += v * b10;
                t12 += v * b11;
                t13 += v * b12;
                t14 += v * b13;
                t15 += v * b14;
                t16 += v * b15;
                v = a[2];
                t2 += v * b0;
                t3 += v * b1;
                t4 += v * b2;
                t5 += v * b3;
                t6 += v * b4;
                t7 += v * b5;
                t8 += v * b6;
                t9 += v * b7;
                t10 += v * b8;
                t11 += v * b9;
                t12 += v * b10;
                t13 += v * b11;
                t14 += v * b12;
                t15 += v * b13;
                t16 += v * b14;
                t17 += v * b15;
                v = a[3];
                t3 += v * b0;
                t4 += v * b1;
                t5 += v * b2;
                t6 += v * b3;
                t7 += v * b4;
                t8 += v * b5;
                t9 += v * b6;
                t10 += v * b7;
                t11 += v * b8;
                t12 += v * b9;
                t13 += v * b10;
                t14 += v * b11;
                t15 += v * b12;
                t16 += v * b13;
                t17 += v * b14;
                t18 += v * b15;
                v = a[4];
                t4 += v * b0;
                t5 += v * b1;
                t6 += v * b2;
                t7 += v * b3;
                t8 += v * b4;
                t9 += v * b5;
                t10 += v * b6;
                t11 += v * b7;
                t12 += v * b8;
                t13 += v * b9;
                t14 += v * b10;
                t15 += v * b11;
                t16 += v * b12;
                t17 += v * b13;
                t18 += v * b14;
                t19 += v * b15;
                v = a[5];
                t5 += v * b0;
                t6 += v * b1;
                t7 += v * b2;
                t8 += v * b3;
                t9 += v * b4;
                t10 += v * b5;
                t11 += v * b6;
                t12 += v * b7;
                t13 += v * b8;
                t14 += v * b9;
                t15 += v * b10;
                t16 += v * b11;
                t17 += v * b12;
                t18 += v * b13;
                t19 += v * b14;
                t20 += v * b15;
                v = a[6];
                t6 += v * b0;
                t7 += v * b1;
                t8 += v * b2;
                t9 += v * b3;
                t10 += v * b4;
                t11 += v * b5;
                t12 += v * b6;
                t13 += v * b7;
                t14 += v * b8;
                t15 += v * b9;
                t16 += v * b10;
                t17 += v * b11;
                t18 += v * b12;
                t19 += v * b13;
                t20 += v * b14;
                t21 += v * b15;
                v = a[7];
                t7 += v * b0;
                t8 += v * b1;
                t9 += v * b2;
                t10 += v * b3;
                t11 += v * b4;
                t12 += v * b5;
                t13 += v * b6;
                t14 += v * b7;
                t15 += v * b8;
                t16 += v * b9;
                t17 += v * b10;
                t18 += v * b11;
                t19 += v * b12;
                t20 += v * b13;
                t21 += v * b14;
                t22 += v * b15;
                v = a[8];
                t8 += v * b0;
                t9 += v * b1;
                t10 += v * b2;
                t11 += v * b3;
                t12 += v * b4;
                t13 += v * b5;
                t14 += v * b6;
                t15 += v * b7;
                t16 += v * b8;
                t17 += v * b9;
                t18 += v * b10;
                t19 += v * b11;
                t20 += v * b12;
                t21 += v * b13;
                t22 += v * b14;
                t23 += v * b15;
                v = a[9];
                t9 += v * b0;
                t10 += v * b1;
                t11 += v * b2;
                t12 += v * b3;
                t13 += v * b4;
                t14 += v * b5;
                t15 += v * b6;
                t16 += v * b7;
                t17 += v * b8;
                t18 += v * b9;
                t19 += v * b10;
                t20 += v * b11;
                t21 += v * b12;
                t22 += v * b13;
                t23 += v * b14;
                t24 += v * b15;
                v = a[10];
                t10 += v * b0;
                t11 += v * b1;
                t12 += v * b2;
                t13 += v * b3;
                t14 += v * b4;
                t15 += v * b5;
                t16 += v * b6;
                t17 += v * b7;
                t18 += v * b8;
                t19 += v * b9;
                t20 += v * b10;
                t21 += v * b11;
                t22 += v * b12;
                t23 += v * b13;
                t24 += v * b14;
                t25 += v * b15;
                v = a[11];
                t11 += v * b0;
                t12 += v * b1;
                t13 += v * b2;
                t14 += v * b3;
                t15 += v * b4;
                t16 += v * b5;
                t17 += v * b6;
                t18 += v * b7;
                t19 += v * b8;
                t20 += v * b9;
                t21 += v * b10;
                t22 += v * b11;
                t23 += v * b12;
                t24 += v * b13;
                t25 += v * b14;
                t26 += v * b15;
                v = a[12];
                t12 += v * b0;
                t13 += v * b1;
                t14 += v * b2;
                t15 += v * b3;
                t16 += v * b4;
                t17 += v * b5;
                t18 += v * b6;
                t19 += v * b7;
                t20 += v * b8;
                t21 += v * b9;
                t22 += v * b10;
                t23 += v * b11;
                t24 += v * b12;
                t25 += v * b13;
                t26 += v * b14;
                t27 += v * b15;
                v = a[13];
                t13 += v * b0;
                t14 += v * b1;
                t15 += v * b2;
                t16 += v * b3;
                t17 += v * b4;
                t18 += v * b5;
                t19 += v * b6;
                t20 += v * b7;
                t21 += v * b8;
                t22 += v * b9;
                t23 += v * b10;
                t24 += v * b11;
                t25 += v * b12;
                t26 += v * b13;
                t27 += v * b14;
                t28 += v * b15;
                v = a[14];
                t14 += v * b0;
                t15 += v * b1;
                t16 += v * b2;
                t17 += v * b3;
                t18 += v * b4;
                t19 += v * b5;
                t20 += v * b6;
                t21 += v * b7;
                t22 += v * b8;
                t23 += v * b9;
                t24 += v * b10;
                t25 += v * b11;
                t26 += v * b12;
                t27 += v * b13;
                t28 += v * b14;
                t29 += v * b15;
                v = a[15];
                t15 += v * b0;
                t16 += v * b1;
                t17 += v * b2;
                t18 += v * b3;
                t19 += v * b4;
                t20 += v * b5;
                t21 += v * b6;
                t22 += v * b7;
                t23 += v * b8;
                t24 += v * b9;
                t25 += v * b10;
                t26 += v * b11;
                t27 += v * b12;
                t28 += v * b13;
                t29 += v * b14;
                t30 += v * b15;

                t0 += 38 * t16;
                t1 += 38 * t17;
                t2 += 38 * t18;
                t3 += 38 * t19;
                t4 += 38 * t20;
                t5 += 38 * t21;
                t6 += 38 * t22;
                t7 += 38 * t23;
                t8 += 38 * t24;
                t9 += 38 * t25;
                t10 += 38 * t26;
                t11 += 38 * t27;
                t12 += 38 * t28;
                t13 += 38 * t29;
                t14 += 38 * t30;
                // t15 left as is

                // first car
                c = 1;
                v = t0 + c + 65535;
                c = Math.floor(v / 65536);
                t0 = v - c * 65536;
                v = t1 + c + 65535;
                c = Math.floor(v / 65536);
                t1 = v - c * 65536;
                v = t2 + c + 65535;
                c = Math.floor(v / 65536);
                t2 = v - c * 65536;
                v = t3 + c + 65535;
                c = Math.floor(v / 65536);
                t3 = v - c * 65536;
                v = t4 + c + 65535;
                c = Math.floor(v / 65536);
                t4 = v - c * 65536;
                v = t5 + c + 65535;
                c = Math.floor(v / 65536);
                t5 = v - c * 65536;
                v = t6 + c + 65535;
                c = Math.floor(v / 65536);
                t6 = v - c * 65536;
                v = t7 + c + 65535;
                c = Math.floor(v / 65536);
                t7 = v - c * 65536;
                v = t8 + c + 65535;
                c = Math.floor(v / 65536);
                t8 = v - c * 65536;
                v = t9 + c + 65535;
                c = Math.floor(v / 65536);
                t9 = v - c * 65536;
                v = t10 + c + 65535;
                c = Math.floor(v / 65536);
                t10 = v - c * 65536;
                v = t11 + c + 65535;
                c = Math.floor(v / 65536);
                t11 = v - c * 65536;
                v = t12 + c + 65535;
                c = Math.floor(v / 65536);
                t12 = v - c * 65536;
                v = t13 + c + 65535;
                c = Math.floor(v / 65536);
                t13 = v - c * 65536;
                v = t14 + c + 65535;
                c = Math.floor(v / 65536);
                t14 = v - c * 65536;
                v = t15 + c + 65535;
                c = Math.floor(v / 65536);
                t15 = v - c * 65536;
                t0 += c - 1 + 37 * (c - 1);

                // second car
                c = 1;
                v = t0 + c + 65535;
                c = Math.floor(v / 65536);
                t0 = v - c * 65536;
                v = t1 + c + 65535;
                c = Math.floor(v / 65536);
                t1 = v - c * 65536;
                v = t2 + c + 65535;
                c = Math.floor(v / 65536);
                t2 = v - c * 65536;
                v = t3 + c + 65535;
                c = Math.floor(v / 65536);
                t3 = v - c * 65536;
                v = t4 + c + 65535;
                c = Math.floor(v / 65536);
                t4 = v - c * 65536;
                v = t5 + c + 65535;
                c = Math.floor(v / 65536);
                t5 = v - c * 65536;
                v = t6 + c + 65535;
                c = Math.floor(v / 65536);
                t6 = v - c * 65536;
                v = t7 + c + 65535;
                c = Math.floor(v / 65536);
                t7 = v - c * 65536;
                v = t8 + c + 65535;
                c = Math.floor(v / 65536);
                t8 = v - c * 65536;
                v = t9 + c + 65535;
                c = Math.floor(v / 65536);
                t9 = v - c * 65536;
                v = t10 + c + 65535;
                c = Math.floor(v / 65536);
                t10 = v - c * 65536;
                v = t11 + c + 65535;
                c = Math.floor(v / 65536);
                t11 = v - c * 65536;
                v = t12 + c + 65535;
                c = Math.floor(v / 65536);
                t12 = v - c * 65536;
                v = t13 + c + 65535;
                c = Math.floor(v / 65536);
                t13 = v - c * 65536;
                v = t14 + c + 65535;
                c = Math.floor(v / 65536);
                t14 = v - c * 65536;
                v = t15 + c + 65535;
                c = Math.floor(v / 65536);
                t15 = v - c * 65536;
                t0 += c - 1 + 37 * (c - 1);

                o[0] = t0;
                o[1] = t1;
                o[2] = t2;
                o[3] = t3;
                o[4] = t4;
                o[5] = t5;
                o[6] = t6;
                o[7] = t7;
                o[8] = t8;
                o[9] = t9;
                o[10] = t10;
                o[11] = t11;
                o[12] = t12;
                o[13] = t13;
                o[14] = t14;
                o[15] = t15;
            }

            function S(o, a) {
                M(o, a, a);
            }

            function inv25519(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 253; a >= 0; a--) {
                    S(c, c);
                    if (a !== 2 && a !== 4) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function pow2523(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 250; a >= 0; a--) {
                    S(c, c);
                    if (a !== 1) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function crypto_scalarmult(q, n, p) {
                var z = new Uint8Array(32);
                var x = new Float64Array(80), r, i;
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf();
                for (i = 0; i < 31; i++) z[i] = n[i];
                z[31] = (n[31] & 127) | 64;
                z[0] &= 248;
                unpack25519(x, p);
                for (i = 0; i < 16; i++) {
                    b[i] = x[i];
                    d[i] = a[i] = c[i] = 0;
                }
                a[0] = d[0] = 1;
                for (i = 254; i >= 0; --i) {
                    r = (z[i >>> 3] >>> (i & 7)) & 1;
                    sel25519(a, b, r);
                    sel25519(c, d, r);
                    A(e, a, c);
                    Z(a, a, c);
                    A(c, b, d);
                    Z(b, b, d);
                    S(d, e);
                    S(f, a);
                    M(a, c, a);
                    M(c, b, e);
                    A(e, a, c);
                    Z(a, a, c);
                    S(b, a);
                    Z(c, d, f);
                    M(a, c, _121665);
                    A(a, a, d);
                    M(c, c, a);
                    M(a, d, f);
                    M(d, b, x);
                    S(b, e);
                    sel25519(a, b, r);
                    sel25519(c, d, r);
                }
                for (i = 0; i < 16; i++) {
                    x[i + 16] = a[i];
                    x[i + 32] = c[i];
                    x[i + 48] = b[i];
                    x[i + 64] = d[i];
                }
                var x32 = x.subarray(32);
                var x16 = x.subarray(16);
                inv25519(x32, x32);
                M(x16, x16, x32);
                pack25519(q, x16);
                return 0;
            }

            function crypto_scalarmult_base(q, n) {
                return crypto_scalarmult(q, n, _9);
            }

            function crypto_box_keypair(y, x) {
                randombytes(x, 32);
                return crypto_scalarmult_base(y, x);
            }

            function crypto_box_beforenm(k, y, x) {
                var s = new Uint8Array(32);
                crypto_scalarmult(s, x, y);
                return crypto_core_hsalsa20(k, _0, s, sigma);
            }

            var crypto_box_afternm = crypto_secretbox;
            var crypto_box_open_afternm = crypto_secretbox_open;

            function crypto_box(c, m, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_afternm(c, m, d, n, k);
            }

            function crypto_box_open(m, c, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_open_afternm(m, c, d, n, k);
            }

            var K = [
                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function crypto_hashblocks_hl(hh, hl, m, n) {
                var wh = new Int32Array(16), wl = new Int32Array(16),
                    bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
                    bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
                    th, tl, i, j, h, l, a, b, c, d;

                var ah0 = hh[0],
                    ah1 = hh[1],
                    ah2 = hh[2],
                    ah3 = hh[3],
                    ah4 = hh[4],
                    ah5 = hh[5],
                    ah6 = hh[6],
                    ah7 = hh[7],

                    al0 = hl[0],
                    al1 = hl[1],
                    al2 = hl[2],
                    al3 = hl[3],
                    al4 = hl[4],
                    al5 = hl[5],
                    al6 = hl[6],
                    al7 = hl[7];

                var pos = 0;
                while (n >= 128) {
                    for (i = 0; i < 16; i++) {
                        j = 8 * i + pos;
                        wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
                        wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
                    }
                    for (i = 0; i < 80; i++) {
                        bh0 = ah0;
                        bh1 = ah1;
                        bh2 = ah2;
                        bh3 = ah3;
                        bh4 = ah4;
                        bh5 = ah5;
                        bh6 = ah6;
                        bh7 = ah7;

                        bl0 = al0;
                        bl1 = al1;
                        bl2 = al2;
                        bl3 = al3;
                        bl4 = al4;
                        bl5 = al5;
                        bl6 = al6;
                        bl7 = al7;

                        // add
                        h = ah7;
                        l = al7;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        // Sigma1
                        h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                        l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // Ch
                        h = (ah4 & ah5) ^ (~ah4 & ah6);
                        l = (al4 & al5) ^ (~al4 & al6);

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // K
                        h = K[i * 2];
                        l = K[i * 2 + 1];

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // w
                        h = wh[i % 16];
                        l = wl[i % 16];

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        th = c & 0xffff | d << 16;
                        tl = a & 0xffff | b << 16;

                        // add
                        h = th;
                        l = tl;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        // Sigma0
                        h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                        l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        // Maj
                        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh7 = (c & 0xffff) | (d << 16);
                        bl7 = (a & 0xffff) | (b << 16);

                        // add
                        h = bh3;
                        l = bl3;

                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;

                        h = th;
                        l = tl;

                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh3 = (c & 0xffff) | (d << 16);
                        bl3 = (a & 0xffff) | (b << 16);

                        ah1 = bh0;
                        ah2 = bh1;
                        ah3 = bh2;
                        ah4 = bh3;
                        ah5 = bh4;
                        ah6 = bh5;
                        ah7 = bh6;
                        ah0 = bh7;

                        al1 = bl0;
                        al2 = bl1;
                        al3 = bl2;
                        al4 = bl3;
                        al5 = bl4;
                        al6 = bl5;
                        al7 = bl6;
                        al0 = bl7;

                        if (i % 16 === 15) {
                            for (j = 0; j < 16; j++) {
                                // add
                                h = wh[j];
                                l = wl[j];

                                a = l & 0xffff;
                                b = l >>> 16;
                                c = h & 0xffff;
                                d = h >>> 16;

                                h = wh[(j + 9) % 16];
                                l = wl[(j + 9) % 16];

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                // sigma0
                                th = wh[(j + 1) % 16];
                                tl = wl[(j + 1) % 16];
                                h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
                                l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                // sigma1
                                th = wh[(j + 14) % 16];
                                tl = wl[(j + 14) % 16];
                                h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
                                l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));

                                a += l & 0xffff;
                                b += l >>> 16;
                                c += h & 0xffff;
                                d += h >>> 16;

                                b += a >>> 16;
                                c += b >>> 16;
                                d += c >>> 16;

                                wh[j] = (c & 0xffff) | (d << 16);
                                wl[j] = (a & 0xffff) | (b << 16);
                            }
                        }
                    }

                    // add
                    h = ah0;
                    l = al0;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[0];
                    l = hl[0];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[0] = ah0 = (c & 0xffff) | (d << 16);
                    hl[0] = al0 = (a & 0xffff) | (b << 16);

                    h = ah1;
                    l = al1;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[1];
                    l = hl[1];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[1] = ah1 = (c & 0xffff) | (d << 16);
                    hl[1] = al1 = (a & 0xffff) | (b << 16);

                    h = ah2;
                    l = al2;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[2];
                    l = hl[2];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[2] = ah2 = (c & 0xffff) | (d << 16);
                    hl[2] = al2 = (a & 0xffff) | (b << 16);

                    h = ah3;
                    l = al3;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[3];
                    l = hl[3];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[3] = ah3 = (c & 0xffff) | (d << 16);
                    hl[3] = al3 = (a & 0xffff) | (b << 16);

                    h = ah4;
                    l = al4;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[4];
                    l = hl[4];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[4] = ah4 = (c & 0xffff) | (d << 16);
                    hl[4] = al4 = (a & 0xffff) | (b << 16);

                    h = ah5;
                    l = al5;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[5];
                    l = hl[5];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[5] = ah5 = (c & 0xffff) | (d << 16);
                    hl[5] = al5 = (a & 0xffff) | (b << 16);

                    h = ah6;
                    l = al6;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[6];
                    l = hl[6];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[6] = ah6 = (c & 0xffff) | (d << 16);
                    hl[6] = al6 = (a & 0xffff) | (b << 16);

                    h = ah7;
                    l = al7;

                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;

                    h = hh[7];
                    l = hl[7];

                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[7] = ah7 = (c & 0xffff) | (d << 16);
                    hl[7] = al7 = (a & 0xffff) | (b << 16);

                    pos += 128;
                    n -= 128;
                }

                return n;
            }

            function crypto_hash(out, m, n) {
                var hh = new Int32Array(8),
                    hl = new Int32Array(8),
                    x = new Uint8Array(256),
                    i, b = n;

                hh[0] = 0x6a09e667;
                hh[1] = 0xbb67ae85;
                hh[2] = 0x3c6ef372;
                hh[3] = 0xa54ff53a;
                hh[4] = 0x510e527f;
                hh[5] = 0x9b05688c;
                hh[6] = 0x1f83d9ab;
                hh[7] = 0x5be0cd19;

                hl[0] = 0xf3bcc908;
                hl[1] = 0x84caa73b;
                hl[2] = 0xfe94f82b;
                hl[3] = 0x5f1d36f1;
                hl[4] = 0xade682d1;
                hl[5] = 0x2b3e6c1f;
                hl[6] = 0xfb41bd6b;
                hl[7] = 0x137e2179;

                crypto_hashblocks_hl(hh, hl, m, n);
                n %= 128;

                for (i = 0; i < n; i++) x[i] = m[b - n + i];
                x[n] = 128;

                n = 256 - 128 * (n < 112 ? 1 : 0);
                x[n - 9] = 0;
                ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
                crypto_hashblocks_hl(hh, hl, x, n);

                for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

                return 0;
            }

            function add(p, q) {
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf(),
                    g = gf(), h = gf(), t = gf();

                Z(a, p[1], p[0]);
                Z(t, q[1], q[0]);
                M(a, a, t);
                A(b, p[0], p[1]);
                A(t, q[0], q[1]);
                M(b, b, t);
                M(c, p[3], q[3]);
                M(c, c, D2);
                M(d, p[2], q[2]);
                A(d, d, d);
                Z(e, b, a);
                Z(f, d, c);
                A(g, d, c);
                A(h, b, a);

                M(p[0], e, f);
                M(p[1], h, g);
                M(p[2], g, f);
                M(p[3], e, h);
            }

            function cswap(p, q, b) {
                var i;
                for (i = 0; i < 4; i++) {
                    sel25519(p[i], q[i], b);
                }
            }

            function pack(r, p) {
                var tx = gf(), ty = gf(), zi = gf();
                inv25519(zi, p[2]);
                M(tx, p[0], zi);
                M(ty, p[1], zi);
                pack25519(r, ty);
                r[31] ^= par25519(tx) << 7;
            }

            function scalarmult(p, q, s) {
                var b, i;
                set25519(p[0], gf0);
                set25519(p[1], gf1);
                set25519(p[2], gf1);
                set25519(p[3], gf0);
                for (i = 255; i >= 0; --i) {
                    b = (s[(i / 8) | 0] >> (i & 7)) & 1;
                    cswap(p, q, b);
                    add(q, p);
                    add(p, p);
                    cswap(p, q, b);
                }
            }

            function scalarbase(p, s) {
                var q = [gf(), gf(), gf(), gf()];
                set25519(q[0], X);
                set25519(q[1], Y);
                set25519(q[2], gf1);
                M(q[3], X, Y);
                scalarmult(p, q, s);
            }

            function crypto_sign_keypair(pk, sk, seeded) {
                var d = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()];
                var i;

                if (!seeded) randombytes(sk, 32);
                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                scalarbase(p, d);
                pack(pk, p);

                for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
                return 0;
            }

            var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

            function modL(r, x) {
                var carry, i, j, k;
                for (i = 63; i >= 32; --i) {
                    carry = 0;
                    for (j = i - 32, k = i - 12; j < k; ++j) {
                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                        carry = Math.floor((x[j] + 128) / 256);
                        x[j] -= carry * 256;
                    }
                    x[j] += carry;
                    x[i] = 0;
                }
                carry = 0;
                for (j = 0; j < 32; j++) {
                    x[j] += carry - (x[31] >> 4) * L[j];
                    carry = x[j] >> 8;
                    x[j] &= 255;
                }
                for (j = 0; j < 32; j++) x[j] -= carry * L[j];
                for (i = 0; i < 32; i++) {
                    x[i + 1] += x[i] >> 8;
                    r[i] = x[i] & 255;
                }
            }

            function reduce(r) {
                var x = new Float64Array(64), i;
                for (i = 0; i < 64; i++) x[i] = r[i];
                for (i = 0; i < 64; i++) r[i] = 0;
                modL(r, x);
            }

// Note: difference from C - smlen returned, not passed as argument.
            function crypto_sign(sm, m, n, sk) {
                var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                var i, j, x = new Float64Array(64);
                var p = [gf(), gf(), gf(), gf()];

                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                var smlen = n + 64;
                for (i = 0; i < n; i++) sm[64 + i] = m[i];
                for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

                crypto_hash(r, sm.subarray(32), n + 32);
                reduce(r);
                scalarbase(p, r);
                pack(sm, p);

                for (i = 32; i < 64; i++) sm[i] = sk[i];
                crypto_hash(h, sm, n + 64);
                reduce(h);

                for (i = 0; i < 64; i++) x[i] = 0;
                for (i = 0; i < 32; i++) x[i] = r[i];
                for (i = 0; i < 32; i++) {
                    for (j = 0; j < 32; j++) {
                        x[i + j] += h[i] * d[j];
                    }
                }

                modL(sm.subarray(32), x);
                return smlen;
            }

            function unpackneg(r, p) {
                var t = gf(), chk = gf(), num = gf(),
                    den = gf(), den2 = gf(), den4 = gf(),
                    den6 = gf();

                set25519(r[2], gf1);
                unpack25519(r[1], p);
                S(num, r[1]);
                M(den, num, D);
                Z(num, num, r[2]);
                A(den, r[2], den);

                S(den2, den);
                S(den4, den2);
                M(den6, den4, den2);
                M(t, den6, num);
                M(t, t, den);

                pow2523(t, t);
                M(t, t, num);
                M(t, t, den);
                M(t, t, den);
                M(r[0], t, den);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) M(r[0], r[0], I);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) return -1;

                if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

                M(r[3], r[0], r[1]);
                return 0;
            }

            function crypto_sign_open(m, sm, n, pk) {
                var i;
                var t = new Uint8Array(32), h = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()],
                    q = [gf(), gf(), gf(), gf()];

                if (n < 64) return -1;

                if (unpackneg(q, pk)) return -1;

                for (i = 0; i < n; i++) m[i] = sm[i];
                for (i = 0; i < 32; i++) m[i + 32] = pk[i];
                crypto_hash(h, m, n);
                reduce(h);
                scalarmult(p, q, h);

                scalarbase(q, sm.subarray(32));
                add(p, q);
                pack(t, p);

                n -= 64;
                if (crypto_verify_32(sm, 0, t, 0)) {
                    for (i = 0; i < n; i++) m[i] = 0;
                    return -1;
                }

                for (i = 0; i < n; i++) m[i] = sm[i + 64];
                return n;
            }

            var crypto_secretbox_KEYBYTES = 32,
                crypto_secretbox_NONCEBYTES = 24,
                crypto_secretbox_ZEROBYTES = 32,
                crypto_secretbox_BOXZEROBYTES = 16,
                crypto_scalarmult_BYTES = 32,
                crypto_scalarmult_SCALARBYTES = 32,
                crypto_box_PUBLICKEYBYTES = 32,
                crypto_box_SECRETKEYBYTES = 32,
                crypto_box_BEFORENMBYTES = 32,
                crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
                crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
                crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
                crypto_sign_BYTES = 64,
                crypto_sign_PUBLICKEYBYTES = 32,
                crypto_sign_SECRETKEYBYTES = 64,
                crypto_sign_SEEDBYTES = 32,
                crypto_hash_BYTES = 64;

            nacl.lowlevel = {
                crypto_core_hsalsa20: crypto_core_hsalsa20,
                crypto_stream_xor: crypto_stream_xor,
                crypto_stream: crypto_stream,
                crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
                crypto_stream_salsa20: crypto_stream_salsa20,
                crypto_onetimeauth: crypto_onetimeauth,
                crypto_onetimeauth_verify: crypto_onetimeauth_verify,
                crypto_verify_16: crypto_verify_16,
                crypto_verify_32: crypto_verify_32,
                crypto_secretbox: crypto_secretbox,
                crypto_secretbox_open: crypto_secretbox_open,
                crypto_scalarmult: crypto_scalarmult,
                crypto_scalarmult_base: crypto_scalarmult_base,
                crypto_box_beforenm: crypto_box_beforenm,
                crypto_box_afternm: crypto_box_afternm,
                crypto_box: crypto_box,
                crypto_box_open: crypto_box_open,
                crypto_box_keypair: crypto_box_keypair,
                crypto_hash: crypto_hash,
                crypto_sign: crypto_sign,
                crypto_sign_keypair: crypto_sign_keypair,
                crypto_sign_open: crypto_sign_open,

                crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
                crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
                crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
                crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
                crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
                crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
                crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
                crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
                crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
                crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
                crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
                crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
                crypto_sign_BYTES: crypto_sign_BYTES,
                crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
                crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
                crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
                crypto_hash_BYTES: crypto_hash_BYTES,

                gf: gf,
                D: D,
                L: L,
                pack25519: pack25519,
                unpack25519: unpack25519,
                M: M,
                A: A,
                S: S,
                Z: Z,
                pow2523: pow2523,
                add: add,
                set25519: set25519,
                modL: modL,
                scalarmult: scalarmult,
                scalarbase: scalarbase,
            };

            /* High-level API */

            function checkLengths(k, n) {
                if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
                if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
            }

            function checkBoxLengths(pk, sk) {
                if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
                if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            }

            function checkArrayTypes() {
                for (var i = 0; i < arguments.length; i++) {
                    if (!(arguments[i] instanceof Uint8Array))
                        throw new TypeError('unexpected type, use Uint8Array');
                }
            }

            function cleanup(arr) {
                for (var i = 0; i < arr.length; i++) arr[i] = 0;
            }

            nacl.randomBytes = function (n) {
                var b = new Uint8Array(n);
                randombytes(b, n);
                return b;
            };

            nacl.secretbox = function (msg, nonce, key) {
                checkArrayTypes(msg, nonce, key);
                checkLengths(key, nonce);
                var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
                var c = new Uint8Array(m.length);
                for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
                crypto_secretbox(c, m, m.length, nonce, key);
                return c.subarray(crypto_secretbox_BOXZEROBYTES);
            };

            nacl.secretbox.open = function (box, nonce, key) {
                checkArrayTypes(box, nonce, key);
                checkLengths(key, nonce);
                var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
                var m = new Uint8Array(c.length);
                for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
                if (c.length < 32) return null;
                if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
                return m.subarray(crypto_secretbox_ZEROBYTES);
            };

            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

            nacl.scalarMult = function (n, p) {
                checkArrayTypes(n, p);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult(q, n, p);
                return q;
            };

            nacl.scalarMult.base = function (n) {
                checkArrayTypes(n);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult_base(q, n);
                return q;
            };

            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

            nacl.box = function (msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox(msg, nonce, k);
            };

            nacl.box.before = function (publicKey, secretKey) {
                checkArrayTypes(publicKey, secretKey);
                checkBoxLengths(publicKey, secretKey);
                var k = new Uint8Array(crypto_box_BEFORENMBYTES);
                crypto_box_beforenm(k, publicKey, secretKey);
                return k;
            };

            nacl.box.after = nacl.secretbox;

            nacl.box.open = function (msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox.open(msg, nonce, k);
            };

            nacl.box.open.after = nacl.secretbox.open;

            nacl.box.keyPair = function () {
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
                crypto_box_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.box.keyPair.fromSecretKey = function (secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_box_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                crypto_scalarmult_base(pk, secretKey);
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
            nacl.box.nonceLength = crypto_box_NONCEBYTES;
            nacl.box.overheadLength = nacl.secretbox.overheadLength;

            nacl.sign = function (msg, secretKey) {
                checkArrayTypes(msg, secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
                crypto_sign(signedMsg, msg, msg.length, secretKey);
                return signedMsg;
            };

            nacl.sign.open = function (signedMsg, publicKey) {
                checkArrayTypes(signedMsg, publicKey);
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var tmp = new Uint8Array(signedMsg.length);
                var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
                if (mlen < 0) return null;
                var m = new Uint8Array(mlen);
                for (var i = 0; i < m.length; i++) m[i] = tmp[i];
                return m;
            };

            nacl.sign.detached = function (msg, secretKey) {
                var signedMsg = nacl.sign(msg, secretKey);
                var sig = new Uint8Array(crypto_sign_BYTES);
                for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
                return sig;
            };

            nacl.sign.detached.verify = function (msg, sig, publicKey) {
                checkArrayTypes(msg, sig, publicKey);
                if (sig.length !== crypto_sign_BYTES)
                    throw new Error('bad signature size');
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
                var m = new Uint8Array(crypto_sign_BYTES + msg.length);
                var i;
                for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
                for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
                return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
            };

            nacl.sign.keyPair = function () {
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                crypto_sign_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.keyPair.fromSecretKey = function (secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.sign.keyPair.fromSeed = function (seed) {
                checkArrayTypes(seed);
                if (seed.length !== crypto_sign_SEEDBYTES)
                    throw new Error('bad seed size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                for (var i = 0; i < 32; i++) sk[i] = seed[i];
                crypto_sign_keypair(pk, sk, true);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
            nacl.sign.seedLength = crypto_sign_SEEDBYTES;
            nacl.sign.signatureLength = crypto_sign_BYTES;

            nacl.hash = function (msg) {
                checkArrayTypes(msg);
                var h = new Uint8Array(crypto_hash_BYTES);
                crypto_hash(h, msg, msg.length);
                return h;
            };

            nacl.hash.hashLength = crypto_hash_BYTES;

            nacl.verify = function (x, y) {
                checkArrayTypes(x, y);
                // Zero length arguments are considered not equal.
                if (x.length === 0 || y.length === 0) return false;
                if (x.length !== y.length) return false;
                return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
            };

            nacl.setPRNG = function (fn) {
                randombytes = fn;
            };

            (function () {
                // Initialize PRNG if environment provides CSPRNG.
                // If not, methods calling randombytes will throw.
                var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
                if (crypto && crypto.getRandomValues) {
                    // Browsers.
                    var QUOTA = 65536;
                    nacl.setPRNG(function (x, n) {
                        var i, v = new Uint8Array(n);
                        for (i = 0; i < n; i += QUOTA) {
                            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                        }
                        for (i = 0; i < n; i++) x[i] = v[i];
                        cleanup(v);
                    });
                } else if (typeof require !== 'undefined') {
                    // Node.js.
                    crypto = require('crypto');
                    if (crypto && crypto.randomBytes) {
                        nacl.setPRNG(function (x, n) {
                            var i, v = crypto.randomBytes(n);
                            for (i = 0; i < n; i++) x[i] = v[i];
                            cleanup(v);
                        });
                    }
                }
            })();

        })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

    }, {"crypto": 22}],
    466: [function (require, module, exports) {
        arguments[4][159][0].apply(exports, arguments)
    }, {"dup": 159}]
}, {}, [161]);
